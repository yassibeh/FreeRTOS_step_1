
TP-RTOS_Preempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ec  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a8  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d4  080068d4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068dc  080068dc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068e0  080068e0  000168e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080068e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c90  2000007c  08006960  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d0c  08006960  00023d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f224  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c67  00000000  00000000  0002f2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00032ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d56  00000000  00000000  00033d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e1e  00000000  00000000  0004daae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cced  00000000  00000000  0005f8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc5b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  000fc60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005414 	.word	0x08005414

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08005414 	.word	0x08005414

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b976 	b.w	8000484 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	4688      	mov	r8, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14d      	bne.n	800025c <__udivmoddi4+0xac>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d968      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c6:	fab2 f282 	clz	r2, r2
 80001ca:	b152      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001cc:	fa01 f302 	lsl.w	r3, r1, r2
 80001d0:	f1c2 0120 	rsb	r1, r2, #32
 80001d4:	fa20 f101 	lsr.w	r1, r0, r1
 80001d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001dc:	ea41 0803 	orr.w	r8, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ea:	fa1f fe8c 	uxth.w	lr, ip
 80001ee:	fb01 8817 	mls	r8, r1, r7, r8
 80001f2:	fb07 f00e 	mul.w	r0, r7, lr
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	eb1c 0303 	adds.w	r3, ip, r3
 8000204:	f107 35ff 	add.w	r5, r7, #4294967295
 8000208:	f080 811e 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020c:	4298      	cmp	r0, r3
 800020e:	f240 811b 	bls.w	8000448 <__udivmoddi4+0x298>
 8000212:	3f02      	subs	r7, #2
 8000214:	4463      	add	r3, ip
 8000216:	1a1b      	subs	r3, r3, r0
 8000218:	fbb3 f0f1 	udiv	r0, r3, r1
 800021c:	fb01 3310 	mls	r3, r1, r0, r3
 8000220:	fb00 fe0e 	mul.w	lr, r0, lr
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	45a6      	cmp	lr, r4
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0404 	adds.w	r4, ip, r4
 8000232:	f100 33ff 	add.w	r3, r0, #4294967295
 8000236:	f080 8109 	bcs.w	800044c <__udivmoddi4+0x29c>
 800023a:	45a6      	cmp	lr, r4
 800023c:	f240 8106 	bls.w	800044c <__udivmoddi4+0x29c>
 8000240:	4464      	add	r4, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	eba4 040e 	sub.w	r4, r4, lr
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	b11e      	cbz	r6, 8000258 <__udivmoddi4+0xa8>
 8000250:	2300      	movs	r3, #0
 8000252:	40d4      	lsrs	r4, r2
 8000254:	e9c6 4300 	strd	r4, r3, [r6]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	428b      	cmp	r3, r1
 800025e:	d908      	bls.n	8000272 <__udivmoddi4+0xc2>
 8000260:	2e00      	cmp	r6, #0
 8000262:	f000 80ee 	beq.w	8000442 <__udivmoddi4+0x292>
 8000266:	2100      	movs	r1, #0
 8000268:	e9c6 0500 	strd	r0, r5, [r6]
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80fc 	bhi.w	800047c <__udivmoddi4+0x2cc>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb65 0303 	sbc.w	r3, r5, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4698      	mov	r8, r3
 800028e:	2e00      	cmp	r6, #0
 8000290:	d0e2      	beq.n	8000258 <__udivmoddi4+0xa8>
 8000292:	e9c6 4800 	strd	r4, r8, [r6]
 8000296:	e7df      	b.n	8000258 <__udivmoddi4+0xa8>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8091 	bne.w	80003c8 <__udivmoddi4+0x218>
 80002a6:	eba1 000c 	sub.w	r0, r1, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b0:	fa1f fe8c 	uxth.w	lr, ip
 80002b4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b8:	fb07 0013 	mls	r0, r7, r3, r0
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0505 	adds.w	r5, ip, r5
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	42a8      	cmp	r0, r5
 80002d6:	f200 80ce 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a2d      	subs	r5, r5, r0
 80002de:	fbb5 f0f7 	udiv	r0, r5, r7
 80002e2:	fb07 5510 	mls	r5, r7, r0, r5
 80002e6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80b6 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 8000304:	4628      	mov	r0, r5
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79e      	b.n	800024e <__udivmoddi4+0x9e>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fbba f8f9 	udiv	r8, sl, r9
 800032a:	fa20 f307 	lsr.w	r3, r0, r7
 800032e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000332:	408d      	lsls	r5, r1
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	431d      	orrs	r5, r3
 800033a:	fa00 f301 	lsl.w	r3, r0, r1
 800033e:	fb08 f00e 	mul.w	r0, r8, lr
 8000342:	0c2c      	lsrs	r4, r5, #16
 8000344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000348:	42a0      	cmp	r0, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	42a0      	cmp	r0, r4
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1a24      	subs	r4, r4, r0
 800036a:	fbb4 f0f9 	udiv	r0, r4, r9
 800036e:	fb09 4410 	mls	r4, r9, r0, r4
 8000372:	fb00 fe0e 	mul.w	lr, r0, lr
 8000376:	b2ad      	uxth	r5, r5
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 35ff 	add.w	r5, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9502 	umull	r9, r5, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	42ac      	cmp	r4, r5
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46ae      	mov	lr, r5
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d069      	beq.n	8000480 <__udivmoddi4+0x2d0>
 80003ac:	ebb3 0208 	subs.w	r2, r3, r8
 80003b0:	eb64 040e 	sbc.w	r4, r4, lr
 80003b4:	fa22 f301 	lsr.w	r3, r2, r1
 80003b8:	fa04 f707 	lsl.w	r7, r4, r7
 80003bc:	431f      	orrs	r7, r3
 80003be:	40cc      	lsrs	r4, r1
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	2100      	movs	r1, #0
 80003c6:	e747      	b.n	8000258 <__udivmoddi4+0xa8>
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	f1c2 0120 	rsb	r1, r2, #32
 80003d0:	fa25 f301 	lsr.w	r3, r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa20 f101 	lsr.w	r1, r0, r1
 80003dc:	4095      	lsls	r5, r2
 80003de:	430d      	orrs	r5, r1
 80003e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e4:	fb07 3311 	mls	r3, r7, r1, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	0c28      	lsrs	r0, r5, #16
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	fb01 f30e 	mul.w	r3, r1, lr
 80003f6:	4283      	cmp	r3, r0
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0000 	adds.w	r0, ip, r0
 8000402:	f101 38ff 	add.w	r8, r1, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	4283      	cmp	r3, r0
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3902      	subs	r1, #2
 800040e:	4460      	add	r0, ip
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	fbb0 f3f7 	udiv	r3, r0, r7
 8000416:	fb07 0013 	mls	r0, r7, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000420:	fb03 f00e 	mul.w	r0, r3, lr
 8000424:	42a8      	cmp	r0, r5
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0505 	adds.w	r5, ip, r5
 800042c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	42a8      	cmp	r0, r5
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3b02      	subs	r3, #2
 8000438:	4465      	add	r5, ip
 800043a:	1a28      	subs	r0, r5, r0
 800043c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	4631      	mov	r1, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e707      	b.n	8000258 <__udivmoddi4+0xa8>
 8000448:	462f      	mov	r7, r5
 800044a:	e6e4      	b.n	8000216 <__udivmoddi4+0x66>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f9      	b.n	8000244 <__udivmoddi4+0x94>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb65 0e0c 	sbc.w	lr, r5, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4643      	mov	r3, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4628      	mov	r0, r5
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4641      	mov	r1, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e747      	b.n	8000306 <__udivmoddi4+0x156>
 8000476:	3b02      	subs	r3, #2
 8000478:	4465      	add	r5, ip
 800047a:	e72f      	b.n	80002dc <__udivmoddi4+0x12c>
 800047c:	4608      	mov	r0, r1
 800047e:	e706      	b.n	800028e <__udivmoddi4+0xde>
 8000480:	4631      	mov	r1, r6
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0xa8>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <MESN_UART_Init>:
  * @brief USART init function
  * @param none
  * @retval None
  */
void MESN_UART_Init()
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t tmpreg = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]

	/* Peripheral clock enable */
	__UART_CLK_ENABLE();
 8000492:	4b61      	ldr	r3, [pc, #388]	; (8000618 <MESN_UART_Init+0x190>)
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	4a60      	ldr	r2, [pc, #384]	; (8000618 <MESN_UART_Init+0x190>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	6253      	str	r3, [r2, #36]	; 0x24
 800049e:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <MESN_UART_Init+0x190>)
 80004a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

	/* UART GPIO Configuration */
	GPIO_InitStruct.Pin = UART_TX_PIN | UART_RX_PIN;
 80004aa:	230c      	movs	r3, #12
 80004ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = UART_GPIO_SPEED;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF_UART;
 80004ba:	2307      	movs	r3, #7
 80004bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(UART_PORT, &GPIO_InitStruct);
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	4855      	ldr	r0, [pc, #340]	; (800061c <MESN_UART_Init+0x194>)
 80004c6:	f000 fa3b 	bl	8000940 <HAL_GPIO_Init>

	/* System interrupt init*/
	HAL_NVIC_SetPriority(UART_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2026      	movs	r0, #38	; 0x26
 80004d0:	f000 fa0b 	bl	80008ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART_IRQn);
 80004d4:	2026      	movs	r0, #38	; 0x26
 80004d6:	f000 fa24 	bl	8000922 <HAL_NVIC_EnableIRQ>

	/* Disable the peripheral */
	UART_INSTANCE->CR1 &=  ~USART_CR1_UE;
 80004da:	4b51      	ldr	r3, [pc, #324]	; (8000620 <MESN_UART_Init+0x198>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a50      	ldr	r2, [pc, #320]	; (8000620 <MESN_UART_Init+0x198>)
 80004e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004e4:	60d3      	str	r3, [r2, #12]

	/*------- UART-associated USART registers setting : CR2 Configuration ------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(UART_INSTANCE->CR2, (0x3U << 12U), (0x00000000U));
 80004e6:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <MESN_UART_Init+0x198>)
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <MESN_UART_Init+0x198>)
 80004ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004f0:	6113      	str	r3, [r2, #16]

	/*------- UART-associated USART registers setting : CR1 Configuration ------*/
	/* Configure the UART Word Length, Parity and mode: */
	tmpreg = (uint32_t)((0x1U << 3U) | (0x1U << 2U));
 80004f2:	230c      	movs	r3, #12
 80004f4:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(UART_INSTANCE->CR1,
 80004f6:	4b4a      	ldr	r3, [pc, #296]	; (8000620 <MESN_UART_Init+0x198>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80004fe:	f023 030c 	bic.w	r3, r3, #12
 8000502:	4947      	ldr	r1, [pc, #284]	; (8000620 <MESN_UART_Init+0x198>)
 8000504:	69fa      	ldr	r2, [r7, #28]
 8000506:	4313      	orrs	r3, r2
 8000508:	60cb      	str	r3, [r1, #12]
						 (uint32_t)((0x1U << 12) | (0x1U << 10) | (0x1U << 9) | (0x1U << 3) | (0x1U << 2) | (0x1U << 15)),
						 tmpreg);

	/*------- UART-associated USART registers setting : CR3 Configuration ------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits */
	MODIFY_REG(UART_INSTANCE->CR3, ((0x1U << 8) | (0x1U << 9)), 0x00000000U);
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <MESN_UART_Init+0x198>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a44      	ldr	r2, [pc, #272]	; (8000620 <MESN_UART_Init+0x198>)
 8000510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000514:	6153      	str	r3, [r2, #20]

	/*---Configure Baudrate BRR register---*/
	UART_INSTANCE->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), 9600);
 8000516:	f001 f8e7 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800051a:	4602      	mov	r2, r0
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	009a      	lsls	r2, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	4a3f      	ldr	r2, [pc, #252]	; (8000624 <MESN_UART_Init+0x19c>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	0d1b      	lsrs	r3, r3, #20
 800052e:	011c      	lsls	r4, r3, #4
 8000530:	f001 f8da 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000534:	4602      	mov	r2, r0
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	009a      	lsls	r2, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	4a39      	ldr	r2, [pc, #228]	; (8000628 <MESN_UART_Init+0x1a0>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0b1d      	lsrs	r5, r3, #12
 8000548:	f001 f8ce 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800054c:	4602      	mov	r2, r0
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	009a      	lsls	r2, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	4a32      	ldr	r2, [pc, #200]	; (8000624 <MESN_UART_Init+0x19c>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0d1b      	lsrs	r3, r3, #20
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	1aeb      	subs	r3, r5, r3
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	3332      	adds	r3, #50	; 0x32
 800056c:	4a2f      	ldr	r2, [pc, #188]	; (800062c <MESN_UART_Init+0x1a4>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000578:	441c      	add	r4, r3
 800057a:	f001 f8b5 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800057e:	4602      	mov	r2, r0
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <MESN_UART_Init+0x1a0>)
 800058c:	fba2 2303 	umull	r2, r3, r2, r3
 8000590:	0b1d      	lsrs	r5, r3, #12
 8000592:	f001 f8a9 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000596:	4602      	mov	r2, r0
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	009a      	lsls	r2, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MESN_UART_Init+0x19c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	0d1b      	lsrs	r3, r3, #20
 80005aa:	2264      	movs	r2, #100	; 0x64
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	1aeb      	subs	r3, r5, r3
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	3332      	adds	r3, #50	; 0x32
 80005b6:	4a1d      	ldr	r2, [pc, #116]	; (800062c <MESN_UART_Init+0x1a4>)
 80005b8:	fba2 2303 	umull	r2, r3, r2, r3
 80005bc:	095b      	lsrs	r3, r3, #5
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MESN_UART_Init+0x198>)
 80005c4:	4423      	add	r3, r4
 80005c6:	6093      	str	r3, [r2, #8]

	/* In asynchronous mode, the following bits must be kept cleared:
	     - LINEN and CLKEN bits in the USART_CR2 register,
	     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(UART_INSTANCE->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MESN_UART_Init+0x198>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <MESN_UART_Init+0x198>)
 80005ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80005d2:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(UART_INSTANCE->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MESN_UART_Init+0x198>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MESN_UART_Init+0x198>)
 80005da:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80005de:	6153      	str	r3, [r2, #20]

	/* Enable the peripheral */
	UART_INSTANCE->CR1 |=  USART_CR1_UE;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MESN_UART_Init+0x198>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <MESN_UART_Init+0x198>)
 80005e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ea:	60d3      	str	r3, [r2, #12]
  
  /* Initialize RX circular buffer and flag */
	uartRxCircBuff.eltNb = 0;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	uartRxCircBuff.indexR = 0;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	uartRxCircBuff.indexW = 0;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		
	/* Enable the UART Data Register not empty Interrupt */
	UART_INSTANCE->CR1 |= USART_CR1_RXNEIE;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MESN_UART_Init+0x198>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <MESN_UART_Init+0x198>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	40004400 	.word	0x40004400
 8000624:	45e7b273 	.word	0x45e7b273
 8000628:	1b4e81b5 	.word	0x1b4e81b5
 800062c:	51eb851f 	.word	0x51eb851f
 8000630:	20000098 	.word	0x20000098

08000634 <MESN_UART_PutString_Poll>:
  * @brief uart sending string by polling
  * @param *stringToSend: pointer to the string to be send.
  * @retval none
  */
void MESN_UART_PutString_Poll(uint8_t *stringToSend)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	int32_t i = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

  //Send data
  for (i=0; stringToSend[i] != '\0'; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e009      	b.n	800065a <MESN_UART_PutString_Poll+0x26>
		MESN_PRIV_UART_PutChar_Poll(stringToSend[i] );
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f84c 	bl	80006ec <MESN_PRIV_UART_PutChar_Poll>
  for (i=0; stringToSend[i] != '\0'; i++){
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <MESN_UART_PutString_Poll+0x12>
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MESN_PRIV_UART_IRQHandler>:
/**
  * @brief ISR dedicated to manage RX IRQ
  * @param none
  */
static void MESN_PRIV_UART_IRQHandler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
	uint8_t tmp;

	/* check the source of IRQ */
	// Data received IRQ
	if((UART_INSTANCE->STATUS_REG & RX_NEMTPY_BIT) != 0)
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	2b00      	cmp	r3, #0
 8000680:	d024      	beq.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
	{ 
		//Retrieve received data
		tmp = (uint8_t) UART_INSTANCE->RX_DATA_REG;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	71fb      	strb	r3, [r7, #7]

		// save data in circular buffer if is not full
		if (uartRxCircBuff.eltNb < UART_BUFFERSIZE) {
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800068a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d81c      	bhi.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
			// store data
			uartRxCircBuff.buffer[uartRxCircBuff.indexW] = tmp;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 8000694:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000698:	4910      	ldr	r1, [pc, #64]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	54ca      	strb	r2, [r1, r3]

			// circular buffer processing
			uartRxCircBuff.eltNb++;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
			uartRxCircBuff.indexW++;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			if (uartRxCircBuff.indexW >= UART_BUFFERSIZE)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006c0:	2bff      	cmp	r3, #255	; 0xff
 80006c2:	d903      	bls.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
				uartRxCircBuff.indexW = 0;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
		else {
			// no flow control (hard/soft)
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400
 80006dc:	20000098 	.word	0x20000098

080006e0 <USART2_IRQHandler>:
  {
    MESN_PRIV_UART_IRQHandler();
  }
#elif defined(USE_UART2)
  void USART2_IRQHandler(void)
  {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
		MESN_PRIV_UART_IRQHandler();
 80006e4:	f7ff ffc4 	bl	8000670 <MESN_PRIV_UART_IRQHandler>
  }
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MESN_PRIV_UART_PutChar_Poll>:
  * @brief sends 8bits payload through UART by polling
  * @param dataTosend: byte to be send
  * @retval none
  */
static void MESN_PRIV_UART_PutChar_Poll(uint8_t dataToSend)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	// check if transmitter is ready to send
	while((UART_INSTANCE->STATUS_REG & TX_EMPTY_BIT) == 0);
 80006f6:	bf00      	nop
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f9      	beq.n	80006f8 <MESN_PRIV_UART_PutChar_Poll+0xc>
	UART_INSTANCE->TX_DATA_REG = (uint8_t)(dataToSend & 0xFF);
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	6053      	str	r3, [r2, #4]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40004400 	.word	0x40004400

08000718 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000722:	2003      	movs	r0, #3
 8000724:	f000 f8d6 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000728:	200f      	movs	r0, #15
 800072a:	f004 f8cb 	bl	80048c4 <HAL_InitTick>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	e001      	b.n	800073e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800073a:	f004 f88f 	bl	800485c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800073e:	79fb      	ldrb	r3, [r7, #7]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x1c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x20>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x1c>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200001a4 	.word	0x200001a4
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200001a4 	.word	0x200001a4

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <__NVIC_EnableIRQ+0x34>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff4f 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff64 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ffb2 	bl	8000870 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff81 	bl	800081c <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff57 	bl	80007e4 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000956:	e160      	b.n	8000c1a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 8152 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b01      	cmp	r3, #1
 800097a:	d005      	beq.n	8000988 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000984:	2b02      	cmp	r3, #2
 8000986:	d130      	bne.n	80009ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	f003 0201 	and.w	r2, r3, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d017      	beq.n	8000a26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d123      	bne.n	8000a7a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	691a      	ldr	r2, [r3, #16]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	08da      	lsrs	r2, r3, #3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3208      	adds	r2, #8
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0203 	and.w	r2, r3, #3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80ac 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6213      	str	r3, [r2, #32]
 8000ac8:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ad4:	4a59      	ldr	r2, [pc, #356]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a51      	ldr	r2, [pc, #324]	; (8000c40 <HAL_GPIO_Init+0x300>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d025      	beq.n	8000b4c <HAL_GPIO_Init+0x20c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a50      	ldr	r2, [pc, #320]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d01f      	beq.n	8000b48 <HAL_GPIO_Init+0x208>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_GPIO_Init+0x308>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d019      	beq.n	8000b44 <HAL_GPIO_Init+0x204>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <HAL_GPIO_Init+0x30c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d013      	beq.n	8000b40 <HAL_GPIO_Init+0x200>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1fc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x314>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1f8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4b      	ldr	r2, [pc, #300]	; (8000c58 <HAL_GPIO_Init+0x318>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1f4>
 8000b30:	2306      	movs	r3, #6
 8000b32:	e00c      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b34:	2307      	movs	r3, #7
 8000b36:	e00a      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e008      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b40:	2303      	movs	r3, #3
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b90:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f47f ae97 	bne.w	8000958 <HAL_GPIO_Init+0x18>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	619a      	str	r2, [r3, #24]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e31d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca2:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cac:	4b91      	ldr	r3, [pc, #580]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d07b      	beq.n	8000dba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d006      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2b0c      	cmp	r3, #12
 8000ccc:	d10f      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	d10b      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd6:	4b87      	ldr	r3, [pc, #540]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d06a      	beq.n	8000db8 <HAL_RCC_OscConfig+0x128>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d166      	bne.n	8000db8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e2f7      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d106      	bne.n	8000d04 <HAL_RCC_OscConfig+0x74>
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e02d      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10c      	bne.n	8000d26 <HAL_RCC_OscConfig+0x96>
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a75      	ldr	r2, [pc, #468]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e01c      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0xb8>
 8000d2e:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a70      	ldr	r2, [pc, #448]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a6d      	ldr	r2, [pc, #436]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d48:	4b6a      	ldr	r3, [pc, #424]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a69      	ldr	r2, [pc, #420]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a66      	ldr	r2, [pc, #408]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d013      	beq.n	8000d90 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fd00 	bl	800076c <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fcfc 	bl	800076c <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e2ad      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d8e:	e014      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fcec 	bl	800076c <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fce8 	bl	800076c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e299      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000daa:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x108>
 8000db6:	e000      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d05a      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d005      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b0c      	cmp	r3, #12
 8000dd0:	d119      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d116      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d001      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e276      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	493d      	ldr	r1, [pc, #244]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e04:	e03a      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d020      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcaa 	bl	800076c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fca6 	bl	800076c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e257      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	492a      	ldr	r1, [pc, #168]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e015      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fc89 	bl	800076c <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc85 	bl	800076c <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e236      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b8 	beq.w	8000ffa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d170      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d005      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x218>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e21a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d921      	bls.n	8000efc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc57 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e208      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	061b      	lsls	r3, r3, #24
 8000eec:	4901      	ldr	r1, [pc, #4]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
 8000ef2:	e020      	b.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efc:	4b99      	ldr	r3, [pc, #612]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4996      	ldr	r1, [pc, #600]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0e:	4b95      	ldr	r3, [pc, #596]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	4991      	ldr	r1, [pc, #580]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fc22 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e1d3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	0b5b      	lsrs	r3, r3, #13
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f46:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f48:	6892      	ldr	r2, [r2, #8]
 8000f4a:	0912      	lsrs	r2, r2, #4
 8000f4c:	f002 020f 	and.w	r2, r2, #15
 8000f50:	4985      	ldr	r1, [pc, #532]	; (8001168 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	5c8a      	ldrb	r2, [r1, r2]
 8000f54:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f56:	4a85      	ldr	r2, [pc, #532]	; (800116c <HAL_RCC_OscConfig+0x4dc>)
 8000f58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f5a:	4b85      	ldr	r3, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x4e0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fcb0 	bl	80048c4 <HAL_InitTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d045      	beq.n	8000ffa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	e1b5      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d029      	beq.n	8000fce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f7a:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fbf4 	bl	800076c <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f88:	f7ff fbf0 	bl	800076c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1a1      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	496c      	ldr	r1, [pc, #432]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb8:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	4967      	ldr	r1, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e015      	b.n	8000ffa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fbca 	bl	800076c <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fbc6 	bl	800076c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e177      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d030      	beq.n	8001068 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d016      	beq.n	800103c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fbaa 	bl	800076c <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fba6 	bl	800076c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e157      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x38c>
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb93 	bl	800076c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fb8f 	bl	800076c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e140      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b5 	beq.w	80011e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6253      	str	r3, [r2, #36]	; 0x24
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb57 	bl	800076c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fb53 	bl	800076c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e104      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x466>
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6353      	str	r3, [r2, #52]	; 0x34
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x488>
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001108:	6353      	str	r3, [r2, #52]	; 0x34
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001114:	6353      	str	r3, [r2, #52]	; 0x34
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x4aa>
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112a:	6353      	str	r3, [r2, #52]	; 0x34
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6353      	str	r3, [r2, #52]	; 0x34
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800114c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001150:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb07 	bl	800076c <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001160:	e019      	b.n	8001196 <HAL_RCC_OscConfig+0x506>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	08006828 	.word	0x08006828
 800116c:	20000014 	.word	0x20000014
 8001170:	20000000 	.word	0x20000000
 8001174:	42470020 	.word	0x42470020
 8001178:	42470680 	.word	0x42470680
 800117c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff faf4 	bl	800076c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e0a3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001196:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0ee      	beq.n	8001180 <HAL_RCC_OscConfig+0x4f0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fae2 	bl	800076c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fade 	bl	800076c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e08d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ee      	bne.n	80011ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d079      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	d056      	beq.n	800129c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d13b      	bne.n	800126e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fab6 	bl	800076c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fab2 	bl	800076c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e063      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	4319      	orrs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	430b      	orrs	r3, r1
 800123a:	492b      	ldr	r1, [pc, #172]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 800123c:	4313      	orrs	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fa91 	bl	800076c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fa8d 	bl	800076c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03e      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x5be>
 800126c:	e036      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fa7a 	bl	800076c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fa76 	bl	800076c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e027      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x5ec>
 800129a:	e01f      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e01a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470060 	.word	0x42470060

080012f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e11a      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d919      	bls.n	8001346 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_RCC_ClockConfig+0x34>
 8001318:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a89      	ldr	r2, [pc, #548]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b87      	ldr	r3, [pc, #540]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 0201 	bic.w	r2, r3, #1
 800132c:	4985      	ldr	r1, [pc, #532]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0f9      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	497a      	ldr	r1, [pc, #488]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 808e 	beq.w	800148e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800137a:	4b73      	ldr	r3, [pc, #460]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0d7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001392:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0cb      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0bf      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0b7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 0203 	bic.w	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	495c      	ldr	r1, [pc, #368]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff f9c6 	bl	800076c <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ec:	f7ff f9be 	bl	800076c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e09b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d1ee      	bne.n	80013ec <HAL_RCC_ClockConfig+0xfc>
 800140e:	e03e      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d112      	bne.n	800143e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141a:	f7ff f9a7 	bl	800076c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e084      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_ClockConfig+0x12a>
 800143c:	e027      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11d      	bne.n	8001482 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	e00a      	b.n	800145e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff f990 	bl	800076c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e06d      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_ClockConfig+0x158>
 800146a:	e010      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff f97e 	bl	800076c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e05b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ee      	bne.n	800146c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d219      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_ClockConfig+0x1be>
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0201 	bic.w	r2, r3, #1
 80014b6:	4923      	ldr	r1, [pc, #140]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e034      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4917      	ldr	r1, [pc, #92]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490f      	ldr	r1, [pc, #60]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f823 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490b      	ldr	r1, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x25c>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x260>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x264>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f9c8 	bl	80048c4 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	72fb      	strb	r3, [r7, #11]

  return status;
 8001538:	7afb      	ldrb	r3, [r7, #11]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00
 8001548:	40023800 	.word	0x40023800
 800154c:	08006828 	.word	0x08006828
 8001550:	20000014 	.word	0x20000014
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b08e      	sub	sp, #56	; 0x38
 800155e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d00d      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x34>
 8001570:	2b0c      	cmp	r3, #12
 8001572:	f200 8092 	bhi.w	800169a <HAL_RCC_GetSysClockFreq+0x142>
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x28>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x2e>
 800157e:	e08c      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x170>)
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001584:	e097      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800158a:	e094      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x178>)
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	0d9b      	lsrs	r3, r3, #22
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d021      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	2200      	movs	r2, #0
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	61fa      	str	r2, [r7, #28]
 80015ba:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015c0:	464a      	mov	r2, r9
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	2300      	movs	r3, #0
 80015c8:	4644      	mov	r4, r8
 80015ca:	fb04 f303 	mul.w	r3, r4, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015d2:	4644      	mov	r4, r8
 80015d4:	fba4 0102 	umull	r0, r1, r4, r2
 80015d8:	440b      	add	r3, r1
 80015da:	4619      	mov	r1, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	617a      	str	r2, [r7, #20]
 80015e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e8:	f7fe fdca 	bl	8000180 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
 80015f4:	e04e      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	2200      	movs	r2, #0
 80015fa:	469a      	mov	sl, r3
 80015fc:	4693      	mov	fp, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	465b      	mov	r3, fp
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	0159      	lsls	r1, r3, #5
 800160c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001610:	0150      	lsls	r0, r2, #5
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	ebb2 080a 	subs.w	r8, r2, sl
 800161a:	eb63 090b 	sbc.w	r9, r3, fp
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800162a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800162e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001632:	ebb2 0408 	subs.w	r4, r2, r8
 8001636:	eb63 0509 	sbc.w	r5, r3, r9
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	00eb      	lsls	r3, r5, #3
 8001644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001648:	00e2      	lsls	r2, r4, #3
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	eb14 030a 	adds.w	r3, r4, sl
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	eb45 030b 	adc.w	r3, r5, fp
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001666:	4629      	mov	r1, r5
 8001668:	028b      	lsls	r3, r1, #10
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	4604      	mov	r4, r0
 8001670:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001674:	4601      	mov	r1, r0
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001688:	f7fe fd7a 	bl	8000180 <__aeabi_uldivmod>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4613      	mov	r3, r2
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001698:	e00d      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0b5b      	lsrs	r3, r3, #13
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	016e3600 	.word	0x016e3600
 80016d0:	0800681c 	.word	0x0800681c

080016d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000014 	.word	0x20000014

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff2 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	; (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	08006838 	.word	0x08006838

08001710 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	220f      	movs	r2, #15
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_GetClockConfig+0x5c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40023800 	.word	0x40023800
 800176c:	40023c00 	.word	0x40023c00

08001770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12c      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e016      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6253      	str	r3, [r2, #36]	; 0x24
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80017c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80017d4:	d105      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80017dc:	d101      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80017de:	2301      	movs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0201 	bic.w	r2, r3, #1
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e031      	b.n	80018a6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f829 	bl	80018ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f000 f978 	bl	8001b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e03a      	b.n	800194e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d00e      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_TIM_Base_Start_IT+0x98>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d009      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_TIM_Base_Start_IT+0x9c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_TIM_Base_Start_IT+0xa0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b06      	cmp	r3, #6
 8001928:	d010      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	e007      	b.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40000400 	.word	0x40000400
 800195c:	40000800 	.word	0x40000800
 8001960:	40010800 	.word	0x40010800

08001964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d122      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d11b      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0202 	mvn.w	r2, #2
 8001990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8c1 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8b4 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8c3 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0204 	mvn.w	r2, #4
 80019e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f897 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f88a 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f899 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0208 	mvn.w	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f86d 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f860 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f86f 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0210 	mvn.w	r2, #16
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2208      	movs	r2, #8
 8001a92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f843 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f836 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f845 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0201 	mvn.w	r2, #1
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f002 fea2 	bl	800482c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b40      	cmp	r3, #64	; 0x40
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f81f 	bl	8001b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d00f      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d017      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00f      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00b      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <TIM_Base_SetConfig+0xd8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <TIM_Base_SetConfig+0xdc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	615a      	str	r2, [r3, #20]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40011000 	.word	0x40011000

08001c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	2b84      	cmp	r3, #132	; 0x84
 8001c58:	d005      	beq.n	8001c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	3303      	adds	r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c76:	f000 fbc1 	bl	80023fc <vTaskStartScheduler>
  
  return osOK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685c      	ldr	r4, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c96:	b29e      	uxth	r6, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ffd0 	bl	8001c44 <makeFreeRtosPriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	9200      	str	r2, [sp, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	4632      	mov	r2, r6
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f000 f8cd 	bl	8001e54 <xTaskCreate>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <osDelay+0x16>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	e000      	b.n	8001ce6 <osDelay+0x18>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fb1c 	bl	8002324 <vTaskDelay>
  
  return osOK;
 8001cec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f103 0208 	add.w	r2, r3, #8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f103 0208 	add.w	r2, r3, #8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f103 0208 	add.w	r2, r3, #8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	601a      	str	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d103      	bne.n	8001db2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e00c      	b.n	8001dcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3308      	adds	r3, #8
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e002      	b.n	8001dc0 <vListInsert+0x2e>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d2f6      	bcs.n	8001dba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6892      	ldr	r2, [r2, #8]
 8001e18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6852      	ldr	r2, [r2, #4]
 8001e22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d103      	bne.n	8001e36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f001 f849 	bl	8002f00 <pvPortMalloc>
 8001e6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e76:	20bc      	movs	r0, #188	; 0xbc
 8001e78:	f001 f842 	bl	8002f00 <pvPortMalloc>
 8001e7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8a:	e005      	b.n	8001e98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f001 f88d 	bl	8002fac <vPortFree>
 8001e92:	e001      	b.n	8001e98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d013      	beq.n	8001ec6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e9e:	88fa      	ldrh	r2, [r7, #6]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9303      	str	r3, [sp, #12]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f80f 	bl	8001ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001eba:	69f8      	ldr	r0, [r7, #28]
 8001ebc:	f000 f8aa 	bl	8002014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	e002      	b.n	8001ecc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
	}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3720      	adds	r7, #32
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	21a5      	movs	r1, #165	; 0xa5
 8001ef2:	f002 fe1d 	bl	8004b30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f00:	3b01      	subs	r3, #1
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f023 0307 	bic.w	r3, r3, #7
 8001f0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f2c:	bf00      	nop
 8001f2e:	e7fe      	b.n	8001f2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	e012      	b.n	8001f5c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	7819      	ldrb	r1, [r3, #0]
 8001f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4413      	add	r3, r2
 8001f44:	3334      	adds	r3, #52	; 0x34
 8001f46:	460a      	mov	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	d9e9      	bls.n	8001f36 <prvInitialiseNewTask+0x5e>
 8001f62:	e000      	b.n	8001f66 <prvInitialiseNewTask+0x8e>
		{
			break;
 8001f64:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	2b06      	cmp	r3, #6
 8001f72:	d901      	bls.n	8001f78 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f74:	2306      	movs	r3, #6
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	2200      	movs	r2, #0
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fed0 	bl	8001d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	3318      	adds	r3, #24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fecb 	bl	8001d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	f1c3 0207 	rsb	r2, r3, #7
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	3354      	adds	r3, #84	; 0x54
 8001fc8:	2260      	movs	r2, #96	; 0x60
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fdaf 	bl	8004b30 <memset>
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <prvInitialiseNewTask+0x130>)
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <prvInitialiseNewTask+0x134>)
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <prvInitialiseNewTask+0x138>)
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	68f9      	ldr	r1, [r7, #12]
 8001fe8:	69b8      	ldr	r0, [r7, #24]
 8001fea:	f000 fdc5 	bl	8002b78 <pxPortInitialiseStack>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ffe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	08006860 	.word	0x08006860
 800200c:	08006880 	.word	0x08006880
 8002010:	08006840 	.word	0x08006840

08002014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800201c:	f000 feae 	bl	8002d7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <prvAddNewTaskToReadyList+0x180>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a5b      	ldr	r2, [pc, #364]	; (8002194 <prvAddNewTaskToReadyList+0x180>)
 8002028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800202a:	4b5b      	ldr	r3, [pc, #364]	; (8002198 <prvAddNewTaskToReadyList+0x184>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002032:	4a59      	ldr	r2, [pc, #356]	; (8002198 <prvAddNewTaskToReadyList+0x184>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002038:	4b56      	ldr	r3, [pc, #344]	; (8002194 <prvAddNewTaskToReadyList+0x180>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d110      	bne.n	8002062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002040:	f000 fcc2 	bl	80029c8 <prvInitialiseTaskLists>
 8002044:	e00d      	b.n	8002062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002046:	4b55      	ldr	r3, [pc, #340]	; (800219c <prvAddNewTaskToReadyList+0x188>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800204e:	4b52      	ldr	r3, [pc, #328]	; (8002198 <prvAddNewTaskToReadyList+0x184>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	429a      	cmp	r2, r3
 800205a:	d802      	bhi.n	8002062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800205c:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <prvAddNewTaskToReadyList+0x184>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002062:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <prvAddNewTaskToReadyList+0x18c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <prvAddNewTaskToReadyList+0x18c>)
 800206a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <prvAddNewTaskToReadyList+0x18c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d048      	beq.n	800210c <prvAddNewTaskToReadyList+0xf8>
 800207a:	2003      	movs	r0, #3
 800207c:	f001 ff18 	bl	8003eb0 <prvTraceGetObjectHandle>
 8002080:	4603      	mov	r3, r0
 8002082:	b29b      	uxth	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 ffc2 	bl	8003010 <prvTraceSetTaskNumberLow16>
 800208c:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <prvAddNewTaskToReadyList+0x190>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ffd2 	bl	800303c <prvTraceSetTaskNumberHigh16>
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 ff9e 	bl	8002fda <prvTraceGetTaskNumberLow16>
 800209e:	4603      	mov	r3, r0
 80020a0:	b2d9      	uxtb	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3334      	adds	r3, #52	; 0x34
 80020a6:	461a      	mov	r2, r3
 80020a8:	2003      	movs	r0, #3
 80020aa:	f001 ffd5 	bl	8004058 <prvTraceSetObjectName>
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 ff93 	bl	8002fda <prvTraceGetTaskNumberLow16>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b2d9      	uxtb	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	2003      	movs	r0, #3
 80020c2:	f001 fc85 	bl	80039d0 <prvTraceSetPriorityProperty>
 80020c6:	f000 ffcf 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 ff91 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <prvAddNewTaskToReadyList+0x194>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d014      	beq.n	800210c <prvAddNewTaskToReadyList+0xf8>
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 ff86 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <prvAddNewTaskToReadyList+0x194>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	4013      	ands	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <prvAddNewTaskToReadyList+0xf8>
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 ff6e 	bl	8002fda <prvTraceGetTaskNumberLow16>
 80020fe:	4603      	mov	r3, r0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	2103      	movs	r1, #3
 8002106:	201b      	movs	r0, #27
 8002108:	f001 fad0 	bl	80036ac <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 ff71 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <prvAddNewTaskToReadyList+0x194>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	4013      	ands	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <prvAddNewTaskToReadyList+0x11e>
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 ff59 	bl	8002fda <prvTraceGetTaskNumberLow16>
 8002128:	4603      	mov	r3, r0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f001 f9cb 	bl	80034c8 <prvTraceStoreTaskReady>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <prvAddNewTaskToReadyList+0x198>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <prvAddNewTaskToReadyList+0x198>)
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <prvAddNewTaskToReadyList+0x19c>)
 8002152:	441a      	add	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fdf6 	bl	8001d4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002160:	f000 fe3c 	bl	8002ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002164:	4b0d      	ldr	r3, [pc, #52]	; (800219c <prvAddNewTaskToReadyList+0x188>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <prvAddNewTaskToReadyList+0x176>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <prvAddNewTaskToReadyList+0x184>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	429a      	cmp	r2, r3
 8002178:	d207      	bcs.n	800218a <prvAddNewTaskToReadyList+0x176>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <prvAddNewTaskToReadyList+0x1a0>)
 800217c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000290 	.word	0x20000290
 8002198:	200001a8 	.word	0x200001a8
 800219c:	2000029c 	.word	0x2000029c
 80021a0:	200002ac 	.word	0x200002ac
 80021a4:	20000012 	.word	0x20000012
 80021a8:	20000010 	.word	0x20000010
 80021ac:	20000298 	.word	0x20000298
 80021b0:	200001ac 	.word	0x200001ac
 80021b4:	e000ed04 	.word	0xe000ed04

080021b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <vTaskDelayUntil+0x2a>
	__asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	617b      	str	r3, [r7, #20]
}
 80021de:	bf00      	nop
 80021e0:	e7fe      	b.n	80021e0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <vTaskDelayUntil+0x46>
	__asm volatile
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	613b      	str	r3, [r7, #16]
}
 80021fa:	bf00      	nop
 80021fc:	e7fe      	b.n	80021fc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80021fe:	4b44      	ldr	r3, [pc, #272]	; (8002310 <vTaskDelayUntil+0x158>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <vTaskDelayUntil+0x64>
	__asm volatile
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	60fb      	str	r3, [r7, #12]
}
 8002218:	bf00      	nop
 800221a:	e7fe      	b.n	800221a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800221c:	f000 f93e 	bl	800249c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002220:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <vTaskDelayUntil+0x15c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20b      	bcs.n	8002252 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	d211      	bcs.n	8002268 <vTaskDelayUntil+0xb0>
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	429a      	cmp	r2, r3
 800224a:	d90d      	bls.n	8002268 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
 8002250:	e00a      	b.n	8002268 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	429a      	cmp	r2, r3
 800225a:	d303      	bcc.n	8002264 <vTaskDelayUntil+0xac>
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	429a      	cmp	r2, r3
 8002262:	d901      	bls.n	8002268 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002264:	2301      	movs	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03a      	beq.n	80022ea <vTaskDelayUntil+0x132>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <vTaskDelayUntil+0x160>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 febb 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <vTaskDelayUntil+0x164>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	4013      	ands	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <vTaskDelayUntil+0xf2>
 800228e:	69f9      	ldr	r1, [r7, #28]
 8002290:	2088      	movs	r0, #136	; 0x88
 8002292:	f001 fac5 	bl	8003820 <prvTraceStoreKernelCallWithNumericParamOnly>
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <vTaskDelayUntil+0x160>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fe9d 	bl	8002fda <prvTraceGetTaskNumberLow16>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 fc47 	bl	8003b38 <prvTraceSetTaskInstanceFinished>
 80022aa:	f000 fedd 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fe9f 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <vTaskDelayUntil+0x164>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	4013      	ands	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <vTaskDelayUntil+0x124>
 80022c6:	f000 fecf 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fe84 	bl	8002fda <prvTraceGetTaskNumberLow16>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 fc2e 	bl	8003b38 <prvTraceSetTaskInstanceFinished>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fbe1 	bl	8002aac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80022ea:	f000 f8e5 	bl	80024b8 <xTaskResumeAll>
 80022ee:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <vTaskDelayUntil+0x14e>
		{
			portYIELD_WITHIN_API();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <vTaskDelayUntil+0x168>)
 80022f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200002b8 	.word	0x200002b8
 8002314:	20000294 	.word	0x20000294
 8002318:	200001a8 	.word	0x200001a8
 800231c:	20000010 	.word	0x20000010
 8002320:	e000ed04 	.word	0xe000ed04

08002324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d04b      	beq.n	80023ce <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <vTaskDelay+0xc8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <vTaskDelay+0x30>
	__asm volatile
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	60bb      	str	r3, [r7, #8]
}
 8002350:	bf00      	nop
 8002352:	e7fe      	b.n	8002352 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002354:	f000 f8a2 	bl	800249c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <vTaskDelay+0xcc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fe49 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <vTaskDelay+0xd0>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	4013      	ands	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <vTaskDelay+0x6a>
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	2089      	movs	r0, #137	; 0x89
 8002376:	f001 fa53 	bl	8003820 <prvTraceStoreKernelCallWithNumericParamOnly>
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <vTaskDelay+0xcc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fe2b 	bl	8002fda <prvTraceGetTaskNumberLow16>
 8002384:	4603      	mov	r3, r0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fbd5 	bl	8003b38 <prvTraceSetTaskInstanceFinished>
 800238e:	f000 fe6b 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 8002392:	4603      	mov	r3, r0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fe2d 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <vTaskDelay+0xd0>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	4013      	ands	r3, r2
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <vTaskDelay+0x9c>
 80023aa:	f000 fe5d 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fe12 	bl	8002fda <prvTraceGetTaskNumberLow16>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fbbc 	bl	8003b38 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023c0:	2100      	movs	r1, #0
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fb72 	bl	8002aac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023c8:	f000 f876 	bl	80024b8 <xTaskResumeAll>
 80023cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <vTaskDelay+0xd4>)
 80023d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200002b8 	.word	0x200002b8
 80023f0:	200001a8 	.word	0x200001a8
 80023f4:	20000010 	.word	0x20000010
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <vTaskStartScheduler+0x80>)
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2300      	movs	r3, #0
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	491c      	ldr	r1, [pc, #112]	; (8002480 <vTaskStartScheduler+0x84>)
 8002410:	481c      	ldr	r0, [pc, #112]	; (8002484 <vTaskStartScheduler+0x88>)
 8002412:	f7ff fd1f 	bl	8001e54 <xTaskCreate>
 8002416:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d11b      	bne.n	8002456 <vTaskStartScheduler+0x5a>
	__asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	60bb      	str	r3, [r7, #8]
}
 8002430:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <vTaskStartScheduler+0x8c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3354      	adds	r3, #84	; 0x54
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <vTaskStartScheduler+0x90>)
 800243a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <vTaskStartScheduler+0x94>)
 800243e:	f04f 32ff 	mov.w	r2, #4294967295
 8002442:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <vTaskStartScheduler+0x98>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <vTaskStartScheduler+0x9c>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002450:	f000 fc12 	bl	8002c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002454:	e00e      	b.n	8002474 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d10a      	bne.n	8002474 <vTaskStartScheduler+0x78>
	__asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	607b      	str	r3, [r7, #4]
}
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <vTaskStartScheduler+0x76>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200002b4 	.word	0x200002b4
 8002480:	0800542c 	.word	0x0800542c
 8002484:	08002999 	.word	0x08002999
 8002488:	200001a8 	.word	0x200001a8
 800248c:	20000018 	.word	0x20000018
 8002490:	200002b0 	.word	0x200002b0
 8002494:	2000029c 	.word	0x2000029c
 8002498:	20000294 	.word	0x20000294

0800249c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <vTaskSuspendAll+0x18>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <vTaskSuspendAll+0x18>)
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200002b8 	.word	0x200002b8

080024b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024c6:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <xTaskResumeAll+0x13c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	603b      	str	r3, [r7, #0]
}
 80024e0:	bf00      	nop
 80024e2:	e7fe      	b.n	80024e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024e4:	f000 fc4a 	bl	8002d7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <xTaskResumeAll+0x13c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	4a41      	ldr	r2, [pc, #260]	; (80025f4 <xTaskResumeAll+0x13c>)
 80024f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <xTaskResumeAll+0x13c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d174      	bne.n	80025e4 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024fa:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <xTaskResumeAll+0x140>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d070      	beq.n	80025e4 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002502:	e041      	b.n	8002588 <xTaskResumeAll+0xd0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002504:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <xTaskResumeAll+0x144>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3318      	adds	r3, #24
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fc76 	bl	8001e02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3304      	adds	r3, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fc71 	bl	8001e02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fd67 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	4b35      	ldr	r3, [pc, #212]	; (8002600 <xTaskResumeAll+0x148>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	4013      	ands	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <xTaskResumeAll+0x8e>
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fd4f 	bl	8002fda <prvTraceGetTaskNumberLow16>
 800253c:	4603      	mov	r3, r0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	f000 ffc1 	bl	80034c8 <prvTraceStoreTaskReady>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	2201      	movs	r2, #1
 800254c:	409a      	lsls	r2, r3
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <xTaskResumeAll+0x14c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <xTaskResumeAll+0x14c>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <xTaskResumeAll+0x150>)
 8002566:	441a      	add	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3304      	adds	r3, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f7ff fbec 	bl	8001d4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <xTaskResumeAll+0x154>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <xTaskResumeAll+0x158>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <xTaskResumeAll+0x144>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1b9      	bne.n	8002504 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002596:	f000 fa57 	bl	8002a48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <xTaskResumeAll+0x15c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025a6:	f000 f847 	bl	8002638 <xTaskIncrementTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <xTaskResumeAll+0x158>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f1      	bne.n	80025a6 <xTaskResumeAll+0xee>

						uxPendedTicks = 0;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <xTaskResumeAll+0x15c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <xTaskResumeAll+0x158>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <xTaskResumeAll+0x160>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025e4:	f000 fbfa 	bl	8002ddc <vPortExitCritical>

	return xAlreadyYielded;
 80025e8:	68bb      	ldr	r3, [r7, #8]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200002b8 	.word	0x200002b8
 80025f8:	20000290 	.word	0x20000290
 80025fc:	20000268 	.word	0x20000268
 8002600:	20000010 	.word	0x20000010
 8002604:	20000298 	.word	0x20000298
 8002608:	200001ac 	.word	0x200001ac
 800260c:	200001a8 	.word	0x200001a8
 8002610:	200002a4 	.word	0x200002a4
 8002614:	200002a0 	.word	0x200002a0
 8002618:	e000ed04 	.word	0xe000ed04

0800261c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <xTaskGetTickCount+0x18>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002628:	687b      	ldr	r3, [r7, #4]
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	20000294 	.word	0x20000294

08002638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8002642:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <xTaskIncrementTick+0x198>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d003      	beq.n	8002652 <xTaskIncrementTick+0x1a>
 800264a:	4b62      	ldr	r3, [pc, #392]	; (80027d4 <xTaskIncrementTick+0x19c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <xTaskIncrementTick+0x2a>
 8002652:	4b61      	ldr	r3, [pc, #388]	; (80027d8 <xTaskIncrementTick+0x1a0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a5f      	ldr	r2, [pc, #380]	; (80027d8 <xTaskIncrementTick+0x1a0>)
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	2000      	movs	r0, #0
 800265e:	f001 ff47 	bl	80044f0 <prvTracePortGetTimeStamp>
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <xTaskIncrementTick+0x198>)
 8002664:	681b      	ldr	r3, [r3, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002666:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <xTaskIncrementTick+0x198>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80a0 	bne.w	80027b0 <xTaskIncrementTick+0x178>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002670:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <xTaskIncrementTick+0x1a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002678:	4a58      	ldr	r2, [pc, #352]	; (80027dc <xTaskIncrementTick+0x1a4>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d120      	bne.n	80026c6 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
 8002684:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <xTaskIncrementTick+0x1a8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <xTaskIncrementTick+0x6c>
	__asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	603b      	str	r3, [r7, #0]
}
 80026a0:	bf00      	nop
 80026a2:	e7fe      	b.n	80026a2 <xTaskIncrementTick+0x6a>
 80026a4:	4b4e      	ldr	r3, [pc, #312]	; (80027e0 <xTaskIncrementTick+0x1a8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b4e      	ldr	r3, [pc, #312]	; (80027e4 <xTaskIncrementTick+0x1ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4c      	ldr	r2, [pc, #304]	; (80027e0 <xTaskIncrementTick+0x1a8>)
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <xTaskIncrementTick+0x1ac>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <xTaskIncrementTick+0x1b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <xTaskIncrementTick+0x1b0>)
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	f000 f9c1 	bl	8002a48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <xTaskIncrementTick+0x1b4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d360      	bcc.n	8002792 <xTaskIncrementTick+0x15a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026d0:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <xTaskIncrementTick+0x1a8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <xTaskIncrementTick+0xa6>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <xTaskIncrementTick+0xa8>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e4:	4b41      	ldr	r3, [pc, #260]	; (80027ec <xTaskIncrementTick+0x1b4>)
 80026e6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ea:	601a      	str	r2, [r3, #0]
					break;
 80026ec:	e051      	b.n	8002792 <xTaskIncrementTick+0x15a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026ee:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <xTaskIncrementTick+0x1a8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d203      	bcs.n	800270e <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002706:	4a39      	ldr	r2, [pc, #228]	; (80027ec <xTaskIncrementTick+0x1b4>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6013      	str	r3, [r2, #0]
						break;
 800270c:	e041      	b.n	8002792 <xTaskIncrementTick+0x15a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3304      	adds	r3, #4
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fb75 	bl	8001e02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3318      	adds	r3, #24
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fb6c 	bl	8001e02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f000 fc62 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <xTaskIncrementTick+0x1b8>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	4013      	ands	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <xTaskIncrementTick+0x118>
 8002740:	68b8      	ldr	r0, [r7, #8]
 8002742:	f000 fc4a 	bl	8002fda <prvTraceGetTaskNumberLow16>
 8002746:	4603      	mov	r3, r0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	f000 febc 	bl	80034c8 <prvTraceStoreTaskReady>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2201      	movs	r2, #1
 8002756:	409a      	lsls	r2, r3
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <xTaskIncrementTick+0x1bc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <xTaskIncrementTick+0x1bc>)
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <xTaskIncrementTick+0x1c0>)
 8002770:	441a      	add	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3304      	adds	r3, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f7ff fae7 	bl	8001d4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <xTaskIncrementTick+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d3a1      	bcc.n	80026d0 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002790:	e79e      	b.n	80026d0 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <xTaskIncrementTick+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002798:	4917      	ldr	r1, [pc, #92]	; (80027f8 <xTaskIncrementTick+0x1c0>)
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d907      	bls.n	80027ba <xTaskIncrementTick+0x182>
			{
				xSwitchRequired = pdTRUE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e004      	b.n	80027ba <xTaskIncrementTick+0x182>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <xTaskIncrementTick+0x19c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <xTaskIncrementTick+0x19c>)
 80027b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <xTaskIncrementTick+0x1c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <xTaskIncrementTick+0x18e>
		{
			xSwitchRequired = pdTRUE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80027c6:	697b      	ldr	r3, [r7, #20]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	200002b8 	.word	0x200002b8
 80027d4:	200002a0 	.word	0x200002a0
 80027d8:	200022d0 	.word	0x200022d0
 80027dc:	20000294 	.word	0x20000294
 80027e0:	20000260 	.word	0x20000260
 80027e4:	20000264 	.word	0x20000264
 80027e8:	200002a8 	.word	0x200002a8
 80027ec:	200002b0 	.word	0x200002b0
 80027f0:	20000010 	.word	0x20000010
 80027f4:	20000298 	.word	0x20000298
 80027f8:	200001ac 	.word	0x200001ac
 80027fc:	200001a8 	.word	0x200001a8
 8002800:	200002a4 	.word	0x200002a4

08002804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800280a:	4b48      	ldr	r3, [pc, #288]	; (800292c <vTaskSwitchContext+0x128>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <vTaskSwitchContext+0x12c>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002818:	e084      	b.n	8002924 <vTaskSwitchContext+0x120>
		xYieldPending = pdFALSE;
 800281a:	4b45      	ldr	r3, [pc, #276]	; (8002930 <vTaskSwitchContext+0x12c>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002820:	4b44      	ldr	r3, [pc, #272]	; (8002934 <vTaskSwitchContext+0x130>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	429a      	cmp	r2, r3
 8002836:	d111      	bne.n	800285c <vTaskSwitchContext+0x58>
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	3304      	adds	r3, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	429a      	cmp	r2, r3
 8002842:	d10b      	bne.n	800285c <vTaskSwitchContext+0x58>
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3308      	adds	r3, #8
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	429a      	cmp	r2, r3
 800284e:	d105      	bne.n	800285c <vTaskSwitchContext+0x58>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	330c      	adds	r3, #12
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	429a      	cmp	r2, r3
 800285a:	d008      	beq.n	800286e <vTaskSwitchContext+0x6a>
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <vTaskSwitchContext+0x130>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <vTaskSwitchContext+0x130>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3334      	adds	r3, #52	; 0x34
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f001 ff25 	bl	80046b8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <vTaskSwitchContext+0x134>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800287c:	7afb      	ldrb	r3, [r7, #11]
 800287e:	f1c3 031f 	rsb	r3, r3, #31
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	492d      	ldr	r1, [pc, #180]	; (800293c <vTaskSwitchContext+0x138>)
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <vTaskSwitchContext+0xaa>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	607b      	str	r3, [r7, #4]
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <vTaskSwitchContext+0xa8>
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4a20      	ldr	r2, [pc, #128]	; (800293c <vTaskSwitchContext+0x138>)
 80028ba:	4413      	add	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3308      	adds	r3, #8
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d104      	bne.n	80028de <vTaskSwitchContext+0xda>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a13      	ldr	r2, [pc, #76]	; (8002934 <vTaskSwitchContext+0x130>)
 80028e6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80028e8:	f000 fbbe 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fb80 	bl	8002ff4 <prvTraceGetTaskNumberHigh16>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <vTaskSwitchContext+0x13c>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	4013      	ands	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <vTaskSwitchContext+0x116>
 8002904:	f000 fbb0 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 8002908:	4603      	mov	r3, r0
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fb65 	bl	8002fda <prvTraceGetTaskNumberLow16>
 8002910:	4603      	mov	r3, r0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4618      	mov	r0, r3
 8002916:	f000 ffe9 	bl	80038ec <prvTraceStoreTaskswitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <vTaskSwitchContext+0x130>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3354      	adds	r3, #84	; 0x54
 8002920:	4a08      	ldr	r2, [pc, #32]	; (8002944 <vTaskSwitchContext+0x140>)
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200002b8 	.word	0x200002b8
 8002930:	200002a4 	.word	0x200002a4
 8002934:	200001a8 	.word	0x200001a8
 8002938:	20000298 	.word	0x20000298
 800293c:	200001ac 	.word	0x200001ac
 8002940:	20000010 	.word	0x20000010
 8002944:	20000018 	.word	0x20000018

08002948 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e001      	b.n	8002966 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8002966:	68fb      	ldr	r3, [r7, #12]
	}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
	...

08002998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029a0:	f000 f84c 	bl	8002a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <prvIdleTask+0x28>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d9f9      	bls.n	80029a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <prvIdleTask+0x2c>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80029bc:	e7f0      	b.n	80029a0 <prvIdleTask+0x8>
 80029be:	bf00      	nop
 80029c0:	200001ac 	.word	0x200001ac
 80029c4:	e000ed04 	.word	0xe000ed04

080029c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	e00c      	b.n	80029ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <prvInitialiseTaskLists+0x58>)
 80029e0:	4413      	add	r3, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f987 	bl	8001cf6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3301      	adds	r3, #1
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d9ef      	bls.n	80029d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <prvInitialiseTaskLists+0x5c>)
 80029f6:	f7ff f97e 	bl	8001cf6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80029fa:	480b      	ldr	r0, [pc, #44]	; (8002a28 <prvInitialiseTaskLists+0x60>)
 80029fc:	f7ff f97b 	bl	8001cf6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a00:	480a      	ldr	r0, [pc, #40]	; (8002a2c <prvInitialiseTaskLists+0x64>)
 8002a02:	f7ff f978 	bl	8001cf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a06:	480a      	ldr	r0, [pc, #40]	; (8002a30 <prvInitialiseTaskLists+0x68>)
 8002a08:	f7ff f975 	bl	8001cf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <prvInitialiseTaskLists+0x6c>)
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <prvInitialiseTaskLists+0x5c>)
 8002a10:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <prvInitialiseTaskLists+0x70>)
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <prvInitialiseTaskLists+0x60>)
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200001ac 	.word	0x200001ac
 8002a24:	20000238 	.word	0x20000238
 8002a28:	2000024c 	.word	0x2000024c
 8002a2c:	20000268 	.word	0x20000268
 8002a30:	2000027c 	.word	0x2000027c
 8002a34:	20000260 	.word	0x20000260
 8002a38:	20000264 	.word	0x20000264

08002a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <prvResetNextTaskUnblockTime+0x40>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <prvResetNextTaskUnblockTime+0x14>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <prvResetNextTaskUnblockTime+0x16>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvResetNextTaskUnblockTime+0x44>)
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002a6a:	e008      	b.n	8002a7e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <prvResetNextTaskUnblockTime+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <prvResetNextTaskUnblockTime+0x44>)
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	20000260 	.word	0x20000260
 8002a8c:	200002b0 	.word	0x200002b0

08002a90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <xTaskGetCurrentTaskHandle+0x18>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002a9c:	687b      	ldr	r3, [r7, #4]
	}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	200001a8 	.word	0x200001a8

08002aac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f99d 	bl	8001e02 <uxListRemove>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10b      	bne.n	8002ae6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ae4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d10a      	bne.n	8002b04 <prvAddCurrentTaskToDelayedList+0x58>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3304      	adds	r3, #4
 8002afa:	4619      	mov	r1, r3
 8002afc:	481a      	ldr	r0, [pc, #104]	; (8002b68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002afe:	f7ff f925 	bl	8001d4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b02:	e026      	b.n	8002b52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d209      	bcs.n	8002b30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3304      	adds	r3, #4
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f7ff f932 	bl	8001d92 <vListInsert>
}
 8002b2e:	e010      	b.n	8002b52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7ff f928 	bl	8001d92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d202      	bcs.n	8002b52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002b4c:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	6013      	str	r3, [r2, #0]
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000294 	.word	0x20000294
 8002b60:	200001a8 	.word	0x200001a8
 8002b64:	20000298 	.word	0x20000298
 8002b68:	2000027c 	.word	0x2000027c
 8002b6c:	20000264 	.word	0x20000264
 8002b70:	20000260 	.word	0x20000260
 8002b74:	200002b0 	.word	0x200002b0

08002b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3b04      	subs	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3b04      	subs	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 0201 	bic.w	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3b04      	subs	r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ba8:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <pxPortInitialiseStack+0x54>)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b14      	subs	r3, #20
 8002bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3b20      	subs	r3, #32
 8002bbe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	08002bd1 	.word	0x08002bd1

08002bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <prvTaskExitError+0x54>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d00a      	beq.n	8002bfa <prvTaskExitError+0x2a>
	__asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60fb      	str	r3, [r7, #12]
}
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <prvTaskExitError+0x28>
	__asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	60bb      	str	r3, [r7, #8]
}
 8002c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002c0e:	bf00      	nop
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0fc      	beq.n	8002c10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000008 	.word	0x20000008
	...

08002c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <pxCurrentTCBConst2>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	6808      	ldr	r0, [r1, #0]
 8002c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c3a:	f380 8809 	msr	PSP, r0
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f380 8811 	msr	BASEPRI, r0
 8002c4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002c4e:	4770      	bx	lr

08002c50 <pxCurrentTCBConst2>:
 8002c50:	200001a8 	.word	0x200001a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002c58:	4806      	ldr	r0, [pc, #24]	; (8002c74 <prvPortStartFirstTask+0x1c>)
 8002c5a:	6800      	ldr	r0, [r0, #0]
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f380 8808 	msr	MSP, r0
 8002c62:	b662      	cpsie	i
 8002c64:	b661      	cpsie	f
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	df00      	svc	0
 8002c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002c72:	bf00      	nop
 8002c74:	e000ed08 	.word	0xe000ed08

08002c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <xPortStartScheduler+0xf0>)
 8002c80:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	22ff      	movs	r2, #255	; 0xff
 8002c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <xPortStartScheduler+0xf4>)
 8002ca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cac:	e009      	b.n	8002cc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d0ef      	beq.n	8002cae <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002cce:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d00a      	beq.n	8002cf0 <xPortStartScheduler+0x78>
	__asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	613b      	str	r3, [r7, #16]
}
 8002cec:	bf00      	nop
 8002cee:	e7fe      	b.n	8002cee <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1c3 0307 	rsb	r3, r3, #7
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d00a      	beq.n	8002d12 <xPortStartScheduler+0x9a>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	60fb      	str	r3, [r7, #12]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xPortStartScheduler+0x98>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002d1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d24:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <xPortStartScheduler+0xf8>)
 8002d26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <xPortStartScheduler+0xfc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <xPortStartScheduler+0xfc>)
 8002d36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <xPortStartScheduler+0xfc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <xPortStartScheduler+0xfc>)
 8002d42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002d48:	f000 f8b8 	bl	8002ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <xPortStartScheduler+0x100>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002d52:	f7ff ff81 	bl	8002c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002d56:	f7ff fd55 	bl	8002804 <vTaskSwitchContext>
	prvTaskExitError();
 8002d5a:	f7ff ff39 	bl	8002bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	e000e400 	.word	0xe000e400
 8002d6c:	200002bc 	.word	0x200002bc
 8002d70:	200002c0 	.word	0x200002c0
 8002d74:	e000ed20 	.word	0xe000ed20
 8002d78:	20000008 	.word	0x20000008

08002d7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	607b      	str	r3, [r7, #4]
}
 8002d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <vPortEnterCritical+0x58>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <vPortEnterCritical+0x58>)
 8002d9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <vPortEnterCritical+0x58>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10f      	bne.n	8002dc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <vPortEnterCritical+0x5c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	603b      	str	r3, [r7, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <vPortEnterCritical+0x4a>
	}
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <vPortExitCritical+0x4c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <vPortExitCritical+0x24>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	607b      	str	r3, [r7, #4]
}
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <vPortExitCritical+0x4c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <vPortExitCritical+0x4c>)
 8002e08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e0a:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <vPortExitCritical+0x4c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <vPortExitCritical+0x42>
 8002e12:	2300      	movs	r3, #0
 8002e14:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	20000008 	.word	0x20000008
 8002e2c:	00000000 	.word	0x00000000

08002e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e30:	f3ef 8009 	mrs	r0, PSP
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <pxCurrentTCBConst>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e40:	6010      	str	r0, [r2, #0]
 8002e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002e46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e4a:	f380 8811 	msr	BASEPRI, r0
 8002e4e:	f7ff fcd9 	bl	8002804 <vTaskSwitchContext>
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f380 8811 	msr	BASEPRI, r0
 8002e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	6808      	ldr	r0, [r1, #0]
 8002e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e66:	f380 8809 	msr	PSP, r0
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	4770      	bx	lr

08002e70 <pxCurrentTCBConst>:
 8002e70:	200001a8 	.word	0x200001a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop

08002e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e92:	f7ff fbd1 	bl	8002638 <xTaskIncrementTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <SysTick_Handler+0x40>)
 8002e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f383 8811 	msr	BASEPRI, r3
}
 8002eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <vPortSetupTimerInterrupt+0x30>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <vPortSetupTimerInterrupt+0x34>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <vPortSetupTimerInterrupt+0x38>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <vPortSetupTimerInterrupt+0x3c>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	4a08      	ldr	r2, [pc, #32]	; (8002efc <vPortSetupTimerInterrupt+0x40>)
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ede:	4b03      	ldr	r3, [pc, #12]	; (8002eec <vPortSetupTimerInterrupt+0x30>)
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	e000e010 	.word	0xe000e010
 8002ef0:	e000e018 	.word	0xe000e018
 8002ef4:	20000014 	.word	0x20000014
 8002ef8:	10624dd3 	.word	0x10624dd3
 8002efc:	e000e014 	.word	0xe000e014

08002f00 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f023 0307 	bic.w	r3, r3, #7
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8002f20:	f7ff fabc 	bl	800249c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8002f24:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <pvPortMalloc+0xa0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <pvPortMalloc+0xa4>)
 8002f2e:	f023 0307 	bic.w	r3, r3, #7
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <pvPortMalloc+0xa0>)
 8002f36:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <pvPortMalloc+0xa8>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d813      	bhi.n	8002f70 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <pvPortMalloc+0xa8>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	441a      	add	r2, r3
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <pvPortMalloc+0xa8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d90b      	bls.n	8002f70 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <pvPortMalloc+0xa0>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <pvPortMalloc+0xa8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4413      	add	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <pvPortMalloc+0xa8>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <pvPortMalloc+0xa8>)
 8002f6e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <pvPortMalloc+0x84>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	2094      	movs	r0, #148	; 0x94
 8002f7e:	f000 fb07 	bl	8003590 <vTraceStoreMemMangEvent>
 8002f82:	e005      	b.n	8002f90 <pvPortMalloc+0x90>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	20e8      	movs	r0, #232	; 0xe8
 8002f8c:	f000 fb00 	bl	8003590 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8002f90:	f7ff fa92 	bl	80024b8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8002f94:	68fb      	ldr	r3, [r7, #12]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200022c8 	.word	0x200022c8
 8002fa4:	200002cc 	.word	0x200002cc
 8002fa8:	200022c4 	.word	0x200022c4

08002fac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <vPortFree+0x24>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60fb      	str	r3, [r7, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <vPortFree+0x22>
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <prvTraceGetTaskNumberLow16>:
	return ucQueueGetQueueType(handle);
}

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fcb0 	bl	8002948 <uxTaskGetTaskNumber>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	b29b      	uxth	r3, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fca3 	bl	8002948 <uxTaskGetTaskNumber>
 8003002:	4603      	mov	r3, r0
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b29b      	uxth	r3, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fc93 	bl	8002948 <uxTaskGetTaskNumber>
 8003022:	4603      	mov	r3, r0
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	887a      	ldrh	r2, [r7, #2]
 800302a:	4313      	orrs	r3, r2
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fc9f 	bl	8002972 <vTaskSetTaskNumber>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fc7d 	bl	8002948 <uxTaskGetTaskNumber>
 800304e:	4603      	mov	r3, r0
 8003050:	b29a      	uxth	r2, r3
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	4313      	orrs	r3, r2
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fc89 	bl	8002972 <vTaskSetTaskNumber>
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 800306c:	f7ff fd10 	bl	8002a90 <xTaskGetCurrentTaskHandle>
 8003070:	4603      	mov	r3, r0
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 800307c:	4b63      	ldr	r3, [pc, #396]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2209      	movs	r2, #9
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8003084:	4b61      	ldr	r3, [pc, #388]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	220a      	movs	r2, #10
 800308a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 800308e:	4b5f      	ldr	r3, [pc, #380]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	220a      	movs	r2, #10
 8003094:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8003098:	4b5c      	ldr	r3, [pc, #368]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	220a      	movs	r2, #10
 800309e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80030a2:	4b5a      	ldr	r3, [pc, #360]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	220f      	movs	r2, #15
 80030a8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80030ac:	4b57      	ldr	r3, [pc, #348]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2205      	movs	r2, #5
 80030b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80030b6:	4b55      	ldr	r3, [pc, #340]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2205      	movs	r2, #5
 80030bc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80030c0:	4b52      	ldr	r3, [pc, #328]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2205      	movs	r2, #5
 80030c6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80030ca:	4b50      	ldr	r3, [pc, #320]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2205      	movs	r2, #5
 80030d0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2205      	movs	r2, #5
 80030da:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	220f      	movs	r2, #15
 80030e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80030e8:	4b48      	ldr	r3, [pc, #288]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	220f      	movs	r2, #15
 80030ee:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80030f2:	4b46      	ldr	r3, [pc, #280]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	220f      	movs	r2, #15
 80030f8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	220f      	movs	r2, #15
 8003102:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	220f      	movs	r2, #15
 800310c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8003110:	4b3e      	ldr	r3, [pc, #248]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	220f      	movs	r2, #15
 8003116:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 800311a:	4b3c      	ldr	r3, [pc, #240]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	220f      	movs	r2, #15
 8003120:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8003124:	4b39      	ldr	r3, [pc, #228]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	220f      	movs	r2, #15
 800312a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	220f      	movs	r2, #15
 8003134:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8003138:	4b34      	ldr	r3, [pc, #208]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2210      	movs	r2, #16
 8003148:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 800314c:	4b2f      	ldr	r3, [pc, #188]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2210      	movs	r2, #16
 8003152:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8003156:	4b2d      	ldr	r3, [pc, #180]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2213      	movs	r2, #19
 800315c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2211      	movs	r2, #17
 8003166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2210      	movs	r2, #16
 8003170:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2213      	movs	r2, #19
 800317a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2213      	movs	r2, #19
 8003184:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2213      	movs	r2, #19
 800318e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8003192:	4b1e      	ldr	r3, [pc, #120]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	22a0      	movs	r2, #160	; 0xa0
 80031a2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031ae:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031ba:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f240 22fd 	movw	r2, #765	; 0x2fd
 80031c6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f240 3252 	movw	r2, #850	; 0x352
 80031d2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f240 32a2 	movw	r2, #930	; 0x3a2
 80031de:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f240 4201 	movw	r2, #1025	; 0x401
 80031ea:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80031f6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <vTraceInitObjectPropertyTable+0x194>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8003202:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	20003ca0 	.word	0x20003ca0

08003210 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003216:	2200      	movs	r2, #0
 8003218:	825a      	strh	r2, [r3, #18]
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800321c:	8a5a      	ldrh	r2, [r3, #18]
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003220:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003224:	220a      	movs	r2, #10
 8003226:	829a      	strh	r2, [r3, #20]
 8003228:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800322a:	8a9a      	ldrh	r2, [r3, #20]
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800322e:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003232:	2214      	movs	r2, #20
 8003234:	82da      	strh	r2, [r3, #22]
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003238:	8ada      	ldrh	r2, [r3, #22]
 800323a:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800323c:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003240:	221e      	movs	r2, #30
 8003242:	831a      	strh	r2, [r3, #24]
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003246:	8b1a      	ldrh	r2, [r3, #24]
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800324a:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800324e:	222d      	movs	r2, #45	; 0x2d
 8003250:	835a      	strh	r2, [r3, #26]
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003254:	8b5a      	ldrh	r2, [r3, #26]
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003258:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800325c:	2232      	movs	r2, #50	; 0x32
 800325e:	839a      	strh	r2, [r3, #28]
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003262:	8b9a      	ldrh	r2, [r3, #28]
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003266:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800326a:	2237      	movs	r2, #55	; 0x37
 800326c:	83da      	strh	r2, [r3, #30]
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003270:	8bda      	ldrh	r2, [r3, #30]
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003274:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003278:	223c      	movs	r2, #60	; 0x3c
 800327a:	841a      	strh	r2, [r3, #32]
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800327e:	8c1a      	ldrh	r2, [r3, #32]
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003282:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003286:	2241      	movs	r2, #65	; 0x41
 8003288:	845a      	strh	r2, [r3, #34]	; 0x22
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800328c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003290:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 8003294:	2209      	movs	r2, #9
 8003296:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 800329a:	2213      	movs	r2, #19
 800329c:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 800329e:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 80032a0:	221d      	movs	r2, #29
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 80032a6:	222c      	movs	r2, #44	; 0x2c
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 80032ac:	2231      	movs	r2, #49	; 0x31
 80032ae:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 80032b2:	2236      	movs	r2, #54	; 0x36
 80032b4:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 80032b8:	223b      	movs	r2, #59	; 0x3b
 80032ba:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80032c2:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <vTraceInitObjectHandleStack+0xc0>)
 80032c4:	2245      	movs	r2, #69	; 0x45
 80032c6:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	200022f4 	.word	0x200022f4

080032d4 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d827      	bhi.n	8003334 <pszTraceGetErrorNotEnoughHandles+0x60>
 80032e4:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <pszTraceGetErrorNotEnoughHandles+0x18>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003321 	.word	0x08003321
 80032f0:	08003319 	.word	0x08003319
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	08003311 	.word	0x08003311
 80032fc:	08003315 	.word	0x08003315
 8003300:	08003325 	.word	0x08003325
 8003304:	08003329 	.word	0x08003329
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003331 	.word	0x08003331
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8003312:	e010      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8003316:	e00e      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <pszTraceGetErrorNotEnoughHandles+0x74>)
 800331a:	e00c      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <pszTraceGetErrorNotEnoughHandles+0x78>)
 800331e:	e00a      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8003322:	e008      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8003326:	e006      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <pszTraceGetErrorNotEnoughHandles+0x84>)
 800332a:	e004      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <pszTraceGetErrorNotEnoughHandles+0x88>)
 800332e:	e002      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8003332:	e000      	b.n	8003336 <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <pszTraceGetErrorNotEnoughHandles+0x90>)
	}
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	08005434 	.word	0x08005434
 8003344:	0800547c 	.word	0x0800547c
 8003348:	080054c4 	.word	0x080054c4
 800334c:	08005518 	.word	0x08005518
 8003350:	08005564 	.word	0x08005564
 8003354:	080055b0 	.word	0x080055b0
 8003358:	080055fc 	.word	0x080055fc
 800335c:	08005650 	.word	0x08005650
 8003360:	080056a8 	.word	0x080056a8
 8003364:	08005704 	.word	0x08005704

08003368 <vTraceEnable>:
* 
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
 8003370:	f000 fc0c 	bl	8003b8c <prvTraceInitTraceData>
	
	if (startOption == TRC_START)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <vTraceEnable+0x18>
	{
		vTraceStart();
 800337a:	f000 f887 	bl	800348c <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}	
}
 800337e:	e00c      	b.n	800339a <vTraceEnable+0x32>
	else if (startOption == TRC_START_AWAIT_HOST)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d103      	bne.n	800338e <vTraceEnable+0x26>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8003386:	4807      	ldr	r0, [pc, #28]	; (80033a4 <vTraceEnable+0x3c>)
 8003388:	f000 fec4 	bl	8004114 <prvTraceError>
}
 800338c:	e005      	b.n	800339a <vTraceEnable+0x32>
	else if (startOption != TRC_INIT)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <vTraceEnable+0x32>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8003394:	4804      	ldr	r0, [pc, #16]	; (80033a8 <vTraceEnable+0x40>)
 8003396:	f000 febd 	bl	8004114 <prvTraceError>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	08005734 	.word	0x08005734
 80033a8:	08005774 	.word	0x08005774

080033ac <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <uiTraceStart+0xcc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 80033be:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <uiTraceStart+0xcc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <uiTraceStart+0x24>
 80033c6:	482d      	ldr	r0, [pc, #180]	; (800347c <uiTraceStart+0xd0>)
 80033c8:	f000 fea4 	bl	8004114 <prvTraceError>
 80033cc:	2300      	movs	r3, #0
 80033ce:	e04e      	b.n	800346e <uiTraceStart+0xc2>
		return 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e04c      	b.n	800346e <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 80033d4:	4b28      	ldr	r3, [pc, #160]	; (8003478 <uiTraceStart+0xcc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <uiTraceStart+0x36>
		return 1; /* Already running */
 80033de:	2301      	movs	r3, #1
 80033e0:	e045      	b.n	800346e <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <uiTraceStart+0xd4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d13e      	bne.n	8003468 <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ea:	f3ef 8310 	mrs	r3, PRIMASK
 80033ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f0:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	2301      	movs	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	bf00      	nop
 8003400:	4b20      	ldr	r3, [pc, #128]	; (8003484 <uiTraceStart+0xd8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <uiTraceStart+0xd8>)
 8003408:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <uiTraceStart+0xcc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2201      	movs	r2, #1
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8003412:	f7ff fe29 	bl	8003068 <prvTraceGetCurrentTaskHandle>
 8003416:	4603      	mov	r3, r0
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fdde 	bl	8002fda <prvTraceGetTaskNumberLow16>
 800341e:	4603      	mov	r3, r0
 8003420:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d110      	bne.n	800344a <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8003428:	2003      	movs	r0, #3
 800342a:	f000 fd41 	bl	8003eb0 <prvTraceGetObjectHandle>
 800342e:	4603      	mov	r3, r0
 8003430:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <uiTraceStart+0xdc>)
 8003436:	4619      	mov	r1, r3
 8003438:	2003      	movs	r0, #3
 800343a:	f000 fe0d 	bl	8004058 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2200      	movs	r2, #0
 8003442:	4619      	mov	r1, r3
 8003444:	2003      	movs	r0, #3
 8003446:	f000 fac3 	bl	80039d0 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fa4d 	bl	80038ec <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <uiTraceStart+0xd8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3b01      	subs	r3, #1
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <uiTraceStart+0xd8>)
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <uiTraceStart+0xcc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20003ca0 	.word	0x20003ca0
 800347c:	080057a8 	.word	0x080057a8
 8003480:	200022e4 	.word	0x200022e4
 8003484:	200022dc 	.word	0x200022dc
 8003488:	080057ec 	.word	0x080057ec

0800348c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8003490:	f7ff ff8c 	bl	80033ac <uiTraceStart>
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <vTraceStop+0x28>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <vTraceStop+0x28>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <vTraceStop+0x2c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <vTraceStop+0x2c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4798      	blx	r3
	}
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20003ca0 	.word	0x20003ca0
 80034c4:	200022ec 	.word	0x200022ec

080034c8 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d04b      	beq.n	8003570 <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80034d8:	4b28      	ldr	r3, [pc, #160]	; (800357c <prvTraceStoreTaskReady+0xb4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d049      	beq.n	8003574 <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d903      	bls.n	80034ee <prvTraceStoreTaskReady+0x26>
 80034e6:	4826      	ldr	r0, [pc, #152]	; (8003580 <prvTraceStoreTaskReady+0xb8>)
 80034e8:	f000 fe14 	bl	8004114 <prvTraceError>
 80034ec:	e043      	b.n	8003576 <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <prvTraceStoreTaskReady+0xbc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80034f6:	4824      	ldr	r0, [pc, #144]	; (8003588 <prvTraceStoreTaskReady+0xc0>)
 80034f8:	f000 fe0c 	bl	8004114 <prvTraceError>
		return;
 80034fc:	e03b      	b.n	8003576 <prvTraceStoreTaskReady+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003502:	60fb      	str	r3, [r7, #12]
  return(result);
 8003504:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	2301      	movs	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f383 8810 	msr	PRIMASK, r3
}
 8003512:	bf00      	nop
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <prvTraceStoreTaskReady+0xbc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <prvTraceStoreTaskReady+0xbc>)
 800351c:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <prvTraceStoreTaskReady+0xc4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	2b00      	cmp	r3, #0
 8003526:	d018      	beq.n	800355a <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003528:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800352c:	f000 fed0 	bl	80042d0 <prvTraceGetDTS>
 8003530:	4603      	mov	r3, r0
 8003532:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8003538:	f000 fc3e 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 800353c:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2202      	movs	r2, #2
 8003548:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	8b7a      	ldrh	r2, [r7, #26]
 800354e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	7e7a      	ldrb	r2, [r7, #25]
 8003554:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003556:	f000 fe93 	bl	8004280 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <prvTraceStoreTaskReady+0xbc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3b01      	subs	r3, #1
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <prvTraceStoreTaskReady+0xbc>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	e002      	b.n	8003576 <prvTraceStoreTaskReady+0xae>
		return;
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <prvTraceStoreTaskReady+0xae>
		return;
 8003574:	bf00      	nop
}
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	2000000c 	.word	0x2000000c
 8003580:	08005a00 	.word	0x08005a00
 8003584:	200022dc 	.word	0x200022dc
 8003588:	08005a40 	.word	0x08005a40
 800358c:	20003ca0 	.word	0x20003ca0

08003590 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	; 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 800359c:	4b40      	ldr	r3, [pc, #256]	; (80036a0 <vTraceStoreMemMangEvent+0x110>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d078      	beq.n	8003696 <vTraceStoreMemMangEvent+0x106>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da03      	bge.n	80035b2 <vTraceStoreMemMangEvent+0x22>
		size = (uint32_t)(- signed_size);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	425b      	negs	r3, r3
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	e001      	b.n	80035b6 <vTraceStoreMemMangEvent+0x26>
	else
		size = (uint32_t)(signed_size);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80035bc:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
 80035c0:	2301      	movs	r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	bf00      	nop
 80035cc:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <vTraceStoreMemMangEvent+0x114>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	4a34      	ldr	r2, [pc, #208]	; (80036a4 <vTraceStoreMemMangEvent+0x114>)
 80035d4:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <vTraceStoreMemMangEvent+0x118>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	4a30      	ldr	r2, [pc, #192]	; (80036a8 <vTraceStoreMemMangEvent+0x118>)
 80035e6:	6013      	str	r3, [r2, #0]
	
	if (RecorderDataPtr->recorderActive)
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <vTraceStoreMemMangEvent+0x110>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d046      	beq.n	8003680 <vTraceStoreMemMangEvent+0xf0>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80035f2:	20ff      	movs	r0, #255	; 0xff
 80035f4:	f000 fe6c 	bl	80042d0 <prvTraceGetDTS>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80035fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003600:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003604:	f000 f8d0 	bl	80037a8 <prvTraceGetParam>
 8003608:	4603      	mov	r3, r0
 800360a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 800360c:	f000 fbd4 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 8003610:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d033      	beq.n	8003680 <vTraceStoreMemMangEvent+0xf0>
		{
			ms->dts = dts1;
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800361e:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800362a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800362c:	f000 fe28 	bl	8004280 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003636:	f000 f8b7 	bl	80037a8 <prvTraceGetParam>
 800363a:	4603      	mov	r3, r0
 800363c:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8003644:	f000 fbb8 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 8003648:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d017      	beq.n	8003680 <vTraceStoreMemMangEvent+0xf0>
			{
				ma->addr_low = addr_low;
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003654:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800365c:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	3301      	adds	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
 8003672:	f000 fe05 	bl	8004280 <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <vTraceStoreMemMangEvent+0x110>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <vTraceStoreMemMangEvent+0x118>)
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <vTraceStoreMemMangEvent+0x114>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <vTraceStoreMemMangEvent+0x114>)
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	e000      	b.n	8003698 <vTraceStoreMemMangEvent+0x108>
		return;
 8003696:	bf00      	nop
}
 8003698:	3738      	adds	r7, #56	; 0x38
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20003ca0 	.word	0x20003ca0
 80036a4:	200022dc 	.word	0x200022dc
 80036a8:	200022f0 	.word	0x200022f0

080036ac <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	460b      	mov	r3, r1
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2bfe      	cmp	r3, #254	; 0xfe
 80036be:	d903      	bls.n	80036c8 <prvTraceStoreKernelCall+0x1c>
 80036c0:	4832      	ldr	r0, [pc, #200]	; (800378c <prvTraceStoreKernelCall+0xe0>)
 80036c2:	f000 fd27 	bl	8004114 <prvTraceError>
 80036c6:	e05d      	b.n	8003784 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80036c8:	7afb      	ldrb	r3, [r7, #11]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d903      	bls.n	80036d6 <prvTraceStoreKernelCall+0x2a>
 80036ce:	4830      	ldr	r0, [pc, #192]	; (8003790 <prvTraceStoreKernelCall+0xe4>)
 80036d0:	f000 fd20 	bl	8004114 <prvTraceError>
 80036d4:	e056      	b.n	8003784 <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <prvTraceStoreKernelCall+0xe8>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	4413      	add	r3, r2
 80036de:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d903      	bls.n	80036f2 <prvTraceStoreKernelCall+0x46>
 80036ea:	482b      	ldr	r0, [pc, #172]	; (8003798 <prvTraceStoreKernelCall+0xec>)
 80036ec:	f000 fd12 	bl	8004114 <prvTraceError>
 80036f0:	e048      	b.n	8003784 <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <prvTraceStoreKernelCall+0xf0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 80036fa:	4829      	ldr	r0, [pc, #164]	; (80037a0 <prvTraceStoreKernelCall+0xf4>)
 80036fc:	f000 fd0a 	bl	8004114 <prvTraceError>
		return;
 8003700:	e040      	b.n	8003784 <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 8003702:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <prvTraceStoreKernelCall+0xf8>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03b      	beq.n	8003782 <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370a:	f3ef 8310 	mrs	r3, PRIMASK
 800370e:	617b      	str	r3, [r7, #20]
  return(result);
 8003710:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	2301      	movs	r3, #1
 8003716:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	bf00      	nop
 8003720:	4b1e      	ldr	r3, [pc, #120]	; (800379c <prvTraceStoreKernelCall+0xf0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <prvTraceStoreKernelCall+0xf0>)
 8003728:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <prvTraceStoreKernelCall+0xe8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01b      	beq.n	800376c <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003734:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003738:	f000 fdca 	bl	80042d0 <prvTraceGetDTS>
 800373c:	4603      	mov	r3, r0
 800373e:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8003746:	f000 fb37 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 800374a:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003756:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003766:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003768:	f000 fd8a 	bl	8004280 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <prvTraceStoreKernelCall+0xf0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3b01      	subs	r3, #1
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <prvTraceStoreKernelCall+0xf0>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	e000      	b.n	8003784 <prvTraceStoreKernelCall+0xd8>
		return;
 8003782:	bf00      	nop
}
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	08005ab0 	.word	0x08005ab0
 8003790:	08005ae8 	.word	0x08005ae8
 8003794:	20003ca0 	.word	0x20003ca0
 8003798:	08005b30 	.word	0x08005b30
 800379c:	200022dc 	.word	0x200022dc
 80037a0:	08005b78 	.word	0x08005b78
 80037a4:	200022e8 	.word	0x200022e8

080037a8 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2bff      	cmp	r3, #255	; 0xff
 80037b6:	d009      	beq.n	80037cc <prvTraceGetParam+0x24>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <prvTraceGetParam+0x24>
 80037c2:	4816      	ldr	r0, [pc, #88]	; (800381c <prvTraceGetParam+0x74>)
 80037c4:	f000 fca6 	bl	8004114 <prvTraceError>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	e023      	b.n	8003814 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d801      	bhi.n	80037d8 <prvTraceGetParam+0x30>
	{
		return param;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	e01d      	b.n	8003814 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 80037d8:	f000 faee 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 80037dc:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d014      	beq.n	800380e <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	4013      	ands	r3, r2
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	43da      	mvns	r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	4013      	ands	r3, r2
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800380a:	f000 fd39 	bl	8004280 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4013      	ands	r3, r2
	}
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08005cc8 	.word	0x08005cc8

08003820 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2bfe      	cmp	r3, #254	; 0xfe
 8003832:	d903      	bls.n	800383c <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8003834:	4828      	ldr	r0, [pc, #160]	; (80038d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8003836:	f000 fc6d 	bl	8004114 <prvTraceError>
 800383a:	e049      	b.n	80038d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8003844:	4826      	ldr	r0, [pc, #152]	; (80038e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003846:	f000 fc65 	bl	8004114 <prvTraceError>
		return;
 800384a:	e041      	b.n	80038d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384c:	f3ef 8310 	mrs	r3, PRIMASK
 8003850:	613b      	str	r3, [r7, #16]
  return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	2301      	movs	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f383 8810 	msr	PRIMASK, r3
}
 8003860:	bf00      	nop
 8003862:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800386a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2b00      	cmp	r3, #0
 8003874:	d021      	beq.n	80038ba <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01d      	beq.n	80038ba <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800387e:	20ff      	movs	r0, #255	; 0xff
 8003880:	f000 fd26 	bl	80042d0 <prvTraceGetDTS>
 8003884:	4603      	mov	r3, r0
 8003886:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800388e:	f7ff ff8b 	bl	80037a8 <prvTraceGetParam>
 8003892:	4603      	mov	r3, r0
 8003894:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8003896:	f000 fa8f 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 800389a:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	7ffa      	ldrb	r2, [r7, #31]
 80038a6:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038b4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80038b6:	f000 fce3 	bl	8004280 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3b01      	subs	r3, #1
 80038c0:	4a06      	ldr	r2, [pc, #24]	; (80038dc <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	bf00      	nop
}
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	08005d04 	.word	0x08005d04
 80038dc:	200022dc 	.word	0x200022dc
 80038e0:	08005d5c 	.word	0x08005d5c
 80038e4:	20003ca0 	.word	0x20003ca0
 80038e8:	200022e8 	.word	0x200022e8

080038ec <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d903      	bls.n	8003904 <prvTraceStoreTaskswitch+0x18>
 80038fc:	482f      	ldr	r0, [pc, #188]	; (80039bc <prvTraceStoreTaskswitch+0xd0>)
 80038fe:	f000 fc09 	bl	8004114 <prvTraceError>
 8003902:	e058      	b.n	80039b6 <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003904:	f3ef 8310 	mrs	r3, PRIMASK
 8003908:	60fb      	str	r3, [r7, #12]
  return(result);
 800390a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	2301      	movs	r3, #1
 8003910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f383 8810 	msr	PRIMASK, r3
}
 8003918:	bf00      	nop
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <prvTraceStoreTaskswitch+0xd4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <prvTraceStoreTaskswitch+0xd4>)
 8003922:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <prvTraceStoreTaskswitch+0xd8>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	79fa      	ldrb	r2, [r7, #7]
 800392a:	429a      	cmp	r2, r3
 800392c:	d038      	beq.n	80039a0 <prvTraceStoreTaskswitch+0xb4>
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <prvTraceStoreTaskswitch+0xdc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	2b00      	cmp	r3, #0
 8003936:	d033      	beq.n	80039a0 <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8003938:	4b24      	ldr	r3, [pc, #144]	; (80039cc <prvTraceStoreTaskswitch+0xe0>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800393e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003942:	f000 fcc5 	bl	80042d0 <prvTraceGetDTS>
 8003946:	4603      	mov	r3, r0
 8003948:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 800394a:	4a1e      	ldr	r2, [pc, #120]	; (80039c4 <prvTraceStoreTaskswitch+0xd8>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <prvTraceStoreTaskswitch+0xd8>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8003956:	f000 fa2f 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 800395a:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01e      	beq.n	80039a0 <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <prvTraceStoreTaskswitch+0xd8>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4619      	mov	r1, r3
 8003968:	2003      	movs	r0, #3
 800396a:	f000 f8a9 	bl	8003ac0 <prvTraceGetObjectState>
 800396e:	4603      	mov	r3, r0
 8003970:	2b01      	cmp	r3, #1
 8003972:	d103      	bne.n	800397c <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2207      	movs	r2, #7
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e002      	b.n	8003982 <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2206      	movs	r2, #6
 8003980:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	8b7a      	ldrh	r2, [r7, #26]
 8003986:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	7e7a      	ldrb	r2, [r7, #25]
 800398c:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <prvTraceStoreTaskswitch+0xd8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	4619      	mov	r1, r3
 8003996:	2003      	movs	r0, #3
 8003998:	f000 f856 	bl	8003a48 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 800399c:	f000 fc70 	bl	8004280 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <prvTraceStoreTaskswitch+0xd4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <prvTraceStoreTaskswitch+0xd4>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	bf00      	nop
}
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	08005d94 	.word	0x08005d94
 80039c0:	200022dc 	.word	0x200022dc
 80039c4:	200022e8 	.word	0x200022e8
 80039c8:	20003ca0 	.word	0x20003ca0
 80039cc:	200022cc 	.word	0x200022cc

080039d0 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
 80039da:	460b      	mov	r3, r1
 80039dc:	71bb      	strb	r3, [r7, #6]
 80039de:	4613      	mov	r3, r2
 80039e0:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d903      	bls.n	80039f0 <prvTraceSetPriorityProperty+0x20>
 80039e8:	4814      	ldr	r0, [pc, #80]	; (8003a3c <prvTraceSetPriorityProperty+0x6c>)
 80039ea:	f000 fb93 	bl	8004114 <prvTraceError>
 80039ee:	e022      	b.n	8003a36 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <prvTraceSetPriorityProperty+0x70>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	4413      	add	r3, r2
 80039f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80039fc:	79ba      	ldrb	r2, [r7, #6]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d903      	bls.n	8003a0a <prvTraceSetPriorityProperty+0x3a>
 8003a02:	4810      	ldr	r0, [pc, #64]	; (8003a44 <prvTraceSetPriorityProperty+0x74>)
 8003a04:	f000 fb86 	bl	8004114 <prvTraceError>
 8003a08:	e015      	b.n	8003a36 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <prvTraceSetPriorityProperty+0x70>)
 8003a0c:	681c      	ldr	r4, [r3, #0]
 8003a0e:	79fa      	ldrb	r2, [r7, #7]
 8003a10:	79bb      	ldrb	r3, [r7, #6]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f9f3 	bl	8003e00 <uiIndexOfObject>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <prvTraceSetPriorityProperty+0x70>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	4413      	add	r3, r2
 8003a26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4423      	add	r3, r4
 8003a30:	797a      	ldrb	r2, [r7, #5]
 8003a32:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	08005f28 	.word	0x08005f28
 8003a40:	20003ca0 	.word	0x20003ca0
 8003a44:	08005f74 	.word	0x08005f74

08003a48 <prvTraceSetObjectState>:

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
}

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
 8003a52:	460b      	mov	r3, r1
 8003a54:	71bb      	strb	r3, [r7, #6]
 8003a56:	4613      	mov	r3, r2
 8003a58:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d903      	bls.n	8003a68 <prvTraceSetObjectState+0x20>
 8003a60:	4814      	ldr	r0, [pc, #80]	; (8003ab4 <prvTraceSetObjectState+0x6c>)
 8003a62:	f000 fb57 	bl	8004114 <prvTraceError>
 8003a66:	e021      	b.n	8003aac <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <prvTraceSetObjectState+0x70>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003a74:	79ba      	ldrb	r2, [r7, #6]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d903      	bls.n	8003a82 <prvTraceSetObjectState+0x3a>
 8003a7a:	4810      	ldr	r0, [pc, #64]	; (8003abc <prvTraceSetObjectState+0x74>)
 8003a7c:	f000 fb4a 	bl	8004114 <prvTraceError>
 8003a80:	e014      	b.n	8003aac <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <prvTraceSetObjectState+0x70>)
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	79fa      	ldrb	r2, [r7, #7]
 8003a88:	79bb      	ldrb	r3, [r7, #6]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 f9b7 	bl	8003e00 <uiIndexOfObject>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4619      	mov	r1, r3
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <prvTraceSetObjectState+0x70>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003aa2:	440b      	add	r3, r1
 8003aa4:	4423      	add	r3, r4
 8003aa6:	797a      	ldrb	r2, [r7, #5]
 8003aa8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	08006040 	.word	0x08006040
 8003ab8:	20003ca0 	.word	0x20003ca0
 8003abc:	08006084 	.word	0x08006084

08003ac0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	460a      	mov	r2, r1
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d904      	bls.n	8003ae0 <prvTraceGetObjectState+0x20>
 8003ad6:	4815      	ldr	r0, [pc, #84]	; (8003b2c <prvTraceGetObjectState+0x6c>)
 8003ad8:	f000 fb1c 	bl	8004114 <prvTraceError>
 8003adc:	2300      	movs	r3, #0
 8003ade:	e021      	b.n	8003b24 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <prvTraceGetObjectState+0x70>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003aec:	79ba      	ldrb	r2, [r7, #6]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d904      	bls.n	8003afc <prvTraceGetObjectState+0x3c>
 8003af2:	4810      	ldr	r0, [pc, #64]	; (8003b34 <prvTraceGetObjectState+0x74>)
 8003af4:	f000 fb0e 	bl	8004114 <prvTraceError>
 8003af8:	2300      	movs	r3, #0
 8003afa:	e013      	b.n	8003b24 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <prvTraceGetObjectState+0x70>)
 8003afe:	681c      	ldr	r4, [r3, #0]
 8003b00:	79fa      	ldrb	r2, [r7, #7]
 8003b02:	79bb      	ldrb	r3, [r7, #6]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f97a 	bl	8003e00 <uiIndexOfObject>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <prvTraceGetObjectState+0x70>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	4413      	add	r3, r2
 8003b18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b1c:	440b      	add	r3, r1
 8003b1e:	4423      	add	r3, r4
 8003b20:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	080060c0 	.word	0x080060c0
 8003b30:	20003ca0 	.word	0x20003ca0
 8003b34:	08006104 	.word	0x08006104

08003b38 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <prvTraceSetTaskInstanceFinished+0x4c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8003b4a:	79fa      	ldrb	r2, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d903      	bls.n	8003b58 <prvTraceSetTaskInstanceFinished+0x20>
 8003b50:	480d      	ldr	r0, [pc, #52]	; (8003b88 <prvTraceSetTaskInstanceFinished+0x50>)
 8003b52:	f000 fadf 	bl	8004114 <prvTraceError>
 8003b56:	e011      	b.n	8003b7c <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <prvTraceSetTaskInstanceFinished+0x4c>)
 8003b5a:	681c      	ldr	r4, [r3, #0]
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	2103      	movs	r1, #3
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f94d 	bl	8003e00 <uiIndexOfObject>
 8003b66:	4603      	mov	r3, r0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <prvTraceSetTaskInstanceFinished+0x4c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8003b72:	4413      	add	r3, r2
 8003b74:	4423      	add	r3, r4
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
#endif
}
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20003ca0 	.word	0x20003ca0
 8003b88:	08006140 	.word	0x08006140

08003b8c <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
 8003b90:	4b83      	ldr	r3, [pc, #524]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8003b98:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003b9a:	4a82      	ldr	r2, [pc, #520]	; (8003da4 <prvTraceInitTraceData+0x218>)
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e006      	b.n	8003bae <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
 8003ba0:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	f000 80f6 	beq.w	8003d9a <prvTraceInitTraceData+0x20e>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
 8003bae:	4b7e      	ldr	r3, [pc, #504]	; (8003da8 <prvTraceInitTraceData+0x21c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a7e      	ldr	r2, [pc, #504]	; (8003dac <prvTraceInitTraceData+0x220>)
 8003bb4:	6013      	str	r3, [r2, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8003bb6:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f641 1218 	movw	r2, #6424	; 0x1918
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 ffb5 	bl	8004b30 <memset>
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8003bc6:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8003bce:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8003bd0:	4b73      	ldr	r3, [pc, #460]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2205      	movs	r2, #5
 8003bd6:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8003bd8:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8003be0:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f641 1218 	movw	r2, #6424	; 0x1918
 8003be8:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bf2:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8003bfe:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8003c06:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8003c0e:	f7ff fa33 	bl	8003078 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8003c12:	4b63      	ldr	r3, [pc, #396]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8003c1a:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8003c1e:	4b60      	ldr	r3, [pc, #384]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c26:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8003c34:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 8003c3c:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8003c40:	4b57      	ldr	r3, [pc, #348]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003c48:	2250      	movs	r2, #80	; 0x50
 8003c4a:	4959      	ldr	r1, [pc, #356]	; (8003db0 <prvTraceInitTraceData+0x224>)
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f9dd 	bl	800400c <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8003c52:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8003c5a:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 8003c5e:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c66:	220a      	movs	r2, #10
 8003c68:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
	RecorderDataPtr->endmarker1 = 0x0B;
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c74:	220b      	movs	r2, #11
 8003c76:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
	RecorderDataPtr->endmarker2 = 0x0C;
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c82:	220c      	movs	r2, #12
 8003c84:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
	RecorderDataPtr->endmarker3 = 0x0D;
 8003c88:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c90:	220d      	movs	r2, #13
 8003c92:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
	RecorderDataPtr->endmarker4 = 0x71;
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9e:	2271      	movs	r2, #113	; 0x71
 8003ca0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	RecorderDataPtr->endmarker5 = 0x72;
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cac:	2272      	movs	r2, #114	; 0x72
 8003cae:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
	RecorderDataPtr->endmarker6 = 0x73;
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cba:	2273      	movs	r2, #115	; 0x73
 8003cbc:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
	RecorderDataPtr->endmarker7 = 0x74;
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	2274      	movs	r2, #116	; 0x74
 8003cca:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
	RecorderDataPtr->endmarker8 = 0xF1;
 8003cce:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd6:	22f1      	movs	r2, #241	; 0xf1
 8003cd8:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
	RecorderDataPtr->endmarker9 = 0xF2;
 8003cdc:	4b30      	ldr	r3, [pc, #192]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce4:	22f2      	movs	r2, #242	; 0xf2
 8003ce6:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
	RecorderDataPtr->endmarker10 = 0xF3;
 8003cea:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf2:	22f3      	movs	r2, #243	; 0xf3
 8003cf4:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
	RecorderDataPtr->endmarker11 = 0xF4;
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d00:	22f4      	movs	r2, #244	; 0xf4
 8003d02:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 8003d06:	f7ff fa83 	bl	8003210 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
 8003d0a:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	22f4      	movs	r2, #244	; 0xf4
 8003d10:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8003d12:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	22f3      	movs	r2, #243	; 0xf3
 8003d18:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	22f2      	movs	r2, #242	; 0xf2
 8003d20:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	22f1      	movs	r2, #241	; 0xf1
 8003d28:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2274      	movs	r2, #116	; 0x74
 8003d30:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2273      	movs	r2, #115	; 0x73
 8003d38:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2272      	movs	r2, #114	; 0x72
 8003d40:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2271      	movs	r2, #113	; 0x71
 8003d48:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2203      	movs	r2, #3
 8003d58:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <prvTraceInitTraceData+0x228>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <prvTraceInitTraceData+0x208>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <prvTraceInitTraceData+0x228>)
 8003d7c:	6811      	ldr	r1, [r2, #0]
 8003d7e:	2250      	movs	r2, #80	; 0x50
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f943 	bl	800400c <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <prvTraceInitTraceData+0x214>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		vTraceStop();
 8003d90:	f7ff fb82 	bl	8003498 <vTraceStop>
	}


	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8003d94:	f000 fb74 	bl	8004480 <prvTraceInitCortexM>
 8003d98:	e000      	b.n	8003d9c <prvTraceInitTraceData+0x210>
			return;
 8003d9a:	bf00      	nop
#endif
}
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20003ca0 	.word	0x20003ca0
 8003da4:	20002388 	.word	0x20002388
 8003da8:	e0001004 	.word	0xe0001004
 8003dac:	20002384 	.word	0x20002384
 8003db0:	08006188 	.word	0x08006188
 8003db4:	200022e4 	.word	0x200022e4

08003db8 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e013      	b.n	8003df2 <prvTraceNextFreeEventBufferSlot+0x3a>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd4:	d304      	bcc.n	8003de0 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8003dd6:	4809      	ldr	r0, [pc, #36]	; (8003dfc <prvTraceNextFreeEventBufferSlot+0x44>)
 8003dd8:	f000 f99c 	bl	8004114 <prvTraceError>
		return NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e008      	b.n	8003df2 <prvTraceNextFreeEventBufferSlot+0x3a>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <prvTraceNextFreeEventBufferSlot+0x40>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8003df0:	4413      	add	r3, r2
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20003ca0 	.word	0x20003ca0
 8003dfc:	0800619c 	.word	0x0800619c

08003e00 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	460a      	mov	r2, r1
 8003e0a:	71fb      	strb	r3, [r7, #7]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8003e10:	79bb      	ldrb	r3, [r7, #6]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d904      	bls.n	8003e20 <uiIndexOfObject+0x20>
 8003e16:	4822      	ldr	r0, [pc, #136]	; (8003ea0 <uiIndexOfObject+0xa0>)
 8003e18:	f000 f97c 	bl	8004114 <prvTraceError>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e03a      	b.n	8003e96 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <uiIndexOfObject+0x38>
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <uiIndexOfObject+0xa4>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	79bb      	ldrb	r3, [r7, #6]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003e32:	79fa      	ldrb	r2, [r7, #7]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d904      	bls.n	8003e42 <uiIndexOfObject+0x42>
 8003e38:	481b      	ldr	r0, [pc, #108]	; (8003ea8 <uiIndexOfObject+0xa8>)
 8003e3a:	f000 f96b 	bl	8004114 <prvTraceError>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e029      	b.n	8003e96 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003e42:	79bb      	ldrb	r3, [r7, #6]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d822      	bhi.n	8003e8e <uiIndexOfObject+0x8e>
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01f      	beq.n	8003e8e <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <uiIndexOfObject+0xa4>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	79bb      	ldrb	r3, [r7, #6]
 8003e54:	4413      	add	r3, r2
 8003e56:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003e5a:	79fa      	ldrb	r2, [r7, #7]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d816      	bhi.n	8003e8e <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <uiIndexOfObject+0xa4>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	79bb      	ldrb	r3, [r7, #6]
 8003e66:	3340      	adds	r3, #64	; 0x40
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	891a      	ldrh	r2, [r3, #8]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <uiIndexOfObject+0xa4>)
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	79bb      	ldrb	r3, [r7, #6]
 8003e74:	440b      	add	r3, r1
 8003e76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8003e7a:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8003e7c:	79f9      	ldrb	r1, [r7, #7]
 8003e7e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8003e80:	b289      	uxth	r1, r1
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	e003      	b.n	8003e96 <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8003e8e:	4807      	ldr	r0, [pc, #28]	; (8003eac <uiIndexOfObject+0xac>)
 8003e90:	f000 f940 	bl	8004114 <prvTraceError>
	return 0;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	080061c4 	.word	0x080061c4
 8003ea4:	20003ca0 	.word	0x20003ca0
 8003ea8:	08006204 	.word	0x08006204
 8003eac:	08006244 	.word	0x08006244

08003eb0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <prvTraceGetObjectHandle+0x144>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <prvTraceGetObjectHandle+0x1c>
 8003ec2:	484d      	ldr	r0, [pc, #308]	; (8003ff8 <prvTraceGetObjectHandle+0x148>)
 8003ec4:	f000 f926 	bl	8004114 <prvTraceError>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e08f      	b.n	8003fec <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d904      	bls.n	8003edc <prvTraceGetObjectHandle+0x2c>
 8003ed2:	484a      	ldr	r0, [pc, #296]	; (8003ffc <prvTraceGetObjectHandle+0x14c>)
 8003ed4:	f000 f91e 	bl	8004114 <prvTraceError>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e087      	b.n	8003fec <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003edc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	bf00      	nop
 8003ef2:	4b43      	ldr	r3, [pc, #268]	; (8004000 <prvTraceGetObjectHandle+0x150>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a41      	ldr	r2, [pc, #260]	; (8004000 <prvTraceGetObjectHandle+0x150>)
 8003efa:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	4a41      	ldr	r2, [pc, #260]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b40      	ldr	r3, [pc, #256]	; (8004008 <prvTraceGetObjectHandle+0x158>)
 8003f08:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8003f0a:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <prvTraceGetObjectHandle+0x158>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3d      	ldr	r2, [pc, #244]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f10:	4413      	add	r3, r2
 8003f12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d114      	bne.n	8003f44 <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <prvTraceGetObjectHandle+0x158>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	4938      	ldr	r1, [pc, #224]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f24:	3308      	adds	r3, #8
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003f32:	4b35      	ldr	r3, [pc, #212]	; (8004008 <prvTraceGetObjectHandle+0x158>)
 8003f34:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003f36:	3201      	adds	r2, #1
 8003f38:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	460a      	mov	r2, r1
 8003f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003f44:	4b30      	ldr	r3, [pc, #192]	; (8004008 <prvTraceGetObjectHandle+0x158>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2e      	ldr	r2, [pc, #184]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f50:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	4a2b      	ldr	r2, [pc, #172]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f56:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	4929      	ldr	r1, [pc, #164]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f5e:	3310      	adds	r3, #16
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	440b      	add	r3, r1
 8003f64:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d90a      	bls.n	8003f80 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f9b1 	bl	80032d4 <pszTraceGetErrorNotEnoughHandles>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f8cd 	bl	8004114 <prvTraceError>
		handle = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e029      	b.n	8003fd4 <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	4a20      	ldr	r2, [pc, #128]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003f88:	3201      	adds	r2, #1
 8003f8a:	b291      	uxth	r1, r2
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f9a:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	4a19      	ldr	r2, [pc, #100]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003fa8:	1acb      	subs	r3, r1, r3
 8003faa:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003fb0:	3318      	adds	r3, #24
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	88db      	ldrh	r3, [r3, #6]
 8003fb8:	461a      	mov	r2, r3
		if (hndCount >
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	dd09      	ble.n	8003fd4 <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8003fc6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003fc8:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <prvTraceGetObjectHandle+0x154>)
 8003fca:	3318      	adds	r3, #24
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <prvTraceGetObjectHandle+0x150>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <prvTraceGetObjectHandle+0x150>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	bf00      	nop

	return handle;
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20003ca0 	.word	0x20003ca0
 8003ff8:	080057f8 	.word	0x080057f8
 8003ffc:	08006284 	.word	0x08006284
 8004000:	200022dc 	.word	0x200022dc
 8004004:	200022f4 	.word	0x200022f4
 8004008:	20003ca4 	.word	0x20003ca4

0800400c <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e010      	b.n	8004040 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	441a      	add	r2, r3
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	440b      	add	r3, r1
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3ea      	bcc.n	800401e <prvStrncpy+0x12>
			break;
	}
}
 8004048:	e000      	b.n	800404c <prvStrncpy+0x40>
			break;
 800404a:	bf00      	nop
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
	...

08004058 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	603a      	str	r2, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
 8004064:	460b      	mov	r3, r1
 8004066:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <prvTraceSetObjectName+0x1e>
 800406e:	4823      	ldr	r0, [pc, #140]	; (80040fc <prvTraceSetObjectName+0xa4>)
 8004070:	f000 f850 	bl	8004114 <prvTraceError>
 8004074:	e03e      	b.n	80040f4 <prvTraceSetObjectName+0x9c>

	if (objectclass >= TRACE_NCLASSES)
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d903      	bls.n	8004084 <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 800407c:	4820      	ldr	r0, [pc, #128]	; (8004100 <prvTraceSetObjectName+0xa8>)
 800407e:	f000 f849 	bl	8004114 <prvTraceError>
		return;
 8004082:	e037      	b.n	80040f4 <prvTraceSetObjectName+0x9c>
	}

	if (handle == 0)
 8004084:	79bb      	ldrb	r3, [r7, #6]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 800408a:	481e      	ldr	r0, [pc, #120]	; (8004104 <prvTraceSetObjectName+0xac>)
 800408c:	f000 f842 	bl	8004114 <prvTraceError>
		return;
 8004090:	e030      	b.n	80040f4 <prvTraceSetObjectName+0x9c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <prvTraceSetObjectName+0xb0>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4413      	add	r3, r2
 800409a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800409e:	79ba      	ldrb	r2, [r7, #6]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d908      	bls.n	80040b6 <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff f914 	bl	80032d4 <pszTraceGetErrorNotEnoughHandles>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f830 	bl	8004114 <prvTraceError>
 80040b4:	e01e      	b.n	80040f4 <prvTraceSetObjectName+0x9c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80040b6:	79fa      	ldrb	r2, [r7, #7]
 80040b8:	79bb      	ldrb	r3, [r7, #6]
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fe9f 	bl	8003e00 <uiIndexOfObject>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <prvTraceSetObjectName+0xb4>)
 80040c8:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <prvTraceSetObjectName+0xb8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d110      	bne.n	80040f4 <prvTraceSetObjectName+0x9c>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80040d2:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <prvTraceSetObjectName+0xb0>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <prvTraceSetObjectName+0xb4>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	3398      	adds	r3, #152	; 0x98
 80040dc:	4413      	add	r3, r2
 80040de:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <prvTraceSetObjectName+0xb0>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	4413      	add	r3, r2
 80040e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80040ec:	461a      	mov	r2, r3
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	f7ff ff8c 	bl	800400c <prvStrncpy>
		}
	}
}
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	08006388 	.word	0x08006388
 8004100:	080063bc 	.word	0x080063bc
 8004104:	080063ec 	.word	0x080063ec
 8004108:	20003ca0 	.word	0x20003ca0
 800410c:	20003ca8 	.word	0x20003ca8
 8004110:	200022e4 	.word	0x200022e4

08004114 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <prvTraceError+0x50>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <prvTraceError+0x14>
	{
		vTraceStop();
 8004124:	f7ff f9b8 	bl	8003498 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <prvTraceError+0x54>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d115      	bne.n	800415c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8004130:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <prvTraceError+0x54>)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <prvTraceError+0x50>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <prvTraceError+0x50>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004146:	4a08      	ldr	r2, [pc, #32]	; (8004168 <prvTraceError+0x54>)
 8004148:	6811      	ldr	r1, [r2, #0]
 800414a:	2250      	movs	r2, #80	; 0x50
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff5d 	bl	800400c <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <prvTraceError+0x50>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		}
	}
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20003ca0 	.word	0x20003ca0
 8004168:	200022e4 	.word	0x200022e4

0800416c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d172      	bne.n	800426a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
 8004184:	483c      	ldr	r0, [pc, #240]	; (8004278 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8004186:	f7ff ffc5 	bl	8004114 <prvTraceError>
 800418a:	e072      	b.n	8004272 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x106>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 800418c:	4b3b      	ldr	r3, [pc, #236]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8004198:	4b38      	ldr	r3, [pc, #224]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 80041a6:	2b98      	cmp	r3, #152	; 0x98
 80041a8:	d928      	bls.n	80041fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80041aa:	4b34      	ldr	r3, [pc, #208]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80041b8:	2ba7      	cmp	r3, #167	; 0xa7
 80041ba:	d81f      	bhi.n	80041fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 80041bc:	4b2f      	ldr	r3, [pc, #188]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 80041ca:	3368      	adds	r3, #104	; 0x68
 80041cc:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	441a      	add	r2, r3
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d241      	bcs.n	8004262 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 80041de:	4b27      	ldr	r3, [pc, #156]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80041ea:	18d0      	adds	r0, r2, r3
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	3301      	adds	r3, #1
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	461a      	mov	r2, r3
 80041f4:	2100      	movs	r1, #0
 80041f6:	f000 fc9b 	bl	8004b30 <memset>
		{
 80041fa:	e032      	b.n	8004262 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 80041fc:	4b1f      	ldr	r3, [pc, #124]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 800420a:	2b01      	cmp	r3, #1
 800420c:	d12a      	bne.n	8004264 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d20c      	bcs.n	8004236 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xca>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8004228:	4413      	add	r3, r2
 800422a:	2208      	movs	r2, #8
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fc7e 	bl	8004b30 <memset>
 8004234:	e016      	b.n	8004264 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f603 1368 	addw	r3, r3, #2408	; 0x968
 800423e:	2204      	movs	r2, #4
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fc74 	bl	8004b30 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8004254:	4413      	add	r3, r2
 8004256:	2204      	movs	r2, #4
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fc68 	bl	8004b30 <memset>
 8004260:	e000      	b.n	8004264 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
 8004262:	bf00      	nop
			}
		}
		i++;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3301      	adds	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	429a      	cmp	r2, r3
 8004270:	d38c      	bcc.n	800418c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	0800644c 	.word	0x0800644c
 800427c:	20003ca0 	.word	0x20003ca0

08004280 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <prvTraceUpdateCounters+0x4c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01b      	beq.n	80042c6 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <prvTraceUpdateCounters+0x4c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	3201      	adds	r2, #1
 8004296:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <prvTraceUpdateCounters+0x4c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	3201      	adds	r2, #1
 80042a0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <prvTraceUpdateCounters+0x4c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ac:	d307      	bcc.n	80042be <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <prvTraceUpdateCounters+0x4c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2201      	movs	r2, #1
 80042b4:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <prvTraceUpdateCounters+0x4c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 80042be:	2001      	movs	r0, #1
 80042c0:	f7ff ff54 	bl	800416c <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 80042c4:	e000      	b.n	80042c8 <prvTraceUpdateCounters+0x48>
		return;
 80042c6:	bf00      	nop
#endif
}
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20003ca0 	.word	0x20003ca0

080042d0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2bff      	cmp	r3, #255	; 0xff
 80042ea:	d009      	beq.n	8004300 <prvTraceGetDTS+0x30>
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <prvTraceGetDTS+0x30>
 80042f6:	485a      	ldr	r0, [pc, #360]	; (8004460 <prvTraceGetDTS+0x190>)
 80042f8:	f7ff ff0c 	bl	8004114 <prvTraceError>
 80042fc:	2300      	movs	r3, #0
 80042fe:	e0ab      	b.n	8004458 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8004300:	4b58      	ldr	r3, [pc, #352]	; (8004464 <prvTraceGetDTS+0x194>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d116      	bne.n	8004338 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 800430a:	4b57      	ldr	r3, [pc, #348]	; (8004468 <prvTraceGetDTS+0x198>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8004312:	4b55      	ldr	r3, [pc, #340]	; (8004468 <prvTraceGetDTS+0x198>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b53      	ldr	r3, [pc, #332]	; (8004464 <prvTraceGetDTS+0x194>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	0892      	lsrs	r2, r2, #2
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
 800431e:	e00b      	b.n	8004338 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8004320:	4b52      	ldr	r3, [pc, #328]	; (800446c <prvTraceGetDTS+0x19c>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4b52      	ldr	r3, [pc, #328]	; (8004470 <prvTraceGetDTS+0x1a0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d005      	beq.n	8004338 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800432c:	4b51      	ldr	r3, [pc, #324]	; (8004474 <prvTraceGetDTS+0x1a4>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <prvTraceGetDTS+0x194>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0892      	lsrs	r2, r2, #2
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f8d7 	bl	80044f0 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <prvTraceGetDTS+0x1a8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <prvTraceGetDTS+0x1a8>)
 8004350:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8004352:	4b44      	ldr	r3, [pc, #272]	; (8004464 <prvTraceGetDTS+0x194>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d043      	beq.n	80043e4 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 800435c:	4b41      	ldr	r3, [pc, #260]	; (8004464 <prvTraceGetDTS+0x194>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d91d      	bls.n	80043a4 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8004368:	4b3e      	ldr	r3, [pc, #248]	; (8004464 <prvTraceGetDTS+0x194>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800436e:	4b3d      	ldr	r3, [pc, #244]	; (8004464 <prvTraceGetDTS+0x194>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	fbb2 f2f3 	udiv	r2, r2, r3
 800437a:	4b3a      	ldr	r3, [pc, #232]	; (8004464 <prvTraceGetDTS+0x194>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	440a      	add	r2, r1
 8004380:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8004382:	4b38      	ldr	r3, [pc, #224]	; (8004464 <prvTraceGetDTS+0x194>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <prvTraceGetDTS+0x194>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	fbb3 f0f2 	udiv	r0, r3, r2
 8004394:	fb00 f202 	mul.w	r2, r0, r2
 8004398:	1a9a      	subs	r2, r3, r2
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <prvTraceGetDTS+0x194>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	440a      	add	r2, r1
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28
 80043a2:	e007      	b.n	80043b4 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80043a4:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <prvTraceGetDTS+0x194>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80043aa:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <prvTraceGetDTS+0x194>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	440a      	add	r2, r1
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <prvTraceGetDTS+0x194>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <prvTraceGetDTS+0x194>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d313      	bcc.n	80043ec <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <prvTraceGetDTS+0x194>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	3201      	adds	r2, #1
 80043cc:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 80043ce:	4b25      	ldr	r3, [pc, #148]	; (8004464 <prvTraceGetDTS+0x194>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <prvTraceGetDTS+0x194>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043da:	4b22      	ldr	r3, [pc, #136]	; (8004464 <prvTraceGetDTS+0x194>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	1a8a      	subs	r2, r1, r2
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
 80043e2:	e003      	b.n	80043ec <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 80043e4:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <prvTraceGetDTS+0x194>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d92c      	bls.n	800444e <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 80043f4:	f7ff fce0 	bl	8003db8 <prvTraceNextFreeEventBufferSlot>
 80043f8:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d026      	beq.n	800444e <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004406:	4293      	cmp	r3, r2
 8004408:	d10b      	bne.n	8004422 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	22a9      	movs	r2, #169	; 0xa9
 800440e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	b29a      	uxth	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	705a      	strb	r2, [r3, #1]
 8004420:	e013      	b.n	800444a <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2bff      	cmp	r3, #255	; 0xff
 8004426:	d10d      	bne.n	8004444 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	22a8      	movs	r2, #168	; 0xa8
 800442c:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	b29a      	uxth	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	0e1b      	lsrs	r3, r3, #24
 800443c:	b2da      	uxtb	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	705a      	strb	r2, [r3, #1]
 8004442:	e002      	b.n	800444a <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8004444:	480d      	ldr	r0, [pc, #52]	; (800447c <prvTraceGetDTS+0x1ac>)
 8004446:	f7ff fe65 	bl	8004114 <prvTraceError>
			}
			prvTraceUpdateCounters();
 800444a:	f7ff ff19 	bl	8004280 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	b29a      	uxth	r2, r3
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	4013      	ands	r3, r2
 8004456:	b29b      	uxth	r3, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	080064a4 	.word	0x080064a4
 8004464:	20003ca0 	.word	0x20003ca0
 8004468:	200022e0 	.word	0x200022e0
 800446c:	e0001004 	.word	0xe0001004
 8004470:	20002384 	.word	0x20002384
 8004474:	20000014 	.word	0x20000014
 8004478:	20003cac 	.word	0x20003cac
 800447c:	080064e4 	.word	0x080064e4

08004480 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <prvTraceInitCortexM+0x54>)
 8004486:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <prvTraceInitCortexM+0x58>)
 8004488:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <prvTraceInitCortexM+0x5c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <prvTraceInitCortexM+0x5c>)
 8004490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004494:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <prvTraceInitCortexM+0x5c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 800449e:	4810      	ldr	r0, [pc, #64]	; (80044e0 <prvTraceInitCortexM+0x60>)
 80044a0:	f7ff fe38 	bl	8004114 <prvTraceError>
			break;
 80044a4:	e013      	b.n	80044ce <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <prvTraceInitCortexM+0x64>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 80044b2:	480d      	ldr	r0, [pc, #52]	; (80044e8 <prvTraceInitCortexM+0x68>)
 80044b4:	f7ff fe2e 	bl	8004114 <prvTraceError>
			break;
 80044b8:	e009      	b.n	80044ce <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <prvTraceInitCortexM+0x6c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <prvTraceInitCortexM+0x64>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <prvTraceInitCortexM+0x64>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	e0001fb0 	.word	0xe0001fb0
 80044d8:	c5acce55 	.word	0xc5acce55
 80044dc:	e000edfc 	.word	0xe000edfc
 80044e0:	080066d0 	.word	0x080066d0
 80044e4:	e0001000 	.word	0xe0001000
 80044e8:	080066fc 	.word	0x080066fc
 80044ec:	e0001004 	.word	0xe0001004

080044f0 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <prvTracePortGetTimeStamp+0x80>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d028      	beq.n	8004564 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <prvTracePortGetTimeStamp+0x84>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	601a      	str	r2, [r3, #0]
		return;
 800451a:	e023      	b.n	8004564 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <prvTracePortGetTimeStamp+0x88>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8004522:	4b16      	ldr	r3, [pc, #88]	; (800457c <prvTracePortGetTimeStamp+0x8c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	1ad2      	subs	r2, r2, r3
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <prvTracePortGetTimeStamp+0x90>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4413      	add	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <prvTracePortGetTimeStamp+0x90>)
 8004540:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <prvTracePortGetTimeStamp+0x84>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <prvTracePortGetTimeStamp+0x84>)
 800454c:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <prvTracePortGetTimeStamp+0x84>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <prvTracePortGetTimeStamp+0x8c>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e000      	b.n	8004566 <prvTracePortGetTimeStamp+0x76>
		return;
 8004564:	bf00      	nop
}
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	200022d4 	.word	0x200022d4
 8004574:	200022d8 	.word	0x200022d8
 8004578:	e0001004 	.word	0xe0001004
 800457c:	20003cb0 	.word	0x20003cb0
 8004580:	20003cb4 	.word	0x20003cb4

08004584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004584:	b5b0      	push	{r4, r5, r7, lr}
 8004586:	b090      	sub	sp, #64	; 0x40
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	//TODO:creer taches 1, 2 et 3
	//osThreadDef(TASK1, task1Fn, ..., 0, ...);
	//... = osThreadCreate (osThread(TASK1), NULL);
	osThreadDef(TACHE1,task1Fn,osPriorityNormal, 0,configMINIMAL_STACK_SIZE);
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <MX_FREERTOS_Init+0x60>)
 800458c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004590:	461d      	mov	r5, r3
 8004592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	6023      	str	r3, [r4, #0]
	osThreadCreate (osThread(TACHE1), NULL);
 800459a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fd fb6d 	bl	8001c80 <osThreadCreate>
	osThreadDef(TACHE2,task2Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <MX_FREERTOS_Init+0x64>)
 80045a8:	f107 0418 	add.w	r4, r7, #24
 80045ac:	461d      	mov	r5, r3
 80045ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	6023      	str	r3, [r4, #0]
	osThreadCreate (osThread(TACHE2), NULL);
 80045b6:	f107 0318 	add.w	r3, r7, #24
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd fb5f 	bl	8001c80 <osThreadCreate>
	osThreadDef(TACHE3,task3Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <MX_FREERTOS_Init+0x68>)
 80045c4:	1d3c      	adds	r4, r7, #4
 80045c6:	461d      	mov	r5, r3
 80045c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	6023      	str	r3, [r4, #0]
	osThreadCreate (osThread(TACHE3), NULL);
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd fb53 	bl	8001c80 <osThreadCreate>
//nom de la fct sans ()


  /* USER CODE END RTOS_THREADS */

}
 80045da:	bf00      	nop
 80045dc:	3740      	adds	r7, #64	; 0x40
 80045de:	46bd      	mov	sp, r7
 80045e0:	bdb0      	pop	{r4, r5, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	08006740 	.word	0x08006740
 80045e8:	08006754 	.word	0x08006754
 80045ec:	08006768 	.word	0x08006768

080045f0 <task1Fn>:

	}
}*/

void task1Fn(void const * argument)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b092      	sub	sp, #72	; 0x48
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	uint32_t tick_actuelle = xTaskGetTickCount();
 80045f8:	f7fe f810 	bl	800261c <xTaskGetTickCount>
 80045fc:	4603      	mov	r3, r0
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	const uint8_t PER = 300 ;
 8004600:	232c      	movs	r3, #44	; 0x2c
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	uint32_t cycle = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t  tab[50];
	sprintf(tab,"\r\n tick reveil = %ld",tick_actuelle);
 800460a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800460c:	f107 0308 	add.w	r3, r7, #8
 8004610:	4917      	ldr	r1, [pc, #92]	; (8004670 <task1Fn+0x80>)
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb38 	bl	8004c88 <siprintf>
	MESN_UART_PutString_Poll((uint8_t * )tab);
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	4618      	mov	r0, r3
 800461e:	f7fc f809 	bl	8000634 <MESN_UART_PutString_Poll>
	for(;;){
		switch(cycle){
 8004622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004624:	2b02      	cmp	r3, #2
 8004626:	d00f      	beq.n	8004648 <task1Fn+0x58>
 8004628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462a:	2b02      	cmp	r3, #2
 800462c:	d80f      	bhi.n	800464e <task1Fn+0x5e>
 800462e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <task1Fn+0x4c>
 8004634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004636:	2b01      	cmp	r3, #1
 8004638:	d003      	beq.n	8004642 <task1Fn+0x52>
 800463a:	e008      	b.n	800464e <task1Fn+0x5e>
			case 0 :
				MESN_UART_PutString_Poll((uint8_t * )"\r\nTask1 **");
 800463c:	480d      	ldr	r0, [pc, #52]	; (8004674 <task1Fn+0x84>)
 800463e:	f7fb fff9 	bl	8000634 <MESN_UART_PutString_Poll>
			case 1 :
				MESN_UART_PutString_Poll((uint8_t*)"\r\nTask1 ##### ");
 8004642:	480d      	ldr	r0, [pc, #52]	; (8004678 <task1Fn+0x88>)
 8004644:	f7fb fff6 	bl	8000634 <MESN_UART_PutString_Poll>
			case 2 :
				MESN_UART_PutString_Poll((uint8_t *)"\r\nTask1 ###########");
 8004648:	480c      	ldr	r0, [pc, #48]	; (800467c <task1Fn+0x8c>)
 800464a:	f7fb fff3 	bl	8000634 <MESN_UART_PutString_Poll>
		}

	// update cycle

	cycle ++;
 800464e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004650:	3301      	adds	r3, #1
 8004652:	647b      	str	r3, [r7, #68]	; 0x44
	if(cycle == 3) cycle = 0 ;
 8004654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004656:	2b03      	cmp	r3, #3
 8004658:	d101      	bne.n	800465e <task1Fn+0x6e>
 800465a:	2300      	movs	r3, #0
 800465c:	647b      	str	r3, [r7, #68]	; 0x44

	//MESN_UART_PutString_Poll((uint8_t * )tick_actuelle);


	// blocker la tache pendandt 300 ms
	vTaskDelayUntil( &tick_actuelle, PER );
 800465e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8004662:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd fda5 	bl	80021b8 <vTaskDelayUntil>
		switch(cycle){
 800466e:	e7d8      	b.n	8004622 <task1Fn+0x32>
 8004670:	0800677c 	.word	0x0800677c
 8004674:	08006794 	.word	0x08006794
 8004678:	080067a0 	.word	0x080067a0
 800467c:	080067b0 	.word	0x080067b0

08004680 <task2Fn>:



/* task2Fn function */
void task2Fn(void const * argument)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	  /* Infinite loop */
		for(;;){
		// envoi d un message sur l UART
		MESN_UART_PutString_Poll((uint8_t*)"\r\nTask2 :  ");
 8004688:	4803      	ldr	r0, [pc, #12]	; (8004698 <task2Fn+0x18>)
 800468a:	f7fb ffd3 	bl	8000634 <MESN_UART_PutString_Poll>
		//osThreadYield();
		osDelay(100);
 800468e:	2064      	movs	r0, #100	; 0x64
 8004690:	f7fd fb1d 	bl	8001cce <osDelay>
		MESN_UART_PutString_Poll((uint8_t*)"\r\nTask2 :  ");
 8004694:	e7f8      	b.n	8004688 <task2Fn+0x8>
 8004696:	bf00      	nop
 8004698:	080067c4 	.word	0x080067c4

0800469c <task3Fn>:

}

/* task3Fn function */
void task3Fn(void const * argument)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	  /* Infinite loop */
		for(;;){
		// envoi d un message sur l UART
		MESN_UART_PutString_Poll((uint8_t * )"\r\nTask3 :  ");
 80046a4:	4803      	ldr	r0, [pc, #12]	; (80046b4 <task3Fn+0x18>)
 80046a6:	f7fb ffc5 	bl	8000634 <MESN_UART_PutString_Poll>

		osDelay(100);
 80046aa:	2064      	movs	r0, #100	; 0x64
 80046ac:	f7fd fb0f 	bl	8001cce <osDelay>
		MESN_UART_PutString_Poll((uint8_t * )"\r\nTask3 :  ");
 80046b0:	e7f8      	b.n	80046a4 <task3Fn+0x8>
 80046b2:	bf00      	nop
 80046b4:	080067d0 	.word	0x080067d0

080046b8 <vApplicationStackOverflowHook>:
	// une restriction il ne faut surtout pas apeller une fct bloaquante !!!!!!!!!!!!!!!!!!!!!!!!!!
	// ecrire i

}

void vApplicationStackOverflowHook( xTaskHandle xTask , signed char * pcTaskName ) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
 /* Run time stack overflow checking is performed if
7 c o nf i g CH E C K _F O R _S T A C K_ O V ER F L O W is defined to 1 or 2. */

	MESN_UART_PutString_Poll(( uint8_t *) " \r\n ERROR : stack overflow by " );
 80046c2:	4803      	ldr	r0, [pc, #12]	; (80046d0 <vApplicationStackOverflowHook+0x18>)
 80046c4:	f7fb ffb6 	bl	8000634 <MESN_UART_PutString_Poll>
	MESN_UART_PutString_Poll( pcTaskName ) ;
 80046c8:	6838      	ldr	r0, [r7, #0]
 80046ca:	f7fb ffb3 	bl	8000634 <MESN_UART_PutString_Poll>

	while (1) ; // Should replace with a software mcu reset
 80046ce:	e7fe      	b.n	80046ce <vApplicationStackOverflowHook+0x16>
 80046d0:	080067ec 	.word	0x080067ec

080046d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046da:	f107 030c 	add.w	r3, r7, #12
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	609a      	str	r2, [r3, #8]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <MX_GPIO_Init+0x90>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <MX_GPIO_Init+0x90>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	61d3      	str	r3, [r2, #28]
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <MX_GPIO_Init+0x90>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	4b18      	ldr	r3, [pc, #96]	; (8004764 <MX_GPIO_Init+0x90>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <MX_GPIO_Init+0x90>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	61d3      	str	r3, [r2, #28]
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <MX_GPIO_Init+0x90>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	2120      	movs	r1, #32
 800471e:	4812      	ldr	r0, [pc, #72]	; (8004768 <MX_GPIO_Init+0x94>)
 8004720:	f7fc fa9e 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800472a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800472e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	4619      	mov	r1, r3
 800473a:	480c      	ldr	r0, [pc, #48]	; (800476c <MX_GPIO_Init+0x98>)
 800473c:	f7fc f900 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004740:	2320      	movs	r3, #32
 8004742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004744:	2301      	movs	r3, #1
 8004746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004750:	f107 030c 	add.w	r3, r7, #12
 8004754:	4619      	mov	r1, r3
 8004756:	4804      	ldr	r0, [pc, #16]	; (8004768 <MX_GPIO_Init+0x94>)
 8004758:	f7fc f8f2 	bl	8000940 <HAL_GPIO_Init>

}
 800475c:	bf00      	nop
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	40020000 	.word	0x40020000
 800476c:	40020800 	.word	0x40020800

08004770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004774:	f7fb ffd0 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004778:	f000 f812 	bl	80047a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800477c:	f7ff ffaa 	bl	80046d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MESN_UART_Init();
 8004780:	f7fb fe82 	bl	8000488 <MESN_UART_Init>
  /* USER CODE END 2 */
  //init du trace :
  vTraceEnable(TRC_START);
 8004784:	2001      	movs	r0, #1
 8004786:	f7fe fdef 	bl	8003368 <vTraceEnable>
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800478a:	f7ff fefb 	bl	8004584 <MX_FREERTOS_Init>
  //on creer les atche puis on démare les taches
  /* Start scheduler */
  //TODO ...
  MESN_UART_PutString_Poll((uint8_t * )"\r\n start os ");
 800478e:	4803      	ldr	r0, [pc, #12]	; (800479c <main+0x2c>)
 8004790:	f7fb ff50 	bl	8000634 <MESN_UART_PutString_Poll>

 //vTaskStartScheIdleTaskduler();
  osKernelStart();
 8004794:	f7fd fa6d 	bl	8001c72 <osKernelStart>
  //une que os a demmarer il vaut jamais quitter
  // c'est qui fctionne
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004798:	e7fe      	b.n	8004798 <main+0x28>
 800479a:	bf00      	nop
 800479c:	0800680c 	.word	0x0800680c

080047a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b092      	sub	sp, #72	; 0x48
 80047a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	2234      	movs	r2, #52	; 0x34
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f9be 	bl	8004b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047b4:	463b      	mov	r3, r7
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	60da      	str	r2, [r3, #12]
 80047c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <SystemClock_Config+0x88>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80047ca:	4a17      	ldr	r2, [pc, #92]	; (8004828 <SystemClock_Config+0x88>)
 80047cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047d0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047d2:	2302      	movs	r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047d6:	2301      	movs	r3, #1
 80047d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047da:	2310      	movs	r3, #16
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80047de:	2300      	movs	r3, #0
 80047e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e2:	f107 0314 	add.w	r3, r7, #20
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc fa52 	bl	8000c90 <HAL_RCC_OscConfig>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80047f2:	f000 f82d 	bl	8004850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047f6:	230f      	movs	r3, #15
 80047f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80047fa:	2301      	movs	r3, #1
 80047fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800480a:	463b      	mov	r3, r7
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f7fc fd6e 	bl	80012f0 <HAL_RCC_ClockConfig>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800481a:	f000 f819 	bl	8004850 <Error_Handler>
  }
}
 800481e:	bf00      	nop
 8004820:	3748      	adds	r7, #72	; 0x48
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40007000 	.word	0x40007000

0800482c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a04      	ldr	r2, [pc, #16]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800483e:	f7fb ff83 	bl	8000748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40001400 	.word	0x40001400

08004850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004854:	b672      	cpsid	i
}
 8004856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004858:	e7fe      	b.n	8004858 <Error_Handler+0x8>
	...

0800485c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004862:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <HAL_MspInit+0x64>)
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_MspInit+0x64>)
 8004868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800486c:	6253      	str	r3, [r2, #36]	; 0x24
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <HAL_MspInit+0x64>)
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487a:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <HAL_MspInit+0x64>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <HAL_MspInit+0x64>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6213      	str	r3, [r2, #32]
 8004886:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <HAL_MspInit+0x64>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_MspInit+0x64>)
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <HAL_MspInit+0x64>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	6253      	str	r3, [r2, #36]	; 0x24
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_MspInit+0x64>)
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048aa:	2200      	movs	r2, #0
 80048ac:	210f      	movs	r1, #15
 80048ae:	f06f 0001 	mvn.w	r0, #1
 80048b2:	f7fc f81a 	bl	80008ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800

080048c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08e      	sub	sp, #56	; 0x38
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80048da:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <HAL_InitTick+0xe0>)
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	4a31      	ldr	r2, [pc, #196]	; (80049a4 <HAL_InitTick+0xe0>)
 80048e0:	f043 0320 	orr.w	r3, r3, #32
 80048e4:	6253      	str	r3, [r2, #36]	; 0x24
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <HAL_InitTick+0xe0>)
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048f2:	f107 0210 	add.w	r2, r7, #16
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc ff07 	bl	8001710 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fc feec 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8004910:	6378      	str	r0, [r7, #52]	; 0x34
 8004912:	e004      	b.n	800491e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004914:	f7fc fee8 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8004918:	4603      	mov	r3, r0
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <HAL_InitTick+0xe4>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0c9b      	lsrs	r3, r3, #18
 8004928:	3b01      	subs	r3, #1
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_InitTick+0xe8>)
 800492e:	4a20      	ldr	r2, [pc, #128]	; (80049b0 <HAL_InitTick+0xec>)
 8004930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_InitTick+0xe8>)
 8004934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004938:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_InitTick+0xe8>)
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <HAL_InitTick+0xe8>)
 8004942:	2200      	movs	r2, #0
 8004944:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_InitTick+0xe8>)
 8004948:	2200      	movs	r2, #0
 800494a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 800494c:	4817      	ldr	r0, [pc, #92]	; (80049ac <HAL_InitTick+0xe8>)
 800494e:	f7fc ff6f 	bl	8001830 <HAL_TIM_Base_Init>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004958:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11b      	bne.n	8004998 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8004960:	4812      	ldr	r0, [pc, #72]	; (80049ac <HAL_InitTick+0xe8>)
 8004962:	f7fc ffad 	bl	80018c0 <HAL_TIM_Base_Start_IT>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800496c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004970:	2b00      	cmp	r3, #0
 8004972:	d111      	bne.n	8004998 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004974:	202c      	movs	r0, #44	; 0x2c
 8004976:	f7fb ffd4 	bl	8000922 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d808      	bhi.n	8004992 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8004980:	2200      	movs	r2, #0
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	202c      	movs	r0, #44	; 0x2c
 8004986:	f7fb ffb0 	bl	80008ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_InitTick+0xf0>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	e002      	b.n	8004998 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800499c:	4618      	mov	r0, r3
 800499e:	3738      	adds	r7, #56	; 0x38
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	431bde83 	.word	0x431bde83
 80049ac:	20003cb8 	.word	0x20003cb8
 80049b0:	40001400 	.word	0x40001400
 80049b4:	20000000 	.word	0x20000000

080049b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049bc:	e7fe      	b.n	80049bc <NMI_Handler+0x4>

080049be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049be:	b480      	push	{r7}
 80049c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049c2:	e7fe      	b.n	80049c2 <HardFault_Handler+0x4>

080049c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049c8:	e7fe      	b.n	80049c8 <MemManage_Handler+0x4>

080049ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ce:	e7fe      	b.n	80049ce <BusFault_Handler+0x4>

080049d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049d4:	e7fe      	b.n	80049d4 <UsageFault_Handler+0x4>

080049d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
	...

080049e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <TIM7_IRQHandler+0x10>)
 80049ea:	f7fc ffbb 	bl	8001964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20003cb8 	.word	0x20003cb8

080049f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <_sbrk+0x5c>)
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <_sbrk+0x60>)
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <_sbrk+0x64>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <_sbrk+0x64>)
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <_sbrk+0x68>)
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <_sbrk+0x64>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d207      	bcs.n	8004a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a28:	f000 f848 	bl	8004abc <__errno>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	220c      	movs	r2, #12
 8004a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	e009      	b.n	8004a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <_sbrk+0x64>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <_sbrk+0x64>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <_sbrk+0x64>)
 8004a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20014000 	.word	0x20014000
 8004a58:	00000400 	.word	0x00000400
 8004a5c:	20003cf8 	.word	0x20003cf8
 8004a60:	20003d10 	.word	0x20003d10

08004a64 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a70:	480c      	ldr	r0, [pc, #48]	; (8004aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a72:	490d      	ldr	r1, [pc, #52]	; (8004aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a74:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a78:	e002      	b.n	8004a80 <LoopCopyDataInit>

08004a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a7e:	3304      	adds	r3, #4

08004a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a84:	d3f9      	bcc.n	8004a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a88:	4c0a      	ldr	r4, [pc, #40]	; (8004ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a8c:	e001      	b.n	8004a92 <LoopFillZerobss>

08004a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a90:	3204      	adds	r2, #4

08004a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a94:	d3fb      	bcc.n	8004a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a96:	f7ff ffe5 	bl	8004a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a9a:	f000 f815 	bl	8004ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a9e:	f7ff fe67 	bl	8004770 <main>
  bx lr
 8004aa2:	4770      	bx	lr
  ldr r0, =_sdata
 8004aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004aa8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004aac:	080068e4 	.word	0x080068e4
  ldr r2, =_sbss
 8004ab0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004ab4:	20003d0c 	.word	0x20003d0c

08004ab8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ab8:	e7fe      	b.n	8004ab8 <ADC1_IRQHandler>
	...

08004abc <__errno>:
 8004abc:	4b01      	ldr	r3, [pc, #4]	; (8004ac4 <__errno+0x8>)
 8004abe:	6818      	ldr	r0, [r3, #0]
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000018 	.word	0x20000018

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	2600      	movs	r6, #0
 8004acc:	4d0c      	ldr	r5, [pc, #48]	; (8004b00 <__libc_init_array+0x38>)
 8004ace:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <__libc_init_array+0x3c>)
 8004ad0:	1b64      	subs	r4, r4, r5
 8004ad2:	10a4      	asrs	r4, r4, #2
 8004ad4:	42a6      	cmp	r6, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	f000 fc9c 	bl	8005414 <_init>
 8004adc:	2600      	movs	r6, #0
 8004ade:	4d0a      	ldr	r5, [pc, #40]	; (8004b08 <__libc_init_array+0x40>)
 8004ae0:	4c0a      	ldr	r4, [pc, #40]	; (8004b0c <__libc_init_array+0x44>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	42a6      	cmp	r6, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af0:	4798      	blx	r3
 8004af2:	3601      	adds	r6, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afa:	4798      	blx	r3
 8004afc:	3601      	adds	r6, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	080068dc 	.word	0x080068dc
 8004b04:	080068dc 	.word	0x080068dc
 8004b08:	080068dc 	.word	0x080068dc
 8004b0c:	080068e0 	.word	0x080068e0

08004b10 <__retarget_lock_acquire_recursive>:
 8004b10:	4770      	bx	lr

08004b12 <__retarget_lock_release_recursive>:
 8004b12:	4770      	bx	lr

08004b14 <memcpy>:
 8004b14:	440a      	add	r2, r1
 8004b16:	4291      	cmp	r1, r2
 8004b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b1c:	d100      	bne.n	8004b20 <memcpy+0xc>
 8004b1e:	4770      	bx	lr
 8004b20:	b510      	push	{r4, lr}
 8004b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b26:	4291      	cmp	r1, r2
 8004b28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b2c:	d1f9      	bne.n	8004b22 <memcpy+0xe>
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <memset>:
 8004b30:	4603      	mov	r3, r0
 8004b32:	4402      	add	r2, r0
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d100      	bne.n	8004b3a <memset+0xa>
 8004b38:	4770      	bx	lr
 8004b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3e:	e7f9      	b.n	8004b34 <memset+0x4>

08004b40 <sbrk_aligned>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	4e0e      	ldr	r6, [pc, #56]	; (8004b7c <sbrk_aligned+0x3c>)
 8004b44:	460c      	mov	r4, r1
 8004b46:	6831      	ldr	r1, [r6, #0]
 8004b48:	4605      	mov	r5, r0
 8004b4a:	b911      	cbnz	r1, 8004b52 <sbrk_aligned+0x12>
 8004b4c:	f000 f88c 	bl	8004c68 <_sbrk_r>
 8004b50:	6030      	str	r0, [r6, #0]
 8004b52:	4621      	mov	r1, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	f000 f887 	bl	8004c68 <_sbrk_r>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	d00a      	beq.n	8004b74 <sbrk_aligned+0x34>
 8004b5e:	1cc4      	adds	r4, r0, #3
 8004b60:	f024 0403 	bic.w	r4, r4, #3
 8004b64:	42a0      	cmp	r0, r4
 8004b66:	d007      	beq.n	8004b78 <sbrk_aligned+0x38>
 8004b68:	1a21      	subs	r1, r4, r0
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f87c 	bl	8004c68 <_sbrk_r>
 8004b70:	3001      	adds	r0, #1
 8004b72:	d101      	bne.n	8004b78 <sbrk_aligned+0x38>
 8004b74:	f04f 34ff 	mov.w	r4, #4294967295
 8004b78:	4620      	mov	r0, r4
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	20003d04 	.word	0x20003d04

08004b80 <_malloc_r>:
 8004b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b84:	1ccd      	adds	r5, r1, #3
 8004b86:	f025 0503 	bic.w	r5, r5, #3
 8004b8a:	3508      	adds	r5, #8
 8004b8c:	2d0c      	cmp	r5, #12
 8004b8e:	bf38      	it	cc
 8004b90:	250c      	movcc	r5, #12
 8004b92:	2d00      	cmp	r5, #0
 8004b94:	4607      	mov	r7, r0
 8004b96:	db01      	blt.n	8004b9c <_malloc_r+0x1c>
 8004b98:	42a9      	cmp	r1, r5
 8004b9a:	d905      	bls.n	8004ba8 <_malloc_r+0x28>
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba8:	4e2e      	ldr	r6, [pc, #184]	; (8004c64 <_malloc_r+0xe4>)
 8004baa:	f000 f88d 	bl	8004cc8 <__malloc_lock>
 8004bae:	6833      	ldr	r3, [r6, #0]
 8004bb0:	461c      	mov	r4, r3
 8004bb2:	bb34      	cbnz	r4, 8004c02 <_malloc_r+0x82>
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f7ff ffc2 	bl	8004b40 <sbrk_aligned>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	d14d      	bne.n	8004c5e <_malloc_r+0xde>
 8004bc2:	6834      	ldr	r4, [r6, #0]
 8004bc4:	4626      	mov	r6, r4
 8004bc6:	2e00      	cmp	r6, #0
 8004bc8:	d140      	bne.n	8004c4c <_malloc_r+0xcc>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4638      	mov	r0, r7
 8004bd0:	eb04 0803 	add.w	r8, r4, r3
 8004bd4:	f000 f848 	bl	8004c68 <_sbrk_r>
 8004bd8:	4580      	cmp	r8, r0
 8004bda:	d13a      	bne.n	8004c52 <_malloc_r+0xd2>
 8004bdc:	6821      	ldr	r1, [r4, #0]
 8004bde:	3503      	adds	r5, #3
 8004be0:	1a6d      	subs	r5, r5, r1
 8004be2:	f025 0503 	bic.w	r5, r5, #3
 8004be6:	3508      	adds	r5, #8
 8004be8:	2d0c      	cmp	r5, #12
 8004bea:	bf38      	it	cc
 8004bec:	250c      	movcc	r5, #12
 8004bee:	4638      	mov	r0, r7
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	f7ff ffa5 	bl	8004b40 <sbrk_aligned>
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d02b      	beq.n	8004c52 <_malloc_r+0xd2>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	442b      	add	r3, r5
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	e00e      	b.n	8004c20 <_malloc_r+0xa0>
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	1b52      	subs	r2, r2, r5
 8004c06:	d41e      	bmi.n	8004c46 <_malloc_r+0xc6>
 8004c08:	2a0b      	cmp	r2, #11
 8004c0a:	d916      	bls.n	8004c3a <_malloc_r+0xba>
 8004c0c:	1961      	adds	r1, r4, r5
 8004c0e:	42a3      	cmp	r3, r4
 8004c10:	6025      	str	r5, [r4, #0]
 8004c12:	bf18      	it	ne
 8004c14:	6059      	strne	r1, [r3, #4]
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	bf08      	it	eq
 8004c1a:	6031      	streq	r1, [r6, #0]
 8004c1c:	5162      	str	r2, [r4, r5]
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	4638      	mov	r0, r7
 8004c22:	f104 060b 	add.w	r6, r4, #11
 8004c26:	f000 f855 	bl	8004cd4 <__malloc_unlock>
 8004c2a:	f026 0607 	bic.w	r6, r6, #7
 8004c2e:	1d23      	adds	r3, r4, #4
 8004c30:	1af2      	subs	r2, r6, r3
 8004c32:	d0b6      	beq.n	8004ba2 <_malloc_r+0x22>
 8004c34:	1b9b      	subs	r3, r3, r6
 8004c36:	50a3      	str	r3, [r4, r2]
 8004c38:	e7b3      	b.n	8004ba2 <_malloc_r+0x22>
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	bf0c      	ite	eq
 8004c40:	6032      	streq	r2, [r6, #0]
 8004c42:	605a      	strne	r2, [r3, #4]
 8004c44:	e7ec      	b.n	8004c20 <_malloc_r+0xa0>
 8004c46:	4623      	mov	r3, r4
 8004c48:	6864      	ldr	r4, [r4, #4]
 8004c4a:	e7b2      	b.n	8004bb2 <_malloc_r+0x32>
 8004c4c:	4634      	mov	r4, r6
 8004c4e:	6876      	ldr	r6, [r6, #4]
 8004c50:	e7b9      	b.n	8004bc6 <_malloc_r+0x46>
 8004c52:	230c      	movs	r3, #12
 8004c54:	4638      	mov	r0, r7
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	f000 f83c 	bl	8004cd4 <__malloc_unlock>
 8004c5c:	e7a1      	b.n	8004ba2 <_malloc_r+0x22>
 8004c5e:	6025      	str	r5, [r4, #0]
 8004c60:	e7de      	b.n	8004c20 <_malloc_r+0xa0>
 8004c62:	bf00      	nop
 8004c64:	20003d00 	.word	0x20003d00

08004c68 <_sbrk_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4d05      	ldr	r5, [pc, #20]	; (8004c84 <_sbrk_r+0x1c>)
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f7ff fec0 	bl	80049f8 <_sbrk>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_sbrk_r+0x1a>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_sbrk_r+0x1a>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20003d08 	.word	0x20003d08

08004c88 <siprintf>:
 8004c88:	b40e      	push	{r1, r2, r3}
 8004c8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c8e:	b500      	push	{lr}
 8004c90:	b09c      	sub	sp, #112	; 0x70
 8004c92:	ab1d      	add	r3, sp, #116	; 0x74
 8004c94:	9002      	str	r0, [sp, #8]
 8004c96:	9006      	str	r0, [sp, #24]
 8004c98:	9107      	str	r1, [sp, #28]
 8004c9a:	9104      	str	r1, [sp, #16]
 8004c9c:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <siprintf+0x38>)
 8004c9e:	4909      	ldr	r1, [pc, #36]	; (8004cc4 <siprintf+0x3c>)
 8004ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca4:	9105      	str	r1, [sp, #20]
 8004ca6:	6800      	ldr	r0, [r0, #0]
 8004ca8:	a902      	add	r1, sp, #8
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	f000 f8bc 	bl	8004e28 <_svfiprintf_r>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	9b02      	ldr	r3, [sp, #8]
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	b01c      	add	sp, #112	; 0x70
 8004cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cbc:	b003      	add	sp, #12
 8004cbe:	4770      	bx	lr
 8004cc0:	20000018 	.word	0x20000018
 8004cc4:	ffff0208 	.word	0xffff0208

08004cc8 <__malloc_lock>:
 8004cc8:	4801      	ldr	r0, [pc, #4]	; (8004cd0 <__malloc_lock+0x8>)
 8004cca:	f7ff bf21 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 8004cce:	bf00      	nop
 8004cd0:	20003cfc 	.word	0x20003cfc

08004cd4 <__malloc_unlock>:
 8004cd4:	4801      	ldr	r0, [pc, #4]	; (8004cdc <__malloc_unlock+0x8>)
 8004cd6:	f7ff bf1c 	b.w	8004b12 <__retarget_lock_release_recursive>
 8004cda:	bf00      	nop
 8004cdc:	20003cfc 	.word	0x20003cfc

08004ce0 <_free_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	d040      	beq.n	8004d6a <_free_r+0x8a>
 8004ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cec:	1f0c      	subs	r4, r1, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfb8      	it	lt
 8004cf2:	18e4      	addlt	r4, r4, r3
 8004cf4:	f7ff ffe8 	bl	8004cc8 <__malloc_lock>
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <_free_r+0x8c>)
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	b933      	cbnz	r3, 8004d0c <_free_r+0x2c>
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	6014      	str	r4, [r2, #0]
 8004d02:	4628      	mov	r0, r5
 8004d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d08:	f7ff bfe4 	b.w	8004cd4 <__malloc_unlock>
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	d908      	bls.n	8004d22 <_free_r+0x42>
 8004d10:	6820      	ldr	r0, [r4, #0]
 8004d12:	1821      	adds	r1, r4, r0
 8004d14:	428b      	cmp	r3, r1
 8004d16:	bf01      	itttt	eq
 8004d18:	6819      	ldreq	r1, [r3, #0]
 8004d1a:	685b      	ldreq	r3, [r3, #4]
 8004d1c:	1809      	addeq	r1, r1, r0
 8004d1e:	6021      	streq	r1, [r4, #0]
 8004d20:	e7ed      	b.n	8004cfe <_free_r+0x1e>
 8004d22:	461a      	mov	r2, r3
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b10b      	cbz	r3, 8004d2c <_free_r+0x4c>
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d9fa      	bls.n	8004d22 <_free_r+0x42>
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	1850      	adds	r0, r2, r1
 8004d30:	42a0      	cmp	r0, r4
 8004d32:	d10b      	bne.n	8004d4c <_free_r+0x6c>
 8004d34:	6820      	ldr	r0, [r4, #0]
 8004d36:	4401      	add	r1, r0
 8004d38:	1850      	adds	r0, r2, r1
 8004d3a:	4283      	cmp	r3, r0
 8004d3c:	6011      	str	r1, [r2, #0]
 8004d3e:	d1e0      	bne.n	8004d02 <_free_r+0x22>
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4401      	add	r1, r0
 8004d46:	6011      	str	r1, [r2, #0]
 8004d48:	6053      	str	r3, [r2, #4]
 8004d4a:	e7da      	b.n	8004d02 <_free_r+0x22>
 8004d4c:	d902      	bls.n	8004d54 <_free_r+0x74>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	e7d6      	b.n	8004d02 <_free_r+0x22>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	1821      	adds	r1, r4, r0
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf01      	itttt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	1809      	addeq	r1, r1, r0
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6054      	str	r4, [r2, #4]
 8004d68:	e7cb      	b.n	8004d02 <_free_r+0x22>
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	20003d00 	.word	0x20003d00

08004d70 <__ssputs_r>:
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	688e      	ldr	r6, [r1, #8]
 8004d76:	4682      	mov	sl, r0
 8004d78:	429e      	cmp	r6, r3
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4690      	mov	r8, r2
 8004d7e:	461f      	mov	r7, r3
 8004d80:	d838      	bhi.n	8004df4 <__ssputs_r+0x84>
 8004d82:	898a      	ldrh	r2, [r1, #12]
 8004d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d88:	d032      	beq.n	8004df0 <__ssputs_r+0x80>
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	6909      	ldr	r1, [r1, #16]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	eba5 0901 	sub.w	r9, r5, r1
 8004d94:	6965      	ldr	r5, [r4, #20]
 8004d96:	444b      	add	r3, r9
 8004d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004da0:	106d      	asrs	r5, r5, #1
 8004da2:	429d      	cmp	r5, r3
 8004da4:	bf38      	it	cc
 8004da6:	461d      	movcc	r5, r3
 8004da8:	0553      	lsls	r3, r2, #21
 8004daa:	d531      	bpl.n	8004e10 <__ssputs_r+0xa0>
 8004dac:	4629      	mov	r1, r5
 8004dae:	f7ff fee7 	bl	8004b80 <_malloc_r>
 8004db2:	4606      	mov	r6, r0
 8004db4:	b950      	cbnz	r0, 8004dcc <__ssputs_r+0x5c>
 8004db6:	230c      	movs	r3, #12
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	f8ca 3000 	str.w	r3, [sl]
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dcc:	464a      	mov	r2, r9
 8004dce:	6921      	ldr	r1, [r4, #16]
 8004dd0:	f7ff fea0 	bl	8004b14 <memcpy>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	6126      	str	r6, [r4, #16]
 8004de2:	444e      	add	r6, r9
 8004de4:	6026      	str	r6, [r4, #0]
 8004de6:	463e      	mov	r6, r7
 8004de8:	6165      	str	r5, [r4, #20]
 8004dea:	eba5 0509 	sub.w	r5, r5, r9
 8004dee:	60a5      	str	r5, [r4, #8]
 8004df0:	42be      	cmp	r6, r7
 8004df2:	d900      	bls.n	8004df6 <__ssputs_r+0x86>
 8004df4:	463e      	mov	r6, r7
 8004df6:	4632      	mov	r2, r6
 8004df8:	4641      	mov	r1, r8
 8004dfa:	6820      	ldr	r0, [r4, #0]
 8004dfc:	f000 fab8 	bl	8005370 <memmove>
 8004e00:	68a3      	ldr	r3, [r4, #8]
 8004e02:	2000      	movs	r0, #0
 8004e04:	1b9b      	subs	r3, r3, r6
 8004e06:	60a3      	str	r3, [r4, #8]
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	4433      	add	r3, r6
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	e7db      	b.n	8004dc8 <__ssputs_r+0x58>
 8004e10:	462a      	mov	r2, r5
 8004e12:	f000 fac7 	bl	80053a4 <_realloc_r>
 8004e16:	4606      	mov	r6, r0
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d1e1      	bne.n	8004de0 <__ssputs_r+0x70>
 8004e1c:	4650      	mov	r0, sl
 8004e1e:	6921      	ldr	r1, [r4, #16]
 8004e20:	f7ff ff5e 	bl	8004ce0 <_free_r>
 8004e24:	e7c7      	b.n	8004db6 <__ssputs_r+0x46>
	...

08004e28 <_svfiprintf_r>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	4698      	mov	r8, r3
 8004e2e:	898b      	ldrh	r3, [r1, #12]
 8004e30:	4607      	mov	r7, r0
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	460d      	mov	r5, r1
 8004e36:	4614      	mov	r4, r2
 8004e38:	b09d      	sub	sp, #116	; 0x74
 8004e3a:	d50e      	bpl.n	8004e5a <_svfiprintf_r+0x32>
 8004e3c:	690b      	ldr	r3, [r1, #16]
 8004e3e:	b963      	cbnz	r3, 8004e5a <_svfiprintf_r+0x32>
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	f7ff fe9d 	bl	8004b80 <_malloc_r>
 8004e46:	6028      	str	r0, [r5, #0]
 8004e48:	6128      	str	r0, [r5, #16]
 8004e4a:	b920      	cbnz	r0, 8004e56 <_svfiprintf_r+0x2e>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	e0d1      	b.n	8004ffa <_svfiprintf_r+0x1d2>
 8004e56:	2340      	movs	r3, #64	; 0x40
 8004e58:	616b      	str	r3, [r5, #20]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5e:	2320      	movs	r3, #32
 8004e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e64:	2330      	movs	r3, #48	; 0x30
 8004e66:	f04f 0901 	mov.w	r9, #1
 8004e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005014 <_svfiprintf_r+0x1ec>
 8004e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e76:	4623      	mov	r3, r4
 8004e78:	469a      	mov	sl, r3
 8004e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e7e:	b10a      	cbz	r2, 8004e84 <_svfiprintf_r+0x5c>
 8004e80:	2a25      	cmp	r2, #37	; 0x25
 8004e82:	d1f9      	bne.n	8004e78 <_svfiprintf_r+0x50>
 8004e84:	ebba 0b04 	subs.w	fp, sl, r4
 8004e88:	d00b      	beq.n	8004ea2 <_svfiprintf_r+0x7a>
 8004e8a:	465b      	mov	r3, fp
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	4638      	mov	r0, r7
 8004e92:	f7ff ff6d 	bl	8004d70 <__ssputs_r>
 8004e96:	3001      	adds	r0, #1
 8004e98:	f000 80aa 	beq.w	8004ff0 <_svfiprintf_r+0x1c8>
 8004e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e9e:	445a      	add	r2, fp
 8004ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80a2 	beq.w	8004ff0 <_svfiprintf_r+0x1c8>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb6:	f10a 0a01 	add.w	sl, sl, #1
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	9307      	str	r3, [sp, #28]
 8004ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ec4:	4654      	mov	r4, sl
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	4851      	ldr	r0, [pc, #324]	; (8005014 <_svfiprintf_r+0x1ec>)
 8004ece:	f000 fa41 	bl	8005354 <memchr>
 8004ed2:	9a04      	ldr	r2, [sp, #16]
 8004ed4:	b9d8      	cbnz	r0, 8004f0e <_svfiprintf_r+0xe6>
 8004ed6:	06d0      	lsls	r0, r2, #27
 8004ed8:	bf44      	itt	mi
 8004eda:	2320      	movmi	r3, #32
 8004edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee0:	0711      	lsls	r1, r2, #28
 8004ee2:	bf44      	itt	mi
 8004ee4:	232b      	movmi	r3, #43	; 0x2b
 8004ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef0:	d015      	beq.n	8004f1e <_svfiprintf_r+0xf6>
 8004ef2:	4654      	mov	r4, sl
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f04f 0c0a 	mov.w	ip, #10
 8004efa:	9a07      	ldr	r2, [sp, #28]
 8004efc:	4621      	mov	r1, r4
 8004efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f02:	3b30      	subs	r3, #48	; 0x30
 8004f04:	2b09      	cmp	r3, #9
 8004f06:	d94e      	bls.n	8004fa6 <_svfiprintf_r+0x17e>
 8004f08:	b1b0      	cbz	r0, 8004f38 <_svfiprintf_r+0x110>
 8004f0a:	9207      	str	r2, [sp, #28]
 8004f0c:	e014      	b.n	8004f38 <_svfiprintf_r+0x110>
 8004f0e:	eba0 0308 	sub.w	r3, r0, r8
 8004f12:	fa09 f303 	lsl.w	r3, r9, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	46a2      	mov	sl, r4
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	e7d2      	b.n	8004ec4 <_svfiprintf_r+0x9c>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	9103      	str	r1, [sp, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfbb      	ittet	lt
 8004f2a:	425b      	neglt	r3, r3
 8004f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f30:	9307      	strge	r3, [sp, #28]
 8004f32:	9307      	strlt	r3, [sp, #28]
 8004f34:	bfb8      	it	lt
 8004f36:	9204      	strlt	r2, [sp, #16]
 8004f38:	7823      	ldrb	r3, [r4, #0]
 8004f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f3c:	d10c      	bne.n	8004f58 <_svfiprintf_r+0x130>
 8004f3e:	7863      	ldrb	r3, [r4, #1]
 8004f40:	2b2a      	cmp	r3, #42	; 0x2a
 8004f42:	d135      	bne.n	8004fb0 <_svfiprintf_r+0x188>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	3402      	adds	r4, #2
 8004f48:	1d1a      	adds	r2, r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	9203      	str	r2, [sp, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfb8      	it	lt
 8004f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f56:	9305      	str	r3, [sp, #20]
 8004f58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005018 <_svfiprintf_r+0x1f0>
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	4650      	mov	r0, sl
 8004f60:	7821      	ldrb	r1, [r4, #0]
 8004f62:	f000 f9f7 	bl	8005354 <memchr>
 8004f66:	b140      	cbz	r0, 8004f7a <_svfiprintf_r+0x152>
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	eba0 000a 	sub.w	r0, r0, sl
 8004f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	3401      	adds	r4, #1
 8004f76:	4303      	orrs	r3, r0
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7e:	2206      	movs	r2, #6
 8004f80:	4826      	ldr	r0, [pc, #152]	; (800501c <_svfiprintf_r+0x1f4>)
 8004f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f86:	f000 f9e5 	bl	8005354 <memchr>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d038      	beq.n	8005000 <_svfiprintf_r+0x1d8>
 8004f8e:	4b24      	ldr	r3, [pc, #144]	; (8005020 <_svfiprintf_r+0x1f8>)
 8004f90:	bb1b      	cbnz	r3, 8004fda <_svfiprintf_r+0x1b2>
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	3307      	adds	r3, #7
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	9303      	str	r3, [sp, #12]
 8004f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa0:	4433      	add	r3, r6
 8004fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa4:	e767      	b.n	8004e76 <_svfiprintf_r+0x4e>
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	2001      	movs	r0, #1
 8004faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fae:	e7a5      	b.n	8004efc <_svfiprintf_r+0xd4>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f04f 0c0a 	mov.w	ip, #10
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	3401      	adds	r4, #1
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc2:	3a30      	subs	r2, #48	; 0x30
 8004fc4:	2a09      	cmp	r2, #9
 8004fc6:	d903      	bls.n	8004fd0 <_svfiprintf_r+0x1a8>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0c5      	beq.n	8004f58 <_svfiprintf_r+0x130>
 8004fcc:	9105      	str	r1, [sp, #20]
 8004fce:	e7c3      	b.n	8004f58 <_svfiprintf_r+0x130>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fd8:	e7f0      	b.n	8004fbc <_svfiprintf_r+0x194>
 8004fda:	ab03      	add	r3, sp, #12
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	462a      	mov	r2, r5
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <_svfiprintf_r+0x1fc>)
 8004fe4:	a904      	add	r1, sp, #16
 8004fe6:	f3af 8000 	nop.w
 8004fea:	1c42      	adds	r2, r0, #1
 8004fec:	4606      	mov	r6, r0
 8004fee:	d1d6      	bne.n	8004f9e <_svfiprintf_r+0x176>
 8004ff0:	89ab      	ldrh	r3, [r5, #12]
 8004ff2:	065b      	lsls	r3, r3, #25
 8004ff4:	f53f af2c 	bmi.w	8004e50 <_svfiprintf_r+0x28>
 8004ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ffa:	b01d      	add	sp, #116	; 0x74
 8004ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005000:	ab03      	add	r3, sp, #12
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	462a      	mov	r2, r5
 8005006:	4638      	mov	r0, r7
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <_svfiprintf_r+0x1fc>)
 800500a:	a904      	add	r1, sp, #16
 800500c:	f000 f87c 	bl	8005108 <_printf_i>
 8005010:	e7eb      	b.n	8004fea <_svfiprintf_r+0x1c2>
 8005012:	bf00      	nop
 8005014:	080068a0 	.word	0x080068a0
 8005018:	080068a6 	.word	0x080068a6
 800501c:	080068aa 	.word	0x080068aa
 8005020:	00000000 	.word	0x00000000
 8005024:	08004d71 	.word	0x08004d71

08005028 <_printf_common>:
 8005028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800502c:	4616      	mov	r6, r2
 800502e:	4699      	mov	r9, r3
 8005030:	688a      	ldr	r2, [r1, #8]
 8005032:	690b      	ldr	r3, [r1, #16]
 8005034:	4607      	mov	r7, r0
 8005036:	4293      	cmp	r3, r2
 8005038:	bfb8      	it	lt
 800503a:	4613      	movlt	r3, r2
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005042:	460c      	mov	r4, r1
 8005044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005048:	b10a      	cbz	r2, 800504e <_printf_common+0x26>
 800504a:	3301      	adds	r3, #1
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	0699      	lsls	r1, r3, #26
 8005052:	bf42      	ittt	mi
 8005054:	6833      	ldrmi	r3, [r6, #0]
 8005056:	3302      	addmi	r3, #2
 8005058:	6033      	strmi	r3, [r6, #0]
 800505a:	6825      	ldr	r5, [r4, #0]
 800505c:	f015 0506 	ands.w	r5, r5, #6
 8005060:	d106      	bne.n	8005070 <_printf_common+0x48>
 8005062:	f104 0a19 	add.w	sl, r4, #25
 8005066:	68e3      	ldr	r3, [r4, #12]
 8005068:	6832      	ldr	r2, [r6, #0]
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	42ab      	cmp	r3, r5
 800506e:	dc28      	bgt.n	80050c2 <_printf_common+0x9a>
 8005070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005074:	1e13      	subs	r3, r2, #0
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	bf18      	it	ne
 800507a:	2301      	movne	r3, #1
 800507c:	0692      	lsls	r2, r2, #26
 800507e:	d42d      	bmi.n	80050dc <_printf_common+0xb4>
 8005080:	4649      	mov	r1, r9
 8005082:	4638      	mov	r0, r7
 8005084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005088:	47c0      	blx	r8
 800508a:	3001      	adds	r0, #1
 800508c:	d020      	beq.n	80050d0 <_printf_common+0xa8>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	68e5      	ldr	r5, [r4, #12]
 8005092:	f003 0306 	and.w	r3, r3, #6
 8005096:	2b04      	cmp	r3, #4
 8005098:	bf18      	it	ne
 800509a:	2500      	movne	r5, #0
 800509c:	6832      	ldr	r2, [r6, #0]
 800509e:	f04f 0600 	mov.w	r6, #0
 80050a2:	68a3      	ldr	r3, [r4, #8]
 80050a4:	bf08      	it	eq
 80050a6:	1aad      	subeq	r5, r5, r2
 80050a8:	6922      	ldr	r2, [r4, #16]
 80050aa:	bf08      	it	eq
 80050ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b0:	4293      	cmp	r3, r2
 80050b2:	bfc4      	itt	gt
 80050b4:	1a9b      	subgt	r3, r3, r2
 80050b6:	18ed      	addgt	r5, r5, r3
 80050b8:	341a      	adds	r4, #26
 80050ba:	42b5      	cmp	r5, r6
 80050bc:	d11a      	bne.n	80050f4 <_printf_common+0xcc>
 80050be:	2000      	movs	r0, #0
 80050c0:	e008      	b.n	80050d4 <_printf_common+0xac>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4652      	mov	r2, sl
 80050c6:	4649      	mov	r1, r9
 80050c8:	4638      	mov	r0, r7
 80050ca:	47c0      	blx	r8
 80050cc:	3001      	adds	r0, #1
 80050ce:	d103      	bne.n	80050d8 <_printf_common+0xb0>
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d8:	3501      	adds	r5, #1
 80050da:	e7c4      	b.n	8005066 <_printf_common+0x3e>
 80050dc:	2030      	movs	r0, #48	; 0x30
 80050de:	18e1      	adds	r1, r4, r3
 80050e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ea:	4422      	add	r2, r4
 80050ec:	3302      	adds	r3, #2
 80050ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050f2:	e7c5      	b.n	8005080 <_printf_common+0x58>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4622      	mov	r2, r4
 80050f8:	4649      	mov	r1, r9
 80050fa:	4638      	mov	r0, r7
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d0e6      	beq.n	80050d0 <_printf_common+0xa8>
 8005102:	3601      	adds	r6, #1
 8005104:	e7d9      	b.n	80050ba <_printf_common+0x92>
	...

08005108 <_printf_i>:
 8005108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	7e0f      	ldrb	r7, [r1, #24]
 800510e:	4691      	mov	r9, r2
 8005110:	2f78      	cmp	r7, #120	; 0x78
 8005112:	4680      	mov	r8, r0
 8005114:	460c      	mov	r4, r1
 8005116:	469a      	mov	sl, r3
 8005118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800511a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800511e:	d807      	bhi.n	8005130 <_printf_i+0x28>
 8005120:	2f62      	cmp	r7, #98	; 0x62
 8005122:	d80a      	bhi.n	800513a <_printf_i+0x32>
 8005124:	2f00      	cmp	r7, #0
 8005126:	f000 80d9 	beq.w	80052dc <_printf_i+0x1d4>
 800512a:	2f58      	cmp	r7, #88	; 0x58
 800512c:	f000 80a4 	beq.w	8005278 <_printf_i+0x170>
 8005130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005138:	e03a      	b.n	80051b0 <_printf_i+0xa8>
 800513a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800513e:	2b15      	cmp	r3, #21
 8005140:	d8f6      	bhi.n	8005130 <_printf_i+0x28>
 8005142:	a101      	add	r1, pc, #4	; (adr r1, 8005148 <_printf_i+0x40>)
 8005144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005148:	080051a1 	.word	0x080051a1
 800514c:	080051b5 	.word	0x080051b5
 8005150:	08005131 	.word	0x08005131
 8005154:	08005131 	.word	0x08005131
 8005158:	08005131 	.word	0x08005131
 800515c:	08005131 	.word	0x08005131
 8005160:	080051b5 	.word	0x080051b5
 8005164:	08005131 	.word	0x08005131
 8005168:	08005131 	.word	0x08005131
 800516c:	08005131 	.word	0x08005131
 8005170:	08005131 	.word	0x08005131
 8005174:	080052c3 	.word	0x080052c3
 8005178:	080051e5 	.word	0x080051e5
 800517c:	080052a5 	.word	0x080052a5
 8005180:	08005131 	.word	0x08005131
 8005184:	08005131 	.word	0x08005131
 8005188:	080052e5 	.word	0x080052e5
 800518c:	08005131 	.word	0x08005131
 8005190:	080051e5 	.word	0x080051e5
 8005194:	08005131 	.word	0x08005131
 8005198:	08005131 	.word	0x08005131
 800519c:	080052ad 	.word	0x080052ad
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	602a      	str	r2, [r5, #0]
 80051a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0a4      	b.n	80052fe <_printf_i+0x1f6>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	6829      	ldr	r1, [r5, #0]
 80051b8:	0606      	lsls	r6, r0, #24
 80051ba:	f101 0304 	add.w	r3, r1, #4
 80051be:	d50a      	bpl.n	80051d6 <_printf_i+0xce>
 80051c0:	680e      	ldr	r6, [r1, #0]
 80051c2:	602b      	str	r3, [r5, #0]
 80051c4:	2e00      	cmp	r6, #0
 80051c6:	da03      	bge.n	80051d0 <_printf_i+0xc8>
 80051c8:	232d      	movs	r3, #45	; 0x2d
 80051ca:	4276      	negs	r6, r6
 80051cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d0:	230a      	movs	r3, #10
 80051d2:	485e      	ldr	r0, [pc, #376]	; (800534c <_printf_i+0x244>)
 80051d4:	e019      	b.n	800520a <_printf_i+0x102>
 80051d6:	680e      	ldr	r6, [r1, #0]
 80051d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051dc:	602b      	str	r3, [r5, #0]
 80051de:	bf18      	it	ne
 80051e0:	b236      	sxthne	r6, r6
 80051e2:	e7ef      	b.n	80051c4 <_printf_i+0xbc>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	1d19      	adds	r1, r3, #4
 80051ea:	6029      	str	r1, [r5, #0]
 80051ec:	0601      	lsls	r1, r0, #24
 80051ee:	d501      	bpl.n	80051f4 <_printf_i+0xec>
 80051f0:	681e      	ldr	r6, [r3, #0]
 80051f2:	e002      	b.n	80051fa <_printf_i+0xf2>
 80051f4:	0646      	lsls	r6, r0, #25
 80051f6:	d5fb      	bpl.n	80051f0 <_printf_i+0xe8>
 80051f8:	881e      	ldrh	r6, [r3, #0]
 80051fa:	2f6f      	cmp	r7, #111	; 0x6f
 80051fc:	bf0c      	ite	eq
 80051fe:	2308      	moveq	r3, #8
 8005200:	230a      	movne	r3, #10
 8005202:	4852      	ldr	r0, [pc, #328]	; (800534c <_printf_i+0x244>)
 8005204:	2100      	movs	r1, #0
 8005206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800520a:	6865      	ldr	r5, [r4, #4]
 800520c:	2d00      	cmp	r5, #0
 800520e:	bfa8      	it	ge
 8005210:	6821      	ldrge	r1, [r4, #0]
 8005212:	60a5      	str	r5, [r4, #8]
 8005214:	bfa4      	itt	ge
 8005216:	f021 0104 	bicge.w	r1, r1, #4
 800521a:	6021      	strge	r1, [r4, #0]
 800521c:	b90e      	cbnz	r6, 8005222 <_printf_i+0x11a>
 800521e:	2d00      	cmp	r5, #0
 8005220:	d04d      	beq.n	80052be <_printf_i+0x1b6>
 8005222:	4615      	mov	r5, r2
 8005224:	fbb6 f1f3 	udiv	r1, r6, r3
 8005228:	fb03 6711 	mls	r7, r3, r1, r6
 800522c:	5dc7      	ldrb	r7, [r0, r7]
 800522e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005232:	4637      	mov	r7, r6
 8005234:	42bb      	cmp	r3, r7
 8005236:	460e      	mov	r6, r1
 8005238:	d9f4      	bls.n	8005224 <_printf_i+0x11c>
 800523a:	2b08      	cmp	r3, #8
 800523c:	d10b      	bne.n	8005256 <_printf_i+0x14e>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	07de      	lsls	r6, r3, #31
 8005242:	d508      	bpl.n	8005256 <_printf_i+0x14e>
 8005244:	6923      	ldr	r3, [r4, #16]
 8005246:	6861      	ldr	r1, [r4, #4]
 8005248:	4299      	cmp	r1, r3
 800524a:	bfde      	ittt	le
 800524c:	2330      	movle	r3, #48	; 0x30
 800524e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005252:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005256:	1b52      	subs	r2, r2, r5
 8005258:	6122      	str	r2, [r4, #16]
 800525a:	464b      	mov	r3, r9
 800525c:	4621      	mov	r1, r4
 800525e:	4640      	mov	r0, r8
 8005260:	f8cd a000 	str.w	sl, [sp]
 8005264:	aa03      	add	r2, sp, #12
 8005266:	f7ff fedf 	bl	8005028 <_printf_common>
 800526a:	3001      	adds	r0, #1
 800526c:	d14c      	bne.n	8005308 <_printf_i+0x200>
 800526e:	f04f 30ff 	mov.w	r0, #4294967295
 8005272:	b004      	add	sp, #16
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	4834      	ldr	r0, [pc, #208]	; (800534c <_printf_i+0x244>)
 800527a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800527e:	6829      	ldr	r1, [r5, #0]
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f851 6b04 	ldr.w	r6, [r1], #4
 8005286:	6029      	str	r1, [r5, #0]
 8005288:	061d      	lsls	r5, r3, #24
 800528a:	d514      	bpl.n	80052b6 <_printf_i+0x1ae>
 800528c:	07df      	lsls	r7, r3, #31
 800528e:	bf44      	itt	mi
 8005290:	f043 0320 	orrmi.w	r3, r3, #32
 8005294:	6023      	strmi	r3, [r4, #0]
 8005296:	b91e      	cbnz	r6, 80052a0 <_printf_i+0x198>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	f023 0320 	bic.w	r3, r3, #32
 800529e:	6023      	str	r3, [r4, #0]
 80052a0:	2310      	movs	r3, #16
 80052a2:	e7af      	b.n	8005204 <_printf_i+0xfc>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f043 0320 	orr.w	r3, r3, #32
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	2378      	movs	r3, #120	; 0x78
 80052ae:	4828      	ldr	r0, [pc, #160]	; (8005350 <_printf_i+0x248>)
 80052b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052b4:	e7e3      	b.n	800527e <_printf_i+0x176>
 80052b6:	0659      	lsls	r1, r3, #25
 80052b8:	bf48      	it	mi
 80052ba:	b2b6      	uxthmi	r6, r6
 80052bc:	e7e6      	b.n	800528c <_printf_i+0x184>
 80052be:	4615      	mov	r5, r2
 80052c0:	e7bb      	b.n	800523a <_printf_i+0x132>
 80052c2:	682b      	ldr	r3, [r5, #0]
 80052c4:	6826      	ldr	r6, [r4, #0]
 80052c6:	1d18      	adds	r0, r3, #4
 80052c8:	6961      	ldr	r1, [r4, #20]
 80052ca:	6028      	str	r0, [r5, #0]
 80052cc:	0635      	lsls	r5, r6, #24
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	d501      	bpl.n	80052d6 <_printf_i+0x1ce>
 80052d2:	6019      	str	r1, [r3, #0]
 80052d4:	e002      	b.n	80052dc <_printf_i+0x1d4>
 80052d6:	0670      	lsls	r0, r6, #25
 80052d8:	d5fb      	bpl.n	80052d2 <_printf_i+0x1ca>
 80052da:	8019      	strh	r1, [r3, #0]
 80052dc:	2300      	movs	r3, #0
 80052de:	4615      	mov	r5, r2
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	e7ba      	b.n	800525a <_printf_i+0x152>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	2100      	movs	r1, #0
 80052e8:	1d1a      	adds	r2, r3, #4
 80052ea:	602a      	str	r2, [r5, #0]
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	6862      	ldr	r2, [r4, #4]
 80052f0:	4628      	mov	r0, r5
 80052f2:	f000 f82f 	bl	8005354 <memchr>
 80052f6:	b108      	cbz	r0, 80052fc <_printf_i+0x1f4>
 80052f8:	1b40      	subs	r0, r0, r5
 80052fa:	6060      	str	r0, [r4, #4]
 80052fc:	6863      	ldr	r3, [r4, #4]
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	2300      	movs	r3, #0
 8005302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005306:	e7a8      	b.n	800525a <_printf_i+0x152>
 8005308:	462a      	mov	r2, r5
 800530a:	4649      	mov	r1, r9
 800530c:	4640      	mov	r0, r8
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	47d0      	blx	sl
 8005312:	3001      	adds	r0, #1
 8005314:	d0ab      	beq.n	800526e <_printf_i+0x166>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	079b      	lsls	r3, r3, #30
 800531a:	d413      	bmi.n	8005344 <_printf_i+0x23c>
 800531c:	68e0      	ldr	r0, [r4, #12]
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	4298      	cmp	r0, r3
 8005322:	bfb8      	it	lt
 8005324:	4618      	movlt	r0, r3
 8005326:	e7a4      	b.n	8005272 <_printf_i+0x16a>
 8005328:	2301      	movs	r3, #1
 800532a:	4632      	mov	r2, r6
 800532c:	4649      	mov	r1, r9
 800532e:	4640      	mov	r0, r8
 8005330:	47d0      	blx	sl
 8005332:	3001      	adds	r0, #1
 8005334:	d09b      	beq.n	800526e <_printf_i+0x166>
 8005336:	3501      	adds	r5, #1
 8005338:	68e3      	ldr	r3, [r4, #12]
 800533a:	9903      	ldr	r1, [sp, #12]
 800533c:	1a5b      	subs	r3, r3, r1
 800533e:	42ab      	cmp	r3, r5
 8005340:	dcf2      	bgt.n	8005328 <_printf_i+0x220>
 8005342:	e7eb      	b.n	800531c <_printf_i+0x214>
 8005344:	2500      	movs	r5, #0
 8005346:	f104 0619 	add.w	r6, r4, #25
 800534a:	e7f5      	b.n	8005338 <_printf_i+0x230>
 800534c:	080068b1 	.word	0x080068b1
 8005350:	080068c2 	.word	0x080068c2

08005354 <memchr>:
 8005354:	4603      	mov	r3, r0
 8005356:	b510      	push	{r4, lr}
 8005358:	b2c9      	uxtb	r1, r1
 800535a:	4402      	add	r2, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	4618      	mov	r0, r3
 8005360:	d101      	bne.n	8005366 <memchr+0x12>
 8005362:	2000      	movs	r0, #0
 8005364:	e003      	b.n	800536e <memchr+0x1a>
 8005366:	7804      	ldrb	r4, [r0, #0]
 8005368:	3301      	adds	r3, #1
 800536a:	428c      	cmp	r4, r1
 800536c:	d1f6      	bne.n	800535c <memchr+0x8>
 800536e:	bd10      	pop	{r4, pc}

08005370 <memmove>:
 8005370:	4288      	cmp	r0, r1
 8005372:	b510      	push	{r4, lr}
 8005374:	eb01 0402 	add.w	r4, r1, r2
 8005378:	d902      	bls.n	8005380 <memmove+0x10>
 800537a:	4284      	cmp	r4, r0
 800537c:	4623      	mov	r3, r4
 800537e:	d807      	bhi.n	8005390 <memmove+0x20>
 8005380:	1e43      	subs	r3, r0, #1
 8005382:	42a1      	cmp	r1, r4
 8005384:	d008      	beq.n	8005398 <memmove+0x28>
 8005386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800538a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800538e:	e7f8      	b.n	8005382 <memmove+0x12>
 8005390:	4601      	mov	r1, r0
 8005392:	4402      	add	r2, r0
 8005394:	428a      	cmp	r2, r1
 8005396:	d100      	bne.n	800539a <memmove+0x2a>
 8005398:	bd10      	pop	{r4, pc}
 800539a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800539e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053a2:	e7f7      	b.n	8005394 <memmove+0x24>

080053a4 <_realloc_r>:
 80053a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	4680      	mov	r8, r0
 80053aa:	4614      	mov	r4, r2
 80053ac:	460e      	mov	r6, r1
 80053ae:	b921      	cbnz	r1, 80053ba <_realloc_r+0x16>
 80053b0:	4611      	mov	r1, r2
 80053b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053b6:	f7ff bbe3 	b.w	8004b80 <_malloc_r>
 80053ba:	b92a      	cbnz	r2, 80053c8 <_realloc_r+0x24>
 80053bc:	f7ff fc90 	bl	8004ce0 <_free_r>
 80053c0:	4625      	mov	r5, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c8:	f000 f81b 	bl	8005402 <_malloc_usable_size_r>
 80053cc:	4284      	cmp	r4, r0
 80053ce:	4607      	mov	r7, r0
 80053d0:	d802      	bhi.n	80053d8 <_realloc_r+0x34>
 80053d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053d6:	d812      	bhi.n	80053fe <_realloc_r+0x5a>
 80053d8:	4621      	mov	r1, r4
 80053da:	4640      	mov	r0, r8
 80053dc:	f7ff fbd0 	bl	8004b80 <_malloc_r>
 80053e0:	4605      	mov	r5, r0
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d0ed      	beq.n	80053c2 <_realloc_r+0x1e>
 80053e6:	42bc      	cmp	r4, r7
 80053e8:	4622      	mov	r2, r4
 80053ea:	4631      	mov	r1, r6
 80053ec:	bf28      	it	cs
 80053ee:	463a      	movcs	r2, r7
 80053f0:	f7ff fb90 	bl	8004b14 <memcpy>
 80053f4:	4631      	mov	r1, r6
 80053f6:	4640      	mov	r0, r8
 80053f8:	f7ff fc72 	bl	8004ce0 <_free_r>
 80053fc:	e7e1      	b.n	80053c2 <_realloc_r+0x1e>
 80053fe:	4635      	mov	r5, r6
 8005400:	e7df      	b.n	80053c2 <_realloc_r+0x1e>

08005402 <_malloc_usable_size_r>:
 8005402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005406:	1f18      	subs	r0, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	bfbc      	itt	lt
 800540c:	580b      	ldrlt	r3, [r1, r0]
 800540e:	18c0      	addlt	r0, r0, r3
 8005410:	4770      	bx	lr
	...

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
