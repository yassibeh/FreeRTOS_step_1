
TP_3_v2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001448  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c8c  08007c8c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c94  08007c94  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c80  20000084  08007d20  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d04  08007d20  00023d04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001096e  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecc  00000000  00000000  00030a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  000338e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00034990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001995c  00000000  00000000  000358e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f48  00000000  00000000  0004f23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be4e  00000000  00000000  00062184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdfd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000456c  00000000  00000000  000fe024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	0800682c 	.word	0x0800682c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	0800682c 	.word	0x0800682c

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b976 	b.w	8000484 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	4688      	mov	r8, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14d      	bne.n	800025c <__udivmoddi4+0xac>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d968      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c6:	fab2 f282 	clz	r2, r2
 80001ca:	b152      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001cc:	fa01 f302 	lsl.w	r3, r1, r2
 80001d0:	f1c2 0120 	rsb	r1, r2, #32
 80001d4:	fa20 f101 	lsr.w	r1, r0, r1
 80001d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001dc:	ea41 0803 	orr.w	r8, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ea:	fa1f fe8c 	uxth.w	lr, ip
 80001ee:	fb01 8817 	mls	r8, r1, r7, r8
 80001f2:	fb07 f00e 	mul.w	r0, r7, lr
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	eb1c 0303 	adds.w	r3, ip, r3
 8000204:	f107 35ff 	add.w	r5, r7, #4294967295
 8000208:	f080 811e 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020c:	4298      	cmp	r0, r3
 800020e:	f240 811b 	bls.w	8000448 <__udivmoddi4+0x298>
 8000212:	3f02      	subs	r7, #2
 8000214:	4463      	add	r3, ip
 8000216:	1a1b      	subs	r3, r3, r0
 8000218:	fbb3 f0f1 	udiv	r0, r3, r1
 800021c:	fb01 3310 	mls	r3, r1, r0, r3
 8000220:	fb00 fe0e 	mul.w	lr, r0, lr
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	45a6      	cmp	lr, r4
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0404 	adds.w	r4, ip, r4
 8000232:	f100 33ff 	add.w	r3, r0, #4294967295
 8000236:	f080 8109 	bcs.w	800044c <__udivmoddi4+0x29c>
 800023a:	45a6      	cmp	lr, r4
 800023c:	f240 8106 	bls.w	800044c <__udivmoddi4+0x29c>
 8000240:	4464      	add	r4, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	eba4 040e 	sub.w	r4, r4, lr
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	b11e      	cbz	r6, 8000258 <__udivmoddi4+0xa8>
 8000250:	2300      	movs	r3, #0
 8000252:	40d4      	lsrs	r4, r2
 8000254:	e9c6 4300 	strd	r4, r3, [r6]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	428b      	cmp	r3, r1
 800025e:	d908      	bls.n	8000272 <__udivmoddi4+0xc2>
 8000260:	2e00      	cmp	r6, #0
 8000262:	f000 80ee 	beq.w	8000442 <__udivmoddi4+0x292>
 8000266:	2100      	movs	r1, #0
 8000268:	e9c6 0500 	strd	r0, r5, [r6]
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80fc 	bhi.w	800047c <__udivmoddi4+0x2cc>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb65 0303 	sbc.w	r3, r5, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4698      	mov	r8, r3
 800028e:	2e00      	cmp	r6, #0
 8000290:	d0e2      	beq.n	8000258 <__udivmoddi4+0xa8>
 8000292:	e9c6 4800 	strd	r4, r8, [r6]
 8000296:	e7df      	b.n	8000258 <__udivmoddi4+0xa8>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8091 	bne.w	80003c8 <__udivmoddi4+0x218>
 80002a6:	eba1 000c 	sub.w	r0, r1, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b0:	fa1f fe8c 	uxth.w	lr, ip
 80002b4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b8:	fb07 0013 	mls	r0, r7, r3, r0
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0505 	adds.w	r5, ip, r5
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	42a8      	cmp	r0, r5
 80002d6:	f200 80ce 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a2d      	subs	r5, r5, r0
 80002de:	fbb5 f0f7 	udiv	r0, r5, r7
 80002e2:	fb07 5510 	mls	r5, r7, r0, r5
 80002e6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80b6 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 8000304:	4628      	mov	r0, r5
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79e      	b.n	800024e <__udivmoddi4+0x9e>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fbba f8f9 	udiv	r8, sl, r9
 800032a:	fa20 f307 	lsr.w	r3, r0, r7
 800032e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000332:	408d      	lsls	r5, r1
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	431d      	orrs	r5, r3
 800033a:	fa00 f301 	lsl.w	r3, r0, r1
 800033e:	fb08 f00e 	mul.w	r0, r8, lr
 8000342:	0c2c      	lsrs	r4, r5, #16
 8000344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000348:	42a0      	cmp	r0, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	42a0      	cmp	r0, r4
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1a24      	subs	r4, r4, r0
 800036a:	fbb4 f0f9 	udiv	r0, r4, r9
 800036e:	fb09 4410 	mls	r4, r9, r0, r4
 8000372:	fb00 fe0e 	mul.w	lr, r0, lr
 8000376:	b2ad      	uxth	r5, r5
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 35ff 	add.w	r5, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9502 	umull	r9, r5, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	42ac      	cmp	r4, r5
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46ae      	mov	lr, r5
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d069      	beq.n	8000480 <__udivmoddi4+0x2d0>
 80003ac:	ebb3 0208 	subs.w	r2, r3, r8
 80003b0:	eb64 040e 	sbc.w	r4, r4, lr
 80003b4:	fa22 f301 	lsr.w	r3, r2, r1
 80003b8:	fa04 f707 	lsl.w	r7, r4, r7
 80003bc:	431f      	orrs	r7, r3
 80003be:	40cc      	lsrs	r4, r1
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	2100      	movs	r1, #0
 80003c6:	e747      	b.n	8000258 <__udivmoddi4+0xa8>
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	f1c2 0120 	rsb	r1, r2, #32
 80003d0:	fa25 f301 	lsr.w	r3, r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa20 f101 	lsr.w	r1, r0, r1
 80003dc:	4095      	lsls	r5, r2
 80003de:	430d      	orrs	r5, r1
 80003e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e4:	fb07 3311 	mls	r3, r7, r1, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	0c28      	lsrs	r0, r5, #16
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	fb01 f30e 	mul.w	r3, r1, lr
 80003f6:	4283      	cmp	r3, r0
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0000 	adds.w	r0, ip, r0
 8000402:	f101 38ff 	add.w	r8, r1, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	4283      	cmp	r3, r0
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3902      	subs	r1, #2
 800040e:	4460      	add	r0, ip
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	fbb0 f3f7 	udiv	r3, r0, r7
 8000416:	fb07 0013 	mls	r0, r7, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000420:	fb03 f00e 	mul.w	r0, r3, lr
 8000424:	42a8      	cmp	r0, r5
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0505 	adds.w	r5, ip, r5
 800042c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	42a8      	cmp	r0, r5
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3b02      	subs	r3, #2
 8000438:	4465      	add	r5, ip
 800043a:	1a28      	subs	r0, r5, r0
 800043c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	4631      	mov	r1, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e707      	b.n	8000258 <__udivmoddi4+0xa8>
 8000448:	462f      	mov	r7, r5
 800044a:	e6e4      	b.n	8000216 <__udivmoddi4+0x66>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f9      	b.n	8000244 <__udivmoddi4+0x94>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb65 0e0c 	sbc.w	lr, r5, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4643      	mov	r3, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4628      	mov	r0, r5
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4641      	mov	r1, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e747      	b.n	8000306 <__udivmoddi4+0x156>
 8000476:	3b02      	subs	r3, #2
 8000478:	4465      	add	r5, ip
 800047a:	e72f      	b.n	80002dc <__udivmoddi4+0x12c>
 800047c:	4608      	mov	r0, r1
 800047e:	e706      	b.n	800028e <__udivmoddi4+0xde>
 8000480:	4631      	mov	r1, r6
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0xa8>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <MESN_UART_Init>:
  * @brief USART init function
  * @param none
  * @retval None
  */
void MESN_UART_Init()
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t tmpreg = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]

	/* Peripheral clock enable */
	__UART_CLK_ENABLE();
 8000492:	4b61      	ldr	r3, [pc, #388]	; (8000618 <MESN_UART_Init+0x190>)
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	4a60      	ldr	r2, [pc, #384]	; (8000618 <MESN_UART_Init+0x190>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	6253      	str	r3, [r2, #36]	; 0x24
 800049e:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <MESN_UART_Init+0x190>)
 80004a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

	/* UART GPIO Configuration */
	GPIO_InitStruct.Pin = UART_TX_PIN | UART_RX_PIN;
 80004aa:	230c      	movs	r3, #12
 80004ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = UART_GPIO_SPEED;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF_UART;
 80004ba:	2307      	movs	r3, #7
 80004bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(UART_PORT, &GPIO_InitStruct);
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	4855      	ldr	r0, [pc, #340]	; (800061c <MESN_UART_Init+0x194>)
 80004c6:	f000 fa3b 	bl	8000940 <HAL_GPIO_Init>

	/* System interrupt init*/
	HAL_NVIC_SetPriority(UART_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2026      	movs	r0, #38	; 0x26
 80004d0:	f000 fa0b 	bl	80008ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART_IRQn);
 80004d4:	2026      	movs	r0, #38	; 0x26
 80004d6:	f000 fa24 	bl	8000922 <HAL_NVIC_EnableIRQ>

	/* Disable the peripheral */
	UART_INSTANCE->CR1 &=  ~USART_CR1_UE;
 80004da:	4b51      	ldr	r3, [pc, #324]	; (8000620 <MESN_UART_Init+0x198>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a50      	ldr	r2, [pc, #320]	; (8000620 <MESN_UART_Init+0x198>)
 80004e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004e4:	60d3      	str	r3, [r2, #12]

	/*------- UART-associated USART registers setting : CR2 Configuration ------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(UART_INSTANCE->CR2, (0x3U << 12U), (0x00000000U));
 80004e6:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <MESN_UART_Init+0x198>)
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <MESN_UART_Init+0x198>)
 80004ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004f0:	6113      	str	r3, [r2, #16]

	/*------- UART-associated USART registers setting : CR1 Configuration ------*/
	/* Configure the UART Word Length, Parity and mode: */
	tmpreg = (uint32_t)((0x1U << 3U) | (0x1U << 2U));
 80004f2:	230c      	movs	r3, #12
 80004f4:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(UART_INSTANCE->CR1,
 80004f6:	4b4a      	ldr	r3, [pc, #296]	; (8000620 <MESN_UART_Init+0x198>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80004fe:	f023 030c 	bic.w	r3, r3, #12
 8000502:	4947      	ldr	r1, [pc, #284]	; (8000620 <MESN_UART_Init+0x198>)
 8000504:	69fa      	ldr	r2, [r7, #28]
 8000506:	4313      	orrs	r3, r2
 8000508:	60cb      	str	r3, [r1, #12]
						 (uint32_t)((0x1U << 12) | (0x1U << 10) | (0x1U << 9) | (0x1U << 3) | (0x1U << 2) | (0x1U << 15)),
						 tmpreg);

	/*------- UART-associated USART registers setting : CR3 Configuration ------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits */
	MODIFY_REG(UART_INSTANCE->CR3, ((0x1U << 8) | (0x1U << 9)), 0x00000000U);
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <MESN_UART_Init+0x198>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a44      	ldr	r2, [pc, #272]	; (8000620 <MESN_UART_Init+0x198>)
 8000510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000514:	6153      	str	r3, [r2, #20]

	/*---Configure Baudrate BRR register---*/
	UART_INSTANCE->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), 9600);
 8000516:	f001 f8e7 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800051a:	4602      	mov	r2, r0
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	009a      	lsls	r2, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	4a3f      	ldr	r2, [pc, #252]	; (8000624 <MESN_UART_Init+0x19c>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	0d1b      	lsrs	r3, r3, #20
 800052e:	011c      	lsls	r4, r3, #4
 8000530:	f001 f8da 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000534:	4602      	mov	r2, r0
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	009a      	lsls	r2, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	4a39      	ldr	r2, [pc, #228]	; (8000628 <MESN_UART_Init+0x1a0>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0b1d      	lsrs	r5, r3, #12
 8000548:	f001 f8ce 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800054c:	4602      	mov	r2, r0
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	009a      	lsls	r2, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	4a32      	ldr	r2, [pc, #200]	; (8000624 <MESN_UART_Init+0x19c>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0d1b      	lsrs	r3, r3, #20
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	1aeb      	subs	r3, r5, r3
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	3332      	adds	r3, #50	; 0x32
 800056c:	4a2f      	ldr	r2, [pc, #188]	; (800062c <MESN_UART_Init+0x1a4>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000578:	441c      	add	r4, r3
 800057a:	f001 f8b5 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800057e:	4602      	mov	r2, r0
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <MESN_UART_Init+0x1a0>)
 800058c:	fba2 2303 	umull	r2, r3, r2, r3
 8000590:	0b1d      	lsrs	r5, r3, #12
 8000592:	f001 f8a9 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000596:	4602      	mov	r2, r0
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	009a      	lsls	r2, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MESN_UART_Init+0x19c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	0d1b      	lsrs	r3, r3, #20
 80005aa:	2264      	movs	r2, #100	; 0x64
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	1aeb      	subs	r3, r5, r3
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	3332      	adds	r3, #50	; 0x32
 80005b6:	4a1d      	ldr	r2, [pc, #116]	; (800062c <MESN_UART_Init+0x1a4>)
 80005b8:	fba2 2303 	umull	r2, r3, r2, r3
 80005bc:	095b      	lsrs	r3, r3, #5
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MESN_UART_Init+0x198>)
 80005c4:	4423      	add	r3, r4
 80005c6:	6093      	str	r3, [r2, #8]

	/* In asynchronous mode, the following bits must be kept cleared:
	     - LINEN and CLKEN bits in the USART_CR2 register,
	     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(UART_INSTANCE->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MESN_UART_Init+0x198>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <MESN_UART_Init+0x198>)
 80005ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80005d2:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(UART_INSTANCE->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MESN_UART_Init+0x198>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MESN_UART_Init+0x198>)
 80005da:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80005de:	6153      	str	r3, [r2, #20]

	/* Enable the peripheral */
	UART_INSTANCE->CR1 |=  USART_CR1_UE;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MESN_UART_Init+0x198>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <MESN_UART_Init+0x198>)
 80005e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ea:	60d3      	str	r3, [r2, #12]
  
  /* Initialize RX circular buffer and flag */
	uartRxCircBuff.eltNb = 0;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	uartRxCircBuff.indexR = 0;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	uartRxCircBuff.indexW = 0;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		
	/* Enable the UART Data Register not empty Interrupt */
	UART_INSTANCE->CR1 |= USART_CR1_RXNEIE;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MESN_UART_Init+0x198>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <MESN_UART_Init+0x198>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	40004400 	.word	0x40004400
 8000624:	45e7b273 	.word	0x45e7b273
 8000628:	1b4e81b5 	.word	0x1b4e81b5
 800062c:	51eb851f 	.word	0x51eb851f
 8000630:	200000a0 	.word	0x200000a0

08000634 <MESN_UART_PutString_Poll>:
  * @brief uart sending string by polling
  * @param *stringToSend: pointer to the string to be send.
  * @retval none
  */
void MESN_UART_PutString_Poll(uint8_t *stringToSend)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	int32_t i = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

  //Send data
  for (i=0; stringToSend[i] != '\0'; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e009      	b.n	800065a <MESN_UART_PutString_Poll+0x26>
		MESN_PRIV_UART_PutChar_Poll(stringToSend[i] );
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f84c 	bl	80006ec <MESN_PRIV_UART_PutChar_Poll>
  for (i=0; stringToSend[i] != '\0'; i++){
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <MESN_UART_PutString_Poll+0x12>
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MESN_PRIV_UART_IRQHandler>:
/**
  * @brief ISR dedicated to manage RX IRQ
  * @param none
  */
static void MESN_PRIV_UART_IRQHandler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
	uint8_t tmp;

	/* check the source of IRQ */
	// Data received IRQ
	if((UART_INSTANCE->STATUS_REG & RX_NEMTPY_BIT) != 0)
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	2b00      	cmp	r3, #0
 8000680:	d024      	beq.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
	{ 
		//Retrieve received data
		tmp = (uint8_t) UART_INSTANCE->RX_DATA_REG;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	71fb      	strb	r3, [r7, #7]

		// save data in circular buffer if is not full
		if (uartRxCircBuff.eltNb < UART_BUFFERSIZE) {
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800068a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d81c      	bhi.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
			// store data
			uartRxCircBuff.buffer[uartRxCircBuff.indexW] = tmp;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 8000694:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000698:	4910      	ldr	r1, [pc, #64]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	54ca      	strb	r2, [r1, r3]

			// circular buffer processing
			uartRxCircBuff.eltNb++;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
			uartRxCircBuff.indexW++;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			if (uartRxCircBuff.indexW >= UART_BUFFERSIZE)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006c0:	2bff      	cmp	r3, #255	; 0xff
 80006c2:	d903      	bls.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
				uartRxCircBuff.indexW = 0;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
		else {
			// no flow control (hard/soft)
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400
 80006dc:	200000a0 	.word	0x200000a0

080006e0 <USART2_IRQHandler>:
  {
    MESN_PRIV_UART_IRQHandler();
  }
#elif defined(USE_UART2)
  void USART2_IRQHandler(void)
  {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
		MESN_PRIV_UART_IRQHandler();
 80006e4:	f7ff ffc4 	bl	8000670 <MESN_PRIV_UART_IRQHandler>
  }
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MESN_PRIV_UART_PutChar_Poll>:
  * @brief sends 8bits payload through UART by polling
  * @param dataTosend: byte to be send
  * @retval none
  */
static void MESN_PRIV_UART_PutChar_Poll(uint8_t dataToSend)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	// check if transmitter is ready to send
	while((UART_INSTANCE->STATUS_REG & TX_EMPTY_BIT) == 0);
 80006f6:	bf00      	nop
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f9      	beq.n	80006f8 <MESN_PRIV_UART_PutChar_Poll+0xc>
	UART_INSTANCE->TX_DATA_REG = (uint8_t)(dataToSend & 0xFF);
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	6053      	str	r3, [r2, #4]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40004400 	.word	0x40004400

08000718 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000722:	2003      	movs	r0, #3
 8000724:	f000 f8d6 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000728:	200f      	movs	r0, #15
 800072a:	f005 ff7f 	bl	800662c <HAL_InitTick>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	e001      	b.n	800073e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800073a:	f005 ff43 	bl	80065c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800073e:	79fb      	ldrb	r3, [r7, #7]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x1c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x20>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x1c>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200001ac 	.word	0x200001ac
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200001ac 	.word	0x200001ac

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <__NVIC_EnableIRQ+0x34>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff4f 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff64 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ffb2 	bl	8000870 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff81 	bl	800081c <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff57 	bl	80007e4 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000956:	e160      	b.n	8000c1a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 8152 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b01      	cmp	r3, #1
 800097a:	d005      	beq.n	8000988 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000984:	2b02      	cmp	r3, #2
 8000986:	d130      	bne.n	80009ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	f003 0201 	and.w	r2, r3, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d017      	beq.n	8000a26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d123      	bne.n	8000a7a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	691a      	ldr	r2, [r3, #16]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	08da      	lsrs	r2, r3, #3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3208      	adds	r2, #8
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0203 	and.w	r2, r3, #3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80ac 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6213      	str	r3, [r2, #32]
 8000ac8:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ad4:	4a59      	ldr	r2, [pc, #356]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a51      	ldr	r2, [pc, #324]	; (8000c40 <HAL_GPIO_Init+0x300>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d025      	beq.n	8000b4c <HAL_GPIO_Init+0x20c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a50      	ldr	r2, [pc, #320]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d01f      	beq.n	8000b48 <HAL_GPIO_Init+0x208>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_GPIO_Init+0x308>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d019      	beq.n	8000b44 <HAL_GPIO_Init+0x204>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <HAL_GPIO_Init+0x30c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d013      	beq.n	8000b40 <HAL_GPIO_Init+0x200>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1fc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x314>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1f8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4b      	ldr	r2, [pc, #300]	; (8000c58 <HAL_GPIO_Init+0x318>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1f4>
 8000b30:	2306      	movs	r3, #6
 8000b32:	e00c      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b34:	2307      	movs	r3, #7
 8000b36:	e00a      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e008      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b40:	2303      	movs	r3, #3
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b90:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f47f ae97 	bne.w	8000958 <HAL_GPIO_Init+0x18>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	619a      	str	r2, [r3, #24]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e31d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca2:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cac:	4b91      	ldr	r3, [pc, #580]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d07b      	beq.n	8000dba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d006      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2b0c      	cmp	r3, #12
 8000ccc:	d10f      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	d10b      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd6:	4b87      	ldr	r3, [pc, #540]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d06a      	beq.n	8000db8 <HAL_RCC_OscConfig+0x128>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d166      	bne.n	8000db8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e2f7      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d106      	bne.n	8000d04 <HAL_RCC_OscConfig+0x74>
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e02d      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10c      	bne.n	8000d26 <HAL_RCC_OscConfig+0x96>
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a75      	ldr	r2, [pc, #468]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e01c      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0xb8>
 8000d2e:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a70      	ldr	r2, [pc, #448]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a6d      	ldr	r2, [pc, #436]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d48:	4b6a      	ldr	r3, [pc, #424]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a69      	ldr	r2, [pc, #420]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a66      	ldr	r2, [pc, #408]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d013      	beq.n	8000d90 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fd00 	bl	800076c <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fcfc 	bl	800076c <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e2ad      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d8e:	e014      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fcec 	bl	800076c <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fce8 	bl	800076c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e299      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000daa:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x108>
 8000db6:	e000      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d05a      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d005      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b0c      	cmp	r3, #12
 8000dd0:	d119      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d116      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d001      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e276      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	493d      	ldr	r1, [pc, #244]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e04:	e03a      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d020      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcaa 	bl	800076c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fca6 	bl	800076c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e257      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	492a      	ldr	r1, [pc, #168]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e015      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fc89 	bl	800076c <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc85 	bl	800076c <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e236      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b8 	beq.w	8000ffa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d170      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d005      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x218>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e21a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d921      	bls.n	8000efc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc57 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e208      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	061b      	lsls	r3, r3, #24
 8000eec:	4901      	ldr	r1, [pc, #4]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
 8000ef2:	e020      	b.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efc:	4b99      	ldr	r3, [pc, #612]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4996      	ldr	r1, [pc, #600]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0e:	4b95      	ldr	r3, [pc, #596]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	4991      	ldr	r1, [pc, #580]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fc22 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e1d3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	0b5b      	lsrs	r3, r3, #13
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f46:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f48:	6892      	ldr	r2, [r2, #8]
 8000f4a:	0912      	lsrs	r2, r2, #4
 8000f4c:	f002 020f 	and.w	r2, r2, #15
 8000f50:	4985      	ldr	r1, [pc, #532]	; (8001168 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	5c8a      	ldrb	r2, [r1, r2]
 8000f54:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f56:	4a85      	ldr	r2, [pc, #532]	; (800116c <HAL_RCC_OscConfig+0x4dc>)
 8000f58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f5a:	4b85      	ldr	r3, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x4e0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 fb64 	bl	800662c <HAL_InitTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d045      	beq.n	8000ffa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	e1b5      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d029      	beq.n	8000fce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f7a:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fbf4 	bl	800076c <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f88:	f7ff fbf0 	bl	800076c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1a1      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	496c      	ldr	r1, [pc, #432]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb8:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	4967      	ldr	r1, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e015      	b.n	8000ffa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fbca 	bl	800076c <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fbc6 	bl	800076c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e177      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d030      	beq.n	8001068 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d016      	beq.n	800103c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fbaa 	bl	800076c <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fba6 	bl	800076c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e157      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x38c>
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb93 	bl	800076c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fb8f 	bl	800076c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e140      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b5 	beq.w	80011e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6253      	str	r3, [r2, #36]	; 0x24
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb57 	bl	800076c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fb53 	bl	800076c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e104      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x466>
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6353      	str	r3, [r2, #52]	; 0x34
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x488>
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001108:	6353      	str	r3, [r2, #52]	; 0x34
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001114:	6353      	str	r3, [r2, #52]	; 0x34
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x4aa>
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112a:	6353      	str	r3, [r2, #52]	; 0x34
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6353      	str	r3, [r2, #52]	; 0x34
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800114c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001150:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb07 	bl	800076c <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001160:	e019      	b.n	8001196 <HAL_RCC_OscConfig+0x506>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	08007c14 	.word	0x08007c14
 800116c:	2000001c 	.word	0x2000001c
 8001170:	20000000 	.word	0x20000000
 8001174:	42470020 	.word	0x42470020
 8001178:	42470680 	.word	0x42470680
 800117c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff faf4 	bl	800076c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e0a3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001196:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0ee      	beq.n	8001180 <HAL_RCC_OscConfig+0x4f0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fae2 	bl	800076c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fade 	bl	800076c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e08d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ee      	bne.n	80011ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d079      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	d056      	beq.n	800129c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d13b      	bne.n	800126e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fab6 	bl	800076c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fab2 	bl	800076c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e063      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	4319      	orrs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	430b      	orrs	r3, r1
 800123a:	492b      	ldr	r1, [pc, #172]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 800123c:	4313      	orrs	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fa91 	bl	800076c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fa8d 	bl	800076c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03e      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x5be>
 800126c:	e036      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fa7a 	bl	800076c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fa76 	bl	800076c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e027      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x5ec>
 800129a:	e01f      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e01a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470060 	.word	0x42470060

080012f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e11a      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d919      	bls.n	8001346 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_RCC_ClockConfig+0x34>
 8001318:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a89      	ldr	r2, [pc, #548]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b87      	ldr	r3, [pc, #540]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 0201 	bic.w	r2, r3, #1
 800132c:	4985      	ldr	r1, [pc, #532]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0f9      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	497a      	ldr	r1, [pc, #488]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 808e 	beq.w	800148e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800137a:	4b73      	ldr	r3, [pc, #460]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0d7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001392:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0cb      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0bf      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0b7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 0203 	bic.w	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	495c      	ldr	r1, [pc, #368]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff f9c6 	bl	800076c <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ec:	f7ff f9be 	bl	800076c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e09b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d1ee      	bne.n	80013ec <HAL_RCC_ClockConfig+0xfc>
 800140e:	e03e      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d112      	bne.n	800143e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141a:	f7ff f9a7 	bl	800076c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e084      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_ClockConfig+0x12a>
 800143c:	e027      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11d      	bne.n	8001482 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	e00a      	b.n	800145e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff f990 	bl	800076c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e06d      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_ClockConfig+0x158>
 800146a:	e010      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff f97e 	bl	800076c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e05b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ee      	bne.n	800146c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d219      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_ClockConfig+0x1be>
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0201 	bic.w	r2, r3, #1
 80014b6:	4923      	ldr	r1, [pc, #140]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e034      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4917      	ldr	r1, [pc, #92]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490f      	ldr	r1, [pc, #60]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f823 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490b      	ldr	r1, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x25c>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x260>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x264>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f005 f87c 	bl	800662c <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	72fb      	strb	r3, [r7, #11]

  return status;
 8001538:	7afb      	ldrb	r3, [r7, #11]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00
 8001548:	40023800 	.word	0x40023800
 800154c:	08007c14 	.word	0x08007c14
 8001550:	2000001c 	.word	0x2000001c
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b08e      	sub	sp, #56	; 0x38
 800155e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d00d      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x34>
 8001570:	2b0c      	cmp	r3, #12
 8001572:	f200 8092 	bhi.w	800169a <HAL_RCC_GetSysClockFreq+0x142>
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x28>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x2e>
 800157e:	e08c      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x170>)
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001584:	e097      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800158a:	e094      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x178>)
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	0d9b      	lsrs	r3, r3, #22
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d021      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	2200      	movs	r2, #0
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	61fa      	str	r2, [r7, #28]
 80015ba:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015c0:	464a      	mov	r2, r9
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	2300      	movs	r3, #0
 80015c8:	4644      	mov	r4, r8
 80015ca:	fb04 f303 	mul.w	r3, r4, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015d2:	4644      	mov	r4, r8
 80015d4:	fba4 0102 	umull	r0, r1, r4, r2
 80015d8:	440b      	add	r3, r1
 80015da:	4619      	mov	r1, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	617a      	str	r2, [r7, #20]
 80015e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e8:	f7fe fdca 	bl	8000180 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
 80015f4:	e04e      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	2200      	movs	r2, #0
 80015fa:	469a      	mov	sl, r3
 80015fc:	4693      	mov	fp, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	465b      	mov	r3, fp
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	0159      	lsls	r1, r3, #5
 800160c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001610:	0150      	lsls	r0, r2, #5
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	ebb2 080a 	subs.w	r8, r2, sl
 800161a:	eb63 090b 	sbc.w	r9, r3, fp
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800162a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800162e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001632:	ebb2 0408 	subs.w	r4, r2, r8
 8001636:	eb63 0509 	sbc.w	r5, r3, r9
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	00eb      	lsls	r3, r5, #3
 8001644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001648:	00e2      	lsls	r2, r4, #3
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	eb14 030a 	adds.w	r3, r4, sl
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	eb45 030b 	adc.w	r3, r5, fp
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001666:	4629      	mov	r1, r5
 8001668:	028b      	lsls	r3, r1, #10
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	4604      	mov	r4, r0
 8001670:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001674:	4601      	mov	r1, r0
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001688:	f7fe fd7a 	bl	8000180 <__aeabi_uldivmod>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4613      	mov	r3, r2
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001698:	e00d      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0b5b      	lsrs	r3, r3, #13
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	016e3600 	.word	0x016e3600
 80016d0:	08007c08 	.word	0x08007c08

080016d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	2000001c 	.word	0x2000001c

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff2 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	; (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	08007c24 	.word	0x08007c24

08001710 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	220f      	movs	r2, #15
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_GetClockConfig+0x5c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40023800 	.word	0x40023800
 800176c:	40023c00 	.word	0x40023c00

08001770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12c      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e016      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6253      	str	r3, [r2, #36]	; 0x24
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80017c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80017d4:	d105      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80017dc:	d101      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80017de:	2301      	movs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0201 	bic.w	r2, r3, #1
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e031      	b.n	80018a6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f829 	bl	80018ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f000 f978 	bl	8001b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e03a      	b.n	800194e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d00e      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_TIM_Base_Start_IT+0x98>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d009      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_TIM_Base_Start_IT+0x9c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_TIM_Base_Start_IT+0xa0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b06      	cmp	r3, #6
 8001928:	d010      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	e007      	b.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40000400 	.word	0x40000400
 800195c:	40000800 	.word	0x40000800
 8001960:	40010800 	.word	0x40010800

08001964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d122      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d11b      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0202 	mvn.w	r2, #2
 8001990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8c1 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8b4 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8c3 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0204 	mvn.w	r2, #4
 80019e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f897 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f88a 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f899 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0208 	mvn.w	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f86d 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f860 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f86f 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0210 	mvn.w	r2, #16
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2208      	movs	r2, #8
 8001a92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f843 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f836 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f845 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0201 	mvn.w	r2, #1
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f004 fd56 	bl	8006594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b40      	cmp	r3, #64	; 0x40
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f81f 	bl	8001b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d00f      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d017      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00f      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00b      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <TIM_Base_SetConfig+0xd8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <TIM_Base_SetConfig+0xdc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	615a      	str	r2, [r3, #20]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40011000 	.word	0x40011000

08001c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	2b84      	cmp	r3, #132	; 0x84
 8001c58:	d005      	beq.n	8001c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	3303      	adds	r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c78:	f3ef 8305 	mrs	r3, IPSR
 8001c7c:	607b      	str	r3, [r7, #4]
  return(result);
 8001c7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c98:	f001 fd5a 	bl	8003750 <vTaskStartScheduler>
  
  return osOK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8001ca6:	f7ff ffe4 	bl	8001c72 <inHandlerMode>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8001cb0:	f001 fe6c 	bl	800398c <xTaskGetTickCountFromISR>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	e002      	b.n	8001cbe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8001cb8:	f001 fe5a 	bl	8003970 <xTaskGetTickCount>
 8001cbc:	4603      	mov	r3, r0
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc4:	b087      	sub	sp, #28
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685c      	ldr	r4, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cd8:	b29e      	uxth	r6, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ffaf 	bl	8001c44 <makeFreeRtosPriority>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f001 fa57 	bl	80031aa <xTaskCreate>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <osDelay+0x16>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e000      	b.n	8001d28 <osDelay+0x18>
 8001d26:	2301      	movs	r3, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 fca5 	bl	8003678 <vTaskDelay>
  
  return osOK;
 8001d2e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d110      	bne.n	8001d6a <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8001d48:	2203      	movs	r2, #3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f000 f9c3 	bl	80020d8 <xQueueGenericCreate>
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <osSemaphoreCreate+0x2e>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 faa3 	bl	80022ac <xQueueGenericSend>
    return sema;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	e000      	b.n	8001d6c <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8001d6a:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	e03a      	b.n	8001e02 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d96:	d103      	bne.n	8001da0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e009      	b.n	8001db4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <osSemaphoreWait+0x40>
      ticks = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001db4:	f7ff ff5d 	bl	8001c72 <inHandlerMode>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d017      	beq.n	8001dee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 ffbe 	bl	8002d48 <xQueueReceiveFromISR>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001dd2:	23ff      	movs	r3, #255	; 0xff
 8001dd4:	e015      	b.n	8001e02 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d011      	beq.n	8001e00 <osSemaphoreWait+0x8c>
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <osSemaphoreWait+0x98>)
 8001dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	e008      	b.n	8001e00 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fd77 	bl	80028e4 <xQueueSemaphoreTake>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d001      	beq.n	8001e00 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001dfc:	23ff      	movs	r3, #255	; 0xff
 8001dfe:	e000      	b.n	8001e02 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000ed04 	.word	0xe000ed04

08001e10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001e20:	f7ff ff27 	bl	8001c72 <inHandlerMode>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d016      	beq.n	8001e58 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fc49 	bl	80026c8 <xQueueGiveFromISR>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d001      	beq.n	8001e40 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001e3c:	23ff      	movs	r3, #255	; 0xff
 8001e3e:	e017      	b.n	8001e70 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d013      	beq.n	8001e6e <osSemaphoreRelease+0x5e>
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <osSemaphoreRelease+0x68>)
 8001e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f3bf 8f4f 	dsb	sy
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	e00a      	b.n	8001e6e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa24 	bl	80022ac <xQueueGenericSend>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001e6a:	23ff      	movs	r3, #255	; 0xff
 8001e6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	e000ed04 	.word	0xe000ed04

08001e7c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <osDelayUntil+0x18>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	e000      	b.n	8001e96 <osDelayUntil+0x1a>
 8001e94:	2301      	movs	r3, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 fb37 	bl	800350c <vTaskDelayUntil>
  
  return osOK;
 8001e9e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 0208 	add.w	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f103 0208 	add.w	r2, r3, #8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f103 0208 	add.w	r2, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5a:	d103      	bne.n	8001f64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	e00c      	b.n	8001f7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3308      	adds	r3, #8
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e002      	b.n	8001f72 <vListInsert+0x2e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d2f6      	bcs.n	8001f6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6892      	ldr	r2, [r2, #8]
 8001fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6852      	ldr	r2, [r2, #4]
 8001fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d103      	bne.n	8001fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1e5a      	subs	r2, r3, #1
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
	...

08002008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800202e:	bf00      	nop
 8002030:	e7fe      	b.n	8002030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002032:	f002 fbfb 	bl	800482c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	441a      	add	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	3b01      	subs	r3, #1
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	441a      	add	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	22ff      	movs	r2, #255	; 0xff
 8002076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	22ff      	movs	r2, #255	; 0xff
 800207e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d114      	bne.n	80020b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01a      	beq.n	80020c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3310      	adds	r3, #16
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fe11 	bl	8003cbc <xTaskRemoveFromEventList>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <xQueueGenericReset+0xcc>)
 80020a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	e009      	b.n	80020c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3310      	adds	r3, #16
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fef6 	bl	8001ea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3324      	adds	r3, #36	; 0x24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fef1 	bl	8001ea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020c6:	f002 fbe1 	bl	800488c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	e000ed04 	.word	0xe000ed04

080020d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <xQueueGenericCreate+0x2a>
	__asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	613b      	str	r3, [r7, #16]
}
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	e004      	b.n	8002118 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3350      	adds	r3, #80	; 0x50
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fc85 	bl	8004a2c <pvPortMalloc>
 8002122:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	3350      	adds	r3, #80	; 0x50
 800212e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002130:	79fa      	ldrb	r2, [r7, #7]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f821 	bl	8002184 <prvInitialiseNewQueue>
 8002142:	e016      	b.n	8002172 <xQueueGenericCreate+0x9a>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8002144:	f002 fd85 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002148:	4603      	mov	r3, r0
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fd00 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <xQueueGenericCreate+0xa4>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	4013      	ands	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <xQueueGenericCreate+0x9a>
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <xQueueGenericCreate+0xa8>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	3340      	adds	r3, #64	; 0x40
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f9d5 	bl	800551c <prvTraceStoreKernelCallWithNumericParamOnly>
		}

		return pxNewQueue;
 8002172:	69bb      	ldr	r3, [r7, #24]
	}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000018 	.word	0x20000018
 8002180:	2000000c 	.word	0x2000000c

08002184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d103      	bne.n	80021a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	6a3a      	ldr	r2, [r7, #32]
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e002      	b.n	80021a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021b2:	2101      	movs	r1, #1
 80021b4:	6a38      	ldr	r0, [r7, #32]
 80021b6:	f7ff ff27 	bl	8002008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80021c2:	6a38      	ldr	r0, [r7, #32]
 80021c4:	f002 fcab 	bl	8004b1e <prvTraceGetQueueType>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <prvInitialiseNewQueue+0x11c>)
 80021ce:	5c9b      	ldrb	r3, [r3, r2]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fd29 	bl	8005c28 <prvTraceGetObjectHandle>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4619      	mov	r1, r3
 80021dc:	6a38      	ldr	r0, [r7, #32]
 80021de:	f002 fd0c 	bl	8004bfa <prvTraceSetQueueNumberLow16>
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <prvInitialiseNewQueue+0x120>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	6a38      	ldr	r0, [r7, #32]
 80021ea:	f002 fd1c 	bl	8004c26 <prvTraceSetQueueNumberHigh16>
 80021ee:	6a38      	ldr	r0, [r7, #32]
 80021f0:	f002 fc95 	bl	8004b1e <prvTraceGetQueueType>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <prvInitialiseNewQueue+0x11c>)
 80021fa:	5c9c      	ldrb	r4, [r3, r2]
 80021fc:	6a38      	ldr	r0, [r7, #32]
 80021fe:	f002 fce1 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002202:	4603      	mov	r3, r0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4619      	mov	r1, r3
 8002208:	4620      	mov	r0, r4
 800220a:	f003 fdbb 	bl	8005d84 <prvMarkObjectAsUsed>
 800220e:	f002 fd20 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002212:	4603      	mov	r3, r0
 8002214:	4618      	mov	r0, r3
 8002216:	f002 fc9b 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <prvInitialiseNewQueue+0x124>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	4013      	ands	r3, r2
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d025      	beq.n	8002276 <prvInitialiseNewQueue+0xf2>
 800222a:	6a38      	ldr	r0, [r7, #32]
 800222c:	f002 fcd7 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <prvInitialiseNewQueue+0x124>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	4013      	ands	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01a      	beq.n	8002276 <prvInitialiseNewQueue+0xf2>
 8002240:	6a38      	ldr	r0, [r7, #32]
 8002242:	f002 fc6c 	bl	8004b1e <prvTraceGetQueueType>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <prvInitialiseNewQueue+0x11c>)
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	3318      	adds	r3, #24
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461d      	mov	r5, r3
 8002254:	6a38      	ldr	r0, [r7, #32]
 8002256:	f002 fc62 	bl	8004b1e <prvTraceGetQueueType>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <prvInitialiseNewQueue+0x11c>)
 8002260:	5c9c      	ldrb	r4, [r3, r2]
 8002262:	6a38      	ldr	r0, [r7, #32]
 8002264:	f002 fcae 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002268:	4603      	mov	r3, r0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	4621      	mov	r1, r4
 8002270:	4628      	mov	r0, r5
 8002272:	f003 f80f 	bl	8005294 <prvTraceStoreKernelCall>
 8002276:	6a38      	ldr	r0, [r7, #32]
 8002278:	f002 fc51 	bl	8004b1e <prvTraceGetQueueType>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <prvInitialiseNewQueue+0x11c>)
 8002282:	5c9c      	ldrb	r4, [r3, r2]
 8002284:	6a38      	ldr	r0, [r7, #32]
 8002286:	f002 fc9d 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 800228a:	4603      	mov	r3, r0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	f003 fa94 	bl	80057c0 <prvTraceSetObjectState>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	2000001a 	.word	0x2000001a
 80022a8:	20000018 	.word	0x20000018

080022ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <xQueueGenericSend+0x32>
	__asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <xQueueGenericSend+0x40>
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <xQueueGenericSend+0x44>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <xQueueGenericSend+0x46>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <xQueueGenericSend+0x60>
	__asm volatile
 80022f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002308:	bf00      	nop
 800230a:	e7fe      	b.n	800230a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d103      	bne.n	800231a <xQueueGenericSend+0x6e>
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <xQueueGenericSend+0x72>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <xQueueGenericSend+0x74>
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <xQueueGenericSend+0x8e>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	623b      	str	r3, [r7, #32]
}
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800233a:	f001 fe6d 	bl	8004018 <xTaskGetSchedulerState>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <xQueueGenericSend+0x9e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <xQueueGenericSend+0xa2>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <xQueueGenericSend+0xa4>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <xQueueGenericSend+0xbe>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	61fb      	str	r3, [r7, #28]
}
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800236a:	f002 fa5f 	bl	800482c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	429a      	cmp	r2, r3
 8002378:	d303      	bcc.n	8002382 <xQueueGenericSend+0xd6>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b02      	cmp	r3, #2
 800237e:	f040 8084 	bne.w	800248a <xQueueGenericSend+0x1de>
			{
				traceQUEUE_SEND( pxQueue );
 8002382:	f002 fc66 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002386:	4603      	mov	r3, r0
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fbe1 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4ba6      	ldr	r3, [pc, #664]	; (800262c <xQueueGenericSend+0x380>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	4013      	ands	r3, r2
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d02a      	beq.n	80023f4 <xQueueGenericSend+0x148>
 800239e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023a0:	f002 fc1d 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	4ba0      	ldr	r3, [pc, #640]	; (800262c <xQueueGenericSend+0x380>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	4013      	ands	r3, r2
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01f      	beq.n	80023f4 <xQueueGenericSend+0x148>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <xQueueGenericSend+0x124>
 80023ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023bc:	f002 fbaf 	bl	8004b1e <prvTraceGetQueueType>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b9a      	ldr	r3, [pc, #616]	; (8002630 <xQueueGenericSend+0x384>)
 80023c6:	5c9b      	ldrb	r3, [r3, r2]
 80023c8:	3320      	adds	r3, #32
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461d      	mov	r5, r3
 80023ce:	e000      	b.n	80023d2 <xQueueGenericSend+0x126>
 80023d0:	2525      	movs	r5, #37	; 0x25
 80023d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023d4:	f002 fba3 	bl	8004b1e <prvTraceGetQueueType>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b94      	ldr	r3, [pc, #592]	; (8002630 <xQueueGenericSend+0x384>)
 80023de:	5c9c      	ldrb	r4, [r3, r2]
 80023e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023e2:	f002 fbef 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	4621      	mov	r1, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	f002 ff50 	bl	8005294 <prvTraceStoreKernelCall>
 80023f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023f6:	f002 fb92 	bl	8004b1e <prvTraceGetQueueType>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b8c      	ldr	r3, [pc, #560]	; (8002630 <xQueueGenericSend+0x384>)
 8002400:	5c9c      	ldrb	r4, [r3, r2]
 8002402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002404:	f002 fbde 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002408:	4603      	mov	r3, r0
 800240a:	b2dd      	uxtb	r5, r3
 800240c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800240e:	f002 fb86 	bl	8004b1e <prvTraceGetQueueType>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	4b86      	ldr	r3, [pc, #536]	; (8002630 <xQueueGenericSend+0x384>)
 8002418:	5c9b      	ldrb	r3, [r3, r2]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d005      	beq.n	800242a <xQueueGenericSend+0x17e>
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e000      	b.n	800242c <xQueueGenericSend+0x180>
 800242a:	2300      	movs	r3, #0
 800242c:	461a      	mov	r2, r3
 800242e:	4629      	mov	r1, r5
 8002430:	4620      	mov	r0, r4
 8002432:	f003 f9c5 	bl	80057c0 <prvTraceSetObjectState>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800243c:	f000 fda5 	bl	8002f8a <prvCopyDataToQueue>
 8002440:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <xQueueGenericSend+0x1c0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244c:	3324      	adds	r3, #36	; 0x24
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fc34 	bl	8003cbc <xTaskRemoveFromEventList>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d013      	beq.n	8002482 <xQueueGenericSend+0x1d6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <xQueueGenericSend+0x388>)
 800245c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	e00a      	b.n	8002482 <xQueueGenericSend+0x1d6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <xQueueGenericSend+0x1d6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <xQueueGenericSend+0x388>)
 8002474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002482:	f002 fa03 	bl	800488c <vPortExitCritical>
				return pdPASS;
 8002486:	2301      	movs	r3, #1
 8002488:	e115      	b.n	80026b6 <xQueueGenericSend+0x40a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d13c      	bne.n	800250a <xQueueGenericSend+0x25e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002490:	f002 f9fc 	bl	800488c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002494:	f002 fbdd 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002498:	4603      	mov	r3, r0
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fb58 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	4b61      	ldr	r3, [pc, #388]	; (800262c <xQueueGenericSend+0x380>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d02a      	beq.n	8002506 <xQueueGenericSend+0x25a>
 80024b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b2:	f002 fb94 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <xQueueGenericSend+0x380>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	4013      	ands	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01f      	beq.n	8002506 <xQueueGenericSend+0x25a>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <xQueueGenericSend+0x236>
 80024cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ce:	f002 fb26 	bl	8004b1e <prvTraceGetQueueType>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <xQueueGenericSend+0x384>)
 80024d8:	5c9b      	ldrb	r3, [r3, r2]
 80024da:	3348      	adds	r3, #72	; 0x48
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461d      	mov	r5, r3
 80024e0:	e000      	b.n	80024e4 <xQueueGenericSend+0x238>
 80024e2:	254d      	movs	r5, #77	; 0x4d
 80024e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024e6:	f002 fb1a 	bl	8004b1e <prvTraceGetQueueType>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <xQueueGenericSend+0x384>)
 80024f0:	5c9c      	ldrb	r4, [r3, r2]
 80024f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f4:	f002 fb66 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	4621      	mov	r1, r4
 8002500:	4628      	mov	r0, r5
 8002502:	f002 fec7 	bl	8005294 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8002506:	2300      	movs	r3, #0
 8002508:	e0d5      	b.n	80026b6 <xQueueGenericSend+0x40a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <xQueueGenericSend+0x272>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4618      	mov	r0, r3
 8002516:	f001 fc49 	bl	8003dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800251a:	2301      	movs	r3, #1
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800251e:	f002 f9b5 	bl	800488c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002522:	f001 f965 	bl	80037f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002526:	f002 f981 	bl	800482c <vPortEnterCritical>
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002530:	b25b      	sxtb	r3, r3
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d103      	bne.n	8002540 <xQueueGenericSend+0x294>
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002546:	b25b      	sxtb	r3, r3
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d103      	bne.n	8002556 <xQueueGenericSend+0x2aa>
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002556:	f002 f999 	bl	800488c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800255a:	1d3a      	adds	r2, r7, #4
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f001 fc38 	bl	8003dd8 <xTaskCheckForTimeOut>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d164      	bne.n	8002638 <xQueueGenericSend+0x38c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800256e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002570:	f000 fe03 	bl	800317a <prvIsQueueFull>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d051      	beq.n	800261e <xQueueGenericSend+0x372>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800257a:	f002 fb6a 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 800257e:	4603      	mov	r3, r0
 8002580:	4618      	mov	r0, r3
 8002582:	f002 fae5 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	4b28      	ldr	r3, [pc, #160]	; (800262c <xQueueGenericSend+0x380>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	4013      	ands	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d02a      	beq.n	80025ec <xQueueGenericSend+0x340>
 8002596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002598:	f002 fb21 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <xQueueGenericSend+0x380>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	4013      	ands	r3, r2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01f      	beq.n	80025ec <xQueueGenericSend+0x340>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <xQueueGenericSend+0x31c>
 80025b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b4:	f002 fab3 	bl	8004b1e <prvTraceGetQueueType>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <xQueueGenericSend+0x384>)
 80025be:	5c9b      	ldrb	r3, [r3, r2]
 80025c0:	3370      	adds	r3, #112	; 0x70
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461d      	mov	r5, r3
 80025c6:	e000      	b.n	80025ca <xQueueGenericSend+0x31e>
 80025c8:	2575      	movs	r5, #117	; 0x75
 80025ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025cc:	f002 faa7 	bl	8004b1e <prvTraceGetQueueType>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b16      	ldr	r3, [pc, #88]	; (8002630 <xQueueGenericSend+0x384>)
 80025d6:	5c9c      	ldrb	r4, [r3, r2]
 80025d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025da:	f002 faf3 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80025de:	4603      	mov	r3, r0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	4621      	mov	r1, r4
 80025e6:	4628      	mov	r0, r5
 80025e8:	f002 fe54 	bl	8005294 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	3310      	adds	r3, #16
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fb3d 	bl	8003c74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025fc:	f000 fd55 	bl	80030aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002600:	f001 f904 	bl	800380c <xTaskResumeAll>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	f47f aeaf 	bne.w	800236a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <xQueueGenericSend+0x388>)
 800260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	e6a5      	b.n	800236a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800261e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002620:	f000 fd43 	bl	80030aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002624:	f001 f8f2 	bl	800380c <xTaskResumeAll>
 8002628:	e69f      	b.n	800236a <xQueueGenericSend+0xbe>
 800262a:	bf00      	nop
 800262c:	20000018 	.word	0x20000018
 8002630:	2000000c 	.word	0x2000000c
 8002634:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800263a:	f000 fd36 	bl	80030aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800263e:	f001 f8e5 	bl	800380c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002642:	f002 fb06 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	f002 fa81 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <xQueueGenericSend+0x414>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	4013      	ands	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02a      	beq.n	80026b4 <xQueueGenericSend+0x408>
 800265e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002660:	f002 fabd 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <xQueueGenericSend+0x414>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01f      	beq.n	80026b4 <xQueueGenericSend+0x408>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <xQueueGenericSend+0x3e4>
 800267a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800267c:	f002 fa4f 	bl	8004b1e <prvTraceGetQueueType>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <xQueueGenericSend+0x418>)
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	3348      	adds	r3, #72	; 0x48
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461d      	mov	r5, r3
 800268e:	e000      	b.n	8002692 <xQueueGenericSend+0x3e6>
 8002690:	254d      	movs	r5, #77	; 0x4d
 8002692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002694:	f002 fa43 	bl	8004b1e <prvTraceGetQueueType>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <xQueueGenericSend+0x418>)
 800269e:	5c9c      	ldrb	r4, [r3, r2]
 80026a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a2:	f002 fa8f 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	4621      	mov	r1, r4
 80026ae:	4628      	mov	r0, r5
 80026b0:	f002 fdf0 	bl	8005294 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 80026b4:	2300      	movs	r3, #0
		}
	}
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3738      	adds	r7, #56	; 0x38
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bdb0      	pop	{r4, r5, r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000018 	.word	0x20000018
 80026c4:	2000000c 	.word	0x2000000c

080026c8 <xQueueGiveFromISR>:

	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	2200      	movs	r2, #0
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f806 	bl	80026e8 <MyWrapper>
 80026dc:	4603      	mov	r3, r0
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <MyWrapper>:
{
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	b090      	sub	sp, #64	; 0x40
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <MyWrapper+0x2c>
	__asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <MyWrapper+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <MyWrapper+0x4a>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <MyWrapper+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <MyWrapper+0x5a>
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <MyWrapper+0x5e>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <MyWrapper+0x60>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <MyWrapper+0x7a>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	623b      	str	r3, [r7, #32]
}
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <MyWrapper+0x78>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002762:	f002 f925 	bl	80049b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002766:	f3ef 8211 	mrs	r2, BASEPRI
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	61fa      	str	r2, [r7, #28]
 800277c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800277e:	69fb      	ldr	r3, [r7, #28]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	633b      	str	r3, [r7, #48]	; 0x30

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800278e:	429a      	cmp	r2, r3
 8002790:	d26b      	bcs.n	800286a <MyWrapper+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800279c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800279e:	f002 fa1e 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <MyWrapper+0x1f4>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	4013      	ands	r3, r2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01f      	beq.n	80027f2 <MyWrapper+0x10a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <MyWrapper+0xe6>
 80027b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027ba:	f002 f9b0 	bl	8004b1e <prvTraceGetQueueType>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <MyWrapper+0x1f8>)
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	3330      	adds	r3, #48	; 0x30
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461d      	mov	r5, r3
 80027cc:	e000      	b.n	80027d0 <MyWrapper+0xe8>
 80027ce:	2535      	movs	r5, #53	; 0x35
 80027d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027d2:	f002 f9a4 	bl	8004b1e <prvTraceGetQueueType>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <MyWrapper+0x1f8>)
 80027dc:	5c9c      	ldrb	r4, [r3, r2]
 80027de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027e0:	f002 f9f0 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4621      	mov	r1, r4
 80027ec:	4628      	mov	r0, r5
 80027ee:	f002 fd51 	bl	8005294 <prvTraceStoreKernelCall>
 80027f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027f4:	f002 f993 	bl	8004b1e <prvTraceGetQueueType>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <MyWrapper+0x1f8>)
 80027fe:	5c9c      	ldrb	r4, [r3, r2]
 8002800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002802:	f002 f9df 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002806:	4603      	mov	r3, r0
 8002808:	b2d9      	uxtb	r1, r3
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3301      	adds	r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4620      	mov	r0, r4
 8002818:	f002 ffd2 	bl	80057c0 <prvTraceSetObjectState>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002824:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d112      	bne.n	8002854 <MyWrapper+0x16c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <MyWrapper+0x17c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	3324      	adds	r3, #36	; 0x24
 800283a:	4618      	mov	r0, r3
 800283c:	f001 fa3e 	bl	8003cbc <xTaskRemoveFromEventList>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <MyWrapper+0x17c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <MyWrapper+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <MyWrapper+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002858:	3301      	adds	r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	b25a      	sxtb	r2, r3
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002864:	2301      	movs	r3, #1
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002868:	e02c      	b.n	80028c4 <MyWrapper+0x1dc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800286a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800286c:	f002 f9b7 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MyWrapper+0x1f4>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01f      	beq.n	80028c0 <MyWrapper+0x1d8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <MyWrapper+0x1b4>
 8002886:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002888:	f002 f949 	bl	8004b1e <prvTraceGetQueueType>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <MyWrapper+0x1f8>)
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	3358      	adds	r3, #88	; 0x58
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461d      	mov	r5, r3
 800289a:	e000      	b.n	800289e <MyWrapper+0x1b6>
 800289c:	255d      	movs	r5, #93	; 0x5d
 800289e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028a0:	f002 f93d 	bl	8004b1e <prvTraceGetQueueType>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <MyWrapper+0x1f8>)
 80028aa:	5c9c      	ldrb	r4, [r3, r2]
 80028ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028ae:	f002 f989 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80028b2:	4603      	mov	r3, r0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	4621      	mov	r1, r4
 80028ba:	4628      	mov	r0, r5
 80028bc:	f002 fcea 	bl	8005294 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3740      	adds	r7, #64	; 0x40
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bdb0      	pop	{r4, r5, r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000018 	.word	0x20000018
 80028e0:	2000000c 	.word	0x2000000c

080028e4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b08e      	sub	sp, #56	; 0x38
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	623b      	str	r3, [r7, #32]
}
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	61fb      	str	r3, [r7, #28]
}
 8002930:	bf00      	nop
 8002932:	e7fe      	b.n	8002932 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002934:	f001 fb70 	bl	8004018 <xTaskGetSchedulerState>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <xQueueSemaphoreTake+0x60>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <xQueueSemaphoreTake+0x64>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <xQueueSemaphoreTake+0x66>
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	61bb      	str	r3, [r7, #24]
}
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002964:	f001 ff62 	bl	800482c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	633b      	str	r3, [r7, #48]	; 0x30

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8081 	beq.w	8002a78 <xQueueSemaphoreTake+0x194>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8002976:	f002 f96c 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 800297a:	4603      	mov	r3, r0
 800297c:	4618      	mov	r0, r3
 800297e:	f002 f8e7 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <xQueueSemaphoreTake+0x228>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	4013      	ands	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d025      	beq.n	80029de <xQueueSemaphoreTake+0xfa>
 8002992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002994:	f002 f923 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <xQueueSemaphoreTake+0x228>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	4013      	ands	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01a      	beq.n	80029de <xQueueSemaphoreTake+0xfa>
 80029a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029aa:	f002 f8b8 	bl	8004b1e <prvTraceGetQueueType>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <xQueueSemaphoreTake+0x22c>)
 80029b4:	5c9b      	ldrb	r3, [r3, r2]
 80029b6:	3328      	adds	r3, #40	; 0x28
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461d      	mov	r5, r3
 80029bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029be:	f002 f8ae 	bl	8004b1e <prvTraceGetQueueType>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <xQueueSemaphoreTake+0x22c>)
 80029c8:	5c9c      	ldrb	r4, [r3, r2]
 80029ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029cc:	f002 f8fa 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80029d0:	4603      	mov	r3, r0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4621      	mov	r1, r4
 80029d8:	4628      	mov	r0, r5
 80029da:	f002 fc5b 	bl	8005294 <prvTraceStoreKernelCall>
 80029de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e0:	f002 f89d 	bl	8004b1e <prvTraceGetQueueType>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <xQueueSemaphoreTake+0x22c>)
 80029ea:	5c9c      	ldrb	r4, [r3, r2]
 80029ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ee:	f002 f8e9 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 80029f2:	4603      	mov	r3, r0
 80029f4:	b2dd      	uxtb	r5, r3
 80029f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f8:	f002 f891 	bl	8004b1e <prvTraceGetQueueType>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <xQueueSemaphoreTake+0x22c>)
 8002a02:	5c9b      	ldrb	r3, [r3, r2]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d108      	bne.n	8002a1a <xQueueSemaphoreTake+0x136>
 8002a08:	f002 f923 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 f891 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8002a14:	4603      	mov	r3, r0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	e004      	b.n	8002a24 <xQueueSemaphoreTake+0x140>
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4629      	mov	r1, r5
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f002 fec9 	bl	80057c0 <prvTraceSetObjectState>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d104      	bne.n	8002a48 <xQueueSemaphoreTake+0x164>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002a3e:	f001 fd7d 	bl	800453c <pvTaskIncrementMutexHeldCount>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00f      	beq.n	8002a70 <xQueueSemaphoreTake+0x18c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	3310      	adds	r3, #16
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 f931 	bl	8003cbc <xTaskRemoveFromEventList>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <xQueueSemaphoreTake+0x18c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a60:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <xQueueSemaphoreTake+0x230>)
 8002a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a70:	f001 ff0c 	bl	800488c <vPortExitCritical>
				return pdPASS;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e15d      	b.n	8002d34 <xQueueSemaphoreTake+0x450>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d14c      	bne.n	8002b18 <xQueueSemaphoreTake+0x234>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <xQueueSemaphoreTake+0x1b6>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	617b      	str	r3, [r7, #20]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueSemaphoreTake+0x1b4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002a9a:	f001 fef7 	bl	800488c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a9e:	f002 f8d8 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 f853 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <xQueueSemaphoreTake+0x228>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d025      	beq.n	8002b06 <xQueueSemaphoreTake+0x222>
 8002aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002abc:	f002 f88f 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <xQueueSemaphoreTake+0x228>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01a      	beq.n	8002b06 <xQueueSemaphoreTake+0x222>
 8002ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad2:	f002 f824 	bl	8004b1e <prvTraceGetQueueType>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <xQueueSemaphoreTake+0x22c>)
 8002adc:	5c9b      	ldrb	r3, [r3, r2]
 8002ade:	3350      	adds	r3, #80	; 0x50
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae6:	f002 f81a 	bl	8004b1e <prvTraceGetQueueType>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <xQueueSemaphoreTake+0x22c>)
 8002af0:	5c9c      	ldrb	r4, [r3, r2]
 8002af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af4:	f002 f866 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	4621      	mov	r1, r4
 8002b00:	4628      	mov	r0, r5
 8002b02:	f002 fbc7 	bl	8005294 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e114      	b.n	8002d34 <xQueueSemaphoreTake+0x450>
 8002b0a:	bf00      	nop
 8002b0c:	20000018 	.word	0x20000018
 8002b10:	2000000c 	.word	0x2000000c
 8002b14:	e000ed04 	.word	0xe000ed04
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <xQueueSemaphoreTake+0x248>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 f942 	bl	8003dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b2c:	f001 feae 	bl	800488c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b30:	f000 fe5e 	bl	80037f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b34:	f001 fe7a 	bl	800482c <vPortEnterCritical>
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d103      	bne.n	8002b4e <xQueueSemaphoreTake+0x26a>
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d103      	bne.n	8002b64 <xQueueSemaphoreTake+0x280>
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b64:	f001 fe92 	bl	800488c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b68:	463a      	mov	r2, r7
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 f931 	bl	8003dd8 <xTaskCheckForTimeOut>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 8089 	bne.w	8002c90 <xQueueSemaphoreTake+0x3ac>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b80:	f000 fae5 	bl	800314e <prvIsQueueEmpty>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d07c      	beq.n	8002c84 <xQueueSemaphoreTake+0x3a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8002b8a:	f002 f862 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f001 ffdd 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <xQueueSemaphoreTake+0x458>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d025      	beq.n	8002bf2 <xQueueSemaphoreTake+0x30e>
 8002ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba8:	f002 f819 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b62      	ldr	r3, [pc, #392]	; (8002d3c <xQueueSemaphoreTake+0x458>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <xQueueSemaphoreTake+0x30e>
 8002bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bbe:	f001 ffae 	bl	8004b1e <prvTraceGetQueueType>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b5e      	ldr	r3, [pc, #376]	; (8002d40 <xQueueSemaphoreTake+0x45c>)
 8002bc8:	5c9b      	ldrb	r3, [r3, r2]
 8002bca:	3368      	adds	r3, #104	; 0x68
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461d      	mov	r5, r3
 8002bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd2:	f001 ffa4 	bl	8004b1e <prvTraceGetQueueType>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <xQueueSemaphoreTake+0x45c>)
 8002bdc:	5c9c      	ldrb	r4, [r3, r2]
 8002bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002be0:	f001 fff0 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4621      	mov	r1, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f002 fb51 	bl	8005294 <prvTraceStoreKernelCall>
 8002bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf4:	f001 ff93 	bl	8004b1e <prvTraceGetQueueType>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <xQueueSemaphoreTake+0x45c>)
 8002bfe:	5c9b      	ldrb	r3, [r3, r2]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d018      	beq.n	8002c36 <xQueueSemaphoreTake+0x352>
 8002c04:	f002 f825 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 ffa0 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <xQueueSemaphoreTake+0x458>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <xQueueSemaphoreTake+0x352>
 8002c20:	f002 f817 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 ff85 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 fe3d 	bl	80058b0 <prvTraceSetTaskInstanceFinished>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <xQueueSemaphoreTake+0x36e>
					{
						taskENTER_CRITICAL();
 8002c3e:	f001 fdf5 	bl	800482c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 fa04 	bl	8004054 <xTaskPriorityInherit>
 8002c4c:	6278      	str	r0, [r7, #36]	; 0x24
						}
						taskEXIT_CRITICAL();
 8002c4e:	f001 fe1d 	bl	800488c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	3324      	adds	r3, #36	; 0x24
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f80a 	bl	8003c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c62:	f000 fa22 	bl	80030aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c66:	f000 fdd1 	bl	800380c <xTaskResumeAll>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f ae79 	bne.w	8002964 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <xQueueSemaphoreTake+0x460>)
 8002c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	e66f      	b.n	8002964 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c86:	f000 fa10 	bl	80030aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c8a:	f000 fdbf 	bl	800380c <xTaskResumeAll>
 8002c8e:	e669      	b.n	8002964 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c92:	f000 fa0a 	bl	80030aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c96:	f000 fdb9 	bl	800380c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c9c:	f000 fa57 	bl	800314e <prvIsQueueEmpty>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f43f ae5e 	beq.w	8002964 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <xQueueSemaphoreTake+0x3e6>
					{
						taskENTER_CRITICAL();
 8002cae:	f001 fdbd 	bl	800482c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb4:	f000 f952 	bl	8002f5c <prvGetDisinheritPriorityAfterTimeout>
 8002cb8:	6378      	str	r0, [r7, #52]	; 0x34
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fb59 	bl	8004378 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002cc6:	f001 fde1 	bl	800488c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cca:	f001 ffc2 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 ff3d 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <xQueueSemaphoreTake+0x458>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d025      	beq.n	8002d32 <xQueueSemaphoreTake+0x44e>
 8002ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce8:	f001 ff79 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <xQueueSemaphoreTake+0x458>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01a      	beq.n	8002d32 <xQueueSemaphoreTake+0x44e>
 8002cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfe:	f001 ff0e 	bl	8004b1e <prvTraceGetQueueType>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <xQueueSemaphoreTake+0x45c>)
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	3350      	adds	r3, #80	; 0x50
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461d      	mov	r5, r3
 8002d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d12:	f001 ff04 	bl	8004b1e <prvTraceGetQueueType>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <xQueueSemaphoreTake+0x45c>)
 8002d1c:	5c9c      	ldrb	r4, [r3, r2]
 8002d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d20:	f001 ff50 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f002 fab1 	bl	8005294 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8002d32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3738      	adds	r7, #56	; 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3c:	20000018 	.word	0x20000018
 8002d40:	2000000c 	.word	0x2000000c
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b08e      	sub	sp, #56	; 0x38
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	623b      	str	r3, [r7, #32]
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <xQueueReceiveFromISR+0x3a>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <xQueueReceiveFromISR+0x3e>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueReceiveFromISR+0x40>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	61fb      	str	r3, [r7, #28]
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002da2:	f001 fe05 	bl	80049b0 <vPortValidateInterruptPriority>
	__asm volatile
 8002da6:	f3ef 8211 	mrs	r2, BASEPRI
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	61ba      	str	r2, [r7, #24]
 8002dbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002dbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d06a      	beq.n	8002ea4 <xQueueReceiveFromISR+0x15c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8002dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dda:	f001 ff00 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <xQueueReceiveFromISR+0x1c4>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	4013      	ands	r3, r2
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d01a      	beq.n	8002e24 <xQueueReceiveFromISR+0xdc>
 8002dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df0:	f001 fe95 	bl	8004b1e <prvTraceGetQueueType>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <xQueueReceiveFromISR+0x1c8>)
 8002dfa:	5c9b      	ldrb	r3, [r3, r2]
 8002dfc:	3338      	adds	r3, #56	; 0x38
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461d      	mov	r5, r3
 8002e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e04:	f001 fe8b 	bl	8004b1e <prvTraceGetQueueType>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b40      	ldr	r3, [pc, #256]	; (8002f10 <xQueueReceiveFromISR+0x1c8>)
 8002e0e:	5c9c      	ldrb	r4, [r3, r2]
 8002e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e12:	f001 fed7 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002e16:	4603      	mov	r3, r0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f002 fa38 	bl	8005294 <prvTraceStoreKernelCall>
 8002e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e26:	f001 fe7a 	bl	8004b1e <prvTraceGetQueueType>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <xQueueReceiveFromISR+0x1c8>)
 8002e30:	5c9c      	ldrb	r4, [r3, r2]
 8002e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e34:	f001 fec6 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	b2d9      	uxtb	r1, r3
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f002 fcb9 	bl	80057c0 <prvTraceSetObjectState>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e52:	f000 f904 	bl	800305e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	1e5a      	subs	r2, r3, #1
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d112      	bne.n	8002e8e <xQueueReceiveFromISR+0x146>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d016      	beq.n	8002e9e <xQueueReceiveFromISR+0x156>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	3310      	adds	r3, #16
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 ff21 	bl	8003cbc <xTaskRemoveFromEventList>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <xQueueReceiveFromISR+0x156>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <xQueueReceiveFromISR+0x156>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e007      	b.n	8002e9e <xQueueReceiveFromISR+0x156>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e92:	3301      	adds	r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	b25a      	sxtb	r2, r3
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea2:	e027      	b.n	8002ef4 <xQueueReceiveFromISR+0x1ac>
		}
		else
		{
			xReturn = pdFAIL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8002ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eaa:	f001 fe98 	bl	8004bde <prvTraceGetQueueNumberHigh16>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <xQueueReceiveFromISR+0x1c4>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01a      	beq.n	8002ef4 <xQueueReceiveFromISR+0x1ac>
 8002ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec0:	f001 fe2d 	bl	8004b1e <prvTraceGetQueueType>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <xQueueReceiveFromISR+0x1c8>)
 8002eca:	5c9b      	ldrb	r3, [r3, r2]
 8002ecc:	3360      	adds	r3, #96	; 0x60
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed4:	f001 fe23 	bl	8004b1e <prvTraceGetQueueType>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <xQueueReceiveFromISR+0x1c8>)
 8002ede:	5c9c      	ldrb	r4, [r3, r2]
 8002ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ee2:	f001 fe6f 	bl	8004bc4 <prvTraceGetQueueNumberLow16>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	4621      	mov	r1, r4
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f002 f9d0 	bl	8005294 <prvTraceStoreKernelCall>
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f383 8811 	msr	BASEPRI, r3
}
 8002efe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3738      	adds	r7, #56	; 0x38
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000018 	.word	0x20000018
 8002f10:	2000000c 	.word	0x2000000c

08002f14 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1c3 0307 	rsb	r3, r3, #7
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e001      	b.n	8002f7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
	}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d14d      	bne.n	800304c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 f917 	bl	80041e8 <xTaskPriorityDisinherit>
 8002fba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	e043      	b.n	800304c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d119      	bne.n	8002ffe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6898      	ldr	r0, [r3, #8]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	f003 fc13 	bl	8006800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	441a      	add	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d32b      	bcc.n	800304c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	e026      	b.n	800304c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68d8      	ldr	r0, [r3, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	461a      	mov	r2, r3
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	f003 fbf9 	bl	8006800 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	425b      	negs	r3, r3
 8003018:	441a      	add	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d207      	bcs.n	800303a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	425b      	negs	r3, r3
 8003034:	441a      	add	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d105      	bne.n	800304c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3b01      	subs	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003054:	697b      	ldr	r3, [r7, #20]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d018      	beq.n	80030a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d303      	bcc.n	8003092 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68d9      	ldr	r1, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	461a      	mov	r2, r3
 800309c:	6838      	ldr	r0, [r7, #0]
 800309e:	f003 fbaf 	bl	8006800 <memcpy>
	}
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030b2:	f001 fbbb 	bl	800482c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030be:	e011      	b.n	80030e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fdf5 	bl	8003cbc <xTaskRemoveFromEventList>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030d8:	f000 fee0 	bl	8003e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	3b01      	subs	r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dce9      	bgt.n	80030c0 <prvUnlockQueue+0x16>
 80030ec:	e000      	b.n	80030f0 <prvUnlockQueue+0x46>
					break;
 80030ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030f8:	f001 fbc8 	bl	800488c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030fc:	f001 fb96 	bl	800482c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003106:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003108:	e011      	b.n	800312e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3310      	adds	r3, #16
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fdd0 	bl	8003cbc <xTaskRemoveFromEventList>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003122:	f000 febb 	bl	8003e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003126:	7bbb      	ldrb	r3, [r7, #14]
 8003128:	3b01      	subs	r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800312e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003132:	2b00      	cmp	r3, #0
 8003134:	dce9      	bgt.n	800310a <prvUnlockQueue+0x60>
 8003136:	e000      	b.n	800313a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003138:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	22ff      	movs	r2, #255	; 0xff
 800313e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003142:	f001 fba3 	bl	800488c <vPortExitCritical>
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003156:	f001 fb69 	bl	800482c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003162:	2301      	movs	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e001      	b.n	800316c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800316c:	f001 fb8e 	bl	800488c <vPortExitCritical>

	return xReturn;
 8003170:	68fb      	ldr	r3, [r7, #12]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003182:	f001 fb53 	bl	800482c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	429a      	cmp	r2, r3
 8003190:	d102      	bne.n	8003198 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003192:	2301      	movs	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e001      	b.n	800319c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800319c:	f001 fb76 	bl	800488c <vPortExitCritical>

	return xReturn;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b08c      	sub	sp, #48	; 0x30
 80031ae:	af04      	add	r7, sp, #16
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fc34 	bl	8004a2c <pvPortMalloc>
 80031c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031cc:	20bc      	movs	r0, #188	; 0xbc
 80031ce:	f001 fc2d 	bl	8004a2c <pvPortMalloc>
 80031d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
 80031e0:	e005      	b.n	80031ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f001 fc78 	bl	8004ad8 <vPortFree>
 80031e8:	e001      	b.n	80031ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	2300      	movs	r3, #0
 80031f8:	9303      	str	r3, [sp, #12]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	9302      	str	r3, [sp, #8]
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f80e 	bl	800322c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003210:	69f8      	ldr	r0, [r7, #28]
 8003212:	f000 f8a9 	bl	8003368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003216:	2301      	movs	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e002      	b.n	8003222 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003222:	69bb      	ldr	r3, [r7, #24]
	}
 8003224:	4618      	mov	r0, r3
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	461a      	mov	r2, r3
 8003244:	21a5      	movs	r1, #165	; 0xa5
 8003246:	f003 fae9 	bl	800681c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003254:	3b01      	subs	r3, #1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f023 0307 	bic.w	r3, r3, #7
 8003262:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <prvInitialiseNewTask+0x58>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	617b      	str	r3, [r7, #20]
}
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	e012      	b.n	80032b0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	7819      	ldrb	r1, [r3, #0]
 8003292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	3334      	adds	r3, #52	; 0x34
 800329a:	460a      	mov	r2, r1
 800329c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	d9e9      	bls.n	800328a <prvInitialiseNewTask+0x5e>
 80032b6:	e000      	b.n	80032ba <prvInitialiseNewTask+0x8e>
		{
			break;
 80032b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d901      	bls.n	80032cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032c8:	2306      	movs	r3, #6
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	2200      	movs	r2, #0
 80032dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	3304      	adds	r3, #4
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fdff 	bl	8001ee6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	3318      	adds	r3, #24
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fdfa 	bl	8001ee6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	f1c3 0207 	rsb	r2, r3, #7
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	2200      	movs	r2, #0
 800330c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	2200      	movs	r2, #0
 8003314:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	3354      	adds	r3, #84	; 0x54
 800331c:	2260      	movs	r2, #96	; 0x60
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fa7b 	bl	800681c <memset>
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	4a0c      	ldr	r2, [pc, #48]	; (800335c <prvInitialiseNewTask+0x130>)
 800332a:	659a      	str	r2, [r3, #88]	; 0x58
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <prvInitialiseNewTask+0x134>)
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <prvInitialiseNewTask+0x138>)
 8003336:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	69b8      	ldr	r0, [r7, #24]
 800333e:	f001 f977 	bl	8004630 <pxPortInitialiseStack>
 8003342:	4602      	mov	r2, r0
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003352:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003354:	bf00      	nop
 8003356:	3720      	adds	r7, #32
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	08007c4c 	.word	0x08007c4c
 8003360:	08007c6c 	.word	0x08007c6c
 8003364:	08007c2c 	.word	0x08007c2c

08003368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003370:	f001 fa5c 	bl	800482c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003374:	4b5c      	ldr	r3, [pc, #368]	; (80034e8 <prvAddNewTaskToReadyList+0x180>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a5b      	ldr	r2, [pc, #364]	; (80034e8 <prvAddNewTaskToReadyList+0x180>)
 800337c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <prvAddNewTaskToReadyList+0x184>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003386:	4a59      	ldr	r2, [pc, #356]	; (80034ec <prvAddNewTaskToReadyList+0x184>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800338c:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <prvAddNewTaskToReadyList+0x180>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d110      	bne.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003394:	f000 fdce 	bl	8003f34 <prvInitialiseTaskLists>
 8003398:	e00d      	b.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800339a:	4b55      	ldr	r3, [pc, #340]	; (80034f0 <prvAddNewTaskToReadyList+0x188>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033a2:	4b52      	ldr	r3, [pc, #328]	; (80034ec <prvAddNewTaskToReadyList+0x184>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d802      	bhi.n	80033b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033b0:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <prvAddNewTaskToReadyList+0x184>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033b6:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <prvAddNewTaskToReadyList+0x18c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	4a4d      	ldr	r2, [pc, #308]	; (80034f4 <prvAddNewTaskToReadyList+0x18c>)
 80033be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <prvAddNewTaskToReadyList+0x18c>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d048      	beq.n	8003460 <prvAddNewTaskToReadyList+0xf8>
 80033ce:	2003      	movs	r0, #3
 80033d0:	f002 fc2a 	bl	8005c28 <prvTraceGetObjectHandle>
 80033d4:	4603      	mov	r3, r0
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f001 fbc6 	bl	8004b6c <prvTraceSetTaskNumberLow16>
 80033e0:	4b45      	ldr	r3, [pc, #276]	; (80034f8 <prvAddNewTaskToReadyList+0x190>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f001 fbd6 	bl	8004b98 <prvTraceSetTaskNumberHigh16>
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f001 fba2 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80033f2:	4603      	mov	r3, r0
 80033f4:	b2d9      	uxtb	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3334      	adds	r3, #52	; 0x34
 80033fa:	461a      	mov	r2, r3
 80033fc:	2003      	movs	r0, #3
 80033fe:	f002 fd05 	bl	8005e0c <prvTraceSetObjectName>
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f001 fb97 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8003408:	4603      	mov	r3, r0
 800340a:	b2d9      	uxtb	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	2003      	movs	r0, #3
 8003416:	f002 f959 	bl	80056cc <prvTraceSetPriorityProperty>
 800341a:	f001 fc1a 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 800341e:	4603      	mov	r3, r0
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fb95 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	4b34      	ldr	r3, [pc, #208]	; (80034fc <prvAddNewTaskToReadyList+0x194>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	4013      	ands	r3, r2
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d014      	beq.n	8003460 <prvAddNewTaskToReadyList+0xf8>
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f001 fb8a 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <prvAddNewTaskToReadyList+0x194>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d009      	beq.n	8003460 <prvAddNewTaskToReadyList+0xf8>
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f001 fb72 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8003452:	4603      	mov	r3, r0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	2103      	movs	r1, #3
 800345a:	201b      	movs	r0, #27
 800345c:	f001 ff1a 	bl	8005294 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 fb75 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <prvAddNewTaskToReadyList+0x194>)
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	4013      	ands	r3, r2
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <prvAddNewTaskToReadyList+0x11e>
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f001 fb5d 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 800347c:	4603      	mov	r3, r0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fe15 	bl	80050b0 <prvTraceStoreTaskReady>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	2201      	movs	r2, #1
 800348c:	409a      	lsls	r2, r3
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <prvAddNewTaskToReadyList+0x198>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <prvAddNewTaskToReadyList+0x198>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <prvAddNewTaskToReadyList+0x19c>)
 80034a6:	441a      	add	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fe fd25 	bl	8001efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034b4:	f001 f9ea 	bl	800488c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <prvAddNewTaskToReadyList+0x188>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00e      	beq.n	80034de <prvAddNewTaskToReadyList+0x176>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <prvAddNewTaskToReadyList+0x184>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d207      	bcs.n	80034de <prvAddNewTaskToReadyList+0x176>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <prvAddNewTaskToReadyList+0x1a0>)
 80034d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000298 	.word	0x20000298
 80034ec:	200001b0 	.word	0x200001b0
 80034f0:	200002a4 	.word	0x200002a4
 80034f4:	200002b4 	.word	0x200002b4
 80034f8:	2000001a 	.word	0x2000001a
 80034fc:	20000018 	.word	0x20000018
 8003500:	200002a0 	.word	0x200002a0
 8003504:	200001b4 	.word	0x200001b4
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <vTaskDelayUntil+0x2a>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	617b      	str	r3, [r7, #20]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <vTaskDelayUntil+0x46>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	613b      	str	r3, [r7, #16]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <vTaskDelayUntil+0x158>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <vTaskDelayUntil+0x64>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	60fb      	str	r3, [r7, #12]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003570:	f000 f93e 	bl	80037f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003574:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <vTaskDelayUntil+0x15c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	4413      	add	r3, r2
 8003582:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	429a      	cmp	r2, r3
 800358c:	d20b      	bcs.n	80035a6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	d211      	bcs.n	80035bc <vTaskDelayUntil+0xb0>
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	429a      	cmp	r2, r3
 800359e:	d90d      	bls.n	80035bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	e00a      	b.n	80035bc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d303      	bcc.n	80035b8 <vTaskDelayUntil+0xac>
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d901      	bls.n	80035bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03a      	beq.n	800363e <vTaskDelayUntil+0x132>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <vTaskDelayUntil+0x160>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 fabf 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b26      	ldr	r3, [pc, #152]	; (8003670 <vTaskDelayUntil+0x164>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	4013      	ands	r3, r2
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <vTaskDelayUntil+0xf2>
 80035e2:	69f9      	ldr	r1, [r7, #28]
 80035e4:	2088      	movs	r0, #136	; 0x88
 80035e6:	f001 ff99 	bl	800551c <prvTraceStoreKernelCallWithNumericParamOnly>
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <vTaskDelayUntil+0x160>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 faa1 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80035f4:	4603      	mov	r3, r0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 f959 	bl	80058b0 <prvTraceSetTaskInstanceFinished>
 80035fe:	f001 fb28 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8003602:	4603      	mov	r3, r0
 8003604:	4618      	mov	r0, r3
 8003606:	f001 faa3 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <vTaskDelayUntil+0x164>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <vTaskDelayUntil+0x124>
 800361a:	f001 fb1a 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 800361e:	4603      	mov	r3, r0
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fa88 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8003626:	4603      	mov	r3, r0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f002 f940 	bl	80058b0 <prvTraceSetTaskInstanceFinished>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 ff93 	bl	8004564 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800363e:	f000 f8e5 	bl	800380c <xTaskResumeAll>
 8003642:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d107      	bne.n	800365a <vTaskDelayUntil+0x14e>
		{
			portYIELD_WITHIN_API();
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <vTaskDelayUntil+0x168>)
 800364c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800365a:	bf00      	nop
 800365c:	3728      	adds	r7, #40	; 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200002c0 	.word	0x200002c0
 8003668:	2000029c 	.word	0x2000029c
 800366c:	200001b0 	.word	0x200001b0
 8003670:	20000018 	.word	0x20000018
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04b      	beq.n	8003722 <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <vTaskDelay+0xc8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <vTaskDelay+0x30>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60bb      	str	r3, [r7, #8]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036a8:	f000 f8a2 	bl	80037f0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <vTaskDelay+0xcc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fa4d 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <vTaskDelay+0xd0>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <vTaskDelay+0x6a>
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	2089      	movs	r0, #137	; 0x89
 80036ca:	f001 ff27 	bl	800551c <prvTraceStoreKernelCallWithNumericParamOnly>
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <vTaskDelay+0xcc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 fa2f 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80036d8:	4603      	mov	r3, r0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 f8e7 	bl	80058b0 <prvTraceSetTaskInstanceFinished>
 80036e2:	f001 fab6 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fa31 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <vTaskDelay+0xd0>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <vTaskDelay+0x9c>
 80036fe:	f001 faa8 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8003702:	4603      	mov	r3, r0
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fa16 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 800370a:	4603      	mov	r3, r0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4618      	mov	r0, r3
 8003710:	f002 f8ce 	bl	80058b0 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003714:	2100      	movs	r1, #0
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 ff24 	bl	8004564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800371c:	f000 f876 	bl	800380c <xTaskResumeAll>
 8003720:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <vTaskDelay+0xd4>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	200002c0 	.word	0x200002c0
 8003744:	200001b0 	.word	0x200001b0
 8003748:	20000018 	.word	0x20000018
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <vTaskStartScheduler+0x80>)
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	2300      	movs	r3, #0
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2300      	movs	r3, #0
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	491c      	ldr	r1, [pc, #112]	; (80037d4 <vTaskStartScheduler+0x84>)
 8003764:	481c      	ldr	r0, [pc, #112]	; (80037d8 <vTaskStartScheduler+0x88>)
 8003766:	f7ff fd20 	bl	80031aa <xTaskCreate>
 800376a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d11b      	bne.n	80037aa <vTaskStartScheduler+0x5a>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	60bb      	str	r3, [r7, #8]
}
 8003784:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <vTaskStartScheduler+0x8c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3354      	adds	r3, #84	; 0x54
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <vTaskStartScheduler+0x90>)
 800378e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <vTaskStartScheduler+0x94>)
 8003792:	f04f 32ff 	mov.w	r2, #4294967295
 8003796:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <vTaskStartScheduler+0x98>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <vTaskStartScheduler+0x9c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037a4:	f000 ffc0 	bl	8004728 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037a8:	e00e      	b.n	80037c8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d10a      	bne.n	80037c8 <vTaskStartScheduler+0x78>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	607b      	str	r3, [r7, #4]
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <vTaskStartScheduler+0x76>
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200002bc 	.word	0x200002bc
 80037d4:	08006844 	.word	0x08006844
 80037d8:	08003f05 	.word	0x08003f05
 80037dc:	200001b0 	.word	0x200001b0
 80037e0:	20000020 	.word	0x20000020
 80037e4:	200002b8 	.word	0x200002b8
 80037e8:	200002a4 	.word	0x200002a4
 80037ec:	2000029c 	.word	0x2000029c

080037f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <vTaskSuspendAll+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a03      	ldr	r2, [pc, #12]	; (8003808 <vTaskSuspendAll+0x18>)
 80037fc:	6013      	str	r3, [r2, #0]
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	200002c0 	.word	0x200002c0

0800380c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800381a:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <xTaskResumeAll+0x13c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <xTaskResumeAll+0x2c>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	603b      	str	r3, [r7, #0]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003838:	f000 fff8 	bl	800482c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800383c:	4b42      	ldr	r3, [pc, #264]	; (8003948 <xTaskResumeAll+0x13c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3b01      	subs	r3, #1
 8003842:	4a41      	ldr	r2, [pc, #260]	; (8003948 <xTaskResumeAll+0x13c>)
 8003844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003846:	4b40      	ldr	r3, [pc, #256]	; (8003948 <xTaskResumeAll+0x13c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d174      	bne.n	8003938 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <xTaskResumeAll+0x140>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d070      	beq.n	8003938 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003856:	e041      	b.n	80038dc <xTaskResumeAll+0xd0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003858:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <xTaskResumeAll+0x144>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3318      	adds	r3, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fba5 	bl	8001fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fba0 	bl	8001fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f001 f96b 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	4b35      	ldr	r3, [pc, #212]	; (8003954 <xTaskResumeAll+0x148>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <xTaskResumeAll+0x8e>
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f001 f953 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8003890:	4603      	mov	r3, r0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4618      	mov	r0, r3
 8003896:	f001 fc0b 	bl	80050b0 <prvTraceStoreTaskReady>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	2201      	movs	r2, #1
 80038a0:	409a      	lsls	r2, r3
 80038a2:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <xTaskResumeAll+0x14c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	4a2b      	ldr	r2, [pc, #172]	; (8003958 <xTaskResumeAll+0x14c>)
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <xTaskResumeAll+0x150>)
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3304      	adds	r3, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f7fe fb1b 	bl	8001efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <xTaskResumeAll+0x154>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <xTaskResumeAll+0x158>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <xTaskResumeAll+0x144>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1b9      	bne.n	8003858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038ea:	f000 fb63 	bl	8003fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <xTaskResumeAll+0x15c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d010      	beq.n	800391c <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038fa:	f000 f859 	bl	80039b0 <xTaskIncrementTick>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <xTaskResumeAll+0x158>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3b01      	subs	r3, #1
 800390e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f1      	bne.n	80038fa <xTaskResumeAll+0xee>

						uxPendedTicks = 0;
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <xTaskResumeAll+0x15c>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <xTaskResumeAll+0x158>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <xTaskResumeAll+0x160>)
 800392a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003938:	f000 ffa8 	bl	800488c <vPortExitCritical>

	return xAlreadyYielded;
 800393c:	68bb      	ldr	r3, [r7, #8]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200002c0 	.word	0x200002c0
 800394c:	20000298 	.word	0x20000298
 8003950:	20000270 	.word	0x20000270
 8003954:	20000018 	.word	0x20000018
 8003958:	200002a0 	.word	0x200002a0
 800395c:	200001b4 	.word	0x200001b4
 8003960:	200001b0 	.word	0x200001b0
 8003964:	200002ac 	.word	0x200002ac
 8003968:	200002a8 	.word	0x200002a8
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003976:	4b04      	ldr	r3, [pc, #16]	; (8003988 <xTaskGetTickCount+0x18>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800397c:	687b      	ldr	r3, [r7, #4]
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	2000029c 	.word	0x2000029c

0800398c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003992:	f001 f80d 	bl	80049b0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <xTaskGetTickCountFromISR+0x20>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039a0:	683b      	ldr	r3, [r7, #0]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	2000029c 	.word	0x2000029c

080039b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <xTaskIncrementTick+0x198>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d003      	beq.n	80039ca <xTaskIncrementTick+0x1a>
 80039c2:	4b62      	ldr	r3, [pc, #392]	; (8003b4c <xTaskIncrementTick+0x19c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d107      	bne.n	80039da <xTaskIncrementTick+0x2a>
 80039ca:	4b61      	ldr	r3, [pc, #388]	; (8003b50 <xTaskIncrementTick+0x1a0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	4a5f      	ldr	r2, [pc, #380]	; (8003b50 <xTaskIncrementTick+0x1a0>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	2000      	movs	r0, #0
 80039d6:	f002 fc65 	bl	80062a4 <prvTracePortGetTimeStamp>
 80039da:	4b5b      	ldr	r3, [pc, #364]	; (8003b48 <xTaskIncrementTick+0x198>)
 80039dc:	681b      	ldr	r3, [r3, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039de:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <xTaskIncrementTick+0x198>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80a0 	bne.w	8003b28 <xTaskIncrementTick+0x178>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e8:	4b5a      	ldr	r3, [pc, #360]	; (8003b54 <xTaskIncrementTick+0x1a4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039f0:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <xTaskIncrementTick+0x1a4>)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d120      	bne.n	8003a3e <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
 80039fc:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <xTaskIncrementTick+0x1a8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <xTaskIncrementTick+0x6c>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	603b      	str	r3, [r7, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xTaskIncrementTick+0x6a>
 8003a1c:	4b4e      	ldr	r3, [pc, #312]	; (8003b58 <xTaskIncrementTick+0x1a8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b4e      	ldr	r3, [pc, #312]	; (8003b5c <xTaskIncrementTick+0x1ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a4c      	ldr	r2, [pc, #304]	; (8003b58 <xTaskIncrementTick+0x1a8>)
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4a4c      	ldr	r2, [pc, #304]	; (8003b5c <xTaskIncrementTick+0x1ac>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <xTaskIncrementTick+0x1b0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	4a4a      	ldr	r2, [pc, #296]	; (8003b60 <xTaskIncrementTick+0x1b0>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	f000 fabb 	bl	8003fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a3e:	4b49      	ldr	r3, [pc, #292]	; (8003b64 <xTaskIncrementTick+0x1b4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d360      	bcc.n	8003b0a <xTaskIncrementTick+0x15a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a48:	4b43      	ldr	r3, [pc, #268]	; (8003b58 <xTaskIncrementTick+0x1a8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <xTaskIncrementTick+0xa6>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <xTaskIncrementTick+0xa8>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5c:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <xTaskIncrementTick+0x1b4>)
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a62:	601a      	str	r2, [r3, #0]
					break;
 8003a64:	e051      	b.n	8003b0a <xTaskIncrementTick+0x15a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <xTaskIncrementTick+0x1a8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d203      	bcs.n	8003a86 <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a7e:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <xTaskIncrementTick+0x1b4>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6013      	str	r3, [r2, #0]
						break;
 8003a84:	e041      	b.n	8003b0a <xTaskIncrementTick+0x15a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fa92 	bl	8001fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fa89 	bl	8001fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	f001 f854 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <xTaskIncrementTick+0x1b8>)
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <xTaskIncrementTick+0x118>
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f001 f83c 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 faf4 	bl	80050b0 <prvTraceStoreTaskReady>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <xTaskIncrementTick+0x1bc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <xTaskIncrementTick+0x1bc>)
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <xTaskIncrementTick+0x1c0>)
 8003ae8:	441a      	add	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe fa04 	bl	8001efe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <xTaskIncrementTick+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d3a1      	bcc.n	8003a48 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b08:	e79e      	b.n	8003a48 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <xTaskIncrementTick+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	4917      	ldr	r1, [pc, #92]	; (8003b70 <xTaskIncrementTick+0x1c0>)
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d907      	bls.n	8003b32 <xTaskIncrementTick+0x182>
			{
				xSwitchRequired = pdTRUE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e004      	b.n	8003b32 <xTaskIncrementTick+0x182>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <xTaskIncrementTick+0x19c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <xTaskIncrementTick+0x19c>)
 8003b30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <xTaskIncrementTick+0x1c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <xTaskIncrementTick+0x18e>
		{
			xSwitchRequired = pdTRUE;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b3e:	697b      	ldr	r3, [r7, #20]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200002c0 	.word	0x200002c0
 8003b4c:	200002a8 	.word	0x200002a8
 8003b50:	200022d8 	.word	0x200022d8
 8003b54:	2000029c 	.word	0x2000029c
 8003b58:	20000268 	.word	0x20000268
 8003b5c:	2000026c 	.word	0x2000026c
 8003b60:	200002b0 	.word	0x200002b0
 8003b64:	200002b8 	.word	0x200002b8
 8003b68:	20000018 	.word	0x20000018
 8003b6c:	200002a0 	.word	0x200002a0
 8003b70:	200001b4 	.word	0x200001b4
 8003b74:	200001b0 	.word	0x200001b0
 8003b78:	200002ac 	.word	0x200002ac

08003b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b82:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <vTaskSwitchContext+0xdc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <vTaskSwitchContext+0xe0>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b90:	e05d      	b.n	8003c4e <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8003b92:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <vTaskSwitchContext+0xe0>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <vTaskSwitchContext+0xe4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f1c3 031f 	rsb	r3, r3, #31
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	492d      	ldr	r1, [pc, #180]	; (8003c64 <vTaskSwitchContext+0xe8>)
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	607b      	str	r3, [r7, #4]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <vTaskSwitchContext+0x5a>
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4a20      	ldr	r2, [pc, #128]	; (8003c64 <vTaskSwitchContext+0xe8>)
 8003be4:	4413      	add	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d104      	bne.n	8003c08 <vTaskSwitchContext+0x8c>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <vTaskSwitchContext+0xec>)
 8003c10:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003c12:	f001 f81e 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8003c16:	4603      	mov	r3, r0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ff99 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <vTaskSwitchContext+0xf0>)
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	4013      	ands	r3, r2
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <vTaskSwitchContext+0xc8>
 8003c2e:	f001 f810 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ff7e 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 fcd2 	bl	80055e8 <prvTraceStoreTaskswitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <vTaskSwitchContext+0xec>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3354      	adds	r3, #84	; 0x54
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <vTaskSwitchContext+0xf4>)
 8003c4c:	6013      	str	r3, [r2, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200002c0 	.word	0x200002c0
 8003c5c:	200002ac 	.word	0x200002ac
 8003c60:	200002a0 	.word	0x200002a0
 8003c64:	200001b4 	.word	0x200001b4
 8003c68:	200001b0 	.word	0x200001b0
 8003c6c:	20000018 	.word	0x20000018
 8003c70:	20000020 	.word	0x20000020

08003c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <vTaskPlaceOnEventList+0x44>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fe f94e 	bl	8001f44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ca8:	2101      	movs	r1, #1
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f000 fc5a 	bl	8004564 <prvAddCurrentTaskToDelayedList>
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	200001b0 	.word	0x200001b0

08003cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60fb      	str	r3, [r7, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	3318      	adds	r3, #24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe f961 	bl	8001fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <xTaskRemoveFromEventList+0xd4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d12f      	bne.n	8003d5a <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe f958 	bl	8001fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d04:	6938      	ldr	r0, [r7, #16]
 8003d06:	f000 ff23 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <xTaskRemoveFromEventList+0xd8>)
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	4013      	ands	r3, r2
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <xTaskRemoveFromEventList+0x6e>
 8003d1a:	6938      	ldr	r0, [r7, #16]
 8003d1c:	f000 ff0b 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8003d20:	4603      	mov	r3, r0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 f9c3 	bl	80050b0 <prvTraceStoreTaskReady>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	2201      	movs	r2, #1
 8003d30:	409a      	lsls	r2, r3
 8003d32:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <xTaskRemoveFromEventList+0xdc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <xTaskRemoveFromEventList+0xdc>)
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <xTaskRemoveFromEventList+0xe0>)
 8003d4a:	441a      	add	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f7fe f8d3 	bl	8001efe <vListInsertEnd>
 8003d58:	e005      	b.n	8003d66 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3318      	adds	r3, #24
 8003d5e:	4619      	mov	r1, r3
 8003d60:	480f      	ldr	r0, [pc, #60]	; (8003da0 <xTaskRemoveFromEventList+0xe4>)
 8003d62:	f7fe f8cc 	bl	8001efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <xTaskRemoveFromEventList+0xe8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d905      	bls.n	8003d80 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <xTaskRemoveFromEventList+0xec>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e001      	b.n	8003d84 <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003d84:	697b      	ldr	r3, [r7, #20]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200002c0 	.word	0x200002c0
 8003d94:	20000018 	.word	0x20000018
 8003d98:	200002a0 	.word	0x200002a0
 8003d9c:	200001b4 	.word	0x200001b4
 8003da0:	20000270 	.word	0x20000270
 8003da4:	200001b0 	.word	0x200001b0
 8003da8:	200002ac 	.word	0x200002ac

08003dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <vTaskInternalSetTimeOutState+0x24>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <vTaskInternalSetTimeOutState+0x28>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	200002b0 	.word	0x200002b0
 8003dd4:	2000029c 	.word	0x2000029c

08003dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	613b      	str	r3, [r7, #16]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
}
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e1a:	f000 fd07 	bl	800482c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <xTaskCheckForTimeOut+0xbc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d102      	bne.n	8003e3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e023      	b.n	8003e86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <xTaskCheckForTimeOut+0xc0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d007      	beq.n	8003e5a <xTaskCheckForTimeOut+0x82>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e015      	b.n	8003e86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d20b      	bcs.n	8003e7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff9b 	bl	8003dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	e004      	b.n	8003e86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e82:	2301      	movs	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e86:	f000 fd01 	bl	800488c <vPortExitCritical>

	return xReturn;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000029c 	.word	0x2000029c
 8003e98:	200002b0 	.word	0x200002b0

08003e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <vTaskMissedYield+0x14>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200002ac 	.word	0x200002ac

08003eb4 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e001      	b.n	8003ed2 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
	}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
	...

08003f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f0c:	f000 f84c 	bl	8003fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <prvIdleTask+0x28>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d9f9      	bls.n	8003f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <prvIdleTask+0x2c>)
 8003f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f28:	e7f0      	b.n	8003f0c <prvIdleTask+0x8>
 8003f2a:	bf00      	nop
 8003f2c:	200001b4 	.word	0x200001b4
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	e00c      	b.n	8003f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <prvInitialiseTaskLists+0x58>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd ffaa 	bl	8001ea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3301      	adds	r3, #1
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b06      	cmp	r3, #6
 8003f5e:	d9ef      	bls.n	8003f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f60:	480b      	ldr	r0, [pc, #44]	; (8003f90 <prvInitialiseTaskLists+0x5c>)
 8003f62:	f7fd ffa1 	bl	8001ea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f66:	480b      	ldr	r0, [pc, #44]	; (8003f94 <prvInitialiseTaskLists+0x60>)
 8003f68:	f7fd ff9e 	bl	8001ea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f6c:	480a      	ldr	r0, [pc, #40]	; (8003f98 <prvInitialiseTaskLists+0x64>)
 8003f6e:	f7fd ff9b 	bl	8001ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f72:	480a      	ldr	r0, [pc, #40]	; (8003f9c <prvInitialiseTaskLists+0x68>)
 8003f74:	f7fd ff98 	bl	8001ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <prvInitialiseTaskLists+0x6c>)
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <prvInitialiseTaskLists+0x5c>)
 8003f7c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <prvInitialiseTaskLists+0x70>)
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <prvInitialiseTaskLists+0x60>)
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200001b4 	.word	0x200001b4
 8003f90:	20000240 	.word	0x20000240
 8003f94:	20000254 	.word	0x20000254
 8003f98:	20000270 	.word	0x20000270
 8003f9c:	20000284 	.word	0x20000284
 8003fa0:	20000268 	.word	0x20000268
 8003fa4:	2000026c 	.word	0x2000026c

08003fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <prvResetNextTaskUnblockTime+0x40>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <prvResetNextTaskUnblockTime+0x14>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <prvResetNextTaskUnblockTime+0x16>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <prvResetNextTaskUnblockTime+0x44>)
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fd6:	e008      	b.n	8003fea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <prvResetNextTaskUnblockTime+0x40>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <prvResetNextTaskUnblockTime+0x44>)
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	20000268 	.word	0x20000268
 8003ff8:	200002b8 	.word	0x200002b8

08003ffc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <xTaskGetCurrentTaskHandle+0x18>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004008:	687b      	ldr	r3, [r7, #4]
	}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	200001b0 	.word	0x200001b0

08004018 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <xTaskGetSchedulerState+0x34>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004026:	2301      	movs	r3, #1
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	e008      	b.n	800403e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <xTaskGetSchedulerState+0x38>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004034:	2302      	movs	r3, #2
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	e001      	b.n	800403e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800403e:	687b      	ldr	r3, [r7, #4]
	}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	200002a4 	.word	0x200002a4
 8004050:	200002c0 	.word	0x200002c0

08004054 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80b0 	beq.w	80041cc <xTaskPriorityInherit+0x178>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <xTaskPriorityInherit+0x184>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	429a      	cmp	r2, r3
 8004078:	f080 809f 	bcs.w	80041ba <xTaskPriorityInherit+0x166>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db06      	blt.n	8004092 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	4b54      	ldr	r3, [pc, #336]	; (80041d8 <xTaskPriorityInherit+0x184>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f1c3 0207 	rsb	r2, r3, #7
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6959      	ldr	r1, [r3, #20]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a4e      	ldr	r2, [pc, #312]	; (80041dc <xTaskPriorityInherit+0x188>)
 80040a4:	4413      	add	r3, r2
 80040a6:	4299      	cmp	r1, r3
 80040a8:	d101      	bne.n	80040ae <xTaskPriorityInherit+0x5a>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <xTaskPriorityInherit+0x5c>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d04d      	beq.n	8004150 <xTaskPriorityInherit+0xfc>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd ff7b 	bl	8001fb4 <uxListRemove>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d115      	bne.n	80040f0 <xTaskPriorityInherit+0x9c>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	4944      	ldr	r1, [pc, #272]	; (80041dc <xTaskPriorityInherit+0x188>)
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <xTaskPriorityInherit+0x9c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	2201      	movs	r2, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43da      	mvns	r2, r3
 80040e6:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <xTaskPriorityInherit+0x18c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4013      	ands	r3, r2
 80040ec:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <xTaskPriorityInherit+0x18c>)
 80040ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <xTaskPriorityInherit+0x184>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80040fa:	68b8      	ldr	r0, [r7, #8]
 80040fc:	f000 fd28 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <xTaskPriorityInherit+0x190>)
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	4013      	ands	r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <xTaskPriorityInherit+0xcc>
 8004110:	68b8      	ldr	r0, [r7, #8]
 8004112:	f000 fd10 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8004116:	4603      	mov	r3, r0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	4618      	mov	r0, r3
 800411c:	f000 ffc8 	bl	80050b0 <prvTraceStoreTaskReady>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	2201      	movs	r2, #1
 8004126:	409a      	lsls	r2, r3
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <xTaskPriorityInherit+0x18c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4313      	orrs	r3, r2
 800412e:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <xTaskPriorityInherit+0x18c>)
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a27      	ldr	r2, [pc, #156]	; (80041dc <xTaskPriorityInherit+0x188>)
 8004140:	441a      	add	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7fd fed8 	bl	8001efe <vListInsertEnd>
 800414e:	e004      	b.n	800415a <xTaskPriorityInherit+0x106>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004150:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <xTaskPriorityInherit+0x184>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800415a:	68b8      	ldr	r0, [r7, #8]
 800415c:	f000 fcf8 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <xTaskPriorityInherit+0x190>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	4013      	ands	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d021      	beq.n	80041b4 <xTaskPriorityInherit+0x160>
 8004170:	68b8      	ldr	r0, [r7, #8]
 8004172:	f000 fce0 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8004176:	4603      	mov	r3, r0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461c      	mov	r4, r3
 800417c:	68b8      	ldr	r0, [r7, #8]
 800417e:	f000 fcda 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8004182:	4603      	mov	r3, r0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	4619      	mov	r1, r3
 8004188:	2003      	movs	r0, #3
 800418a:	f001 fadb 	bl	8005744 <prvTraceGetPriorityProperty>
 800418e:	4603      	mov	r3, r0
 8004190:	4622      	mov	r2, r4
 8004192:	2103      	movs	r1, #3
 8004194:	208e      	movs	r0, #142	; 0x8e
 8004196:	f001 f8fb 	bl	8005390 <prvTraceStoreKernelCallWithParam>
 800419a:	68b8      	ldr	r0, [r7, #8]
 800419c:	f000 fccb 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80041a0:	4603      	mov	r3, r0
 80041a2:	b2d9      	uxtb	r1, r3
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <xTaskPriorityInherit+0x184>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	2003      	movs	r0, #3
 80041b0:	f001 fa8c 	bl	80056cc <prvTraceSetPriorityProperty>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e008      	b.n	80041cc <xTaskPriorityInherit+0x178>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <xTaskPriorityInherit+0x184>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d201      	bcs.n	80041cc <xTaskPriorityInherit+0x178>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041cc:	68fb      	ldr	r3, [r7, #12]
	}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}
 80041d6:	bf00      	nop
 80041d8:	200001b0 	.word	0x200001b0
 80041dc:	200001b4 	.word	0x200001b4
 80041e0:	200002a0 	.word	0x200002a0
 80041e4:	20000018 	.word	0x20000018

080041e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80af 	beq.w	800435e <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004200:	4b59      	ldr	r3, [pc, #356]	; (8004368 <xTaskPriorityDisinherit+0x180>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	429a      	cmp	r2, r3
 8004208:	d00a      	beq.n	8004220 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60fb      	str	r3, [r7, #12]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60bb      	str	r3, [r7, #8]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004242:	1e5a      	subs	r2, r3, #1
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	429a      	cmp	r2, r3
 8004252:	f000 8084 	beq.w	800435e <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d17f      	bne.n	800435e <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3304      	adds	r3, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fea6 	bl	8001fb4 <uxListRemove>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d115      	bne.n	800429a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	493e      	ldr	r1, [pc, #248]	; (800436c <xTaskPriorityDisinherit+0x184>)
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xTaskPriorityDisinherit+0xb2>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	2201      	movs	r2, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43da      	mvns	r2, r3
 8004290:	4b37      	ldr	r3, [pc, #220]	; (8004370 <xTaskPriorityDisinherit+0x188>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4013      	ands	r3, r2
 8004296:	4a36      	ldr	r2, [pc, #216]	; (8004370 <xTaskPriorityDisinherit+0x188>)
 8004298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800429a:	6938      	ldr	r0, [r7, #16]
 800429c:	f000 fc58 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <xTaskPriorityDisinherit+0x18c>)
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	4013      	ands	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <xTaskPriorityDisinherit+0x10a>
 80042b0:	6938      	ldr	r0, [r7, #16]
 80042b2:	f000 fc40 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80042b6:	4603      	mov	r3, r0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461c      	mov	r4, r3
 80042bc:	6938      	ldr	r0, [r7, #16]
 80042be:	f000 fc3a 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80042c2:	4603      	mov	r3, r0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	2003      	movs	r0, #3
 80042ca:	f001 fa3b 	bl	8005744 <prvTraceGetPriorityProperty>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4622      	mov	r2, r4
 80042d2:	2103      	movs	r1, #3
 80042d4:	208f      	movs	r0, #143	; 0x8f
 80042d6:	f001 f85b 	bl	8005390 <prvTraceStoreKernelCallWithParam>
 80042da:	6938      	ldr	r0, [r7, #16]
 80042dc:	f000 fc2b 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80042e0:	4603      	mov	r3, r0
 80042e2:	b2d9      	uxtb	r1, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	2003      	movs	r0, #3
 80042ee:	f001 f9ed 	bl	80056cc <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f1c3 0207 	rsb	r2, r3, #7
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004306:	6938      	ldr	r0, [r7, #16]
 8004308:	f000 fc22 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	4b18      	ldr	r3, [pc, #96]	; (8004374 <xTaskPriorityDisinherit+0x18c>)
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	4013      	ands	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <xTaskPriorityDisinherit+0x144>
 800431c:	6938      	ldr	r0, [r7, #16]
 800431e:	f000 fc0a 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8004322:	4603      	mov	r3, r0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fec2 	bl	80050b0 <prvTraceStoreTaskReady>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2201      	movs	r2, #1
 8004332:	409a      	lsls	r2, r3
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <xTaskPriorityDisinherit+0x188>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4313      	orrs	r3, r2
 800433a:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <xTaskPriorityDisinherit+0x188>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <xTaskPriorityDisinherit+0x184>)
 800434c:	441a      	add	r2, r3
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7fd fdd2 	bl	8001efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800435a:	2301      	movs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800435e:	697b      	ldr	r3, [r7, #20]
	}
 8004360:	4618      	mov	r0, r3
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}
 8004368:	200001b0 	.word	0x200001b0
 800436c:	200001b4 	.word	0x200001b4
 8004370:	200002a0 	.word	0x200002a0
 8004374:	20000018 	.word	0x20000018

08004378 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004386:	2301      	movs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80c9 	beq.w	8004524 <vTaskPriorityDisinheritAfterTimeout+0x1ac>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60fb      	str	r3, [r7, #12]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d902      	bls.n	80043c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e002      	b.n	80043c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	f000 80a9 	beq.w	8004524 <vTaskPriorityDisinheritAfterTimeout+0x1ac>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	429a      	cmp	r2, r3
 80043da:	f040 80a3 	bne.w	8004524 <vTaskPriorityDisinheritAfterTimeout+0x1ac>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <vTaskPriorityDisinheritAfterTimeout+0x1b4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d10a      	bne.n	80043fe <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60bb      	str	r3, [r7, #8]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80043fe:	69b8      	ldr	r0, [r7, #24]
 8004400:	f000 fba6 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 8004404:	4603      	mov	r3, r0
 8004406:	461a      	mov	r2, r3
 8004408:	4b49      	ldr	r3, [pc, #292]	; (8004530 <vTaskPriorityDisinheritAfterTimeout+0x1b8>)
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	4013      	ands	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8004414:	69b8      	ldr	r0, [r7, #24]
 8004416:	f000 fb8e 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 800441a:	4603      	mov	r3, r0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461c      	mov	r4, r3
 8004420:	69b8      	ldr	r0, [r7, #24]
 8004422:	f000 fb88 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8004426:	4603      	mov	r3, r0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4619      	mov	r1, r3
 800442c:	2003      	movs	r0, #3
 800442e:	f001 f989 	bl	8005744 <prvTraceGetPriorityProperty>
 8004432:	4603      	mov	r3, r0
 8004434:	4622      	mov	r2, r4
 8004436:	2103      	movs	r1, #3
 8004438:	208f      	movs	r0, #143	; 0x8f
 800443a:	f000 ffa9 	bl	8005390 <prvTraceStoreKernelCallWithParam>
 800443e:	69b8      	ldr	r0, [r7, #24]
 8004440:	f000 fb79 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8004444:	4603      	mov	r3, r0
 8004446:	b2d9      	uxtb	r1, r3
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	2003      	movs	r0, #3
 8004452:	f001 f93b 	bl	80056cc <prvTraceSetPriorityProperty>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	db04      	blt.n	8004474 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f1c3 0207 	rsb	r2, r3, #7
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6959      	ldr	r1, [r3, #20]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a2c      	ldr	r2, [pc, #176]	; (8004534 <vTaskPriorityDisinheritAfterTimeout+0x1bc>)
 8004484:	4413      	add	r3, r2
 8004486:	4299      	cmp	r1, r3
 8004488:	d101      	bne.n	800448e <vTaskPriorityDisinheritAfterTimeout+0x116>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <vTaskPriorityDisinheritAfterTimeout+0x118>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d047      	beq.n	8004524 <vTaskPriorityDisinheritAfterTimeout+0x1ac>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd fd8b 	bl	8001fb4 <uxListRemove>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d115      	bne.n	80044d0 <vTaskPriorityDisinheritAfterTimeout+0x158>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4922      	ldr	r1, [pc, #136]	; (8004534 <vTaskPriorityDisinheritAfterTimeout+0x1bc>)
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <vTaskPriorityDisinheritAfterTimeout+0x158>
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	2201      	movs	r2, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43da      	mvns	r2, r3
 80044c6:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <vTaskPriorityDisinheritAfterTimeout+0x1c0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4013      	ands	r3, r2
 80044cc:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <vTaskPriorityDisinheritAfterTimeout+0x1c0>)
 80044ce:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80044d0:	69b8      	ldr	r0, [r7, #24]
 80044d2:	f000 fb3d 	bl	8004b50 <prvTraceGetTaskNumberHigh16>
 80044d6:	4603      	mov	r3, r0
 80044d8:	461a      	mov	r2, r3
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <vTaskPriorityDisinheritAfterTimeout+0x1b8>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	4013      	ands	r3, r2
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <vTaskPriorityDisinheritAfterTimeout+0x17e>
 80044e6:	69b8      	ldr	r0, [r7, #24]
 80044e8:	f000 fb25 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 80044ec:	4603      	mov	r3, r0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fddd 	bl	80050b0 <prvTraceStoreTaskReady>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	2201      	movs	r2, #1
 80044fc:	409a      	lsls	r2, r3
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <vTaskPriorityDisinheritAfterTimeout+0x1c0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <vTaskPriorityDisinheritAfterTimeout+0x1c0>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a07      	ldr	r2, [pc, #28]	; (8004534 <vTaskPriorityDisinheritAfterTimeout+0x1bc>)
 8004516:	441a      	add	r2, r3
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f7fd fced 	bl	8001efe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004524:	bf00      	nop
 8004526:	3724      	adds	r7, #36	; 0x24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd90      	pop	{r4, r7, pc}
 800452c:	200001b0 	.word	0x200001b0
 8004530:	20000018 	.word	0x20000018
 8004534:	200001b4 	.word	0x200001b4
 8004538:	200002a0 	.word	0x200002a0

0800453c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pvTaskIncrementMutexHeldCount+0x24>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <pvTaskIncrementMutexHeldCount+0x24>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800454e:	3201      	adds	r2, #1
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <pvTaskIncrementMutexHeldCount+0x24>)
 8004554:	681b      	ldr	r3, [r3, #0]
	}
 8004556:	4618      	mov	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	200001b0 	.word	0x200001b0

08004564 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800456e:	4b29      	ldr	r3, [pc, #164]	; (8004614 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004574:	4b28      	ldr	r3, [pc, #160]	; (8004618 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd fd1a 	bl	8001fb4 <uxListRemove>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	2201      	movs	r2, #1
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43da      	mvns	r2, r3
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4013      	ands	r3, r2
 800459a:	4a20      	ldr	r2, [pc, #128]	; (800461c <prvAddCurrentTaskToDelayedList+0xb8>)
 800459c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d10a      	bne.n	80045bc <prvAddCurrentTaskToDelayedList+0x58>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	481a      	ldr	r0, [pc, #104]	; (8004620 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045b6:	f7fd fca2 	bl	8001efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045ba:	e026      	b.n	800460a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d209      	bcs.n	80045e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3304      	adds	r3, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f7fd fcaf 	bl	8001f44 <vListInsert>
}
 80045e6:	e010      	b.n	800460a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7fd fca5 	bl	8001f44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <prvAddCurrentTaskToDelayedList+0xc8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d202      	bcs.n	800460a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004604:	4a09      	ldr	r2, [pc, #36]	; (800462c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6013      	str	r3, [r2, #0]
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2000029c 	.word	0x2000029c
 8004618:	200001b0 	.word	0x200001b0
 800461c:	200002a0 	.word	0x200002a0
 8004620:	20000284 	.word	0x20000284
 8004624:	2000026c 	.word	0x2000026c
 8004628:	20000268 	.word	0x20000268
 800462c:	200002b8 	.word	0x200002b8

08004630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3b04      	subs	r3, #4
 8004640:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3b04      	subs	r3, #4
 800464e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b04      	subs	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <pxPortInitialiseStack+0x54>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b14      	subs	r3, #20
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b20      	subs	r3, #32
 8004676:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004678:	68fb      	ldr	r3, [r7, #12]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	08004689 	.word	0x08004689

08004688 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <prvTaskExitError+0x54>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d00a      	beq.n	80046b2 <prvTaskExitError+0x2a>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <prvTaskExitError+0x28>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	60bb      	str	r3, [r7, #8]
}
 80046c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046c6:	bf00      	nop
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0fc      	beq.n	80046c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046ce:	bf00      	nop
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000008 	.word	0x20000008

080046e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pxCurrentTCBConst2>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6808      	ldr	r0, [r1, #0]
 80046e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046ea:	f380 8809 	msr	PSP, r0
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80046fe:	4770      	bx	lr

08004700 <pxCurrentTCBConst2>:
 8004700:	200001b0 	.word	0x200001b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004708:	4806      	ldr	r0, [pc, #24]	; (8004724 <prvPortStartFirstTask+0x1c>)
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f380 8808 	msr	MSP, r0
 8004712:	b662      	cpsie	i
 8004714:	b661      	cpsie	f
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	df00      	svc	0
 8004720:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004722:	bf00      	nop
 8004724:	e000ed08 	.word	0xe000ed08

08004728 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800472e:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <xPortStartScheduler+0xf0>)
 8004730:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004750:	b2da      	uxtb	r2, r3
 8004752:	4b32      	ldr	r3, [pc, #200]	; (800481c <xPortStartScheduler+0xf4>)
 8004754:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004756:	4b32      	ldr	r3, [pc, #200]	; (8004820 <xPortStartScheduler+0xf8>)
 8004758:	2207      	movs	r2, #7
 800475a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800475c:	e009      	b.n	8004772 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800475e:	4b30      	ldr	r3, [pc, #192]	; (8004820 <xPortStartScheduler+0xf8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <xPortStartScheduler+0xf8>)
 8004766:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d0ef      	beq.n	800475e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800477e:	4b28      	ldr	r3, [pc, #160]	; (8004820 <xPortStartScheduler+0xf8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1c3 0307 	rsb	r3, r3, #7
 8004786:	2b04      	cmp	r3, #4
 8004788:	d00a      	beq.n	80047a0 <xPortStartScheduler+0x78>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	613b      	str	r3, [r7, #16]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <xPortStartScheduler+0xf8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1c3 0307 	rsb	r3, r3, #7
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d00a      	beq.n	80047c2 <xPortStartScheduler+0x9a>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60fb      	str	r3, [r7, #12]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xPortStartScheduler+0x98>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <xPortStartScheduler+0xf8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <xPortStartScheduler+0xf8>)
 80047ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <xPortStartScheduler+0xf8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047d4:	4a12      	ldr	r2, [pc, #72]	; (8004820 <xPortStartScheduler+0xf8>)
 80047d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <xPortStartScheduler+0xfc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <xPortStartScheduler+0xfc>)
 80047e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <xPortStartScheduler+0xfc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <xPortStartScheduler+0xfc>)
 80047f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047f8:	f000 f8b8 	bl	800496c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <xPortStartScheduler+0x100>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004802:	f7ff ff81 	bl	8004708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004806:	f7ff f9b9 	bl	8003b7c <vTaskSwitchContext>
	prvTaskExitError();
 800480a:	f7ff ff3d 	bl	8004688 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	e000e400 	.word	0xe000e400
 800481c:	200002c4 	.word	0x200002c4
 8004820:	200002c8 	.word	0x200002c8
 8004824:	e000ed20 	.word	0xe000ed20
 8004828:	20000008 	.word	0x20000008

0800482c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
}
 8004844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <vPortEnterCritical+0x58>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <vPortEnterCritical+0x58>)
 800484e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <vPortEnterCritical+0x58>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10f      	bne.n	8004878 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <vPortEnterCritical+0x5c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <vPortEnterCritical+0x4c>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	603b      	str	r3, [r7, #0]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vPortEnterCritical+0x4a>
	}
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000008 	.word	0x20000008
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <vPortExitCritical+0x4c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <vPortExitCritical+0x24>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	607b      	str	r3, [r7, #4]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <vPortExitCritical+0x4c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <vPortExitCritical+0x4c>)
 80048b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <vPortExitCritical+0x4c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d105      	bne.n	80048ce <vPortExitCritical+0x42>
 80048c2:	2300      	movs	r3, #0
 80048c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f383 8811 	msr	BASEPRI, r3
}
 80048cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	20000008 	.word	0x20000008
 80048dc:	00000000 	.word	0x00000000

080048e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048e0:	f3ef 8009 	mrs	r0, PSP
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <pxCurrentTCBConst>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048f0:	6010      	str	r0, [r2, #0]
 80048f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048fa:	f380 8811 	msr	BASEPRI, r0
 80048fe:	f7ff f93d 	bl	8003b7c <vTaskSwitchContext>
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f380 8811 	msr	BASEPRI, r0
 800490a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	6808      	ldr	r0, [r1, #0]
 8004912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004916:	f380 8809 	msr	PSP, r0
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	4770      	bx	lr

08004920 <pxCurrentTCBConst>:
 8004920:	200001b0 	.word	0x200001b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004942:	f7ff f835 	bl	80039b0 <xTaskIncrementTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <SysTick_Handler+0x40>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f383 8811 	msr	BASEPRI, r3
}
 800495e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <vPortSetupTimerInterrupt+0x30>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <vPortSetupTimerInterrupt+0x38>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <vPortSetupTimerInterrupt+0x3c>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a08      	ldr	r2, [pc, #32]	; (80049ac <vPortSetupTimerInterrupt+0x40>)
 800498a:	3b01      	subs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800498e:	4b03      	ldr	r3, [pc, #12]	; (800499c <vPortSetupTimerInterrupt+0x30>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	e000e010 	.word	0xe000e010
 80049a0:	e000e018 	.word	0xe000e018
 80049a4:	2000001c 	.word	0x2000001c
 80049a8:	10624dd3 	.word	0x10624dd3
 80049ac:	e000e014 	.word	0xe000e014

080049b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049b6:	f3ef 8305 	mrs	r3, IPSR
 80049ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b0f      	cmp	r3, #15
 80049c0:	d914      	bls.n	80049ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049c2:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <vPortValidateInterruptPriority+0x6c>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049cc:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <vPortValidateInterruptPriority+0x70>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	7afa      	ldrb	r2, [r7, #11]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d20a      	bcs.n	80049ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	607b      	str	r3, [r7, #4]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <vPortValidateInterruptPriority+0x74>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <vPortValidateInterruptPriority+0x78>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d90a      	bls.n	8004a12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	603b      	str	r3, [r7, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <vPortValidateInterruptPriority+0x60>
	}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	e000e3f0 	.word	0xe000e3f0
 8004a20:	200002c4 	.word	0x200002c4
 8004a24:	e000ed0c 	.word	0xe000ed0c
 8004a28:	200002c8 	.word	0x200002c8

08004a2c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f023 0307 	bic.w	r3, r3, #7
 8004a48:	3308      	adds	r3, #8
 8004a4a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8004a4c:	f7fe fed0 	bl	80037f0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8004a50:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <pvPortMalloc+0xa0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <pvPortMalloc+0xa4>)
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <pvPortMalloc+0xa0>)
 8004a62:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <pvPortMalloc+0xa8>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d813      	bhi.n	8004a9c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <pvPortMalloc+0xa8>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	441a      	add	r2, r3
 8004a7c:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <pvPortMalloc+0xa8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d90b      	bls.n	8004a9c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <pvPortMalloc+0xa0>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <pvPortMalloc+0xa8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <pvPortMalloc+0xa8>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <pvPortMalloc+0xa8>)
 8004a9a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <pvPortMalloc+0x84>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	2094      	movs	r0, #148	; 0x94
 8004aaa:	f000 fb65 	bl	8005178 <vTraceStoreMemMangEvent>
 8004aae:	e005      	b.n	8004abc <pvPortMalloc+0x90>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	20e8      	movs	r0, #232	; 0xe8
 8004ab8:	f000 fb5e 	bl	8005178 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8004abc:	f7fe fea6 	bl	800380c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200022d0 	.word	0x200022d0
 8004ad0:	200002d4 	.word	0x200002d4
 8004ad4:	200022cc 	.word	0x200022cc

08004ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <vPortFree+0x24>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	60fb      	str	r3, [r7, #12]
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <vPortFree+0x22>
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fe fa00 	bl	8002f14 <uxQueueGetQueueNumber>
 8004b14:	4603      	mov	r3, r0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fe fa0c 	bl	8002f44 <ucQueueGetQueueType>
 8004b2c:	4603      	mov	r3, r0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff f9b8 	bl	8003eb4 <uxTaskGetTaskNumber>
 8004b44:	4603      	mov	r3, r0
 8004b46:	b29b      	uxth	r3, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff f9ab 	bl	8003eb4 <uxTaskGetTaskNumber>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	b29b      	uxth	r3, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff f99b 	bl	8003eb4 <uxTaskGetTaskNumber>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	887a      	ldrh	r2, [r7, #2]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff f9a7 	bl	8003ede <vTaskSetTaskNumber>
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff f985 	bl	8003eb4 <uxTaskGetTaskNumber>
 8004baa:	4603      	mov	r3, r0
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff f991 	bl	8003ede <vTaskSetTaskNumber>
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff9a 	bl	8004b06 <prvTraceGetQueueNumber>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	b29b      	uxth	r3, r3
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ff8d 	bl	8004b06 <prvTraceGetQueueNumber>
 8004bec:	4603      	mov	r3, r0
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	b29b      	uxth	r3, r3
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ff7d 	bl	8004b06 <prvTraceGetQueueNumber>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	887a      	ldrh	r2, [r7, #2]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fe f986 	bl	8002f2a <vQueueSetQueueNumber>
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ff67 	bl	8004b06 <prvTraceGetQueueNumber>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	887b      	ldrh	r3, [r7, #2]
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	4313      	orrs	r3, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fe f970 	bl	8002f2a <vQueueSetQueueNumber>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8004c56:	f7ff f9d1 	bl	8003ffc <xTaskGetCurrentTaskHandle>
 8004c5a:	4603      	mov	r3, r0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004c64:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2209      	movs	r2, #9
 8004c6a:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8004c6c:	4b61      	ldr	r3, [pc, #388]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	220a      	movs	r2, #10
 8004c72:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8004c76:	4b5f      	ldr	r3, [pc, #380]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	220a      	movs	r2, #10
 8004c7c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8004c80:	4b5c      	ldr	r3, [pc, #368]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	220a      	movs	r2, #10
 8004c86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8004c8a:	4b5a      	ldr	r3, [pc, #360]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	220f      	movs	r2, #15
 8004c90:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8004c94:	4b57      	ldr	r3, [pc, #348]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2205      	movs	r2, #5
 8004c9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8004c9e:	4b55      	ldr	r3, [pc, #340]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2205      	movs	r2, #5
 8004ca4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8004ca8:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2205      	movs	r2, #5
 8004cae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8004cb2:	4b50      	ldr	r3, [pc, #320]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8004cc6:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	220f      	movs	r2, #15
 8004ccc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8004cd0:	4b48      	ldr	r3, [pc, #288]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8004cda:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	220f      	movs	r2, #15
 8004ce0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8004ce4:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	220f      	movs	r2, #15
 8004cea:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8004cee:	4b41      	ldr	r3, [pc, #260]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	220f      	movs	r2, #15
 8004cfe:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8004d02:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	220f      	movs	r2, #15
 8004d08:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8004d0c:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	220f      	movs	r2, #15
 8004d12:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8004d16:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	220f      	movs	r2, #15
 8004d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8004d20:	4b34      	ldr	r3, [pc, #208]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2210      	movs	r2, #16
 8004d26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8004d2a:	4b32      	ldr	r3, [pc, #200]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2210      	movs	r2, #16
 8004d30:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2213      	movs	r2, #19
 8004d44:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2211      	movs	r2, #17
 8004d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8004d52:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2210      	movs	r2, #16
 8004d58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2213      	movs	r2, #19
 8004d62:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8004d66:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2213      	movs	r2, #19
 8004d6c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8004d70:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2213      	movs	r2, #19
 8004d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	22a0      	movs	r2, #160	; 0xa0
 8004d8a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8004d8e:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d96:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8004d9a:	4b16      	ldr	r3, [pc, #88]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004da2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8004da6:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f240 22fd 	movw	r2, #765	; 0x2fd
 8004dae:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f240 3252 	movw	r2, #850	; 0x352
 8004dba:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f240 32a2 	movw	r2, #930	; 0x3a2
 8004dc6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f240 4201 	movw	r2, #1025	; 0x401
 8004dd2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8004dd6:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8004dde:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8004de2:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <vTraceInitObjectPropertyTable+0x194>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	20003ca8 	.word	0x20003ca8

08004df8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	825a      	strh	r2, [r3, #18]
 8004e02:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e04:	8a5a      	ldrh	r2, [r3, #18]
 8004e06:	4b2c      	ldr	r3, [pc, #176]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e08:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e0c:	220a      	movs	r2, #10
 8004e0e:	829a      	strh	r2, [r3, #20]
 8004e10:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e12:	8a9a      	ldrh	r2, [r3, #20]
 8004e14:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e16:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8004e18:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e1a:	2214      	movs	r2, #20
 8004e1c:	82da      	strh	r2, [r3, #22]
 8004e1e:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e20:	8ada      	ldrh	r2, [r3, #22]
 8004e22:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e24:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e28:	221e      	movs	r2, #30
 8004e2a:	831a      	strh	r2, [r3, #24]
 8004e2c:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e2e:	8b1a      	ldrh	r2, [r3, #24]
 8004e30:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e32:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8004e34:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e36:	222d      	movs	r2, #45	; 0x2d
 8004e38:	835a      	strh	r2, [r3, #26]
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e3c:	8b5a      	ldrh	r2, [r3, #26]
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e40:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8004e42:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e44:	2232      	movs	r2, #50	; 0x32
 8004e46:	839a      	strh	r2, [r3, #28]
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e4a:	8b9a      	ldrh	r2, [r3, #28]
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e4e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e52:	2237      	movs	r2, #55	; 0x37
 8004e54:	83da      	strh	r2, [r3, #30]
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e58:	8bda      	ldrh	r2, [r3, #30]
 8004e5a:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e5c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8004e5e:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e60:	223c      	movs	r2, #60	; 0x3c
 8004e62:	841a      	strh	r2, [r3, #32]
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e66:	8c1a      	ldrh	r2, [r3, #32]
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e6a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8004e6c:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e6e:	2241      	movs	r2, #65	; 0x41
 8004e70:	845a      	strh	r2, [r3, #34]	; 0x22
 8004e72:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e74:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e78:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e7c:	2209      	movs	r2, #9
 8004e7e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e82:	2213      	movs	r2, #19
 8004e84:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e88:	221d      	movs	r2, #29
 8004e8a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e8e:	222c      	movs	r2, #44	; 0x2c
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e94:	2231      	movs	r2, #49	; 0x31
 8004e96:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004e9a:	2236      	movs	r2, #54	; 0x36
 8004e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004ea0:	223b      	movs	r2, #59	; 0x3b
 8004ea2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004ea6:	2240      	movs	r2, #64	; 0x40
 8004ea8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8004eaa:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <vTraceInitObjectHandleStack+0xc0>)
 8004eac:	2245      	movs	r2, #69	; 0x45
 8004eae:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	200022fc 	.word	0x200022fc

08004ebc <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d827      	bhi.n	8004f1c <pszTraceGetErrorNotEnoughHandles+0x60>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004ef9 	.word	0x08004ef9
 8004ee4:	08004efd 	.word	0x08004efd
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f19 	.word	0x08004f19
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8004efa:	e010      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <pszTraceGetErrorNotEnoughHandles+0x70>)
 8004efe:	e00e      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <pszTraceGetErrorNotEnoughHandles+0x74>)
 8004f02:	e00c      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8004f06:	e00a      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8004f0a:	e008      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <pszTraceGetErrorNotEnoughHandles+0x80>)
 8004f0e:	e006      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <pszTraceGetErrorNotEnoughHandles+0x84>)
 8004f12:	e004      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8004f16:	e002      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8004f1a:	e000      	b.n	8004f1e <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <pszTraceGetErrorNotEnoughHandles+0x90>)
	}
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	0800684c 	.word	0x0800684c
 8004f2c:	08006894 	.word	0x08006894
 8004f30:	080068dc 	.word	0x080068dc
 8004f34:	08006930 	.word	0x08006930
 8004f38:	0800697c 	.word	0x0800697c
 8004f3c:	080069c8 	.word	0x080069c8
 8004f40:	08006a14 	.word	0x08006a14
 8004f44:	08006a68 	.word	0x08006a68
 8004f48:	08006ac0 	.word	0x08006ac0
 8004f4c:	08006b1c 	.word	0x08006b1c

08004f50 <vTraceEnable>:
* 
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
 8004f58:	f000 fcd4 	bl	8005904 <prvTraceInitTraceData>
	
	if (startOption == TRC_START)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <vTraceEnable+0x18>
	{
		vTraceStart();
 8004f62:	f000 f887 	bl	8005074 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}	
}
 8004f66:	e00c      	b.n	8004f82 <vTraceEnable+0x32>
	else if (startOption == TRC_START_AWAIT_HOST)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d103      	bne.n	8004f76 <vTraceEnable+0x26>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <vTraceEnable+0x3c>)
 8004f70:	f000 ffaa 	bl	8005ec8 <prvTraceError>
}
 8004f74:	e005      	b.n	8004f82 <vTraceEnable+0x32>
	else if (startOption != TRC_INIT)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <vTraceEnable+0x32>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8004f7c:	4804      	ldr	r0, [pc, #16]	; (8004f90 <vTraceEnable+0x40>)
 8004f7e:	f000 ffa3 	bl	8005ec8 <prvTraceError>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08006b4c 	.word	0x08006b4c
 8004f90:	08006b8c 	.word	0x08006b8c

08004f94 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 8004f9e:	4b30      	ldr	r3, [pc, #192]	; (8005060 <uiTraceStart+0xcc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8004fa6:	4b2e      	ldr	r3, [pc, #184]	; (8005060 <uiTraceStart+0xcc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <uiTraceStart+0x24>
 8004fae:	482d      	ldr	r0, [pc, #180]	; (8005064 <uiTraceStart+0xd0>)
 8004fb0:	f000 ff8a 	bl	8005ec8 <prvTraceError>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e04e      	b.n	8005056 <uiTraceStart+0xc2>
		return 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e04c      	b.n	8005056 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <uiTraceStart+0xcc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <uiTraceStart+0x36>
		return 1; /* Already running */
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e045      	b.n	8005056 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 8004fca:	4b27      	ldr	r3, [pc, #156]	; (8005068 <uiTraceStart+0xd4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d13e      	bne.n	8005050 <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	2301      	movs	r3, #1
 8004fde:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	bf00      	nop
 8004fe8:	4b20      	ldr	r3, [pc, #128]	; (800506c <uiTraceStart+0xd8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <uiTraceStart+0xd8>)
 8004ff0:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <uiTraceStart+0xcc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8004ffa:	f7ff fe2a 	bl	8004c52 <prvTraceGetCurrentTaskHandle>
 8004ffe:	4603      	mov	r3, r0
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fd98 	bl	8004b36 <prvTraceGetTaskNumberLow16>
 8005006:	4603      	mov	r3, r0
 8005008:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d110      	bne.n	8005032 <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8005010:	2003      	movs	r0, #3
 8005012:	f000 fe09 	bl	8005c28 <prvTraceGetObjectHandle>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <uiTraceStart+0xdc>)
 800501e:	4619      	mov	r1, r3
 8005020:	2003      	movs	r0, #3
 8005022:	f000 fef3 	bl	8005e0c <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2200      	movs	r2, #0
 800502a:	4619      	mov	r1, r3
 800502c:	2003      	movs	r0, #3
 800502e:	f000 fb4d 	bl	80056cc <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fad7 	bl	80055e8 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <uiTraceStart+0xd8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a0a      	ldr	r2, [pc, #40]	; (800506c <uiTraceStart+0xd8>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <uiTraceStart+0xcc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20003ca8 	.word	0x20003ca8
 8005064:	08006bc0 	.word	0x08006bc0
 8005068:	200022ec 	.word	0x200022ec
 800506c:	200022e4 	.word	0x200022e4
 8005070:	08006c04 	.word	0x08006c04

08005074 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8005078:	f7ff ff8c 	bl	8004f94 <uiTraceStart>
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}

08005080 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8005084:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <vTraceStop+0x28>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <vTraceStop+0x28>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <vTraceStop+0x2c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800509c:	4b03      	ldr	r3, [pc, #12]	; (80050ac <vTraceStop+0x2c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4798      	blx	r3
	}
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20003ca8 	.word	0x20003ca8
 80050ac:	200022f4 	.word	0x200022f4

080050b0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d04b      	beq.n	8005158 <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80050c0:	4b28      	ldr	r3, [pc, #160]	; (8005164 <prvTraceStoreTaskReady+0xb4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d049      	beq.n	800515c <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d903      	bls.n	80050d6 <prvTraceStoreTaskReady+0x26>
 80050ce:	4826      	ldr	r0, [pc, #152]	; (8005168 <prvTraceStoreTaskReady+0xb8>)
 80050d0:	f000 fefa 	bl	8005ec8 <prvTraceError>
 80050d4:	e043      	b.n	800515e <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 80050d6:	4b25      	ldr	r3, [pc, #148]	; (800516c <prvTraceStoreTaskReady+0xbc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80050de:	4824      	ldr	r0, [pc, #144]	; (8005170 <prvTraceStoreTaskReady+0xc0>)
 80050e0:	f000 fef2 	bl	8005ec8 <prvTraceError>
		return;
 80050e4:	e03b      	b.n	800515e <prvTraceStoreTaskReady+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ec:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	2301      	movs	r3, #1
 80050f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	bf00      	nop
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <prvTraceStoreTaskReady+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	4a1a      	ldr	r2, [pc, #104]	; (800516c <prvTraceStoreTaskReady+0xbc>)
 8005104:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <prvTraceStoreTaskReady+0xc4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b00      	cmp	r3, #0
 800510e:	d018      	beq.n	8005142 <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005110:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005114:	f000 ffb6 	bl	8006084 <prvTraceGetDTS>
 8005118:	4603      	mov	r3, r0
 800511a:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8005120:	f000 fd06 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 8005124:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2202      	movs	r2, #2
 8005130:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	8b7a      	ldrh	r2, [r7, #26]
 8005136:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	7e7a      	ldrb	r2, [r7, #25]
 800513c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800513e:	f000 ff79 	bl	8006034 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvTraceStoreTaskReady+0xbc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	4a08      	ldr	r2, [pc, #32]	; (800516c <prvTraceStoreTaskReady+0xbc>)
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	e002      	b.n	800515e <prvTraceStoreTaskReady+0xae>
		return;
 8005158:	bf00      	nop
 800515a:	e000      	b.n	800515e <prvTraceStoreTaskReady+0xae>
		return;
 800515c:	bf00      	nop
}
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000014 	.word	0x20000014
 8005168:	08006e18 	.word	0x08006e18
 800516c:	200022e4 	.word	0x200022e4
 8005170:	08006e58 	.word	0x08006e58
 8005174:	20003ca8 	.word	0x20003ca8

08005178 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 8005184:	4b40      	ldr	r3, [pc, #256]	; (8005288 <vTraceStoreMemMangEvent+0x110>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d078      	beq.n	800527e <vTraceStoreMemMangEvent+0x106>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	da03      	bge.n	800519a <vTraceStoreMemMangEvent+0x22>
		size = (uint32_t)(- signed_size);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	425b      	negs	r3, r3
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
 8005198:	e001      	b.n	800519e <vTraceStoreMemMangEvent+0x26>
	else
		size = (uint32_t)(signed_size);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8310 	mrs	r3, PRIMASK
 80051a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80051a4:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
 80051a8:	2301      	movs	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	bf00      	nop
 80051b4:	4b35      	ldr	r3, [pc, #212]	; (800528c <vTraceStoreMemMangEvent+0x114>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	4a34      	ldr	r2, [pc, #208]	; (800528c <vTraceStoreMemMangEvent+0x114>)
 80051bc:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
 80051c4:	4b32      	ldr	r3, [pc, #200]	; (8005290 <vTraceStoreMemMangEvent+0x118>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4413      	add	r3, r2
 80051cc:	4a30      	ldr	r2, [pc, #192]	; (8005290 <vTraceStoreMemMangEvent+0x118>)
 80051ce:	6013      	str	r3, [r2, #0]
	
	if (RecorderDataPtr->recorderActive)
 80051d0:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <vTraceStoreMemMangEvent+0x110>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d046      	beq.n	8005268 <vTraceStoreMemMangEvent+0xf0>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80051da:	20ff      	movs	r0, #255	; 0xff
 80051dc:	f000 ff52 	bl	8006084 <prvTraceGetDTS>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80051e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80051ec:	f000 f95a 	bl	80054a4 <prvTraceGetParam>
 80051f0:	4603      	mov	r3, r0
 80051f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 80051f4:	f000 fc9c 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 80051f8:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d033      	beq.n	8005268 <vTraceStoreMemMangEvent+0xf0>
		{
			ms->dts = dts1;
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005206:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005212:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8005214:	f000 ff0e 	bl	8006034 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800521e:	f000 f941 	bl	80054a4 <prvTraceGetParam>
 8005222:	4603      	mov	r3, r0
 8005224:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 800522c:	f000 fc80 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 8005230:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <vTraceStoreMemMangEvent+0xf0>
			{
				ma->addr_low = addr_low;
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800523c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005244:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	3301      	adds	r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
 800525a:	f000 feeb 	bl	8006034 <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <vTraceStoreMemMangEvent+0x110>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <vTraceStoreMemMangEvent+0x118>)
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <vTraceStoreMemMangEvent+0x114>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3b01      	subs	r3, #1
 800526e:	4a07      	ldr	r2, [pc, #28]	; (800528c <vTraceStoreMemMangEvent+0x114>)
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f383 8810 	msr	PRIMASK, r3
}
 800527c:	e000      	b.n	8005280 <vTraceStoreMemMangEvent+0x108>
		return;
 800527e:	bf00      	nop
}
 8005280:	3738      	adds	r7, #56	; 0x38
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20003ca8 	.word	0x20003ca8
 800528c:	200022e4 	.word	0x200022e4
 8005290:	200022f8 	.word	0x200022f8

08005294 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	460b      	mov	r3, r1
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2bfe      	cmp	r3, #254	; 0xfe
 80052a6:	d903      	bls.n	80052b0 <prvTraceStoreKernelCall+0x1c>
 80052a8:	4832      	ldr	r0, [pc, #200]	; (8005374 <prvTraceStoreKernelCall+0xe0>)
 80052aa:	f000 fe0d 	bl	8005ec8 <prvTraceError>
 80052ae:	e05d      	b.n	800536c <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d903      	bls.n	80052be <prvTraceStoreKernelCall+0x2a>
 80052b6:	4830      	ldr	r0, [pc, #192]	; (8005378 <prvTraceStoreKernelCall+0xe4>)
 80052b8:	f000 fe06 	bl	8005ec8 <prvTraceError>
 80052bc:	e056      	b.n	800536c <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <prvTraceStoreKernelCall+0xe8>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	4413      	add	r3, r2
 80052c6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80052ca:	461a      	mov	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d903      	bls.n	80052da <prvTraceStoreKernelCall+0x46>
 80052d2:	482b      	ldr	r0, [pc, #172]	; (8005380 <prvTraceStoreKernelCall+0xec>)
 80052d4:	f000 fdf8 	bl	8005ec8 <prvTraceError>
 80052d8:	e048      	b.n	800536c <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <prvTraceStoreKernelCall+0xf0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 80052e2:	4829      	ldr	r0, [pc, #164]	; (8005388 <prvTraceStoreKernelCall+0xf4>)
 80052e4:	f000 fdf0 	bl	8005ec8 <prvTraceError>
		return;
 80052e8:	e040      	b.n	800536c <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 80052ea:	4b28      	ldr	r3, [pc, #160]	; (800538c <prvTraceStoreKernelCall+0xf8>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03b      	beq.n	800536a <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f2:	f3ef 8310 	mrs	r3, PRIMASK
 80052f6:	617b      	str	r3, [r7, #20]
  return(result);
 80052f8:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
 80052fc:	2301      	movs	r3, #1
 80052fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	bf00      	nop
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <prvTraceStoreKernelCall+0xf0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3301      	adds	r3, #1
 800530e:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <prvTraceStoreKernelCall+0xf0>)
 8005310:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <prvTraceStoreKernelCall+0xe8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01b      	beq.n	8005354 <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800531c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005320:	f000 feb0 	bl	8006084 <prvTraceGetDTS>
 8005324:	4603      	mov	r3, r0
 8005326:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 800532e:	f000 fbff 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 8005332:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800533e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800534e:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8005350:	f000 fe70 	bl	8006034 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <prvTraceStoreKernelCall+0xf0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3b01      	subs	r3, #1
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <prvTraceStoreKernelCall+0xf0>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	e000      	b.n	800536c <prvTraceStoreKernelCall+0xd8>
		return;
 800536a:	bf00      	nop
}
 800536c:	3728      	adds	r7, #40	; 0x28
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	08006ec8 	.word	0x08006ec8
 8005378:	08006f00 	.word	0x08006f00
 800537c:	20003ca8 	.word	0x20003ca8
 8005380:	08006f48 	.word	0x08006f48
 8005384:	200022e4 	.word	0x200022e4
 8005388:	08006f90 	.word	0x08006f90
 800538c:	200022f0 	.word	0x200022f0

08005390 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	460b      	mov	r3, r1
 800539e:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2bfe      	cmp	r3, #254	; 0xfe
 80053a4:	d903      	bls.n	80053ae <prvTraceStoreKernelCallWithParam+0x1e>
 80053a6:	4838      	ldr	r0, [pc, #224]	; (8005488 <prvTraceStoreKernelCallWithParam+0xf8>)
 80053a8:	f000 fd8e 	bl	8005ec8 <prvTraceError>
 80053ac:	e068      	b.n	8005480 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80053ae:	7afb      	ldrb	r3, [r7, #11]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d903      	bls.n	80053bc <prvTraceStoreKernelCallWithParam+0x2c>
 80053b4:	4835      	ldr	r0, [pc, #212]	; (800548c <prvTraceStoreKernelCallWithParam+0xfc>)
 80053b6:	f000 fd87 	bl	8005ec8 <prvTraceError>
 80053ba:	e061      	b.n	8005480 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 80053bc:	4b34      	ldr	r3, [pc, #208]	; (8005490 <prvTraceStoreKernelCallWithParam+0x100>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	7afb      	ldrb	r3, [r7, #11]
 80053c2:	4413      	add	r3, r2
 80053c4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d903      	bls.n	80053d8 <prvTraceStoreKernelCallWithParam+0x48>
 80053d0:	4830      	ldr	r0, [pc, #192]	; (8005494 <prvTraceStoreKernelCallWithParam+0x104>)
 80053d2:	f000 fd79 	bl	8005ec8 <prvTraceError>
 80053d6:	e053      	b.n	8005480 <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 80053d8:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <prvTraceStoreKernelCallWithParam+0x108>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 80053e0:	482e      	ldr	r0, [pc, #184]	; (800549c <prvTraceStoreKernelCallWithParam+0x10c>)
 80053e2:	f000 fd71 	bl	8005ec8 <prvTraceError>
		return;
 80053e6:	e04b      	b.n	8005480 <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e8:	f3ef 8310 	mrs	r3, PRIMASK
 80053ec:	617b      	str	r3, [r7, #20]
  return(result);
 80053ee:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
 80053f2:	2301      	movs	r3, #1
 80053f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f383 8810 	msr	PRIMASK, r3
}
 80053fc:	bf00      	nop
 80053fe:	4b26      	ldr	r3, [pc, #152]	; (8005498 <prvTraceStoreKernelCallWithParam+0x108>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <prvTraceStoreKernelCallWithParam+0x108>)
 8005406:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005408:	4b21      	ldr	r3, [pc, #132]	; (8005490 <prvTraceStoreKernelCallWithParam+0x100>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02b      	beq.n	800546a <prvTraceStoreKernelCallWithParam+0xda>
 8005412:	4b23      	ldr	r3, [pc, #140]	; (80054a0 <prvTraceStoreKernelCallWithParam+0x110>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d027      	beq.n	800546a <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 800541a:	20ff      	movs	r0, #255	; 0xff
 800541c:	f000 fe32 	bl	8006084 <prvTraceGetDTS>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	20ff      	movs	r0, #255	; 0xff
 800542a:	f000 f83b 	bl	80054a4 <prvTraceGetParam>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 800543a:	f000 fb79 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 800543e:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d011      	beq.n	800546a <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800544c:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800545c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005464:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8005466:	f000 fde5 	bl	8006034 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800546a:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <prvTraceStoreKernelCallWithParam+0x108>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3b01      	subs	r3, #1
 8005470:	4a09      	ldr	r2, [pc, #36]	; (8005498 <prvTraceStoreKernelCallWithParam+0x108>)
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	bf00      	nop
}
 8005480:	3728      	adds	r7, #40	; 0x28
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	08006fc8 	.word	0x08006fc8
 800548c:	08007008 	.word	0x08007008
 8005490:	20003ca8 	.word	0x20003ca8
 8005494:	08007058 	.word	0x08007058
 8005498:	200022e4 	.word	0x200022e4
 800549c:	080070a8 	.word	0x080070a8
 80054a0:	200022f0 	.word	0x200022f0

080054a4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2bff      	cmp	r3, #255	; 0xff
 80054b2:	d009      	beq.n	80054c8 <prvTraceGetParam+0x24>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <prvTraceGetParam+0x24>
 80054be:	4816      	ldr	r0, [pc, #88]	; (8005518 <prvTraceGetParam+0x74>)
 80054c0:	f000 fd02 	bl	8005ec8 <prvTraceError>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	e023      	b.n	8005510 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d801      	bhi.n	80054d4 <prvTraceGetParam+0x30>
	{
		return param;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	e01d      	b.n	8005510 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 80054d4:	f000 fb2c 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 80054d8:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d014      	beq.n	800550a <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	43da      	mvns	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	4013      	ands	r3, r2
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	43da      	mvns	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	4013      	ands	r3, r2
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8005506:	f000 fd95 	bl	8006034 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4013      	ands	r3, r2
	}
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	080070e0 	.word	0x080070e0

0800551c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2bfe      	cmp	r3, #254	; 0xfe
 800552e:	d903      	bls.n	8005538 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8005530:	4828      	ldr	r0, [pc, #160]	; (80055d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8005532:	f000 fcc9 	bl	8005ec8 <prvTraceError>
 8005536:	e049      	b.n	80055cc <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 8005538:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8005540:	4826      	ldr	r0, [pc, #152]	; (80055dc <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8005542:	f000 fcc1 	bl	8005ec8 <prvTraceError>
		return;
 8005546:	e041      	b.n	80055cc <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005548:	f3ef 8310 	mrs	r3, PRIMASK
 800554c:	613b      	str	r3, [r7, #16]
  return(result);
 800554e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8005550:	623b      	str	r3, [r7, #32]
 8005552:	2301      	movs	r3, #1
 8005554:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f383 8810 	msr	PRIMASK, r3
}
 800555c:	bf00      	nop
 800555e:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8005566:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d021      	beq.n	80055b6 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01d      	beq.n	80055b6 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800557a:	20ff      	movs	r0, #255	; 0xff
 800557c:	f000 fd82 	bl	8006084 <prvTraceGetDTS>
 8005580:	4603      	mov	r3, r0
 8005582:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800558a:	f7ff ff8b 	bl	80054a4 <prvTraceGetParam>
 800558e:	4603      	mov	r3, r0
 8005590:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8005592:	f000 facd 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 8005596:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	7ffa      	ldrb	r2, [r7, #31]
 80055a2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055b0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80055b2:	f000 fd3f 	bl	8006034 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80055b6:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	4a06      	ldr	r2, [pc, #24]	; (80055d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f383 8810 	msr	PRIMASK, r3
}
 80055ca:	bf00      	nop
}
 80055cc:	3728      	adds	r7, #40	; 0x28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	0800711c 	.word	0x0800711c
 80055d8:	200022e4 	.word	0x200022e4
 80055dc:	08007174 	.word	0x08007174
 80055e0:	20003ca8 	.word	0x20003ca8
 80055e4:	200022f0 	.word	0x200022f0

080055e8 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	2b0f      	cmp	r3, #15
 80055f6:	d903      	bls.n	8005600 <prvTraceStoreTaskswitch+0x18>
 80055f8:	482f      	ldr	r0, [pc, #188]	; (80056b8 <prvTraceStoreTaskswitch+0xd0>)
 80055fa:	f000 fc65 	bl	8005ec8 <prvTraceError>
 80055fe:	e058      	b.n	80056b2 <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005600:	f3ef 8310 	mrs	r3, PRIMASK
 8005604:	60fb      	str	r3, [r7, #12]
  return(result);
 8005606:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	2301      	movs	r3, #1
 800560c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	bf00      	nop
 8005616:	4b29      	ldr	r3, [pc, #164]	; (80056bc <prvTraceStoreTaskswitch+0xd4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <prvTraceStoreTaskswitch+0xd4>)
 800561e:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8005620:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <prvTraceStoreTaskswitch+0xd8>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	79fa      	ldrb	r2, [r7, #7]
 8005626:	429a      	cmp	r2, r3
 8005628:	d038      	beq.n	800569c <prvTraceStoreTaskswitch+0xb4>
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <prvTraceStoreTaskswitch+0xdc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d033      	beq.n	800569c <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8005634:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <prvTraceStoreTaskswitch+0xe0>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800563a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800563e:	f000 fd21 	bl	8006084 <prvTraceGetDTS>
 8005642:	4603      	mov	r3, r0
 8005644:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <prvTraceStoreTaskswitch+0xd8>)
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <prvTraceStoreTaskswitch+0xd8>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8005652:	f000 fa6d 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 8005656:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01e      	beq.n	800569c <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 800565e:	4b18      	ldr	r3, [pc, #96]	; (80056c0 <prvTraceStoreTaskswitch+0xd8>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	4619      	mov	r1, r3
 8005664:	2003      	movs	r0, #3
 8005666:	f000 f8e7 	bl	8005838 <prvTraceGetObjectState>
 800566a:	4603      	mov	r3, r0
 800566c:	2b01      	cmp	r3, #1
 800566e:	d103      	bne.n	8005678 <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2207      	movs	r2, #7
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e002      	b.n	800567e <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2206      	movs	r2, #6
 800567c:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	8b7a      	ldrh	r2, [r7, #26]
 8005682:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	7e7a      	ldrb	r2, [r7, #25]
 8005688:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 800568a:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <prvTraceStoreTaskswitch+0xd8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2201      	movs	r2, #1
 8005690:	4619      	mov	r1, r3
 8005692:	2003      	movs	r0, #3
 8005694:	f000 f894 	bl	80057c0 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8005698:	f000 fccc 	bl	8006034 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <prvTraceStoreTaskswitch+0xd4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4a06      	ldr	r2, [pc, #24]	; (80056bc <prvTraceStoreTaskswitch+0xd4>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f383 8810 	msr	PRIMASK, r3
}
 80056b0:	bf00      	nop
}
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	080071ac 	.word	0x080071ac
 80056bc:	200022e4 	.word	0x200022e4
 80056c0:	200022f0 	.word	0x200022f0
 80056c4:	20003ca8 	.word	0x20003ca8
 80056c8:	200022d4 	.word	0x200022d4

080056cc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
 80056d6:	460b      	mov	r3, r1
 80056d8:	71bb      	strb	r3, [r7, #6]
 80056da:	4613      	mov	r3, r2
 80056dc:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d903      	bls.n	80056ec <prvTraceSetPriorityProperty+0x20>
 80056e4:	4814      	ldr	r0, [pc, #80]	; (8005738 <prvTraceSetPriorityProperty+0x6c>)
 80056e6:	f000 fbef 	bl	8005ec8 <prvTraceError>
 80056ea:	e022      	b.n	8005732 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80056ec:	4b13      	ldr	r3, [pc, #76]	; (800573c <prvTraceSetPriorityProperty+0x70>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	4413      	add	r3, r2
 80056f4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80056f8:	79ba      	ldrb	r2, [r7, #6]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d903      	bls.n	8005706 <prvTraceSetPriorityProperty+0x3a>
 80056fe:	4810      	ldr	r0, [pc, #64]	; (8005740 <prvTraceSetPriorityProperty+0x74>)
 8005700:	f000 fbe2 	bl	8005ec8 <prvTraceError>
 8005704:	e015      	b.n	8005732 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <prvTraceSetPriorityProperty+0x70>)
 8005708:	681c      	ldr	r4, [r3, #0]
 800570a:	79fa      	ldrb	r2, [r7, #7]
 800570c:	79bb      	ldrb	r3, [r7, #6]
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fa31 	bl	8005b78 <uiIndexOfObject>
 8005716:	4603      	mov	r3, r0
 8005718:	4619      	mov	r1, r3
 800571a:	4b08      	ldr	r3, [pc, #32]	; (800573c <prvTraceSetPriorityProperty+0x70>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	4413      	add	r3, r2
 8005722:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005726:	440b      	add	r3, r1
 8005728:	3301      	adds	r3, #1
 800572a:	4423      	add	r3, r4
 800572c:	797a      	ldrb	r2, [r7, #5]
 800572e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	bd90      	pop	{r4, r7, pc}
 8005738:	08007340 	.word	0x08007340
 800573c:	20003ca8 	.word	0x20003ca8
 8005740:	0800738c 	.word	0x0800738c

08005744 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	460a      	mov	r2, r1
 800574e:	71fb      	strb	r3, [r7, #7]
 8005750:	4613      	mov	r3, r2
 8005752:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	2b08      	cmp	r3, #8
 8005758:	d904      	bls.n	8005764 <prvTraceGetPriorityProperty+0x20>
 800575a:	4816      	ldr	r0, [pc, #88]	; (80057b4 <prvTraceGetPriorityProperty+0x70>)
 800575c:	f000 fbb4 	bl	8005ec8 <prvTraceError>
 8005760:	2300      	movs	r3, #0
 8005762:	e022      	b.n	80057aa <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005764:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvTraceGetPriorityProperty+0x74>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	4413      	add	r3, r2
 800576c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005770:	79ba      	ldrb	r2, [r7, #6]
 8005772:	429a      	cmp	r2, r3
 8005774:	d904      	bls.n	8005780 <prvTraceGetPriorityProperty+0x3c>
 8005776:	4811      	ldr	r0, [pc, #68]	; (80057bc <prvTraceGetPriorityProperty+0x78>)
 8005778:	f000 fba6 	bl	8005ec8 <prvTraceError>
 800577c:	2300      	movs	r3, #0
 800577e:	e014      	b.n	80057aa <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <prvTraceGetPriorityProperty+0x74>)
 8005782:	681c      	ldr	r4, [r3, #0]
 8005784:	79fa      	ldrb	r2, [r7, #7]
 8005786:	79bb      	ldrb	r3, [r7, #6]
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f9f4 	bl	8005b78 <uiIndexOfObject>
 8005790:	4603      	mov	r3, r0
 8005792:	4619      	mov	r1, r3
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <prvTraceGetPriorityProperty+0x74>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	4413      	add	r3, r2
 800579c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057a0:	440b      	add	r3, r1
 80057a2:	3301      	adds	r3, #1
 80057a4:	4423      	add	r3, r4
 80057a6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd90      	pop	{r4, r7, pc}
 80057b2:	bf00      	nop
 80057b4:	080073cc 	.word	0x080073cc
 80057b8:	20003ca8 	.word	0x20003ca8
 80057bc:	08007418 	.word	0x08007418

080057c0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
 80057ca:	460b      	mov	r3, r1
 80057cc:	71bb      	strb	r3, [r7, #6]
 80057ce:	4613      	mov	r3, r2
 80057d0:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d903      	bls.n	80057e0 <prvTraceSetObjectState+0x20>
 80057d8:	4814      	ldr	r0, [pc, #80]	; (800582c <prvTraceSetObjectState+0x6c>)
 80057da:	f000 fb75 	bl	8005ec8 <prvTraceError>
 80057de:	e021      	b.n	8005824 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <prvTraceSetObjectState+0x70>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	4413      	add	r3, r2
 80057e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80057ec:	79ba      	ldrb	r2, [r7, #6]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d903      	bls.n	80057fa <prvTraceSetObjectState+0x3a>
 80057f2:	4810      	ldr	r0, [pc, #64]	; (8005834 <prvTraceSetObjectState+0x74>)
 80057f4:	f000 fb68 	bl	8005ec8 <prvTraceError>
 80057f8:	e014      	b.n	8005824 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <prvTraceSetObjectState+0x70>)
 80057fc:	681c      	ldr	r4, [r3, #0]
 80057fe:	79fa      	ldrb	r2, [r7, #7]
 8005800:	79bb      	ldrb	r3, [r7, #6]
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f9b7 	bl	8005b78 <uiIndexOfObject>
 800580a:	4603      	mov	r3, r0
 800580c:	4619      	mov	r1, r3
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <prvTraceSetObjectState+0x70>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	4413      	add	r3, r2
 8005816:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800581a:	440b      	add	r3, r1
 800581c:	4423      	add	r3, r4
 800581e:	797a      	ldrb	r2, [r7, #5]
 8005820:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bd90      	pop	{r4, r7, pc}
 800582a:	bf00      	nop
 800582c:	08007458 	.word	0x08007458
 8005830:	20003ca8 	.word	0x20003ca8
 8005834:	0800749c 	.word	0x0800749c

08005838 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	460a      	mov	r2, r1
 8005842:	71fb      	strb	r3, [r7, #7]
 8005844:	4613      	mov	r3, r2
 8005846:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	2b08      	cmp	r3, #8
 800584c:	d904      	bls.n	8005858 <prvTraceGetObjectState+0x20>
 800584e:	4815      	ldr	r0, [pc, #84]	; (80058a4 <prvTraceGetObjectState+0x6c>)
 8005850:	f000 fb3a 	bl	8005ec8 <prvTraceError>
 8005854:	2300      	movs	r3, #0
 8005856:	e021      	b.n	800589c <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005858:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <prvTraceGetObjectState+0x70>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	4413      	add	r3, r2
 8005860:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005864:	79ba      	ldrb	r2, [r7, #6]
 8005866:	429a      	cmp	r2, r3
 8005868:	d904      	bls.n	8005874 <prvTraceGetObjectState+0x3c>
 800586a:	4810      	ldr	r0, [pc, #64]	; (80058ac <prvTraceGetObjectState+0x74>)
 800586c:	f000 fb2c 	bl	8005ec8 <prvTraceError>
 8005870:	2300      	movs	r3, #0
 8005872:	e013      	b.n	800589c <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <prvTraceGetObjectState+0x70>)
 8005876:	681c      	ldr	r4, [r3, #0]
 8005878:	79fa      	ldrb	r2, [r7, #7]
 800587a:	79bb      	ldrb	r3, [r7, #6]
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f97a 	bl	8005b78 <uiIndexOfObject>
 8005884:	4603      	mov	r3, r0
 8005886:	4619      	mov	r1, r3
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <prvTraceGetObjectState+0x70>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	4413      	add	r3, r2
 8005890:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005894:	440b      	add	r3, r1
 8005896:	4423      	add	r3, r4
 8005898:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd90      	pop	{r4, r7, pc}
 80058a4:	080074d8 	.word	0x080074d8
 80058a8:	20003ca8 	.word	0x20003ca8
 80058ac:	0800751c 	.word	0x0800751c

080058b0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <prvTraceSetTaskInstanceFinished+0x4c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80058c2:	79fa      	ldrb	r2, [r7, #7]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <prvTraceSetTaskInstanceFinished+0x20>
 80058c8:	480d      	ldr	r0, [pc, #52]	; (8005900 <prvTraceSetTaskInstanceFinished+0x50>)
 80058ca:	f000 fafd 	bl	8005ec8 <prvTraceError>
 80058ce:	e011      	b.n	80058f4 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <prvTraceSetTaskInstanceFinished+0x4c>)
 80058d2:	681c      	ldr	r4, [r3, #0]
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	2103      	movs	r1, #3
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 f94d 	bl	8005b78 <uiIndexOfObject>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <prvTraceSetTaskInstanceFinished+0x4c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80058ea:	4413      	add	r3, r2
 80058ec:	4423      	add	r3, r4
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
#endif
}
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd90      	pop	{r4, r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20003ca8 	.word	0x20003ca8
 8005900:	08007558 	.word	0x08007558

08005904 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
 8005908:	4b83      	ldr	r3, [pc, #524]	; (8005b18 <prvTraceInitTraceData+0x214>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8005910:	4b81      	ldr	r3, [pc, #516]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005912:	4a82      	ldr	r2, [pc, #520]	; (8005b1c <prvTraceInitTraceData+0x218>)
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e006      	b.n	8005926 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
 8005918:	4b7f      	ldr	r3, [pc, #508]	; (8005b18 <prvTraceInitTraceData+0x214>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	f000 80f6 	beq.w	8005b12 <prvTraceInitTraceData+0x20e>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
 8005926:	4b7e      	ldr	r3, [pc, #504]	; (8005b20 <prvTraceInitTraceData+0x21c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a7e      	ldr	r2, [pc, #504]	; (8005b24 <prvTraceInitTraceData+0x220>)
 800592c:	6013      	str	r3, [r2, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 800592e:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f641 1218 	movw	r2, #6424	; 0x1918
 8005936:	2100      	movs	r1, #0
 8005938:	4618      	mov	r0, r3
 800593a:	f000 ff6f 	bl	800681c <memset>
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800593e:	4b76      	ldr	r3, [pc, #472]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8005946:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8005948:	4b73      	ldr	r3, [pc, #460]	; (8005b18 <prvTraceInitTraceData+0x214>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2205      	movs	r2, #5
 800594e:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8005950:	4b71      	ldr	r3, [pc, #452]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2200      	movs	r2, #0
 8005956:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8005958:	4b6f      	ldr	r3, [pc, #444]	; (8005b18 <prvTraceInitTraceData+0x214>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f641 1218 	movw	r2, #6424	; 0x1918
 8005960:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8005962:	4b6d      	ldr	r3, [pc, #436]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800596a:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 800596c:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <prvTraceInitTraceData+0x214>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8005976:	4b68      	ldr	r3, [pc, #416]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 800597e:	4b66      	ldr	r3, [pc, #408]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2200      	movs	r2, #0
 8005984:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8005986:	f7ff f96b 	bl	8004c60 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 800598a:	4b63      	ldr	r3, [pc, #396]	; (8005b18 <prvTraceInitTraceData+0x214>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8005992:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8005996:	4b60      	ldr	r3, [pc, #384]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800599e:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80059a2:	4b5d      	ldr	r3, [pc, #372]	; (8005b18 <prvTraceInitTraceData+0x214>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80059ac:	4b5a      	ldr	r3, [pc, #360]	; (8005b18 <prvTraceInitTraceData+0x214>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80059b4:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80059b8:	4b57      	ldr	r3, [pc, #348]	; (8005b18 <prvTraceInitTraceData+0x214>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80059c0:	2250      	movs	r2, #80	; 0x50
 80059c2:	4959      	ldr	r1, [pc, #356]	; (8005b28 <prvTraceInitTraceData+0x224>)
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 f9fb 	bl	8005dc0 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80059ca:	4b53      	ldr	r3, [pc, #332]	; (8005b18 <prvTraceInitTraceData+0x214>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 80059d2:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 80059d6:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <prvTraceInitTraceData+0x214>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059de:	220a      	movs	r2, #10
 80059e0:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
	RecorderDataPtr->endmarker1 = 0x0B;
 80059e4:	4b4c      	ldr	r3, [pc, #304]	; (8005b18 <prvTraceInitTraceData+0x214>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ec:	220b      	movs	r2, #11
 80059ee:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
	RecorderDataPtr->endmarker2 = 0x0C;
 80059f2:	4b49      	ldr	r3, [pc, #292]	; (8005b18 <prvTraceInitTraceData+0x214>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fa:	220c      	movs	r2, #12
 80059fc:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
	RecorderDataPtr->endmarker3 = 0x0D;
 8005a00:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a08:	220d      	movs	r2, #13
 8005a0a:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
	RecorderDataPtr->endmarker4 = 0x71;
 8005a0e:	4b42      	ldr	r3, [pc, #264]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a16:	2271      	movs	r2, #113	; 0x71
 8005a18:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	RecorderDataPtr->endmarker5 = 0x72;
 8005a1c:	4b3e      	ldr	r3, [pc, #248]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	2272      	movs	r2, #114	; 0x72
 8005a26:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
	RecorderDataPtr->endmarker6 = 0x73;
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	2273      	movs	r2, #115	; 0x73
 8005a34:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
	RecorderDataPtr->endmarker7 = 0x74;
 8005a38:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a40:	2274      	movs	r2, #116	; 0x74
 8005a42:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
	RecorderDataPtr->endmarker8 = 0xF1;
 8005a46:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4e:	22f1      	movs	r2, #241	; 0xf1
 8005a50:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
	RecorderDataPtr->endmarker9 = 0xF2;
 8005a54:	4b30      	ldr	r3, [pc, #192]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5c:	22f2      	movs	r2, #242	; 0xf2
 8005a5e:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
	RecorderDataPtr->endmarker10 = 0xF3;
 8005a62:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6a:	22f3      	movs	r2, #243	; 0xf3
 8005a6c:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
	RecorderDataPtr->endmarker11 = 0xF4;
 8005a70:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a78:	22f4      	movs	r2, #244	; 0xf4
 8005a7a:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 8005a7e:	f7ff f9bb 	bl	8004df8 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	22f4      	movs	r2, #244	; 0xf4
 8005a88:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	22f3      	movs	r2, #243	; 0xf3
 8005a90:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8005a92:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	22f2      	movs	r2, #242	; 0xf2
 8005a98:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	22f1      	movs	r2, #241	; 0xf1
 8005aa0:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8005aa2:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2274      	movs	r2, #116	; 0x74
 8005aa8:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2273      	movs	r2, #115	; 0x73
 8005ab0:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8005ab2:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2272      	movs	r2, #114	; 0x72
 8005ab8:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2271      	movs	r2, #113	; 0x71
 8005ac0:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 8005ad2:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 8005ada:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <prvTraceInitTraceData+0x228>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d010      	beq.n	8005b0c <prvTraceInitTraceData+0x208>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005af2:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <prvTraceInitTraceData+0x228>)
 8005af4:	6811      	ldr	r1, [r2, #0]
 8005af6:	2250      	movs	r2, #80	; 0x50
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f961 	bl	8005dc0 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <prvTraceInitTraceData+0x214>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		vTraceStop();
 8005b08:	f7ff faba 	bl	8005080 <vTraceStop>
	}


	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8005b0c:	f000 fb92 	bl	8006234 <prvTraceInitCortexM>
 8005b10:	e000      	b.n	8005b14 <prvTraceInitTraceData+0x210>
			return;
 8005b12:	bf00      	nop
#endif
}
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20003ca8 	.word	0x20003ca8
 8005b1c:	20002390 	.word	0x20002390
 8005b20:	e0001004 	.word	0xe0001004
 8005b24:	2000238c 	.word	0x2000238c
 8005b28:	080075a0 	.word	0x080075a0
 8005b2c:	200022ec 	.word	0x200022ec

08005b30 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8005b34:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e013      	b.n	8005b6a <prvTraceNextFreeEventBufferSlot+0x3a>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b4c:	d304      	bcc.n	8005b58 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8005b4e:	4809      	ldr	r0, [pc, #36]	; (8005b74 <prvTraceNextFreeEventBufferSlot+0x44>)
 8005b50:	f000 f9ba 	bl	8005ec8 <prvTraceError>
		return NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e008      	b.n	8005b6a <prvTraceNextFreeEventBufferSlot+0x3a>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005b68:	4413      	add	r3, r2
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20003ca8 	.word	0x20003ca8
 8005b74:	080075b4 	.word	0x080075b4

08005b78 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	460a      	mov	r2, r1
 8005b82:	71fb      	strb	r3, [r7, #7]
 8005b84:	4613      	mov	r3, r2
 8005b86:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005b88:	79bb      	ldrb	r3, [r7, #6]
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d904      	bls.n	8005b98 <uiIndexOfObject+0x20>
 8005b8e:	4822      	ldr	r0, [pc, #136]	; (8005c18 <uiIndexOfObject+0xa0>)
 8005b90:	f000 f99a 	bl	8005ec8 <prvTraceError>
 8005b94:	2300      	movs	r3, #0
 8005b96:	e03a      	b.n	8005c0e <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <uiIndexOfObject+0x38>
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <uiIndexOfObject+0xa4>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	79bb      	ldrb	r3, [r7, #6]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005baa:	79fa      	ldrb	r2, [r7, #7]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d904      	bls.n	8005bba <uiIndexOfObject+0x42>
 8005bb0:	481b      	ldr	r0, [pc, #108]	; (8005c20 <uiIndexOfObject+0xa8>)
 8005bb2:	f000 f989 	bl	8005ec8 <prvTraceError>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e029      	b.n	8005c0e <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8005bba:	79bb      	ldrb	r3, [r7, #6]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d822      	bhi.n	8005c06 <uiIndexOfObject+0x8e>
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01f      	beq.n	8005c06 <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <uiIndexOfObject+0xa4>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	79bb      	ldrb	r3, [r7, #6]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8005bd2:	79fa      	ldrb	r2, [r7, #7]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d816      	bhi.n	8005c06 <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <uiIndexOfObject+0xa4>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	79bb      	ldrb	r3, [r7, #6]
 8005bde:	3340      	adds	r3, #64	; 0x40
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	891a      	ldrh	r2, [r3, #8]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <uiIndexOfObject+0xa4>)
 8005be8:	6819      	ldr	r1, [r3, #0]
 8005bea:	79bb      	ldrb	r3, [r7, #6]
 8005bec:	440b      	add	r3, r1
 8005bee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005bf2:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8005bf4:	79f9      	ldrb	r1, [r7, #7]
 8005bf6:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005bf8:	b289      	uxth	r1, r1
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	e003      	b.n	8005c0e <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8005c06:	4807      	ldr	r0, [pc, #28]	; (8005c24 <uiIndexOfObject+0xac>)
 8005c08:	f000 f95e 	bl	8005ec8 <prvTraceError>
	return 0;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	080075dc 	.word	0x080075dc
 8005c1c:	20003ca8 	.word	0x20003ca8
 8005c20:	0800761c 	.word	0x0800761c
 8005c24:	0800765c 	.word	0x0800765c

08005c28 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8005c32:	4b4e      	ldr	r3, [pc, #312]	; (8005d6c <prvTraceGetObjectHandle+0x144>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <prvTraceGetObjectHandle+0x1c>
 8005c3a:	484d      	ldr	r0, [pc, #308]	; (8005d70 <prvTraceGetObjectHandle+0x148>)
 8005c3c:	f000 f944 	bl	8005ec8 <prvTraceError>
 8005c40:	2300      	movs	r3, #0
 8005c42:	e08f      	b.n	8005d64 <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d904      	bls.n	8005c54 <prvTraceGetObjectHandle+0x2c>
 8005c4a:	484a      	ldr	r0, [pc, #296]	; (8005d74 <prvTraceGetObjectHandle+0x14c>)
 8005c4c:	f000 f93c 	bl	8005ec8 <prvTraceError>
 8005c50:	2300      	movs	r3, #0
 8005c52:	e087      	b.n	8005d64 <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c54:	f3ef 8310 	mrs	r3, PRIMASK
 8005c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f383 8810 	msr	PRIMASK, r3
}
 8005c68:	bf00      	nop
 8005c6a:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <prvTraceGetObjectHandle+0x150>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4a41      	ldr	r2, [pc, #260]	; (8005d78 <prvTraceGetObjectHandle+0x150>)
 8005c72:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	4a41      	ldr	r2, [pc, #260]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4b40      	ldr	r3, [pc, #256]	; (8005d80 <prvTraceGetObjectHandle+0x158>)
 8005c80:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8005c82:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <prvTraceGetObjectHandle+0x158>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d114      	bne.n	8005cbc <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8005c92:	4b3b      	ldr	r3, [pc, #236]	; (8005d80 <prvTraceGetObjectHandle+0x158>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	4938      	ldr	r1, [pc, #224]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	440b      	add	r3, r1
 8005ca2:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8005caa:	4b35      	ldr	r3, [pc, #212]	; (8005d80 <prvTraceGetObjectHandle+0x158>)
 8005cac:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8005cae:	3201      	adds	r2, #1
 8005cb0:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8005cb2:	4a32      	ldr	r2, [pc, #200]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8005cbc:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <prvTraceGetObjectHandle+0x158>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2e      	ldr	r2, [pc, #184]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005cc8:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005cce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	4929      	ldr	r1, [pc, #164]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005cd6:	3310      	adds	r3, #16
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	440b      	add	r3, r1
 8005cdc:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d90a      	bls.n	8005cf8 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff f8e9 	bl	8004ebc <pszTraceGetErrorNotEnoughHandles>
 8005cea:	4603      	mov	r3, r0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f8eb 	bl	8005ec8 <prvTraceError>
		handle = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e029      	b.n	8005d4c <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	4a20      	ldr	r2, [pc, #128]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005cfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005d00:	3201      	adds	r2, #1
 8005d02:	b291      	uxth	r1, r2
 8005d04:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d12:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005d18:	3308      	adds	r3, #8
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8005d20:	1acb      	subs	r3, r1, r3
 8005d22:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005d28:	3318      	adds	r3, #24
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	88db      	ldrh	r3, [r3, #6]
 8005d30:	461a      	mov	r2, r3
		if (hndCount >
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4293      	cmp	r3, r2
 8005d36:	dd09      	ble.n	8005d4c <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8005d3e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005d40:	4a0e      	ldr	r2, [pc, #56]	; (8005d7c <prvTraceGetObjectHandle+0x154>)
 8005d42:	3318      	adds	r3, #24
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	4413      	add	r3, r2
 8005d48:	460a      	mov	r2, r1
 8005d4a:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <prvTraceGetObjectHandle+0x150>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <prvTraceGetObjectHandle+0x150>)
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f383 8810 	msr	PRIMASK, r3
}
 8005d60:	bf00      	nop

	return handle;
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20003ca8 	.word	0x20003ca8
 8005d70:	08006c10 	.word	0x08006c10
 8005d74:	0800769c 	.word	0x0800769c
 8005d78:	200022e4 	.word	0x200022e4
 8005d7c:	200022fc 	.word	0x200022fc
 8005d80:	20003cac 	.word	0x20003cac

08005d84 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	460a      	mov	r2, r1
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	4613      	mov	r3, r2
 8005d92:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8005d94:	79fa      	ldrb	r2, [r7, #7]
 8005d96:	79bb      	ldrb	r3, [r7, #6]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff feec 	bl	8005b78 <uiIndexOfObject>
 8005da0:	4603      	mov	r3, r0
 8005da2:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <prvMarkObjectAsUsed+0x38>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	89fb      	ldrh	r3, [r7, #14]
 8005daa:	4413      	add	r3, r2
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20003ca8 	.word	0x20003ca8

08005dc0 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e010      	b.n	8005df4 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68f9      	ldr	r1, [r7, #12]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	440b      	add	r3, r1
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4413      	add	r3, r2
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	3301      	adds	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d3ea      	bcc.n	8005dd2 <prvStrncpy+0x12>
			break;
	}
}
 8005dfc:	e000      	b.n	8005e00 <prvStrncpy+0x40>
			break;
 8005dfe:	bf00      	nop
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr
	...

08005e0c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	603a      	str	r2, [r7, #0]
 8005e16:	71fb      	strb	r3, [r7, #7]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <prvTraceSetObjectName+0x1e>
 8005e22:	4823      	ldr	r0, [pc, #140]	; (8005eb0 <prvTraceSetObjectName+0xa4>)
 8005e24:	f000 f850 	bl	8005ec8 <prvTraceError>
 8005e28:	e03e      	b.n	8005ea8 <prvTraceSetObjectName+0x9c>

	if (objectclass >= TRACE_NCLASSES)
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d903      	bls.n	8005e38 <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8005e30:	4820      	ldr	r0, [pc, #128]	; (8005eb4 <prvTraceSetObjectName+0xa8>)
 8005e32:	f000 f849 	bl	8005ec8 <prvTraceError>
		return;
 8005e36:	e037      	b.n	8005ea8 <prvTraceSetObjectName+0x9c>
	}

	if (handle == 0)
 8005e38:	79bb      	ldrb	r3, [r7, #6]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8005e3e:	481e      	ldr	r0, [pc, #120]	; (8005eb8 <prvTraceSetObjectName+0xac>)
 8005e40:	f000 f842 	bl	8005ec8 <prvTraceError>
		return;
 8005e44:	e030      	b.n	8005ea8 <prvTraceSetObjectName+0x9c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <prvTraceSetObjectName+0xb0>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005e52:	79ba      	ldrb	r2, [r7, #6]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d908      	bls.n	8005e6a <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff f82e 	bl	8004ebc <pszTraceGetErrorNotEnoughHandles>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 f830 	bl	8005ec8 <prvTraceError>
 8005e68:	e01e      	b.n	8005ea8 <prvTraceSetObjectName+0x9c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8005e6a:	79fa      	ldrb	r2, [r7, #7]
 8005e6c:	79bb      	ldrb	r3, [r7, #6]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fe81 	bl	8005b78 <uiIndexOfObject>
 8005e76:	4603      	mov	r3, r0
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <prvTraceSetObjectName+0xb4>)
 8005e7c:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8005e7e:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <prvTraceSetObjectName+0xb8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d110      	bne.n	8005ea8 <prvTraceSetObjectName+0x9c>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <prvTraceSetObjectName+0xb0>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <prvTraceSetObjectName+0xb4>)
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	3398      	adds	r3, #152	; 0x98
 8005e90:	4413      	add	r3, r2
 8005e92:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <prvTraceSetObjectName+0xb0>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	f7ff ff8c 	bl	8005dc0 <prvStrncpy>
		}
	}
}
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	080077a0 	.word	0x080077a0
 8005eb4:	080077d4 	.word	0x080077d4
 8005eb8:	08007804 	.word	0x08007804
 8005ebc:	20003ca8 	.word	0x20003ca8
 8005ec0:	20003cb0 	.word	0x20003cb0
 8005ec4:	200022ec 	.word	0x200022ec

08005ec8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <prvTraceError+0x50>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <prvTraceError+0x14>
	{
		vTraceStop();
 8005ed8:	f7ff f8d2 	bl	8005080 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <prvTraceError+0x54>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d115      	bne.n	8005f10 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8005ee4:	4a0d      	ldr	r2, [pc, #52]	; (8005f1c <prvTraceError+0x54>)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <prvTraceError+0x50>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005ef2:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <prvTraceError+0x50>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005efa:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <prvTraceError+0x54>)
 8005efc:	6811      	ldr	r1, [r2, #0]
 8005efe:	2250      	movs	r2, #80	; 0x50
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff ff5d 	bl	8005dc0 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8005f06:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <prvTraceError+0x50>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		}
	}
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20003ca8 	.word	0x20003ca8
 8005f1c:	200022ec 	.word	0x200022ec

08005f20 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d172      	bne.n	800601e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
 8005f38:	483c      	ldr	r0, [pc, #240]	; (800602c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8005f3a:	f7ff ffc5 	bl	8005ec8 <prvTraceError>
 8005f3e:	e072      	b.n	8006026 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x106>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4413      	add	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8005f4c:	4b38      	ldr	r3, [pc, #224]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8005f5a:	2b98      	cmp	r3, #152	; 0x98
 8005f5c:	d928      	bls.n	8005fb0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8005f5e:	4b34      	ldr	r3, [pc, #208]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8005f6c:	2ba7      	cmp	r3, #167	; 0xa7
 8005f6e:	d81f      	bhi.n	8005fb0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8005f70:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8005f7e:	3368      	adds	r3, #104	; 0x68
 8005f80:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8005f82:	7bfa      	ldrb	r2, [r7, #15]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	441a      	add	r2, r3
 8005f88:	4b29      	ldr	r3, [pc, #164]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d241      	bcs.n	8006016 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8005f92:	4b27      	ldr	r3, [pc, #156]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005f9e:	18d0      	adds	r0, r2, r3
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	2100      	movs	r1, #0
 8005faa:	f000 fc37 	bl	800681c <memset>
		{
 8005fae:	e032      	b.n	8006016 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8005fb0:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d12a      	bne.n	8006018 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	4b1a      	ldr	r3, [pc, #104]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d20c      	bcs.n	8005fea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xca>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8005fd0:	4b17      	ldr	r3, [pc, #92]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005fdc:	4413      	add	r3, r2
 8005fde:	2208      	movs	r2, #8
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fc1a 	bl	800681c <memset>
 8005fe8:	e016      	b.n	8006018 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fc10 	bl	800681c <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8006008:	4413      	add	r3, r2
 800600a:	2204      	movs	r2, #4
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fc04 	bl	800681c <memset>
 8006014:	e000      	b.n	8006018 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
 8006016:	bf00      	nop
			}
		}
		i++;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3301      	adds	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	429a      	cmp	r2, r3
 8006024:	d38c      	bcc.n	8005f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	08007864 	.word	0x08007864
 8006030:	20003ca8 	.word	0x20003ca8

08006034 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8006038:	4b11      	ldr	r3, [pc, #68]	; (8006080 <prvTraceUpdateCounters+0x4c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01b      	beq.n	800607a <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <prvTraceUpdateCounters+0x4c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	3201      	adds	r2, #1
 800604a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <prvTraceUpdateCounters+0x4c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	3201      	adds	r2, #1
 8006054:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8006056:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <prvTraceUpdateCounters+0x4c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006060:	d307      	bcc.n	8006072 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <prvTraceUpdateCounters+0x4c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2201      	movs	r2, #1
 8006068:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <prvTraceUpdateCounters+0x4c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8006072:	2001      	movs	r0, #1
 8006074:	f7ff ff54 	bl	8005f20 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8006078:	e000      	b.n	800607c <prvTraceUpdateCounters+0x48>
		return;
 800607a:	bf00      	nop
#endif
}
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20003ca8 	.word	0x20003ca8

08006084 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	2bff      	cmp	r3, #255	; 0xff
 800609e:	d009      	beq.n	80060b4 <prvTraceGetDTS+0x30>
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <prvTraceGetDTS+0x30>
 80060aa:	485a      	ldr	r0, [pc, #360]	; (8006214 <prvTraceGetDTS+0x190>)
 80060ac:	f7ff ff0c 	bl	8005ec8 <prvTraceError>
 80060b0:	2300      	movs	r3, #0
 80060b2:	e0ab      	b.n	800620c <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 80060b4:	4b58      	ldr	r3, [pc, #352]	; (8006218 <prvTraceGetDTS+0x194>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d116      	bne.n	80060ec <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 80060be:	4b57      	ldr	r3, [pc, #348]	; (800621c <prvTraceGetDTS+0x198>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d006      	beq.n	80060d4 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80060c6:	4b55      	ldr	r3, [pc, #340]	; (800621c <prvTraceGetDTS+0x198>)
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b53      	ldr	r3, [pc, #332]	; (8006218 <prvTraceGetDTS+0x194>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	0892      	lsrs	r2, r2, #2
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
 80060d2:	e00b      	b.n	80060ec <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 80060d4:	4b52      	ldr	r3, [pc, #328]	; (8006220 <prvTraceGetDTS+0x19c>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b52      	ldr	r3, [pc, #328]	; (8006224 <prvTraceGetDTS+0x1a0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d005      	beq.n	80060ec <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80060e0:	4b51      	ldr	r3, [pc, #324]	; (8006228 <prvTraceGetDTS+0x1a4>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b4c      	ldr	r3, [pc, #304]	; (8006218 <prvTraceGetDTS+0x194>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	0892      	lsrs	r2, r2, #2
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80060ec:	f107 030c 	add.w	r3, r7, #12
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 f8d7 	bl	80062a4 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4b4c      	ldr	r3, [pc, #304]	; (800622c <prvTraceGetDTS+0x1a8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a4a      	ldr	r2, [pc, #296]	; (800622c <prvTraceGetDTS+0x1a8>)
 8006104:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8006106:	4b44      	ldr	r3, [pc, #272]	; (8006218 <prvTraceGetDTS+0x194>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d043      	beq.n	8006198 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8006110:	4b41      	ldr	r3, [pc, #260]	; (8006218 <prvTraceGetDTS+0x194>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	429a      	cmp	r2, r3
 800611a:	d91d      	bls.n	8006158 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800611c:	4b3e      	ldr	r3, [pc, #248]	; (8006218 <prvTraceGetDTS+0x194>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006122:	4b3d      	ldr	r3, [pc, #244]	; (8006218 <prvTraceGetDTS+0x194>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	fbb2 f2f3 	udiv	r2, r2, r3
 800612e:	4b3a      	ldr	r3, [pc, #232]	; (8006218 <prvTraceGetDTS+0x194>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	440a      	add	r2, r1
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8006136:	4b38      	ldr	r3, [pc, #224]	; (8006218 <prvTraceGetDTS+0x194>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800613c:	4b36      	ldr	r3, [pc, #216]	; (8006218 <prvTraceGetDTS+0x194>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	fbb3 f0f2 	udiv	r0, r3, r2
 8006148:	fb00 f202 	mul.w	r2, r0, r2
 800614c:	1a9a      	subs	r2, r3, r2
 800614e:	4b32      	ldr	r3, [pc, #200]	; (8006218 <prvTraceGetDTS+0x194>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	440a      	add	r2, r1
 8006154:	629a      	str	r2, [r3, #40]	; 0x28
 8006156:	e007      	b.n	8006168 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8006158:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <prvTraceGetDTS+0x194>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800615e:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <prvTraceGetDTS+0x194>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	440a      	add	r2, r1
 8006166:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8006168:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <prvTraceGetDTS+0x194>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800616e:	4b2a      	ldr	r3, [pc, #168]	; (8006218 <prvTraceGetDTS+0x194>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	429a      	cmp	r2, r3
 8006176:	d313      	bcc.n	80061a0 <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <prvTraceGetDTS+0x194>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	3201      	adds	r2, #1
 8006180:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8006182:	4b25      	ldr	r3, [pc, #148]	; (8006218 <prvTraceGetDTS+0x194>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006188:	4b23      	ldr	r3, [pc, #140]	; (8006218 <prvTraceGetDTS+0x194>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <prvTraceGetDTS+0x194>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	1a8a      	subs	r2, r1, r2
 8006194:	629a      	str	r2, [r3, #40]	; 0x28
 8006196:	e003      	b.n	80061a0 <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8006198:	4b1f      	ldr	r3, [pc, #124]	; (8006218 <prvTraceGetDTS+0x194>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d92c      	bls.n	8006202 <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 80061a8:	f7ff fcc2 	bl	8005b30 <prvTraceNextFreeEventBufferSlot>
 80061ac:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d026      	beq.n	8006202 <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10b      	bne.n	80061d6 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	22a9      	movs	r2, #169	; 0xa9
 80061c2:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	0c1b      	lsrs	r3, r3, #16
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2200      	movs	r2, #0
 80061d2:	705a      	strb	r2, [r3, #1]
 80061d4:	e013      	b.n	80061fe <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2bff      	cmp	r3, #255	; 0xff
 80061da:	d10d      	bne.n	80061f8 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	22a8      	movs	r2, #168	; 0xa8
 80061e0:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	0e1b      	lsrs	r3, r3, #24
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	705a      	strb	r2, [r3, #1]
 80061f6:	e002      	b.n	80061fe <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80061f8:	480d      	ldr	r0, [pc, #52]	; (8006230 <prvTraceGetDTS+0x1ac>)
 80061fa:	f7ff fe65 	bl	8005ec8 <prvTraceError>
			}
			prvTraceUpdateCounters();
 80061fe:	f7ff ff19 	bl	8006034 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	b29a      	uxth	r2, r3
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	4013      	ands	r3, r2
 800620a:	b29b      	uxth	r3, r3
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	080078bc 	.word	0x080078bc
 8006218:	20003ca8 	.word	0x20003ca8
 800621c:	200022e8 	.word	0x200022e8
 8006220:	e0001004 	.word	0xe0001004
 8006224:	2000238c 	.word	0x2000238c
 8006228:	2000001c 	.word	0x2000001c
 800622c:	20003cb4 	.word	0x20003cb4
 8006230:	080078fc 	.word	0x080078fc

08006234 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8006238:	4b13      	ldr	r3, [pc, #76]	; (8006288 <prvTraceInitCortexM+0x54>)
 800623a:	4a14      	ldr	r2, [pc, #80]	; (800628c <prvTraceInitCortexM+0x58>)
 800623c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800623e:	4b14      	ldr	r3, [pc, #80]	; (8006290 <prvTraceInitCortexM+0x5c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a13      	ldr	r2, [pc, #76]	; (8006290 <prvTraceInitCortexM+0x5c>)
 8006244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006248:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <prvTraceInitCortexM+0x5c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8006252:	4810      	ldr	r0, [pc, #64]	; (8006294 <prvTraceInitCortexM+0x60>)
 8006254:	f7ff fe38 	bl	8005ec8 <prvTraceError>
			break;
 8006258:	e013      	b.n	8006282 <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <prvTraceInitCortexM+0x64>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8006266:	480d      	ldr	r0, [pc, #52]	; (800629c <prvTraceInitCortexM+0x68>)
 8006268:	f7ff fe2e 	bl	8005ec8 <prvTraceError>
			break;
 800626c:	e009      	b.n	8006282 <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <prvTraceInitCortexM+0x6c>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <prvTraceInitCortexM+0x64>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a07      	ldr	r2, [pc, #28]	; (8006298 <prvTraceInitCortexM+0x64>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	e0001fb0 	.word	0xe0001fb0
 800628c:	c5acce55 	.word	0xc5acce55
 8006290:	e000edfc 	.word	0xe000edfc
 8006294:	08007ae8 	.word	0x08007ae8
 8006298:	e0001000 	.word	0xe0001000
 800629c:	08007b14 	.word	0x08007b14
 80062a0:	e0001004 	.word	0xe0001004

080062a4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 80062b8:	4b1a      	ldr	r3, [pc, #104]	; (8006324 <prvTracePortGetTimeStamp+0x80>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d107      	bne.n	80062d0 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d028      	beq.n	8006318 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 80062c6:	4b18      	ldr	r3, [pc, #96]	; (8006328 <prvTracePortGetTimeStamp+0x84>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	601a      	str	r2, [r3, #0]
		return;
 80062ce:	e023      	b.n	8006318 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 80062d0:	4b16      	ldr	r3, [pc, #88]	; (800632c <prvTracePortGetTimeStamp+0x88>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <prvTracePortGetTimeStamp+0x8c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	4b15      	ldr	r3, [pc, #84]	; (8006334 <prvTracePortGetTimeStamp+0x90>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4413      	add	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <prvTracePortGetTimeStamp+0x90>)
 80062f4:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <prvTracePortGetTimeStamp+0x84>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	4a0a      	ldr	r2, [pc, #40]	; (8006328 <prvTracePortGetTimeStamp+0x84>)
 8006300:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <prvTracePortGetTimeStamp+0x84>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8006310:	4a07      	ldr	r2, [pc, #28]	; (8006330 <prvTracePortGetTimeStamp+0x8c>)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e000      	b.n	800631a <prvTracePortGetTimeStamp+0x76>
		return;
 8006318:	bf00      	nop
}
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	200022dc 	.word	0x200022dc
 8006328:	200022e0 	.word	0x200022e0
 800632c:	e0001004 	.word	0xe0001004
 8006330:	20003cb8 	.word	0x20003cb8
 8006334:	20003cbc 	.word	0x20003cbc

08006338 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006338:	b5b0      	push	{r4, r5, r7, lr}
 800633a:	b090      	sub	sp, #64	; 0x40
 800633c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreDef(semaphore_1);
 800633e:	2300      	movs	r3, #0
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
	semaphore_1 = osSemaphoreCreate(osSemaphore(semaphore_1), 1);
 8006342:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006346:	2101      	movs	r1, #1
 8006348:	4618      	mov	r0, r3
 800634a:	f7fb fcf5 	bl	8001d38 <osSemaphoreCreate>
 800634e:	4603      	mov	r3, r0
 8006350:	4a16      	ldr	r2, [pc, #88]	; (80063ac <MX_FREERTOS_Init+0x74>)
 8006352:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	//TODO:creer taches 1, 2 et 3
		//osThreadDef(TASK1, task1Fn, ..., 0, ...);
		//... = osThreadCreate (osThread(TASK1), NULL);
		osThreadDef(TACHE1,task1Fn,osPriorityNormal, 0,configMINIMAL_STACK_SIZE);
 8006354:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <MX_FREERTOS_Init+0x78>)
 8006356:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800635a:	461d      	mov	r5, r3
 800635c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800635e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	6023      	str	r3, [r4, #0]
		osThreadCreate (osThread(TACHE1), NULL);
 8006364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f7fb fca9 	bl	8001cc2 <osThreadCreate>
		osThreadDef(TACHE2,task2Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 8006370:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <MX_FREERTOS_Init+0x7c>)
 8006372:	f107 0414 	add.w	r4, r7, #20
 8006376:	461d      	mov	r5, r3
 8006378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800637a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	6023      	str	r3, [r4, #0]
		osThreadCreate (osThread(TACHE2), NULL);
 8006380:	f107 0314 	add.w	r3, r7, #20
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f7fb fc9b 	bl	8001cc2 <osThreadCreate>
		osThreadDef(TACHE3,task3Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <MX_FREERTOS_Init+0x80>)
 800638e:	463c      	mov	r4, r7
 8006390:	461d      	mov	r5, r3
 8006392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	6023      	str	r3, [r4, #0]
		osThreadCreate (osThread(TACHE3), NULL);
 800639a:	463b      	mov	r3, r7
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fb fc8f 	bl	8001cc2 <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

}
 80063a4:	bf00      	nop
 80063a6:	3740      	adds	r7, #64	; 0x40
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bdb0      	pop	{r4, r5, r7, pc}
 80063ac:	20003cc0 	.word	0x20003cc0
 80063b0:	08007b58 	.word	0x08007b58
 80063b4:	08007b6c 	.word	0x08007b6c
 80063b8:	08007b80 	.word	0x08007b80

080063bc <task1Fn>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
/* task1Fn function */
void task1Fn(void const * argument)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	uint32_t  tick_os_actuelle= 0 ;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

 /* Infinite loop */
	while(1){
		tick_os_actuelle = (uint32_t) osKernelSysTick();
 80063c8:	f7fb fc6b 	bl	8001ca2 <osKernelSysTick>
 80063cc:	4603      	mov	r3, r0
 80063ce:	60fb      	str	r3, [r7, #12]


		MESN_UART_PutString_Poll((uint8_t *) "\r\n Task1 -- semaphore given ");
 80063d0:	4807      	ldr	r0, [pc, #28]	; (80063f0 <task1Fn+0x34>)
 80063d2:	f7fa f92f 	bl	8000634 <MESN_UART_PutString_Poll>

		//Give semaphore avEC api cmsis
		osSemaphoreRelease(semaphore_1);
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <task1Fn+0x38>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fb fd18 	bl	8001e10 <osSemaphoreRelease>

		osDelayUntil(&tick_os_actuelle, 500);
 80063e0:	f107 030c 	add.w	r3, r7, #12
 80063e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fb fd47 	bl	8001e7c <osDelayUntil>
		tick_os_actuelle = (uint32_t) osKernelSysTick();
 80063ee:	e7eb      	b.n	80063c8 <task1Fn+0xc>
 80063f0:	08007b94 	.word	0x08007b94
 80063f4:	20003cc0 	.word	0x20003cc0

080063f8 <task2Fn>:

}

/* task2Fn function */
void task2Fn(void const * argument)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
/* Infinite loop */
	 while(1){
		 //wait for semaphore
		osSemaphoreWait(semaphore_1, osWaitForever );//HAL_MAX_DELAY
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <task2Fn+0x20>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f04f 31ff 	mov.w	r1, #4294967295
 8006408:	4618      	mov	r0, r3
 800640a:	f7fb fcb3 	bl	8001d74 <osSemaphoreWait>

		//send uart synchro
		MESN_UART_PutString_Poll((uint8_t * )"\r\nTask 2 : - sychro");
 800640e:	4803      	ldr	r0, [pc, #12]	; (800641c <task2Fn+0x24>)
 8006410:	f7fa f910 	bl	8000634 <MESN_UART_PutString_Poll>
		osSemaphoreWait(semaphore_1, osWaitForever );//HAL_MAX_DELAY
 8006414:	e7f4      	b.n	8006400 <task2Fn+0x8>
 8006416:	bf00      	nop
 8006418:	20003cc0 	.word	0x20003cc0
 800641c:	08007bb4 	.word	0x08007bb4

08006420 <task3Fn>:
	 }
}

/* task3Fn function */
void task3Fn(void const * argument)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

/* Infinite loop */
	 while(1){
		 MESN_UART_PutString_Poll((uint8_t * )"\r\nTask 3 ### ");
 8006428:	4803      	ldr	r0, [pc, #12]	; (8006438 <task3Fn+0x18>)
 800642a:	f7fa f903 	bl	8000634 <MESN_UART_PutString_Poll>
		 osDelay(100);
 800642e:	2064      	movs	r0, #100	; 0x64
 8006430:	f7fb fc6e 	bl	8001d10 <osDelay>
		 MESN_UART_PutString_Poll((uint8_t * )"\r\nTask 3 ### ");
 8006434:	e7f8      	b.n	8006428 <task3Fn+0x8>
 8006436:	bf00      	nop
 8006438:	08007bc8 	.word	0x08007bc8

0800643c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	609a      	str	r2, [r3, #8]
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006452:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <MX_GPIO_Init+0x90>)
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <MX_GPIO_Init+0x90>)
 8006458:	f043 0304 	orr.w	r3, r3, #4
 800645c:	61d3      	str	r3, [r2, #28]
 800645e:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <MX_GPIO_Init+0x90>)
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <MX_GPIO_Init+0x90>)
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <MX_GPIO_Init+0x90>)
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	61d3      	str	r3, [r2, #28]
 8006476:	4b15      	ldr	r3, [pc, #84]	; (80064cc <MX_GPIO_Init+0x90>)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8006482:	2200      	movs	r2, #0
 8006484:	2120      	movs	r1, #32
 8006486:	4812      	ldr	r0, [pc, #72]	; (80064d0 <MX_GPIO_Init+0x94>)
 8006488:	f7fa fbea 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800648c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006492:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	4619      	mov	r1, r3
 80064a2:	480c      	ldr	r0, [pc, #48]	; (80064d4 <MX_GPIO_Init+0x98>)
 80064a4:	f7fa fa4c 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80064a8:	2320      	movs	r3, #32
 80064aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064ac:	2301      	movs	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b8:	f107 030c 	add.w	r3, r7, #12
 80064bc:	4619      	mov	r1, r3
 80064be:	4804      	ldr	r0, [pc, #16]	; (80064d0 <MX_GPIO_Init+0x94>)
 80064c0:	f7fa fa3e 	bl	8000940 <HAL_GPIO_Init>

}
 80064c4:	bf00      	nop
 80064c6:	3720      	adds	r7, #32
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40023800 	.word	0x40023800
 80064d0:	40020000 	.word	0x40020000
 80064d4:	40020800 	.word	0x40020800

080064d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064dc:	f7fa f91c 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064e0:	f000 f812 	bl	8006508 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  vTraceEnable(TRC_START);
 80064e4:	2001      	movs	r0, #1
 80064e6:	f7fe fd33 	bl	8004f50 <vTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064ea:	f7ff ffa7 	bl	800643c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MESN_UART_Init();
 80064ee:	f7f9 ffcb 	bl	8000488 <MESN_UART_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80064f2:	f7ff ff21 	bl	8006338 <MX_FREERTOS_Init>

  /* Start scheduler */
  //TODO ...
  MESN_UART_PutString_Poll((uint8_t * )"\r\n start os ");
 80064f6:	4803      	ldr	r0, [pc, #12]	; (8006504 <main+0x2c>)
 80064f8:	f7fa f89c 	bl	8000634 <MESN_UART_PutString_Poll>

 //vTaskStartScheIdleTaskduler();
  osKernelStart();
 80064fc:	f7fb fbca 	bl	8001c94 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006500:	e7fe      	b.n	8006500 <main+0x28>
 8006502:	bf00      	nop
 8006504:	08007bf8 	.word	0x08007bf8

08006508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b092      	sub	sp, #72	; 0x48
 800650c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800650e:	f107 0314 	add.w	r3, r7, #20
 8006512:	2234      	movs	r2, #52	; 0x34
 8006514:	2100      	movs	r1, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f980 	bl	800681c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800651c:	463b      	mov	r3, r7
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	609a      	str	r2, [r3, #8]
 8006526:	60da      	str	r2, [r3, #12]
 8006528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800652a:	4b19      	ldr	r3, [pc, #100]	; (8006590 <SystemClock_Config+0x88>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006532:	4a17      	ldr	r2, [pc, #92]	; (8006590 <SystemClock_Config+0x88>)
 8006534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006538:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800653a:	2302      	movs	r3, #2
 800653c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800653e:	2301      	movs	r3, #1
 8006540:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006542:	2310      	movs	r3, #16
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006546:	2300      	movs	r3, #0
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800654a:	f107 0314 	add.w	r3, r7, #20
 800654e:	4618      	mov	r0, r3
 8006550:	f7fa fb9e 	bl	8000c90 <HAL_RCC_OscConfig>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800655a:	f000 f82d 	bl	80065b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800655e:	230f      	movs	r3, #15
 8006560:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006562:	2301      	movs	r3, #1
 8006564:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006572:	463b      	mov	r3, r7
 8006574:	2100      	movs	r1, #0
 8006576:	4618      	mov	r0, r3
 8006578:	f7fa feba 	bl	80012f0 <HAL_RCC_ClockConfig>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8006582:	f000 f819 	bl	80065b8 <Error_Handler>
  }
}
 8006586:	bf00      	nop
 8006588:	3748      	adds	r7, #72	; 0x48
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40007000 	.word	0x40007000

08006594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a04      	ldr	r2, [pc, #16]	; (80065b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80065a6:	f7fa f8cf 	bl	8000748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	40001400 	.word	0x40001400

080065b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80065bc:	b672      	cpsid	i
}
 80065be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80065c0:	e7fe      	b.n	80065c0 <Error_Handler+0x8>
	...

080065c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <HAL_MspInit+0x64>)
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	4a16      	ldr	r2, [pc, #88]	; (8006628 <HAL_MspInit+0x64>)
 80065d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d4:	6253      	str	r3, [r2, #36]	; 0x24
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <HAL_MspInit+0x64>)
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065e2:	4b11      	ldr	r3, [pc, #68]	; (8006628 <HAL_MspInit+0x64>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4a10      	ldr	r2, [pc, #64]	; (8006628 <HAL_MspInit+0x64>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	6213      	str	r3, [r2, #32]
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <HAL_MspInit+0x64>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	60bb      	str	r3, [r7, #8]
 80065f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_MspInit+0x64>)
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	4a0a      	ldr	r2, [pc, #40]	; (8006628 <HAL_MspInit+0x64>)
 8006600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006604:	6253      	str	r3, [r2, #36]	; 0x24
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <HAL_MspInit+0x64>)
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006612:	2200      	movs	r2, #0
 8006614:	210f      	movs	r1, #15
 8006616:	f06f 0001 	mvn.w	r0, #1
 800661a:	f7fa f966 	bl	80008ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800

0800662c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8006642:	4b32      	ldr	r3, [pc, #200]	; (800670c <HAL_InitTick+0xe0>)
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	4a31      	ldr	r2, [pc, #196]	; (800670c <HAL_InitTick+0xe0>)
 8006648:	f043 0320 	orr.w	r3, r3, #32
 800664c:	6253      	str	r3, [r2, #36]	; 0x24
 800664e:	4b2f      	ldr	r3, [pc, #188]	; (800670c <HAL_InitTick+0xe0>)
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800665a:	f107 0210 	add.w	r2, r7, #16
 800665e:	f107 0314 	add.w	r3, r7, #20
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f7fb f853 	bl	8001710 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fb f838 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8006678:	6378      	str	r0, [r7, #52]	; 0x34
 800667a:	e004      	b.n	8006686 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800667c:	f7fb f834 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8006680:	4603      	mov	r3, r0
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	4a21      	ldr	r2, [pc, #132]	; (8006710 <HAL_InitTick+0xe4>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	0c9b      	lsrs	r3, r3, #18
 8006690:	3b01      	subs	r3, #1
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8006694:	4b1f      	ldr	r3, [pc, #124]	; (8006714 <HAL_InitTick+0xe8>)
 8006696:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_InitTick+0xec>)
 8006698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800669a:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <HAL_InitTick+0xe8>)
 800669c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80066a0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80066a2:	4a1c      	ldr	r2, [pc, #112]	; (8006714 <HAL_InitTick+0xe8>)
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80066a8:	4b1a      	ldr	r3, [pc, #104]	; (8006714 <HAL_InitTick+0xe8>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ae:	4b19      	ldr	r3, [pc, #100]	; (8006714 <HAL_InitTick+0xe8>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80066b4:	4817      	ldr	r0, [pc, #92]	; (8006714 <HAL_InitTick+0xe8>)
 80066b6:	f7fb f8bb 	bl	8001830 <HAL_TIM_Base_Init>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80066c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11b      	bne.n	8006700 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80066c8:	4812      	ldr	r0, [pc, #72]	; (8006714 <HAL_InitTick+0xe8>)
 80066ca:	f7fb f8f9 	bl	80018c0 <HAL_TIM_Base_Start_IT>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80066d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d111      	bne.n	8006700 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80066dc:	202c      	movs	r0, #44	; 0x2c
 80066de:	f7fa f920 	bl	8000922 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b0f      	cmp	r3, #15
 80066e6:	d808      	bhi.n	80066fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80066e8:	2200      	movs	r2, #0
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	202c      	movs	r0, #44	; 0x2c
 80066ee:	f7fa f8fc 	bl	80008ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80066f2:	4a0a      	ldr	r2, [pc, #40]	; (800671c <HAL_InitTick+0xf0>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	e002      	b.n	8006700 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006704:	4618      	mov	r0, r3
 8006706:	3738      	adds	r7, #56	; 0x38
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40023800 	.word	0x40023800
 8006710:	431bde83 	.word	0x431bde83
 8006714:	20003cc4 	.word	0x20003cc4
 8006718:	40001400 	.word	0x40001400
 800671c:	20000000 	.word	0x20000000

08006720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006724:	e7fe      	b.n	8006724 <NMI_Handler+0x4>

08006726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006726:	b480      	push	{r7}
 8006728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800672a:	e7fe      	b.n	800672a <HardFault_Handler+0x4>

0800672c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006730:	e7fe      	b.n	8006730 <MemManage_Handler+0x4>

08006732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006732:	b480      	push	{r7}
 8006734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006736:	e7fe      	b.n	8006736 <BusFault_Handler+0x4>

08006738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800673c:	e7fe      	b.n	800673c <UsageFault_Handler+0x4>

0800673e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800673e:	b480      	push	{r7}
 8006740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006742:	bf00      	nop
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
	...

0800674c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006750:	4802      	ldr	r0, [pc, #8]	; (800675c <TIM7_IRQHandler+0x10>)
 8006752:	f7fb f907 	bl	8001964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20003cc4 	.word	0x20003cc4

08006760 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006764:	bf00      	nop
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800676c:	480c      	ldr	r0, [pc, #48]	; (80067a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800676e:	490d      	ldr	r1, [pc, #52]	; (80067a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006770:	4a0d      	ldr	r2, [pc, #52]	; (80067a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006774:	e002      	b.n	800677c <LoopCopyDataInit>

08006776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800677a:	3304      	adds	r3, #4

0800677c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800677c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800677e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006780:	d3f9      	bcc.n	8006776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006782:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006784:	4c0a      	ldr	r4, [pc, #40]	; (80067b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006788:	e001      	b.n	800678e <LoopFillZerobss>

0800678a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800678a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800678c:	3204      	adds	r2, #4

0800678e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800678e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006790:	d3fb      	bcc.n	800678a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006792:	f7ff ffe5 	bl	8006760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006796:	f000 f80f 	bl	80067b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800679a:	f7ff fe9d 	bl	80064d8 <main>
  bx lr
 800679e:	4770      	bx	lr
  ldr r0, =_sdata
 80067a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80067a4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80067a8:	08007c9c 	.word	0x08007c9c
  ldr r2, =_sbss
 80067ac:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80067b0:	20003d04 	.word	0x20003d04

080067b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80067b4:	e7fe      	b.n	80067b4 <ADC1_IRQHandler>
	...

080067b8 <__libc_init_array>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	2600      	movs	r6, #0
 80067bc:	4d0c      	ldr	r5, [pc, #48]	; (80067f0 <__libc_init_array+0x38>)
 80067be:	4c0d      	ldr	r4, [pc, #52]	; (80067f4 <__libc_init_array+0x3c>)
 80067c0:	1b64      	subs	r4, r4, r5
 80067c2:	10a4      	asrs	r4, r4, #2
 80067c4:	42a6      	cmp	r6, r4
 80067c6:	d109      	bne.n	80067dc <__libc_init_array+0x24>
 80067c8:	f000 f830 	bl	800682c <_init>
 80067cc:	2600      	movs	r6, #0
 80067ce:	4d0a      	ldr	r5, [pc, #40]	; (80067f8 <__libc_init_array+0x40>)
 80067d0:	4c0a      	ldr	r4, [pc, #40]	; (80067fc <__libc_init_array+0x44>)
 80067d2:	1b64      	subs	r4, r4, r5
 80067d4:	10a4      	asrs	r4, r4, #2
 80067d6:	42a6      	cmp	r6, r4
 80067d8:	d105      	bne.n	80067e6 <__libc_init_array+0x2e>
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e0:	4798      	blx	r3
 80067e2:	3601      	adds	r6, #1
 80067e4:	e7ee      	b.n	80067c4 <__libc_init_array+0xc>
 80067e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ea:	4798      	blx	r3
 80067ec:	3601      	adds	r6, #1
 80067ee:	e7f2      	b.n	80067d6 <__libc_init_array+0x1e>
 80067f0:	08007c94 	.word	0x08007c94
 80067f4:	08007c94 	.word	0x08007c94
 80067f8:	08007c94 	.word	0x08007c94
 80067fc:	08007c98 	.word	0x08007c98

08006800 <memcpy>:
 8006800:	440a      	add	r2, r1
 8006802:	4291      	cmp	r1, r2
 8006804:	f100 33ff 	add.w	r3, r0, #4294967295
 8006808:	d100      	bne.n	800680c <memcpy+0xc>
 800680a:	4770      	bx	lr
 800680c:	b510      	push	{r4, lr}
 800680e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006812:	4291      	cmp	r1, r2
 8006814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006818:	d1f9      	bne.n	800680e <memcpy+0xe>
 800681a:	bd10      	pop	{r4, pc}

0800681c <memset>:
 800681c:	4603      	mov	r3, r0
 800681e:	4402      	add	r2, r0
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <memset+0xa>
 8006824:	4770      	bx	lr
 8006826:	f803 1b01 	strb.w	r1, [r3], #1
 800682a:	e7f9      	b.n	8006820 <memset+0x4>

0800682c <_init>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr

08006838 <_fini>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr
