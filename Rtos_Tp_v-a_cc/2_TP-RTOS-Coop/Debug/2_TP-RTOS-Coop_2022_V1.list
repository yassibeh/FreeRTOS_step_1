
2_TP-RTOS-Coop_2022_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e2c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003090  08003090  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003098  08003098  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080030a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002290  20000074  08003114  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002304  08003114  00022304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd67  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b9  00000000  00000000  0002be04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001737d  00000000  00000000  0002fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d270  00000000  00000000  00046ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903f8  00000000  00000000  00054135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e452d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  000e4580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08002f54 	.word	0x08002f54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08002f54 	.word	0x08002f54

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b976 	b.w	8000484 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	4688      	mov	r8, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14d      	bne.n	800025c <__udivmoddi4+0xac>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d968      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c6:	fab2 f282 	clz	r2, r2
 80001ca:	b152      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001cc:	fa01 f302 	lsl.w	r3, r1, r2
 80001d0:	f1c2 0120 	rsb	r1, r2, #32
 80001d4:	fa20 f101 	lsr.w	r1, r0, r1
 80001d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001dc:	ea41 0803 	orr.w	r8, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ea:	fa1f fe8c 	uxth.w	lr, ip
 80001ee:	fb01 8817 	mls	r8, r1, r7, r8
 80001f2:	fb07 f00e 	mul.w	r0, r7, lr
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	eb1c 0303 	adds.w	r3, ip, r3
 8000204:	f107 35ff 	add.w	r5, r7, #4294967295
 8000208:	f080 811e 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020c:	4298      	cmp	r0, r3
 800020e:	f240 811b 	bls.w	8000448 <__udivmoddi4+0x298>
 8000212:	3f02      	subs	r7, #2
 8000214:	4463      	add	r3, ip
 8000216:	1a1b      	subs	r3, r3, r0
 8000218:	fbb3 f0f1 	udiv	r0, r3, r1
 800021c:	fb01 3310 	mls	r3, r1, r0, r3
 8000220:	fb00 fe0e 	mul.w	lr, r0, lr
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	45a6      	cmp	lr, r4
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0404 	adds.w	r4, ip, r4
 8000232:	f100 33ff 	add.w	r3, r0, #4294967295
 8000236:	f080 8109 	bcs.w	800044c <__udivmoddi4+0x29c>
 800023a:	45a6      	cmp	lr, r4
 800023c:	f240 8106 	bls.w	800044c <__udivmoddi4+0x29c>
 8000240:	4464      	add	r4, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	eba4 040e 	sub.w	r4, r4, lr
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	b11e      	cbz	r6, 8000258 <__udivmoddi4+0xa8>
 8000250:	2300      	movs	r3, #0
 8000252:	40d4      	lsrs	r4, r2
 8000254:	e9c6 4300 	strd	r4, r3, [r6]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	428b      	cmp	r3, r1
 800025e:	d908      	bls.n	8000272 <__udivmoddi4+0xc2>
 8000260:	2e00      	cmp	r6, #0
 8000262:	f000 80ee 	beq.w	8000442 <__udivmoddi4+0x292>
 8000266:	2100      	movs	r1, #0
 8000268:	e9c6 0500 	strd	r0, r5, [r6]
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80fc 	bhi.w	800047c <__udivmoddi4+0x2cc>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb65 0303 	sbc.w	r3, r5, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4698      	mov	r8, r3
 800028e:	2e00      	cmp	r6, #0
 8000290:	d0e2      	beq.n	8000258 <__udivmoddi4+0xa8>
 8000292:	e9c6 4800 	strd	r4, r8, [r6]
 8000296:	e7df      	b.n	8000258 <__udivmoddi4+0xa8>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8091 	bne.w	80003c8 <__udivmoddi4+0x218>
 80002a6:	eba1 000c 	sub.w	r0, r1, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b0:	fa1f fe8c 	uxth.w	lr, ip
 80002b4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b8:	fb07 0013 	mls	r0, r7, r3, r0
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0505 	adds.w	r5, ip, r5
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	42a8      	cmp	r0, r5
 80002d6:	f200 80ce 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a2d      	subs	r5, r5, r0
 80002de:	fbb5 f0f7 	udiv	r0, r5, r7
 80002e2:	fb07 5510 	mls	r5, r7, r0, r5
 80002e6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80b6 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 8000304:	4628      	mov	r0, r5
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79e      	b.n	800024e <__udivmoddi4+0x9e>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fbba f8f9 	udiv	r8, sl, r9
 800032a:	fa20 f307 	lsr.w	r3, r0, r7
 800032e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000332:	408d      	lsls	r5, r1
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	431d      	orrs	r5, r3
 800033a:	fa00 f301 	lsl.w	r3, r0, r1
 800033e:	fb08 f00e 	mul.w	r0, r8, lr
 8000342:	0c2c      	lsrs	r4, r5, #16
 8000344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000348:	42a0      	cmp	r0, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	42a0      	cmp	r0, r4
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1a24      	subs	r4, r4, r0
 800036a:	fbb4 f0f9 	udiv	r0, r4, r9
 800036e:	fb09 4410 	mls	r4, r9, r0, r4
 8000372:	fb00 fe0e 	mul.w	lr, r0, lr
 8000376:	b2ad      	uxth	r5, r5
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 35ff 	add.w	r5, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9502 	umull	r9, r5, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	42ac      	cmp	r4, r5
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46ae      	mov	lr, r5
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d069      	beq.n	8000480 <__udivmoddi4+0x2d0>
 80003ac:	ebb3 0208 	subs.w	r2, r3, r8
 80003b0:	eb64 040e 	sbc.w	r4, r4, lr
 80003b4:	fa22 f301 	lsr.w	r3, r2, r1
 80003b8:	fa04 f707 	lsl.w	r7, r4, r7
 80003bc:	431f      	orrs	r7, r3
 80003be:	40cc      	lsrs	r4, r1
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	2100      	movs	r1, #0
 80003c6:	e747      	b.n	8000258 <__udivmoddi4+0xa8>
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	f1c2 0120 	rsb	r1, r2, #32
 80003d0:	fa25 f301 	lsr.w	r3, r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa20 f101 	lsr.w	r1, r0, r1
 80003dc:	4095      	lsls	r5, r2
 80003de:	430d      	orrs	r5, r1
 80003e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e4:	fb07 3311 	mls	r3, r7, r1, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	0c28      	lsrs	r0, r5, #16
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	fb01 f30e 	mul.w	r3, r1, lr
 80003f6:	4283      	cmp	r3, r0
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0000 	adds.w	r0, ip, r0
 8000402:	f101 38ff 	add.w	r8, r1, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	4283      	cmp	r3, r0
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3902      	subs	r1, #2
 800040e:	4460      	add	r0, ip
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	fbb0 f3f7 	udiv	r3, r0, r7
 8000416:	fb07 0013 	mls	r0, r7, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000420:	fb03 f00e 	mul.w	r0, r3, lr
 8000424:	42a8      	cmp	r0, r5
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0505 	adds.w	r5, ip, r5
 800042c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	42a8      	cmp	r0, r5
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3b02      	subs	r3, #2
 8000438:	4465      	add	r5, ip
 800043a:	1a28      	subs	r0, r5, r0
 800043c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	4631      	mov	r1, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e707      	b.n	8000258 <__udivmoddi4+0xa8>
 8000448:	462f      	mov	r7, r5
 800044a:	e6e4      	b.n	8000216 <__udivmoddi4+0x66>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f9      	b.n	8000244 <__udivmoddi4+0x94>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb65 0e0c 	sbc.w	lr, r5, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4643      	mov	r3, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4628      	mov	r0, r5
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4641      	mov	r1, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e747      	b.n	8000306 <__udivmoddi4+0x156>
 8000476:	3b02      	subs	r3, #2
 8000478:	4465      	add	r5, ip
 800047a:	e72f      	b.n	80002dc <__udivmoddi4+0x12c>
 800047c:	4608      	mov	r0, r1
 800047e:	e706      	b.n	800028e <__udivmoddi4+0xde>
 8000480:	4631      	mov	r1, r6
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0xa8>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <MESN_UART_Init>:
  * @brief USART init function
  * @param none
  * @retval None
  */
void MESN_UART_Init()
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t tmpreg = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]

	/* Peripheral clock enable */
	__UART_CLK_ENABLE();
 8000492:	4b61      	ldr	r3, [pc, #388]	; (8000618 <MESN_UART_Init+0x190>)
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	4a60      	ldr	r2, [pc, #384]	; (8000618 <MESN_UART_Init+0x190>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	6253      	str	r3, [r2, #36]	; 0x24
 800049e:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <MESN_UART_Init+0x190>)
 80004a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

	/* UART GPIO Configuration */
	GPIO_InitStruct.Pin = UART_TX_PIN | UART_RX_PIN;
 80004aa:	230c      	movs	r3, #12
 80004ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = UART_GPIO_SPEED;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF_UART;
 80004ba:	2307      	movs	r3, #7
 80004bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(UART_PORT, &GPIO_InitStruct);
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	4855      	ldr	r0, [pc, #340]	; (800061c <MESN_UART_Init+0x194>)
 80004c6:	f000 fa3b 	bl	8000940 <HAL_GPIO_Init>

	/* System interrupt init*/
	HAL_NVIC_SetPriority(UART_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2026      	movs	r0, #38	; 0x26
 80004d0:	f000 fa0b 	bl	80008ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART_IRQn);
 80004d4:	2026      	movs	r0, #38	; 0x26
 80004d6:	f000 fa24 	bl	8000922 <HAL_NVIC_EnableIRQ>

	/* Disable the peripheral */
	UART_INSTANCE->CR1 &=  ~USART_CR1_UE;
 80004da:	4b51      	ldr	r3, [pc, #324]	; (8000620 <MESN_UART_Init+0x198>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a50      	ldr	r2, [pc, #320]	; (8000620 <MESN_UART_Init+0x198>)
 80004e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004e4:	60d3      	str	r3, [r2, #12]

	/*------- UART-associated USART registers setting : CR2 Configuration ------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(UART_INSTANCE->CR2, (0x3U << 12U), (0x00000000U));
 80004e6:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <MESN_UART_Init+0x198>)
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <MESN_UART_Init+0x198>)
 80004ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004f0:	6113      	str	r3, [r2, #16]

	/*------- UART-associated USART registers setting : CR1 Configuration ------*/
	/* Configure the UART Word Length, Parity and mode: */
	tmpreg = (uint32_t)((0x1U << 3U) | (0x1U << 2U));
 80004f2:	230c      	movs	r3, #12
 80004f4:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(UART_INSTANCE->CR1,
 80004f6:	4b4a      	ldr	r3, [pc, #296]	; (8000620 <MESN_UART_Init+0x198>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80004fe:	f023 030c 	bic.w	r3, r3, #12
 8000502:	4947      	ldr	r1, [pc, #284]	; (8000620 <MESN_UART_Init+0x198>)
 8000504:	69fa      	ldr	r2, [r7, #28]
 8000506:	4313      	orrs	r3, r2
 8000508:	60cb      	str	r3, [r1, #12]
						 (uint32_t)((0x1U << 12) | (0x1U << 10) | (0x1U << 9) | (0x1U << 3) | (0x1U << 2) | (0x1U << 15)),
						 tmpreg);

	/*------- UART-associated USART registers setting : CR3 Configuration ------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits */
	MODIFY_REG(UART_INSTANCE->CR3, ((0x1U << 8) | (0x1U << 9)), 0x00000000U);
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <MESN_UART_Init+0x198>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a44      	ldr	r2, [pc, #272]	; (8000620 <MESN_UART_Init+0x198>)
 8000510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000514:	6153      	str	r3, [r2, #20]

	/*---Configure Baudrate BRR register---*/
	UART_INSTANCE->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), 9600);
 8000516:	f001 f8e7 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800051a:	4602      	mov	r2, r0
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	009a      	lsls	r2, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	4a3f      	ldr	r2, [pc, #252]	; (8000624 <MESN_UART_Init+0x19c>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	0d1b      	lsrs	r3, r3, #20
 800052e:	011c      	lsls	r4, r3, #4
 8000530:	f001 f8da 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000534:	4602      	mov	r2, r0
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	009a      	lsls	r2, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	4a39      	ldr	r2, [pc, #228]	; (8000628 <MESN_UART_Init+0x1a0>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0b1d      	lsrs	r5, r3, #12
 8000548:	f001 f8ce 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800054c:	4602      	mov	r2, r0
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	009a      	lsls	r2, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	4a32      	ldr	r2, [pc, #200]	; (8000624 <MESN_UART_Init+0x19c>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0d1b      	lsrs	r3, r3, #20
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	1aeb      	subs	r3, r5, r3
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	3332      	adds	r3, #50	; 0x32
 800056c:	4a2f      	ldr	r2, [pc, #188]	; (800062c <MESN_UART_Init+0x1a4>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000578:	441c      	add	r4, r3
 800057a:	f001 f8b5 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800057e:	4602      	mov	r2, r0
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <MESN_UART_Init+0x1a0>)
 800058c:	fba2 2303 	umull	r2, r3, r2, r3
 8000590:	0b1d      	lsrs	r5, r3, #12
 8000592:	f001 f8a9 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000596:	4602      	mov	r2, r0
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	009a      	lsls	r2, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MESN_UART_Init+0x19c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	0d1b      	lsrs	r3, r3, #20
 80005aa:	2264      	movs	r2, #100	; 0x64
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	1aeb      	subs	r3, r5, r3
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	3332      	adds	r3, #50	; 0x32
 80005b6:	4a1d      	ldr	r2, [pc, #116]	; (800062c <MESN_UART_Init+0x1a4>)
 80005b8:	fba2 2303 	umull	r2, r3, r2, r3
 80005bc:	095b      	lsrs	r3, r3, #5
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MESN_UART_Init+0x198>)
 80005c4:	4423      	add	r3, r4
 80005c6:	6093      	str	r3, [r2, #8]

	/* In asynchronous mode, the following bits must be kept cleared:
	     - LINEN and CLKEN bits in the USART_CR2 register,
	     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(UART_INSTANCE->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MESN_UART_Init+0x198>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <MESN_UART_Init+0x198>)
 80005ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80005d2:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(UART_INSTANCE->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MESN_UART_Init+0x198>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MESN_UART_Init+0x198>)
 80005da:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80005de:	6153      	str	r3, [r2, #20]

	/* Enable the peripheral */
	UART_INSTANCE->CR1 |=  USART_CR1_UE;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MESN_UART_Init+0x198>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <MESN_UART_Init+0x198>)
 80005e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ea:	60d3      	str	r3, [r2, #12]
  
  /* Initialize RX circular buffer and flag */
	uartRxCircBuff.eltNb = 0;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	uartRxCircBuff.indexR = 0;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	uartRxCircBuff.indexW = 0;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		
	/* Enable the UART Data Register not empty Interrupt */
	UART_INSTANCE->CR1 |= USART_CR1_RXNEIE;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MESN_UART_Init+0x198>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <MESN_UART_Init+0x198>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	40004400 	.word	0x40004400
 8000624:	45e7b273 	.word	0x45e7b273
 8000628:	1b4e81b5 	.word	0x1b4e81b5
 800062c:	51eb851f 	.word	0x51eb851f
 8000630:	20000090 	.word	0x20000090

08000634 <MESN_UART_PutString_Poll>:
  * @brief uart sending string by polling
  * @param *stringToSend: pointer to the string to be send.
  * @retval none
  */
void MESN_UART_PutString_Poll(uint8_t *stringToSend)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	int32_t i = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

  //Send data
  for (i=0; stringToSend[i] != '\0'; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e009      	b.n	800065a <MESN_UART_PutString_Poll+0x26>
		MESN_PRIV_UART_PutChar_Poll(stringToSend[i] );
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f84c 	bl	80006ec <MESN_PRIV_UART_PutChar_Poll>
  for (i=0; stringToSend[i] != '\0'; i++){
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <MESN_UART_PutString_Poll+0x12>
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MESN_PRIV_UART_IRQHandler>:
/**
  * @brief ISR dedicated to manage RX IRQ
  * @param none
  */
static void MESN_PRIV_UART_IRQHandler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
	uint8_t tmp;

	/* check the source of IRQ */
	// Data received IRQ
	if((UART_INSTANCE->STATUS_REG & RX_NEMTPY_BIT) != 0)
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	2b00      	cmp	r3, #0
 8000680:	d024      	beq.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
	{ 
		//Retrieve received data
		tmp = (uint8_t) UART_INSTANCE->RX_DATA_REG;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	71fb      	strb	r3, [r7, #7]

		// save data in circular buffer if is not full
		if (uartRxCircBuff.eltNb < UART_BUFFERSIZE) {
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800068a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d81c      	bhi.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
			// store data
			uartRxCircBuff.buffer[uartRxCircBuff.indexW] = tmp;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 8000694:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000698:	4910      	ldr	r1, [pc, #64]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	54ca      	strb	r2, [r1, r3]

			// circular buffer processing
			uartRxCircBuff.eltNb++;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
			uartRxCircBuff.indexW++;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			if (uartRxCircBuff.indexW >= UART_BUFFERSIZE)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006c0:	2bff      	cmp	r3, #255	; 0xff
 80006c2:	d903      	bls.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
				uartRxCircBuff.indexW = 0;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
		else {
			// no flow control (hard/soft)
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400
 80006dc:	20000090 	.word	0x20000090

080006e0 <USART2_IRQHandler>:
  {
    MESN_PRIV_UART_IRQHandler();
  }
#elif defined(USE_UART2)
  void USART2_IRQHandler(void)
  {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
		MESN_PRIV_UART_IRQHandler();
 80006e4:	f7ff ffc4 	bl	8000670 <MESN_PRIV_UART_IRQHandler>
  }
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MESN_PRIV_UART_PutChar_Poll>:
  * @brief sends 8bits payload through UART by polling
  * @param dataTosend: byte to be send
  * @retval none
  */
static void MESN_PRIV_UART_PutChar_Poll(uint8_t dataToSend)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	// check if transmitter is ready to send
	while((UART_INSTANCE->STATUS_REG & TX_EMPTY_BIT) == 0);
 80006f6:	bf00      	nop
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f9      	beq.n	80006f8 <MESN_PRIV_UART_PutChar_Poll+0xc>
	UART_INSTANCE->TX_DATA_REG = (uint8_t)(dataToSend & 0xFF);
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	6053      	str	r3, [r2, #4]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40004400 	.word	0x40004400

08000718 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000722:	2003      	movs	r0, #3
 8000724:	f000 f8d6 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000728:	200f      	movs	r0, #15
 800072a:	f002 fb21 	bl	8002d70 <HAL_InitTick>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	e001      	b.n	800073e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800073a:	f002 fae5 	bl	8002d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800073e:	79fb      	ldrb	r3, [r7, #7]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x1c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x20>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x1c>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	2000019c 	.word	0x2000019c
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	2000019c 	.word	0x2000019c

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <__NVIC_EnableIRQ+0x34>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff4f 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff64 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ffb2 	bl	8000870 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff81 	bl	800081c <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff57 	bl	80007e4 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000956:	e160      	b.n	8000c1a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 8152 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b01      	cmp	r3, #1
 800097a:	d005      	beq.n	8000988 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000984:	2b02      	cmp	r3, #2
 8000986:	d130      	bne.n	80009ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	f003 0201 	and.w	r2, r3, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d017      	beq.n	8000a26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d123      	bne.n	8000a7a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	691a      	ldr	r2, [r3, #16]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	08da      	lsrs	r2, r3, #3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3208      	adds	r2, #8
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0203 	and.w	r2, r3, #3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80ac 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6213      	str	r3, [r2, #32]
 8000ac8:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ad4:	4a59      	ldr	r2, [pc, #356]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a51      	ldr	r2, [pc, #324]	; (8000c40 <HAL_GPIO_Init+0x300>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d025      	beq.n	8000b4c <HAL_GPIO_Init+0x20c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a50      	ldr	r2, [pc, #320]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d01f      	beq.n	8000b48 <HAL_GPIO_Init+0x208>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_GPIO_Init+0x308>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d019      	beq.n	8000b44 <HAL_GPIO_Init+0x204>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <HAL_GPIO_Init+0x30c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d013      	beq.n	8000b40 <HAL_GPIO_Init+0x200>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1fc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x314>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1f8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4b      	ldr	r2, [pc, #300]	; (8000c58 <HAL_GPIO_Init+0x318>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1f4>
 8000b30:	2306      	movs	r3, #6
 8000b32:	e00c      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b34:	2307      	movs	r3, #7
 8000b36:	e00a      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e008      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b40:	2303      	movs	r3, #3
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b90:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f47f ae97 	bne.w	8000958 <HAL_GPIO_Init+0x18>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	619a      	str	r2, [r3, #24]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e31d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca2:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cac:	4b91      	ldr	r3, [pc, #580]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d07b      	beq.n	8000dba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d006      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2b0c      	cmp	r3, #12
 8000ccc:	d10f      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	d10b      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd6:	4b87      	ldr	r3, [pc, #540]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d06a      	beq.n	8000db8 <HAL_RCC_OscConfig+0x128>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d166      	bne.n	8000db8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e2f7      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d106      	bne.n	8000d04 <HAL_RCC_OscConfig+0x74>
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e02d      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10c      	bne.n	8000d26 <HAL_RCC_OscConfig+0x96>
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a75      	ldr	r2, [pc, #468]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e01c      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0xb8>
 8000d2e:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a70      	ldr	r2, [pc, #448]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a6d      	ldr	r2, [pc, #436]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d48:	4b6a      	ldr	r3, [pc, #424]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a69      	ldr	r2, [pc, #420]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a66      	ldr	r2, [pc, #408]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d013      	beq.n	8000d90 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fd00 	bl	800076c <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fcfc 	bl	800076c <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e2ad      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d8e:	e014      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fcec 	bl	800076c <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fce8 	bl	800076c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e299      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000daa:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x108>
 8000db6:	e000      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d05a      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d005      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b0c      	cmp	r3, #12
 8000dd0:	d119      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d116      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d001      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e276      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	493d      	ldr	r1, [pc, #244]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e04:	e03a      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d020      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcaa 	bl	800076c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fca6 	bl	800076c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e257      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	492a      	ldr	r1, [pc, #168]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e015      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fc89 	bl	800076c <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc85 	bl	800076c <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e236      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b8 	beq.w	8000ffa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d170      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d005      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x218>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e21a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d921      	bls.n	8000efc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc57 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e208      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	061b      	lsls	r3, r3, #24
 8000eec:	4901      	ldr	r1, [pc, #4]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
 8000ef2:	e020      	b.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efc:	4b99      	ldr	r3, [pc, #612]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4996      	ldr	r1, [pc, #600]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0e:	4b95      	ldr	r3, [pc, #596]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	4991      	ldr	r1, [pc, #580]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fc22 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e1d3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	0b5b      	lsrs	r3, r3, #13
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f46:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f48:	6892      	ldr	r2, [r2, #8]
 8000f4a:	0912      	lsrs	r2, r2, #4
 8000f4c:	f002 020f 	and.w	r2, r2, #15
 8000f50:	4985      	ldr	r1, [pc, #532]	; (8001168 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	5c8a      	ldrb	r2, [r1, r2]
 8000f54:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f56:	4a85      	ldr	r2, [pc, #532]	; (800116c <HAL_RCC_OscConfig+0x4dc>)
 8000f58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f5a:	4b85      	ldr	r3, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x4e0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 ff06 	bl	8002d70 <HAL_InitTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d045      	beq.n	8000ffa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	e1b5      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d029      	beq.n	8000fce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f7a:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fbf4 	bl	800076c <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f88:	f7ff fbf0 	bl	800076c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1a1      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	496c      	ldr	r1, [pc, #432]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb8:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	4967      	ldr	r1, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e015      	b.n	8000ffa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fbca 	bl	800076c <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fbc6 	bl	800076c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e177      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d030      	beq.n	8001068 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d016      	beq.n	800103c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fbaa 	bl	800076c <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fba6 	bl	800076c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e157      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x38c>
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb93 	bl	800076c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fb8f 	bl	800076c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e140      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b5 	beq.w	80011e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6253      	str	r3, [r2, #36]	; 0x24
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb57 	bl	800076c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fb53 	bl	800076c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e104      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x466>
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6353      	str	r3, [r2, #52]	; 0x34
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x488>
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001108:	6353      	str	r3, [r2, #52]	; 0x34
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001114:	6353      	str	r3, [r2, #52]	; 0x34
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x4aa>
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112a:	6353      	str	r3, [r2, #52]	; 0x34
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6353      	str	r3, [r2, #52]	; 0x34
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800114c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001150:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb07 	bl	800076c <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001160:	e019      	b.n	8001196 <HAL_RCC_OscConfig+0x506>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	08003018 	.word	0x08003018
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000000 	.word	0x20000000
 8001174:	42470020 	.word	0x42470020
 8001178:	42470680 	.word	0x42470680
 800117c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff faf4 	bl	800076c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e0a3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001196:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0ee      	beq.n	8001180 <HAL_RCC_OscConfig+0x4f0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fae2 	bl	800076c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fade 	bl	800076c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e08d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ee      	bne.n	80011ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d079      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	d056      	beq.n	800129c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d13b      	bne.n	800126e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fab6 	bl	800076c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fab2 	bl	800076c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e063      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	4319      	orrs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	430b      	orrs	r3, r1
 800123a:	492b      	ldr	r1, [pc, #172]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 800123c:	4313      	orrs	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fa91 	bl	800076c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fa8d 	bl	800076c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03e      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x5be>
 800126c:	e036      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fa7a 	bl	800076c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fa76 	bl	800076c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e027      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x5ec>
 800129a:	e01f      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e01a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470060 	.word	0x42470060

080012f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e11a      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d919      	bls.n	8001346 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_RCC_ClockConfig+0x34>
 8001318:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a89      	ldr	r2, [pc, #548]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b87      	ldr	r3, [pc, #540]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 0201 	bic.w	r2, r3, #1
 800132c:	4985      	ldr	r1, [pc, #532]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0f9      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	497a      	ldr	r1, [pc, #488]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 808e 	beq.w	800148e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800137a:	4b73      	ldr	r3, [pc, #460]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0d7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001392:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0cb      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0bf      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0b7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 0203 	bic.w	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	495c      	ldr	r1, [pc, #368]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff f9c6 	bl	800076c <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ec:	f7ff f9be 	bl	800076c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e09b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d1ee      	bne.n	80013ec <HAL_RCC_ClockConfig+0xfc>
 800140e:	e03e      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d112      	bne.n	800143e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141a:	f7ff f9a7 	bl	800076c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e084      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_ClockConfig+0x12a>
 800143c:	e027      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11d      	bne.n	8001482 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	e00a      	b.n	800145e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff f990 	bl	800076c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e06d      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_ClockConfig+0x158>
 800146a:	e010      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff f97e 	bl	800076c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e05b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ee      	bne.n	800146c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d219      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_ClockConfig+0x1be>
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0201 	bic.w	r2, r3, #1
 80014b6:	4923      	ldr	r1, [pc, #140]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e034      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4917      	ldr	r1, [pc, #92]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490f      	ldr	r1, [pc, #60]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f823 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490b      	ldr	r1, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x25c>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x260>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x264>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fc1e 	bl	8002d70 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	72fb      	strb	r3, [r7, #11]

  return status;
 8001538:	7afb      	ldrb	r3, [r7, #11]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00
 8001548:	40023800 	.word	0x40023800
 800154c:	08003018 	.word	0x08003018
 8001550:	2000000c 	.word	0x2000000c
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b08e      	sub	sp, #56	; 0x38
 800155e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d00d      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x34>
 8001570:	2b0c      	cmp	r3, #12
 8001572:	f200 8092 	bhi.w	800169a <HAL_RCC_GetSysClockFreq+0x142>
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x28>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x2e>
 800157e:	e08c      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x170>)
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001584:	e097      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800158a:	e094      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x178>)
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	0d9b      	lsrs	r3, r3, #22
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d021      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	2200      	movs	r2, #0
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	61fa      	str	r2, [r7, #28]
 80015ba:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015c0:	464a      	mov	r2, r9
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	2300      	movs	r3, #0
 80015c8:	4644      	mov	r4, r8
 80015ca:	fb04 f303 	mul.w	r3, r4, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015d2:	4644      	mov	r4, r8
 80015d4:	fba4 0102 	umull	r0, r1, r4, r2
 80015d8:	440b      	add	r3, r1
 80015da:	4619      	mov	r1, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	617a      	str	r2, [r7, #20]
 80015e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e8:	f7fe fdca 	bl	8000180 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
 80015f4:	e04e      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	2200      	movs	r2, #0
 80015fa:	469a      	mov	sl, r3
 80015fc:	4693      	mov	fp, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	465b      	mov	r3, fp
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	0159      	lsls	r1, r3, #5
 800160c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001610:	0150      	lsls	r0, r2, #5
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	ebb2 080a 	subs.w	r8, r2, sl
 800161a:	eb63 090b 	sbc.w	r9, r3, fp
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800162a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800162e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001632:	ebb2 0408 	subs.w	r4, r2, r8
 8001636:	eb63 0509 	sbc.w	r5, r3, r9
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	00eb      	lsls	r3, r5, #3
 8001644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001648:	00e2      	lsls	r2, r4, #3
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	eb14 030a 	adds.w	r3, r4, sl
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	eb45 030b 	adc.w	r3, r5, fp
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001666:	4629      	mov	r1, r5
 8001668:	028b      	lsls	r3, r1, #10
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	4604      	mov	r4, r0
 8001670:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001674:	4601      	mov	r1, r0
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001688:	f7fe fd7a 	bl	8000180 <__aeabi_uldivmod>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4613      	mov	r3, r2
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001698:	e00d      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0b5b      	lsrs	r3, r3, #13
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	016e3600 	.word	0x016e3600
 80016d0:	0800300c 	.word	0x0800300c

080016d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	2000000c 	.word	0x2000000c

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff2 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	; (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	08003028 	.word	0x08003028

08001710 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	220f      	movs	r2, #15
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_GetClockConfig+0x5c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40023800 	.word	0x40023800
 800176c:	40023c00 	.word	0x40023c00

08001770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12c      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e016      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6253      	str	r3, [r2, #36]	; 0x24
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80017c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80017d4:	d105      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80017dc:	d101      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80017de:	2301      	movs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0201 	bic.w	r2, r3, #1
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e031      	b.n	80018a6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f829 	bl	80018ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f000 f978 	bl	8001b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e03a      	b.n	800194e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d00e      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_TIM_Base_Start_IT+0x98>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d009      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_TIM_Base_Start_IT+0x9c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_TIM_Base_Start_IT+0xa0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b06      	cmp	r3, #6
 8001928:	d010      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	e007      	b.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40000400 	.word	0x40000400
 800195c:	40000800 	.word	0x40000800
 8001960:	40010800 	.word	0x40010800

08001964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d122      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d11b      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0202 	mvn.w	r2, #2
 8001990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8c1 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8b4 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8c3 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0204 	mvn.w	r2, #4
 80019e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f897 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f88a 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f899 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0208 	mvn.w	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f86d 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f860 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f86f 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0210 	mvn.w	r2, #16
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2208      	movs	r2, #8
 8001a92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f843 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f836 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f845 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0201 	mvn.w	r2, #1
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 f8f8 	bl	8002cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b40      	cmp	r3, #64	; 0x40
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f81f 	bl	8001b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d00f      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d017      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00f      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00b      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <TIM_Base_SetConfig+0xd8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <TIM_Base_SetConfig+0xdc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	615a      	str	r2, [r3, #20]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40011000 	.word	0x40011000

08001c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	2b84      	cmp	r3, #132	; 0x84
 8001c58:	d005      	beq.n	8001c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	3303      	adds	r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c74:	b087      	sub	sp, #28
 8001c76:	af02      	add	r7, sp, #8
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685c      	ldr	r4, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c88:	b29e      	uxth	r6, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ffd7 	bl	8001c44 <makeFreeRtosPriority>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	9200      	str	r2, [sp, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4632      	mov	r2, r6
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 f8cd 	bl	8001e46 <xTaskCreate>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <osDelay+0x16>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	e000      	b.n	8001cd8 <osDelay+0x18>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f9e7 	bl	80020ac <vTaskDelay>
  
  return osOK;
 8001cde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f103 0208 	add.w	r2, r3, #8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f103 0208 	add.w	r2, r3, #8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f103 0208 	add.w	r2, r3, #8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d103      	bne.n	8001da4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e00c      	b.n	8001dbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3308      	adds	r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e002      	b.n	8001db2 <vListInsert+0x2e>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d2f6      	bcs.n	8001dac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6892      	ldr	r2, [r2, #8]
 8001e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6852      	ldr	r2, [r2, #4]
 8001e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d103      	bne.n	8001e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b08c      	sub	sp, #48	; 0x30
 8001e4a:	af04      	add	r7, sp, #16
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fdd0 	bl	8002a00 <pvPortMalloc>
 8001e60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00e      	beq.n	8001e86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e68:	20b4      	movs	r0, #180	; 0xb4
 8001e6a:	f000 fdc9 	bl	8002a00 <pvPortMalloc>
 8001e6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7c:	e005      	b.n	8001e8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f000 fe04 	bl	8002a8c <vPortFree>
 8001e84:	e001      	b.n	8001e8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e90:	88fa      	ldrh	r2, [r7, #6]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9303      	str	r3, [sp, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f80e 	bl	8001ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001eac:	69f8      	ldr	r0, [r7, #28]
 8001eae:	f000 f8a1 	bl	8001ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e002      	b.n	8001ebe <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f023 0307 	bic.w	r3, r3, #7
 8001eee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f0c:	bf00      	nop
 8001f0e:	e7fe      	b.n	8001f0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	e012      	b.n	8001f3c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	7819      	ldrb	r1, [r3, #0]
 8001f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4413      	add	r3, r2
 8001f24:	3334      	adds	r3, #52	; 0x34
 8001f26:	460a      	mov	r2, r1
 8001f28:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	d9e9      	bls.n	8001f16 <prvInitialiseNewTask+0x4e>
 8001f42:	e000      	b.n	8001f46 <prvInitialiseNewTask+0x7e>
		{
			break;
 8001f44:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d901      	bls.n	8001f58 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f54:	2306      	movs	r3, #6
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	2200      	movs	r2, #0
 8001f68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fed9 	bl	8001d26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	3318      	adds	r3, #24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fed4 	bl	8001d26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	f1c3 0207 	rsb	r2, r3, #7
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	334c      	adds	r3, #76	; 0x4c
 8001fa8:	2260      	movs	r2, #96	; 0x60
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 ffc9 	bl	8002f44 <memset>
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <prvInitialiseNewTask+0x120>)
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <prvInitialiseNewTask+0x124>)
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <prvInitialiseNewTask+0x128>)
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	69b8      	ldr	r0, [r7, #24]
 8001fca:	f000 fb67 	bl	800269c <pxPortInitialiseStack>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	08003050 	.word	0x08003050
 8001fec:	08003070 	.word	0x08003070
 8001ff0:	08003030 	.word	0x08003030

08001ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001ffc:	f000 fc3e 	bl	800287c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <prvAddNewTaskToReadyList+0xa0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a23      	ldr	r2, [pc, #140]	; (8002094 <prvAddNewTaskToReadyList+0xa0>)
 8002008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800200a:	4b23      	ldr	r3, [pc, #140]	; (8002098 <prvAddNewTaskToReadyList+0xa4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <prvAddNewTaskToReadyList+0xa4>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <prvAddNewTaskToReadyList+0xa0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d110      	bne.n	8002042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002020:	f000 fa72 	bl	8002508 <prvInitialiseTaskLists>
 8002024:	e00d      	b.n	8002042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <prvAddNewTaskToReadyList+0xa8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <prvAddNewTaskToReadyList+0xa4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	429a      	cmp	r2, r3
 800203a:	d802      	bhi.n	8002042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800203c:	4a16      	ldr	r2, [pc, #88]	; (8002098 <prvAddNewTaskToReadyList+0xa4>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <prvAddNewTaskToReadyList+0xac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <prvAddNewTaskToReadyList+0xac>)
 800204a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2201      	movs	r2, #1
 8002052:	409a      	lsls	r2, r3
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <prvAddNewTaskToReadyList+0xb0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <prvAddNewTaskToReadyList+0xb0>)
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <prvAddNewTaskToReadyList+0xb4>)
 800206c:	441a      	add	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f7ff fe62 	bl	8001d3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800207a:	f000 fc2f 	bl	80028dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <prvAddNewTaskToReadyList+0xa8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <prvAddNewTaskToReadyList+0xa4>)
 8002088:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000288 	.word	0x20000288
 8002098:	200001a0 	.word	0x200001a0
 800209c:	20000294 	.word	0x20000294
 80020a0:	200002a4 	.word	0x200002a4
 80020a4:	20000290 	.word	0x20000290
 80020a8:	200001a4 	.word	0x200001a4

080020ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d017      	beq.n	80020ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <vTaskDelay+0x60>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <vTaskDelay+0x30>
	__asm volatile
 80020c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	60bb      	str	r3, [r7, #8]
}
 80020d8:	bf00      	nop
 80020da:	e7fe      	b.n	80020da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80020dc:	f000 f86a 	bl	80021b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa74 	bl	80025d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80020e8:	f000 f872 	bl	80021d0 <xTaskResumeAll>
 80020ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <vTaskDelay+0x64>)
 80020f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200002b0 	.word	0x200002b0
 8002110:	e000ed04 	.word	0xe000ed04

08002114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <vTaskStartScheduler+0x80>)
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	2300      	movs	r3, #0
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2300      	movs	r3, #0
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	491c      	ldr	r1, [pc, #112]	; (8002198 <vTaskStartScheduler+0x84>)
 8002128:	481c      	ldr	r0, [pc, #112]	; (800219c <vTaskStartScheduler+0x88>)
 800212a:	f7ff fe8c 	bl	8001e46 <xTaskCreate>
 800212e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d11b      	bne.n	800216e <vTaskStartScheduler+0x5a>
	__asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	60bb      	str	r3, [r7, #8]
}
 8002148:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <vTaskStartScheduler+0x8c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	334c      	adds	r3, #76	; 0x4c
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <vTaskStartScheduler+0x90>)
 8002152:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <vTaskStartScheduler+0x94>)
 8002156:	f04f 32ff 	mov.w	r2, #4294967295
 800215a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <vTaskStartScheduler+0x98>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <vTaskStartScheduler+0x9c>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002168:	f000 fb16 	bl	8002798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800216c:	e00e      	b.n	800218c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d10a      	bne.n	800218c <vTaskStartScheduler+0x78>
	__asm volatile
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	607b      	str	r3, [r7, #4]
}
 8002188:	bf00      	nop
 800218a:	e7fe      	b.n	800218a <vTaskStartScheduler+0x76>
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200002ac 	.word	0x200002ac
 8002198:	08002f6c 	.word	0x08002f6c
 800219c:	080024e5 	.word	0x080024e5
 80021a0:	200001a0 	.word	0x200001a0
 80021a4:	20000010 	.word	0x20000010
 80021a8:	200002a8 	.word	0x200002a8
 80021ac:	20000294 	.word	0x20000294
 80021b0:	2000028c 	.word	0x2000028c

080021b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <vTaskSuspendAll+0x18>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a03      	ldr	r2, [pc, #12]	; (80021cc <vTaskSuspendAll+0x18>)
 80021c0:	6013      	str	r3, [r2, #0]
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200002b0 	.word	0x200002b0

080021d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <xTaskResumeAll+0xfc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <xTaskResumeAll+0x2c>
	__asm volatile
 80021e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	603b      	str	r3, [r7, #0]
}
 80021f8:	bf00      	nop
 80021fa:	e7fe      	b.n	80021fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021fc:	f000 fb3e 	bl	800287c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002200:	4b32      	ldr	r3, [pc, #200]	; (80022cc <xTaskResumeAll+0xfc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	4a31      	ldr	r2, [pc, #196]	; (80022cc <xTaskResumeAll+0xfc>)
 8002208:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <xTaskResumeAll+0xfc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d155      	bne.n	80022be <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002212:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <xTaskResumeAll+0x100>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d051      	beq.n	80022be <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800221a:	e02e      	b.n	800227a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <xTaskResumeAll+0x104>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3318      	adds	r3, #24
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fde3 	bl	8001df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3304      	adds	r3, #4
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fdde 	bl	8001df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	2201      	movs	r2, #1
 800223e:	409a      	lsls	r2, r3
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <xTaskResumeAll+0x108>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4313      	orrs	r3, r2
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <xTaskResumeAll+0x108>)
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <xTaskResumeAll+0x10c>)
 8002258:	441a      	add	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7ff fd6c 	bl	8001d3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <xTaskResumeAll+0x110>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <xTaskResumeAll+0x114>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <xTaskResumeAll+0x104>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1cc      	bne.n	800221c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002288:	f000 f97e 	bl	8002588 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <xTaskResumeAll+0x118>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002298:	f000 f828 	bl	80022ec <xTaskIncrementTick>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <xTaskResumeAll+0x114>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f1      	bne.n	8002298 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <xTaskResumeAll+0x118>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <xTaskResumeAll+0x114>)
 80022bc:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80022be:	f000 fb0d 	bl	80028dc <vPortExitCritical>

	return xAlreadyYielded;
 80022c2:	687b      	ldr	r3, [r7, #4]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200002b0 	.word	0x200002b0
 80022d0:	20000288 	.word	0x20000288
 80022d4:	20000260 	.word	0x20000260
 80022d8:	20000290 	.word	0x20000290
 80022dc:	200001a4 	.word	0x200001a4
 80022e0:	200001a0 	.word	0x200001a0
 80022e4:	2000029c 	.word	0x2000029c
 80022e8:	20000298 	.word	0x20000298

080022ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <xTaskIncrementTick+0x110>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d174      	bne.n	80023e8 <xTaskIncrementTick+0xfc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022fe:	4b40      	ldr	r3, [pc, #256]	; (8002400 <xTaskIncrementTick+0x114>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002306:	4a3e      	ldr	r2, [pc, #248]	; (8002400 <xTaskIncrementTick+0x114>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d120      	bne.n	8002354 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002312:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <xTaskIncrementTick+0x118>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <xTaskIncrementTick+0x46>
	__asm volatile
 800231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	603b      	str	r3, [r7, #0]
}
 800232e:	bf00      	nop
 8002330:	e7fe      	b.n	8002330 <xTaskIncrementTick+0x44>
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <xTaskIncrementTick+0x118>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	4b33      	ldr	r3, [pc, #204]	; (8002408 <xTaskIncrementTick+0x11c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a31      	ldr	r2, [pc, #196]	; (8002404 <xTaskIncrementTick+0x118>)
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <xTaskIncrementTick+0x11c>)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <xTaskIncrementTick+0x120>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	4a2f      	ldr	r2, [pc, #188]	; (800240c <xTaskIncrementTick+0x120>)
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	f000 f91a 	bl	8002588 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <xTaskIncrementTick+0x124>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	429a      	cmp	r2, r3
 800235c:	d349      	bcc.n	80023f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <xTaskIncrementTick+0x118>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <xTaskIncrementTick+0x80>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <xTaskIncrementTick+0x82>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <xTaskIncrementTick+0x124>)
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	601a      	str	r2, [r3, #0]
					break;
 800237a:	e03a      	b.n	80023f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <xTaskIncrementTick+0x118>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d203      	bcs.n	800239c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <xTaskIncrementTick+0x124>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6013      	str	r3, [r2, #0]
						break;
 800239a:	e02a      	b.n	80023f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3304      	adds	r3, #4
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fd27 	bl	8001df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3318      	adds	r3, #24
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fd1e 	bl	8001df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <xTaskIncrementTick+0x128>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <xTaskIncrementTick+0x128>)
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <xTaskIncrementTick+0x12c>)
 80023d8:	441a      	add	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3304      	adds	r3, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f7ff fcac 	bl	8001d3e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e6:	e7ba      	b.n	800235e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <xTaskIncrementTick+0x130>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <xTaskIncrementTick+0x130>)
 80023f0:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80023f2:	697b      	ldr	r3, [r7, #20]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200002b0 	.word	0x200002b0
 8002400:	2000028c 	.word	0x2000028c
 8002404:	20000258 	.word	0x20000258
 8002408:	2000025c 	.word	0x2000025c
 800240c:	200002a0 	.word	0x200002a0
 8002410:	200002a8 	.word	0x200002a8
 8002414:	20000290 	.word	0x20000290
 8002418:	200001a4 	.word	0x200001a4
 800241c:	20000298 	.word	0x20000298

08002420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <vTaskSwitchContext+0xac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <vTaskSwitchContext+0xb0>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002434:	e044      	b.n	80024c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <vTaskSwitchContext+0xb0>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <vTaskSwitchContext+0xb4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	f1c3 031f 	rsb	r3, r3, #31
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	4921      	ldr	r1, [pc, #132]	; (80024d8 <vTaskSwitchContext+0xb8>)
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	607b      	str	r3, [r7, #4]
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <vTaskSwitchContext+0x5a>
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <vTaskSwitchContext+0xb8>)
 8002488:	4413      	add	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3308      	adds	r3, #8
 800249e:	429a      	cmp	r2, r3
 80024a0:	d104      	bne.n	80024ac <vTaskSwitchContext+0x8c>
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <vTaskSwitchContext+0xbc>)
 80024b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <vTaskSwitchContext+0xbc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	334c      	adds	r3, #76	; 0x4c
 80024bc:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <vTaskSwitchContext+0xc0>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200002b0 	.word	0x200002b0
 80024d0:	2000029c 	.word	0x2000029c
 80024d4:	20000290 	.word	0x20000290
 80024d8:	200001a4 	.word	0x200001a4
 80024dc:	200001a0 	.word	0x200001a0
 80024e0:	20000010 	.word	0x20000010

080024e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80024ec:	f000 f846 	bl	800257c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <prvIdleTask+0x20>)
 80024f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002500:	e7f4      	b.n	80024ec <prvIdleTask+0x8>
 8002502:	bf00      	nop
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	e00c      	b.n	800252e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <prvInitialiseTaskLists+0x58>)
 8002520:	4413      	add	r3, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fbe0 	bl	8001ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3301      	adds	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d9ef      	bls.n	8002514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002534:	480b      	ldr	r0, [pc, #44]	; (8002564 <prvInitialiseTaskLists+0x5c>)
 8002536:	f7ff fbd7 	bl	8001ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800253a:	480b      	ldr	r0, [pc, #44]	; (8002568 <prvInitialiseTaskLists+0x60>)
 800253c:	f7ff fbd4 	bl	8001ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002540:	480a      	ldr	r0, [pc, #40]	; (800256c <prvInitialiseTaskLists+0x64>)
 8002542:	f7ff fbd1 	bl	8001ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002546:	480a      	ldr	r0, [pc, #40]	; (8002570 <prvInitialiseTaskLists+0x68>)
 8002548:	f7ff fbce 	bl	8001ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <prvInitialiseTaskLists+0x6c>)
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <prvInitialiseTaskLists+0x5c>)
 8002550:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <prvInitialiseTaskLists+0x70>)
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <prvInitialiseTaskLists+0x60>)
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200001a4 	.word	0x200001a4
 8002564:	20000230 	.word	0x20000230
 8002568:	20000244 	.word	0x20000244
 800256c:	20000260 	.word	0x20000260
 8002570:	20000274 	.word	0x20000274
 8002574:	20000258 	.word	0x20000258
 8002578:	2000025c 	.word	0x2000025c

0800257c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <prvResetNextTaskUnblockTime+0x40>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <prvResetNextTaskUnblockTime+0x14>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <prvResetNextTaskUnblockTime+0x16>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <prvResetNextTaskUnblockTime+0x44>)
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025aa:	e008      	b.n	80025be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <prvResetNextTaskUnblockTime+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <prvResetNextTaskUnblockTime+0x44>)
 80025bc:	6013      	str	r3, [r2, #0]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000258 	.word	0x20000258
 80025cc:	200002a8 	.word	0x200002a8

080025d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <prvAddCurrentTaskToDelayedList+0xb0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3304      	adds	r3, #4
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc04 	bl	8001df4 <uxListRemove>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	2201      	movs	r2, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4013      	ands	r3, r2
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002608:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d10a      	bne.n	8002628 <prvAddCurrentTaskToDelayedList+0x58>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3304      	adds	r3, #4
 800261e:	4619      	mov	r1, r3
 8002620:	481a      	ldr	r0, [pc, #104]	; (800268c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002622:	f7ff fb8c 	bl	8001d3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002626:	e026      	b.n	8002676 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d209      	bcs.n	8002654 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3304      	adds	r3, #4
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f7ff fb99 	bl	8001d84 <vListInsert>
}
 8002652:	e010      	b.n	8002676 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3304      	adds	r3, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4610      	mov	r0, r2
 8002662:	f7ff fb8f 	bl	8001d84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d202      	bcs.n	8002676 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002670:	4a09      	ldr	r2, [pc, #36]	; (8002698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6013      	str	r3, [r2, #0]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	2000028c 	.word	0x2000028c
 8002684:	200001a0 	.word	0x200001a0
 8002688:	20000290 	.word	0x20000290
 800268c:	20000274 	.word	0x20000274
 8002690:	2000025c 	.word	0x2000025c
 8002694:	20000258 	.word	0x20000258
 8002698:	200002a8 	.word	0x200002a8

0800269c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3b04      	subs	r3, #4
 80026ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3b04      	subs	r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f023 0201 	bic.w	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3b04      	subs	r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026cc:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <pxPortInitialiseStack+0x54>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3b14      	subs	r3, #20
 80026d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3b20      	subs	r3, #32
 80026e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80026e4:	68fb      	ldr	r3, [r7, #12]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	080026f5 	.word	0x080026f5

080026f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <prvTaskExitError+0x54>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d00a      	beq.n	800271e <prvTaskExitError+0x2a>
	__asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	60fb      	str	r3, [r7, #12]
}
 800271a:	bf00      	nop
 800271c:	e7fe      	b.n	800271c <prvTaskExitError+0x28>
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	60bb      	str	r3, [r7, #8]
}
 8002730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002732:	bf00      	nop
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0fc      	beq.n	8002734 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000008 	.word	0x20000008
 800274c:	00000000 	.word	0x00000000

08002750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <pxCurrentTCBConst2>)
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	6808      	ldr	r0, [r1, #0]
 8002756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800275a:	f380 8809 	msr	PSP, r0
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f380 8811 	msr	BASEPRI, r0
 800276a:	f04e 0e0d 	orr.w	lr, lr, #13
 800276e:	4770      	bx	lr

08002770 <pxCurrentTCBConst2>:
 8002770:	200001a0 	.word	0x200001a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop

08002778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002778:	4806      	ldr	r0, [pc, #24]	; (8002794 <prvPortStartFirstTask+0x1c>)
 800277a:	6800      	ldr	r0, [r0, #0]
 800277c:	6800      	ldr	r0, [r0, #0]
 800277e:	f380 8808 	msr	MSP, r0
 8002782:	b662      	cpsie	i
 8002784:	b661      	cpsie	f
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	df00      	svc	0
 8002790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002792:	bf00      	nop
 8002794:	e000ed08 	.word	0xe000ed08

08002798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <xPortStartScheduler+0xd0>)
 80027a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	22ff      	movs	r2, #255	; 0xff
 80027ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <xPortStartScheduler+0xd4>)
 80027c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <xPortStartScheduler+0xd8>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027cc:	e009      	b.n	80027e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <xPortStartScheduler+0xd8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <xPortStartScheduler+0xd8>)
 80027d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ea:	2b80      	cmp	r3, #128	; 0x80
 80027ec:	d0ef      	beq.n	80027ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <xPortStartScheduler+0xd8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d00a      	beq.n	8002810 <xPortStartScheduler+0x78>
	__asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	60bb      	str	r3, [r7, #8]
}
 800280c:	bf00      	nop
 800280e:	e7fe      	b.n	800280e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <xPortStartScheduler+0xd8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <xPortStartScheduler+0xd8>)
 8002818:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <xPortStartScheduler+0xd8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <xPortStartScheduler+0xd8>)
 8002824:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <xPortStartScheduler+0xdc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <xPortStartScheduler+0xdc>)
 8002834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <xPortStartScheduler+0xdc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <xPortStartScheduler+0xdc>)
 8002840:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002844:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002846:	f000 f8b9 	bl	80029bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <xPortStartScheduler+0xe0>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002850:	f7ff ff92 	bl	8002778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002854:	f7ff fde4 	bl	8002420 <vTaskSwitchContext>
	prvTaskExitError();
 8002858:	f7ff ff4c 	bl	80026f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e400 	.word	0xe000e400
 800286c:	200002b4 	.word	0x200002b4
 8002870:	200002b8 	.word	0x200002b8
 8002874:	e000ed20 	.word	0xe000ed20
 8002878:	20000008 	.word	0x20000008

0800287c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
	__asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	607b      	str	r3, [r7, #4]
}
 8002894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <vPortEnterCritical+0x58>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <vPortEnterCritical+0x58>)
 800289e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <vPortEnterCritical+0x58>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d10f      	bne.n	80028c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <vPortEnterCritical+0x5c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	603b      	str	r3, [r7, #0]
}
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <vPortEnterCritical+0x4a>
	}
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000008 	.word	0x20000008
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <vPortExitCritical+0x4c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <vPortExitCritical+0x24>
	__asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	607b      	str	r3, [r7, #4]
}
 80028fc:	bf00      	nop
 80028fe:	e7fe      	b.n	80028fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <vPortExitCritical+0x4c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3b01      	subs	r3, #1
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <vPortExitCritical+0x4c>)
 8002908:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <vPortExitCritical+0x4c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <vPortExitCritical+0x42>
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800291c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000008 	.word	0x20000008
 800292c:	00000000 	.word	0x00000000

08002930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002930:	f3ef 8009 	mrs	r0, PSP
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <pxCurrentTCBConst>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002940:	6010      	str	r0, [r2, #0]
 8002942:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002946:	f04f 0050 	mov.w	r0, #80	; 0x50
 800294a:	f380 8811 	msr	BASEPRI, r0
 800294e:	f7ff fd67 	bl	8002420 <vTaskSwitchContext>
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f380 8811 	msr	BASEPRI, r0
 800295a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	6808      	ldr	r0, [r1, #0]
 8002962:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002966:	f380 8809 	msr	PSP, r0
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	4770      	bx	lr

08002970 <pxCurrentTCBConst>:
 8002970:	200001a0 	.word	0x200001a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop

08002978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	607b      	str	r3, [r7, #4]
}
 8002990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002992:	f7ff fcab 	bl	80022ec <xTaskIncrementTick>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <SysTick_Handler+0x40>)
 800299e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f383 8811 	msr	BASEPRI, r3
}
 80029ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	e000ed04 	.word	0xe000ed04

080029bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <vPortSetupTimerInterrupt+0x30>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <vPortSetupTimerInterrupt+0x34>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <vPortSetupTimerInterrupt+0x38>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <vPortSetupTimerInterrupt+0x3c>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	4a08      	ldr	r2, [pc, #32]	; (80029fc <vPortSetupTimerInterrupt+0x40>)
 80029da:	3b01      	subs	r3, #1
 80029dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029de:	4b03      	ldr	r3, [pc, #12]	; (80029ec <vPortSetupTimerInterrupt+0x30>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	e000e010 	.word	0xe000e010
 80029f0:	e000e018 	.word	0xe000e018
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	10624dd3 	.word	0x10624dd3
 80029fc:	e000e014 	.word	0xe000e014

08002a00 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f023 0307 	bic.w	r3, r3, #7
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8002a20:	f7ff fbc8 	bl	80021b4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <pvPortMalloc+0x80>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <pvPortMalloc+0x84>)
 8002a2e:	f023 0307 	bic.w	r3, r3, #7
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <pvPortMalloc+0x80>)
 8002a36:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <pvPortMalloc+0x88>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d813      	bhi.n	8002a70 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <pvPortMalloc+0x88>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	441a      	add	r2, r3
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <pvPortMalloc+0x88>)
 8002a52:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d90b      	bls.n	8002a70 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <pvPortMalloc+0x80>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <pvPortMalloc+0x88>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <pvPortMalloc+0x88>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <pvPortMalloc+0x88>)
 8002a6e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a70:	f7ff fbae 	bl	80021d0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200022c0 	.word	0x200022c0
 8002a84:	200002c4 	.word	0x200002c4
 8002a88:	200022bc 	.word	0x200022bc

08002a8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <vPortFree+0x24>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	60fb      	str	r3, [r7, #12]
}
 8002aac:	bf00      	nop
 8002aae:	e7fe      	b.n	8002aae <vPortFree+0x22>
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
	...

08002abc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002abc:	b5b0      	push	{r4, r5, r7, lr}
 8002abe:	b090      	sub	sp, #64	; 0x40
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	//TODO:creer taches 1, 2 et 3
	//osThreadDef(TASK1, task1Fn, ..., 0, ...);
	//... = osThreadCreate (osThread(TASK1), NULL);
	osThreadDef(TACHE1,task1Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_FREERTOS_Init+0x60>)
 8002ac4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002ac8:	461d      	mov	r5, r3
 8002aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ace:	682b      	ldr	r3, [r5, #0]
 8002ad0:	6023      	str	r3, [r4, #0]
	osThreadCreate (osThread(TACHE1), NULL);
 8002ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f8ca 	bl	8001c72 <osThreadCreate>
	osThreadDef(TACHE2,task2Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <MX_FREERTOS_Init+0x64>)
 8002ae0:	f107 0418 	add.w	r4, r7, #24
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	6023      	str	r3, [r4, #0]
	osThreadCreate (osThread(TACHE2), NULL);
 8002aee:	f107 0318 	add.w	r3, r7, #24
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff f8bc 	bl	8001c72 <osThreadCreate>
	osThreadDef(TACHE3,task3Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <MX_FREERTOS_Init+0x68>)
 8002afc:	1d3c      	adds	r4, r7, #4
 8002afe:	461d      	mov	r5, r3
 8002b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	6023      	str	r3, [r4, #0]
	osThreadCreate (osThread(TACHE3), NULL);
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff f8b0 	bl	8001c72 <osThreadCreate>
//nom de la fct sans ()


  /* USER CODE END RTOS_THREADS */

}
 8002b12:	bf00      	nop
 8002b14:	3740      	adds	r7, #64	; 0x40
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	08002f8c 	.word	0x08002f8c
 8002b20:	08002fa0 	.word	0x08002fa0
 8002b24:	08002fb4 	.word	0x08002fb4

08002b28 <task1Fn>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
/* task1Fn function */
void task1Fn(void const * argument)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
	//uint32_t start = HAL_GetTick();

  /* Infinite loop */
	for(;;){
	// envoi d un message sur l UART
	MESN_UART_PutString_Poll((uint8_t * )"\r\nTask1#");
 8002b34:	4803      	ldr	r0, [pc, #12]	; (8002b44 <task1Fn+0x1c>)
 8002b36:	f7fd fd7d 	bl	8000634 <MESN_UART_PutString_Poll>
	// attente qlq milli-secondes
	//for(i=0;i<100000;i++);
	//while((HAL_GetTick()-start)<10);
	//osThreadYield();
	osDelay(500);
 8002b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b3e:	f7ff f8bf 	bl	8001cc0 <osDelay>
	MESN_UART_PutString_Poll((uint8_t * )"\r\nTask1#");
 8002b42:	e7f7      	b.n	8002b34 <task1Fn+0xc>
 8002b44:	08002fc8 	.word	0x08002fc8

08002b48 <task2Fn>:
	}
}

/* task2Fn function */
void task2Fn(void const * argument)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

	uint32_t i=0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]


	  /* Infinite loop */
		for(;;){
		// envoi d un message sur l UART
		MESN_UART_PutString_Poll((uint8_t*)"\r\nTask2#####");
 8002b54:	4803      	ldr	r0, [pc, #12]	; (8002b64 <task2Fn+0x1c>)
 8002b56:	f7fd fd6d 	bl	8000634 <MESN_UART_PutString_Poll>
		// attente qlq milli-secondes
		//for(i=0;i<100000;i++);
		//osThreadYield();
		osDelay( 1000 );
 8002b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b5e:	f7ff f8af 	bl	8001cc0 <osDelay>
		MESN_UART_PutString_Poll((uint8_t*)"\r\nTask2#####");
 8002b62:	e7f7      	b.n	8002b54 <task2Fn+0xc>
 8002b64:	08002fd4 	.word	0x08002fd4

08002b68 <task3Fn>:

}

/* task3Fn function */
void task3Fn(void const * argument)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

	uint32_t i=0 ;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]


	  /* Infinite loop */
		for(;;){
		// envoi d un message sur l UART
		MESN_UART_PutString_Poll((uint8_t * )"\r\nTask3##############");
 8002b74:	4803      	ldr	r0, [pc, #12]	; (8002b84 <task3Fn+0x1c>)
 8002b76:	f7fd fd5d 	bl	8000634 <MESN_UART_PutString_Poll>
		// attente qlq milli-secondes
		osDelay(3000);
 8002b7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b7e:	f7ff f89f 	bl	8001cc0 <osDelay>
		MESN_UART_PutString_Poll((uint8_t * )"\r\nTask3##############");
 8002b82:	e7f7      	b.n	8002b74 <task3Fn+0xc>
 8002b84:	08002fe4 	.word	0x08002fe4

08002b88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <MX_GPIO_Init+0x90>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <MX_GPIO_Init+0x90>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	61d3      	str	r3, [r2, #28]
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <MX_GPIO_Init+0x90>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <MX_GPIO_Init+0x90>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <MX_GPIO_Init+0x90>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	61d3      	str	r3, [r2, #28]
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <MX_GPIO_Init+0x90>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	4812      	ldr	r0, [pc, #72]	; (8002c1c <MX_GPIO_Init+0x94>)
 8002bd4:	f7fe f844 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	4619      	mov	r1, r3
 8002bee:	480c      	ldr	r0, [pc, #48]	; (8002c20 <MX_GPIO_Init+0x98>)
 8002bf0:	f7fd fea6 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4804      	ldr	r0, [pc, #16]	; (8002c1c <MX_GPIO_Init+0x94>)
 8002c0c:	f7fd fe98 	bl	8000940 <HAL_GPIO_Init>

}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40020800 	.word	0x40020800

08002c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c28:	f7fd fd76 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2c:	f000 f80e 	bl	8002c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c30:	f7ff ffaa 	bl	8002b88 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MESN_UART_Init();
 8002c34:	f7fd fc28 	bl	8000488 <MESN_UART_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002c38:	f7ff ff40 	bl	8002abc <MX_FREERTOS_Init>
  //on creer les atche puis on démare les taches
  /* Start scheduler */
  //TODO ...
  MESN_UART_PutString_Poll((uint8_t * )"\r\n start os ");
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <main+0x24>)
 8002c3e:	f7fd fcf9 	bl	8000634 <MESN_UART_PutString_Poll>
  vTaskStartScheduler();
 8002c42:	f7ff fa67 	bl	8002114 <vTaskStartScheduler>
  //une que os a demmarer il vaut jamais quitter
  // c'est qui fctionne
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <main+0x22>
 8002c48:	08002ffc 	.word	0x08002ffc

08002c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b092      	sub	sp, #72	; 0x48
 8002c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	2234      	movs	r2, #52	; 0x34
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f972 	bl	8002f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c60:	463b      	mov	r3, r7
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <SystemClock_Config+0x88>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <SystemClock_Config+0x88>)
 8002c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c7c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c82:	2301      	movs	r3, #1
 8002c84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c86:	2310      	movs	r3, #16
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fffc 	bl	8000c90 <HAL_RCC_OscConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8002c9e:	f000 f82d 	bl	8002cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fb18 	bl	80012f0 <HAL_RCC_ClockConfig>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002cc6:	f000 f819 	bl	8002cfc <Error_Handler>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3748      	adds	r7, #72	; 0x48
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40007000 	.word	0x40007000

08002cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cea:	f7fd fd2d 	bl	8000748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40001400 	.word	0x40001400

08002cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d00:	b672      	cpsid	i
}
 8002d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <Error_Handler+0x8>
	...

08002d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_MspInit+0x64>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <HAL_MspInit+0x64>)
 8002d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	6253      	str	r3, [r2, #36]	; 0x24
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_MspInit+0x64>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_MspInit+0x64>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_MspInit+0x64>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_MspInit+0x64>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_MspInit+0x64>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_MspInit+0x64>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6253      	str	r3, [r2, #36]	; 0x24
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_MspInit+0x64>)
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	210f      	movs	r1, #15
 8002d5a:	f06f 0001 	mvn.w	r0, #1
 8002d5e:	f7fd fdc4 	bl	80008ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08e      	sub	sp, #56	; 0x38
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002d86:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_InitTick+0xe0>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	4a31      	ldr	r2, [pc, #196]	; (8002e50 <HAL_InitTick+0xe0>)
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	6253      	str	r3, [r2, #36]	; 0x24
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_InitTick+0xe0>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d9e:	f107 0210 	add.w	r2, r7, #16
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fcb1 	bl	8001710 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d103      	bne.n	8002dc0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002db8:	f7fe fc96 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	6378      	str	r0, [r7, #52]	; 0x34
 8002dbe:	e004      	b.n	8002dca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002dc0:	f7fe fc92 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_InitTick+0xe4>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_InitTick+0xe8>)
 8002dda:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_InitTick+0xec>)
 8002ddc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_InitTick+0xe8>)
 8002de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002de4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002de6:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <HAL_InitTick+0xe8>)
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_InitTick+0xe8>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_InitTick+0xe8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8002df8:	4817      	ldr	r0, [pc, #92]	; (8002e58 <HAL_InitTick+0xe8>)
 8002dfa:	f7fe fd19 	bl	8001830 <HAL_TIM_Base_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11b      	bne.n	8002e44 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <HAL_InitTick+0xe8>)
 8002e0e:	f7fe fd57 	bl	80018c0 <HAL_TIM_Base_Start_IT>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e20:	202c      	movs	r0, #44	; 0x2c
 8002e22:	f7fd fd7e 	bl	8000922 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d808      	bhi.n	8002e3e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	202c      	movs	r0, #44	; 0x2c
 8002e32:	f7fd fd5a 	bl	80008ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_InitTick+0xf0>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e002      	b.n	8002e44 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3738      	adds	r7, #56	; 0x38
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	431bde83 	.word	0x431bde83
 8002e58:	200022c4 	.word	0x200022c4
 8002e5c:	40001400 	.word	0x40001400
 8002e60:	20000000 	.word	0x20000000

08002e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <NMI_Handler+0x4>

08002e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <HardFault_Handler+0x4>

08002e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <MemManage_Handler+0x4>

08002e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <BusFault_Handler+0x4>

08002e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <UsageFault_Handler+0x4>

08002e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
	...

08002e90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <TIM7_IRQHandler+0x10>)
 8002e96:	f7fe fd65 	bl	8001964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200022c4 	.word	0x200022c4

08002ea4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eb2:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ed6:	f7ff ffe5 	bl	8002ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eda:	f000 f80f 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ede:	f7ff fea1 	bl	8002c24 <main>
  bx lr
 8002ee2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002eec:	080030a0 	.word	0x080030a0
  ldr r2, =_sbss
 8002ef0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002ef4:	20002304 	.word	0x20002304

08002ef8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC1_IRQHandler>
	...

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	2600      	movs	r6, #0
 8002f00:	4d0c      	ldr	r5, [pc, #48]	; (8002f34 <__libc_init_array+0x38>)
 8002f02:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f04:	1b64      	subs	r4, r4, r5
 8002f06:	10a4      	asrs	r4, r4, #2
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	f000 f822 	bl	8002f54 <_init>
 8002f10:	2600      	movs	r6, #0
 8002f12:	4d0a      	ldr	r5, [pc, #40]	; (8002f3c <__libc_init_array+0x40>)
 8002f14:	4c0a      	ldr	r4, [pc, #40]	; (8002f40 <__libc_init_array+0x44>)
 8002f16:	1b64      	subs	r4, r4, r5
 8002f18:	10a4      	asrs	r4, r4, #2
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08003098 	.word	0x08003098
 8002f38:	08003098 	.word	0x08003098
 8002f3c:	08003098 	.word	0x08003098
 8002f40:	0800309c 	.word	0x0800309c

08002f44 <memset>:
 8002f44:	4603      	mov	r3, r0
 8002f46:	4402      	add	r2, r0
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <memset+0xa>
 8002f4c:	4770      	bx	lr
 8002f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f52:	e7f9      	b.n	8002f48 <memset+0x4>

08002f54 <_init>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr

08002f60 <_fini>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr
