
TP_3_v3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a0  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a8  080082a8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b0  080082b0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b0  080082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080082b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c94  20000084  0800833c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003d18  0800833c  00023d18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c00  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301c  00000000  00000000  00030cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00033cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00034d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a121  00000000  00000000  00035cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001348e  00000000  00000000  0004fe19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d120  00000000  00000000  000632a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001003c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  00100418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	08006df0 	.word	0x08006df0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	08006df0 	.word	0x08006df0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b976 	b.w	8000484 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	4688      	mov	r8, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14d      	bne.n	800025c <__udivmoddi4+0xac>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d968      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c6:	fab2 f282 	clz	r2, r2
 80001ca:	b152      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001cc:	fa01 f302 	lsl.w	r3, r1, r2
 80001d0:	f1c2 0120 	rsb	r1, r2, #32
 80001d4:	fa20 f101 	lsr.w	r1, r0, r1
 80001d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001dc:	ea41 0803 	orr.w	r8, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ea:	fa1f fe8c 	uxth.w	lr, ip
 80001ee:	fb01 8817 	mls	r8, r1, r7, r8
 80001f2:	fb07 f00e 	mul.w	r0, r7, lr
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	eb1c 0303 	adds.w	r3, ip, r3
 8000204:	f107 35ff 	add.w	r5, r7, #4294967295
 8000208:	f080 811e 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020c:	4298      	cmp	r0, r3
 800020e:	f240 811b 	bls.w	8000448 <__udivmoddi4+0x298>
 8000212:	3f02      	subs	r7, #2
 8000214:	4463      	add	r3, ip
 8000216:	1a1b      	subs	r3, r3, r0
 8000218:	fbb3 f0f1 	udiv	r0, r3, r1
 800021c:	fb01 3310 	mls	r3, r1, r0, r3
 8000220:	fb00 fe0e 	mul.w	lr, r0, lr
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	45a6      	cmp	lr, r4
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0404 	adds.w	r4, ip, r4
 8000232:	f100 33ff 	add.w	r3, r0, #4294967295
 8000236:	f080 8109 	bcs.w	800044c <__udivmoddi4+0x29c>
 800023a:	45a6      	cmp	lr, r4
 800023c:	f240 8106 	bls.w	800044c <__udivmoddi4+0x29c>
 8000240:	4464      	add	r4, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	eba4 040e 	sub.w	r4, r4, lr
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	b11e      	cbz	r6, 8000258 <__udivmoddi4+0xa8>
 8000250:	2300      	movs	r3, #0
 8000252:	40d4      	lsrs	r4, r2
 8000254:	e9c6 4300 	strd	r4, r3, [r6]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	428b      	cmp	r3, r1
 800025e:	d908      	bls.n	8000272 <__udivmoddi4+0xc2>
 8000260:	2e00      	cmp	r6, #0
 8000262:	f000 80ee 	beq.w	8000442 <__udivmoddi4+0x292>
 8000266:	2100      	movs	r1, #0
 8000268:	e9c6 0500 	strd	r0, r5, [r6]
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80fc 	bhi.w	800047c <__udivmoddi4+0x2cc>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb65 0303 	sbc.w	r3, r5, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4698      	mov	r8, r3
 800028e:	2e00      	cmp	r6, #0
 8000290:	d0e2      	beq.n	8000258 <__udivmoddi4+0xa8>
 8000292:	e9c6 4800 	strd	r4, r8, [r6]
 8000296:	e7df      	b.n	8000258 <__udivmoddi4+0xa8>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8091 	bne.w	80003c8 <__udivmoddi4+0x218>
 80002a6:	eba1 000c 	sub.w	r0, r1, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b0:	fa1f fe8c 	uxth.w	lr, ip
 80002b4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b8:	fb07 0013 	mls	r0, r7, r3, r0
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0505 	adds.w	r5, ip, r5
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	42a8      	cmp	r0, r5
 80002d6:	f200 80ce 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a2d      	subs	r5, r5, r0
 80002de:	fbb5 f0f7 	udiv	r0, r5, r7
 80002e2:	fb07 5510 	mls	r5, r7, r0, r5
 80002e6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80b6 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 8000304:	4628      	mov	r0, r5
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79e      	b.n	800024e <__udivmoddi4+0x9e>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fbba f8f9 	udiv	r8, sl, r9
 800032a:	fa20 f307 	lsr.w	r3, r0, r7
 800032e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000332:	408d      	lsls	r5, r1
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	431d      	orrs	r5, r3
 800033a:	fa00 f301 	lsl.w	r3, r0, r1
 800033e:	fb08 f00e 	mul.w	r0, r8, lr
 8000342:	0c2c      	lsrs	r4, r5, #16
 8000344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000348:	42a0      	cmp	r0, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	42a0      	cmp	r0, r4
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1a24      	subs	r4, r4, r0
 800036a:	fbb4 f0f9 	udiv	r0, r4, r9
 800036e:	fb09 4410 	mls	r4, r9, r0, r4
 8000372:	fb00 fe0e 	mul.w	lr, r0, lr
 8000376:	b2ad      	uxth	r5, r5
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 35ff 	add.w	r5, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9502 	umull	r9, r5, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	42ac      	cmp	r4, r5
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46ae      	mov	lr, r5
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d069      	beq.n	8000480 <__udivmoddi4+0x2d0>
 80003ac:	ebb3 0208 	subs.w	r2, r3, r8
 80003b0:	eb64 040e 	sbc.w	r4, r4, lr
 80003b4:	fa22 f301 	lsr.w	r3, r2, r1
 80003b8:	fa04 f707 	lsl.w	r7, r4, r7
 80003bc:	431f      	orrs	r7, r3
 80003be:	40cc      	lsrs	r4, r1
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	2100      	movs	r1, #0
 80003c6:	e747      	b.n	8000258 <__udivmoddi4+0xa8>
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	f1c2 0120 	rsb	r1, r2, #32
 80003d0:	fa25 f301 	lsr.w	r3, r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa20 f101 	lsr.w	r1, r0, r1
 80003dc:	4095      	lsls	r5, r2
 80003de:	430d      	orrs	r5, r1
 80003e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e4:	fb07 3311 	mls	r3, r7, r1, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	0c28      	lsrs	r0, r5, #16
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	fb01 f30e 	mul.w	r3, r1, lr
 80003f6:	4283      	cmp	r3, r0
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0000 	adds.w	r0, ip, r0
 8000402:	f101 38ff 	add.w	r8, r1, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	4283      	cmp	r3, r0
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3902      	subs	r1, #2
 800040e:	4460      	add	r0, ip
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	fbb0 f3f7 	udiv	r3, r0, r7
 8000416:	fb07 0013 	mls	r0, r7, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000420:	fb03 f00e 	mul.w	r0, r3, lr
 8000424:	42a8      	cmp	r0, r5
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0505 	adds.w	r5, ip, r5
 800042c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	42a8      	cmp	r0, r5
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3b02      	subs	r3, #2
 8000438:	4465      	add	r5, ip
 800043a:	1a28      	subs	r0, r5, r0
 800043c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	4631      	mov	r1, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e707      	b.n	8000258 <__udivmoddi4+0xa8>
 8000448:	462f      	mov	r7, r5
 800044a:	e6e4      	b.n	8000216 <__udivmoddi4+0x66>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f9      	b.n	8000244 <__udivmoddi4+0x94>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb65 0e0c 	sbc.w	lr, r5, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4643      	mov	r3, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4628      	mov	r0, r5
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4641      	mov	r1, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e747      	b.n	8000306 <__udivmoddi4+0x156>
 8000476:	3b02      	subs	r3, #2
 8000478:	4465      	add	r5, ip
 800047a:	e72f      	b.n	80002dc <__udivmoddi4+0x12c>
 800047c:	4608      	mov	r0, r1
 800047e:	e706      	b.n	800028e <__udivmoddi4+0xde>
 8000480:	4631      	mov	r1, r6
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0xa8>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <MESN_UART_Init>:
  * @brief USART init function
  * @param none
  * @retval None
  */
void MESN_UART_Init()
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t tmpreg = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]

	/* Peripheral clock enable */
	__UART_CLK_ENABLE();
 8000492:	4b61      	ldr	r3, [pc, #388]	; (8000618 <MESN_UART_Init+0x190>)
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	4a60      	ldr	r2, [pc, #384]	; (8000618 <MESN_UART_Init+0x190>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	6253      	str	r3, [r2, #36]	; 0x24
 800049e:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <MESN_UART_Init+0x190>)
 80004a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

	/* UART GPIO Configuration */
	GPIO_InitStruct.Pin = UART_TX_PIN | UART_RX_PIN;
 80004aa:	230c      	movs	r3, #12
 80004ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = UART_GPIO_SPEED;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF_UART;
 80004ba:	2307      	movs	r3, #7
 80004bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(UART_PORT, &GPIO_InitStruct);
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	4855      	ldr	r0, [pc, #340]	; (800061c <MESN_UART_Init+0x194>)
 80004c6:	f000 fa3b 	bl	8000940 <HAL_GPIO_Init>

	/* System interrupt init*/
	HAL_NVIC_SetPriority(UART_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2026      	movs	r0, #38	; 0x26
 80004d0:	f000 fa0b 	bl	80008ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART_IRQn);
 80004d4:	2026      	movs	r0, #38	; 0x26
 80004d6:	f000 fa24 	bl	8000922 <HAL_NVIC_EnableIRQ>

	/* Disable the peripheral */
	UART_INSTANCE->CR1 &=  ~USART_CR1_UE;
 80004da:	4b51      	ldr	r3, [pc, #324]	; (8000620 <MESN_UART_Init+0x198>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a50      	ldr	r2, [pc, #320]	; (8000620 <MESN_UART_Init+0x198>)
 80004e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004e4:	60d3      	str	r3, [r2, #12]

	/*------- UART-associated USART registers setting : CR2 Configuration ------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(UART_INSTANCE->CR2, (0x3U << 12U), (0x00000000U));
 80004e6:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <MESN_UART_Init+0x198>)
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <MESN_UART_Init+0x198>)
 80004ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004f0:	6113      	str	r3, [r2, #16]

	/*------- UART-associated USART registers setting : CR1 Configuration ------*/
	/* Configure the UART Word Length, Parity and mode: */
	tmpreg = (uint32_t)((0x1U << 3U) | (0x1U << 2U));
 80004f2:	230c      	movs	r3, #12
 80004f4:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(UART_INSTANCE->CR1,
 80004f6:	4b4a      	ldr	r3, [pc, #296]	; (8000620 <MESN_UART_Init+0x198>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80004fe:	f023 030c 	bic.w	r3, r3, #12
 8000502:	4947      	ldr	r1, [pc, #284]	; (8000620 <MESN_UART_Init+0x198>)
 8000504:	69fa      	ldr	r2, [r7, #28]
 8000506:	4313      	orrs	r3, r2
 8000508:	60cb      	str	r3, [r1, #12]
						 (uint32_t)((0x1U << 12) | (0x1U << 10) | (0x1U << 9) | (0x1U << 3) | (0x1U << 2) | (0x1U << 15)),
						 tmpreg);

	/*------- UART-associated USART registers setting : CR3 Configuration ------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits */
	MODIFY_REG(UART_INSTANCE->CR3, ((0x1U << 8) | (0x1U << 9)), 0x00000000U);
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <MESN_UART_Init+0x198>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a44      	ldr	r2, [pc, #272]	; (8000620 <MESN_UART_Init+0x198>)
 8000510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000514:	6153      	str	r3, [r2, #20]

	/*---Configure Baudrate BRR register---*/
	UART_INSTANCE->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), 9600);
 8000516:	f001 f8e7 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800051a:	4602      	mov	r2, r0
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	009a      	lsls	r2, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	4a3f      	ldr	r2, [pc, #252]	; (8000624 <MESN_UART_Init+0x19c>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	0d1b      	lsrs	r3, r3, #20
 800052e:	011c      	lsls	r4, r3, #4
 8000530:	f001 f8da 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000534:	4602      	mov	r2, r0
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	009a      	lsls	r2, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	4a39      	ldr	r2, [pc, #228]	; (8000628 <MESN_UART_Init+0x1a0>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0b1d      	lsrs	r5, r3, #12
 8000548:	f001 f8ce 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800054c:	4602      	mov	r2, r0
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	009a      	lsls	r2, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	4a32      	ldr	r2, [pc, #200]	; (8000624 <MESN_UART_Init+0x19c>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0d1b      	lsrs	r3, r3, #20
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	1aeb      	subs	r3, r5, r3
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	3332      	adds	r3, #50	; 0x32
 800056c:	4a2f      	ldr	r2, [pc, #188]	; (800062c <MESN_UART_Init+0x1a4>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000578:	441c      	add	r4, r3
 800057a:	f001 f8b5 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 800057e:	4602      	mov	r2, r0
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <MESN_UART_Init+0x1a0>)
 800058c:	fba2 2303 	umull	r2, r3, r2, r3
 8000590:	0b1d      	lsrs	r5, r3, #12
 8000592:	f001 f8a9 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000596:	4602      	mov	r2, r0
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	009a      	lsls	r2, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MESN_UART_Init+0x19c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	0d1b      	lsrs	r3, r3, #20
 80005aa:	2264      	movs	r2, #100	; 0x64
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	1aeb      	subs	r3, r5, r3
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	3332      	adds	r3, #50	; 0x32
 80005b6:	4a1d      	ldr	r2, [pc, #116]	; (800062c <MESN_UART_Init+0x1a4>)
 80005b8:	fba2 2303 	umull	r2, r3, r2, r3
 80005bc:	095b      	lsrs	r3, r3, #5
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MESN_UART_Init+0x198>)
 80005c4:	4423      	add	r3, r4
 80005c6:	6093      	str	r3, [r2, #8]

	/* In asynchronous mode, the following bits must be kept cleared:
	     - LINEN and CLKEN bits in the USART_CR2 register,
	     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(UART_INSTANCE->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MESN_UART_Init+0x198>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <MESN_UART_Init+0x198>)
 80005ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80005d2:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(UART_INSTANCE->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MESN_UART_Init+0x198>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MESN_UART_Init+0x198>)
 80005da:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80005de:	6153      	str	r3, [r2, #20]

	/* Enable the peripheral */
	UART_INSTANCE->CR1 |=  USART_CR1_UE;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MESN_UART_Init+0x198>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <MESN_UART_Init+0x198>)
 80005e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ea:	60d3      	str	r3, [r2, #12]
  
  /* Initialize RX circular buffer and flag */
	uartRxCircBuff.eltNb = 0;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	uartRxCircBuff.indexR = 0;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	uartRxCircBuff.indexW = 0;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MESN_UART_Init+0x1a8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		
	/* Enable the UART Data Register not empty Interrupt */
	UART_INSTANCE->CR1 |= USART_CR1_RXNEIE;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MESN_UART_Init+0x198>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <MESN_UART_Init+0x198>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	40004400 	.word	0x40004400
 8000624:	45e7b273 	.word	0x45e7b273
 8000628:	1b4e81b5 	.word	0x1b4e81b5
 800062c:	51eb851f 	.word	0x51eb851f
 8000630:	200000a0 	.word	0x200000a0

08000634 <MESN_UART_PutString_Poll>:
  * @brief uart sending string by polling
  * @param *stringToSend: pointer to the string to be send.
  * @retval none
  */
void MESN_UART_PutString_Poll(uint8_t *stringToSend)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	int32_t i = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

  //Send data
  for (i=0; stringToSend[i] != '\0'; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e009      	b.n	800065a <MESN_UART_PutString_Poll+0x26>
		MESN_PRIV_UART_PutChar_Poll(stringToSend[i] );
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f84c 	bl	80006ec <MESN_PRIV_UART_PutChar_Poll>
  for (i=0; stringToSend[i] != '\0'; i++){
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <MESN_UART_PutString_Poll+0x12>
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MESN_PRIV_UART_IRQHandler>:
/**
  * @brief ISR dedicated to manage RX IRQ
  * @param none
  */
static void MESN_PRIV_UART_IRQHandler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
	uint8_t tmp;

	/* check the source of IRQ */
	// Data received IRQ
	if((UART_INSTANCE->STATUS_REG & RX_NEMTPY_BIT) != 0)
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	2b00      	cmp	r3, #0
 8000680:	d024      	beq.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
	{ 
		//Retrieve received data
		tmp = (uint8_t) UART_INSTANCE->RX_DATA_REG;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MESN_PRIV_UART_IRQHandler+0x68>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	71fb      	strb	r3, [r7, #7]

		// save data in circular buffer if is not full
		if (uartRxCircBuff.eltNb < UART_BUFFERSIZE) {
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800068a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d81c      	bhi.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
			// store data
			uartRxCircBuff.buffer[uartRxCircBuff.indexW] = tmp;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 8000694:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000698:	4910      	ldr	r1, [pc, #64]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	54ca      	strb	r2, [r1, r3]

			// circular buffer processing
			uartRxCircBuff.eltNb++;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
			uartRxCircBuff.indexW++;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			if (uartRxCircBuff.indexW >= UART_BUFFERSIZE)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80006c0:	2bff      	cmp	r3, #255	; 0xff
 80006c2:	d903      	bls.n	80006cc <MESN_PRIV_UART_IRQHandler+0x5c>
				uartRxCircBuff.indexW = 0;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MESN_PRIV_UART_IRQHandler+0x6c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
		else {
			// no flow control (hard/soft)
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400
 80006dc:	200000a0 	.word	0x200000a0

080006e0 <USART2_IRQHandler>:
  {
    MESN_PRIV_UART_IRQHandler();
  }
#elif defined(USE_UART2)
  void USART2_IRQHandler(void)
  {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
		MESN_PRIV_UART_IRQHandler();
 80006e4:	f7ff ffc4 	bl	8000670 <MESN_PRIV_UART_IRQHandler>
  }
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MESN_PRIV_UART_PutChar_Poll>:
  * @brief sends 8bits payload through UART by polling
  * @param dataTosend: byte to be send
  * @retval none
  */
static void MESN_PRIV_UART_PutChar_Poll(uint8_t dataToSend)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	// check if transmitter is ready to send
	while((UART_INSTANCE->STATUS_REG & TX_EMPTY_BIT) == 0);
 80006f6:	bf00      	nop
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f9      	beq.n	80006f8 <MESN_PRIV_UART_PutChar_Poll+0xc>
	UART_INSTANCE->TX_DATA_REG = (uint8_t)(dataToSend & 0xFF);
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <MESN_PRIV_UART_PutChar_Poll+0x28>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	6053      	str	r3, [r2, #4]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40004400 	.word	0x40004400

08000718 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000722:	2003      	movs	r0, #3
 8000724:	f000 f8d6 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000728:	200f      	movs	r0, #15
 800072a:	f005 fdb9 	bl	80062a0 <HAL_InitTick>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	e001      	b.n	800073e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800073a:	f005 fd7d 	bl	8006238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800073e:	79fb      	ldrb	r3, [r7, #7]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x1c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x20>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x1c>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200001ac 	.word	0x200001ac
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200001ac 	.word	0x200001ac

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <__NVIC_EnableIRQ+0x34>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff4f 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff64 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ffb2 	bl	8000870 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff81 	bl	800081c <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff57 	bl	80007e4 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000956:	e160      	b.n	8000c1a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 8152 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b01      	cmp	r3, #1
 800097a:	d005      	beq.n	8000988 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000984:	2b02      	cmp	r3, #2
 8000986:	d130      	bne.n	80009ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	f003 0201 	and.w	r2, r3, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d017      	beq.n	8000a26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d123      	bne.n	8000a7a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	691a      	ldr	r2, [r3, #16]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	08da      	lsrs	r2, r3, #3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3208      	adds	r2, #8
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0203 	and.w	r2, r3, #3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80ac 	beq.w	8000c14 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6213      	str	r3, [r2, #32]
 8000ac8:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <HAL_GPIO_Init+0x2f8>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ad4:	4a59      	ldr	r2, [pc, #356]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a51      	ldr	r2, [pc, #324]	; (8000c40 <HAL_GPIO_Init+0x300>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d025      	beq.n	8000b4c <HAL_GPIO_Init+0x20c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a50      	ldr	r2, [pc, #320]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d01f      	beq.n	8000b48 <HAL_GPIO_Init+0x208>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_GPIO_Init+0x308>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d019      	beq.n	8000b44 <HAL_GPIO_Init+0x204>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <HAL_GPIO_Init+0x30c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d013      	beq.n	8000b40 <HAL_GPIO_Init+0x200>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1fc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x314>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1f8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4b      	ldr	r2, [pc, #300]	; (8000c58 <HAL_GPIO_Init+0x318>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1f4>
 8000b30:	2306      	movs	r3, #6
 8000b32:	e00c      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b34:	2307      	movs	r3, #7
 8000b36:	e00a      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e008      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b40:	2303      	movs	r3, #3
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2fc>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b90:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_GPIO_Init+0x31c>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f47f ae97 	bne.w	8000958 <HAL_GPIO_Init+0x18>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	619a      	str	r2, [r3, #24]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e31d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca2:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cac:	4b91      	ldr	r3, [pc, #580]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d07b      	beq.n	8000dba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d006      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2b0c      	cmp	r3, #12
 8000ccc:	d10f      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	d10b      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd6:	4b87      	ldr	r3, [pc, #540]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d06a      	beq.n	8000db8 <HAL_RCC_OscConfig+0x128>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d166      	bne.n	8000db8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e2f7      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d106      	bne.n	8000d04 <HAL_RCC_OscConfig+0x74>
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e02d      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10c      	bne.n	8000d26 <HAL_RCC_OscConfig+0x96>
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a75      	ldr	r2, [pc, #468]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e01c      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0xb8>
 8000d2e:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a70      	ldr	r2, [pc, #448]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a6d      	ldr	r2, [pc, #436]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0xd0>
 8000d48:	4b6a      	ldr	r3, [pc, #424]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a69      	ldr	r2, [pc, #420]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a66      	ldr	r2, [pc, #408]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d013      	beq.n	8000d90 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fd00 	bl	800076c <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fcfc 	bl	800076c <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e2ad      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d8e:	e014      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fcec 	bl	800076c <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fce8 	bl	800076c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e299      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000daa:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x108>
 8000db6:	e000      	b.n	8000dba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d05a      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d005      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b0c      	cmp	r3, #12
 8000dd0:	d119      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d116      	bne.n	8000e06 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d001      	beq.n	8000df0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e276      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	493d      	ldr	r1, [pc, #244]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e04:	e03a      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d020      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcaa 	bl	800076c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fca6 	bl	800076c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e257      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	492a      	ldr	r1, [pc, #168]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e015      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_RCC_OscConfig+0x268>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fc89 	bl	800076c <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc85 	bl	800076c <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e236      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b8 	beq.w	8000ffa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d170      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d005      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x218>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e21a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d921      	bls.n	8000efc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc57 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e208      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	061b      	lsls	r3, r3, #24
 8000eec:	4901      	ldr	r1, [pc, #4]	; (8000ef4 <HAL_RCC_OscConfig+0x264>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
 8000ef2:	e020      	b.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efc:	4b99      	ldr	r3, [pc, #612]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4996      	ldr	r1, [pc, #600]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0e:	4b95      	ldr	r3, [pc, #596]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	4991      	ldr	r1, [pc, #580]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fc22 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e1d3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	0b5b      	lsrs	r3, r3, #13
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f46:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f48:	6892      	ldr	r2, [r2, #8]
 8000f4a:	0912      	lsrs	r2, r2, #4
 8000f4c:	f002 020f 	and.w	r2, r2, #15
 8000f50:	4985      	ldr	r1, [pc, #532]	; (8001168 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	5c8a      	ldrb	r2, [r1, r2]
 8000f54:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f56:	4a85      	ldr	r2, [pc, #532]	; (800116c <HAL_RCC_OscConfig+0x4dc>)
 8000f58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f5a:	4b85      	ldr	r3, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x4e0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 f99e 	bl	80062a0 <HAL_InitTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d045      	beq.n	8000ffa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	e1b5      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d029      	beq.n	8000fce <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f7a:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fbf4 	bl	800076c <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f88:	f7ff fbf0 	bl	800076c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1a1      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	496c      	ldr	r1, [pc, #432]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb8:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	4967      	ldr	r1, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e015      	b.n	8000ffa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <HAL_RCC_OscConfig+0x4e4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fbca 	bl	800076c <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fbc6 	bl	800076c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e177      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d030      	beq.n	8001068 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d016      	beq.n	800103c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fbaa 	bl	800076c <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fba6 	bl	800076c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e157      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x38c>
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <HAL_RCC_OscConfig+0x4e8>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb93 	bl	800076c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fb8f 	bl	800076c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e140      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b5 	beq.w	80011e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6253      	str	r3, [r2, #36]	; 0x24
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb57 	bl	800076c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fb53 	bl	800076c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e104      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_OscConfig+0x4ec>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x466>
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6353      	str	r3, [r2, #52]	; 0x34
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x488>
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001108:	6353      	str	r3, [r2, #52]	; 0x34
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001114:	6353      	str	r3, [r2, #52]	; 0x34
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x4aa>
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112a:	6353      	str	r3, [r2, #52]	; 0x34
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6353      	str	r3, [r2, #52]	; 0x34
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x4c2>
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_RCC_OscConfig+0x4d4>)
 800114c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001150:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb07 	bl	800076c <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001160:	e019      	b.n	8001196 <HAL_RCC_OscConfig+0x506>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	080081fc 	.word	0x080081fc
 800116c:	2000001c 	.word	0x2000001c
 8001170:	20000000 	.word	0x20000000
 8001174:	42470020 	.word	0x42470020
 8001178:	42470680 	.word	0x42470680
 800117c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001180:	f7ff faf4 	bl	800076c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e0a3      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001196:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0ee      	beq.n	8001180 <HAL_RCC_OscConfig+0x4f0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fae2 	bl	800076c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fade 	bl	800076c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e08d      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ee      	bne.n	80011ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80011da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d079      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	d056      	beq.n	800129c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d13b      	bne.n	800126e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fab6 	bl	800076c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fab2 	bl	800076c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e063      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	4319      	orrs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	430b      	orrs	r3, r1
 800123a:	492b      	ldr	r1, [pc, #172]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 800123c:	4313      	orrs	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fa91 	bl	800076c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fa8d 	bl	800076c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03e      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x5be>
 800126c:	e036      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_RCC_OscConfig+0x65c>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fa7a 	bl	800076c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fa76 	bl	800076c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e027      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x5ec>
 800129a:	e01f      	b.n	80012dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e01a      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_RCC_OscConfig+0x658>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470060 	.word	0x42470060

080012f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e11a      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d919      	bls.n	8001346 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_RCC_ClockConfig+0x34>
 8001318:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a89      	ldr	r2, [pc, #548]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b87      	ldr	r3, [pc, #540]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 0201 	bic.w	r2, r3, #1
 800132c:	4985      	ldr	r1, [pc, #532]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0f9      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	497a      	ldr	r1, [pc, #488]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 808e 	beq.w	800148e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800137a:	4b73      	ldr	r3, [pc, #460]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0d7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001392:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0cb      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0bf      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0b7      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 0203 	bic.w	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	495c      	ldr	r1, [pc, #368]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff f9c6 	bl	800076c <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ec:	f7ff f9be 	bl	800076c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e09b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d1ee      	bne.n	80013ec <HAL_RCC_ClockConfig+0xfc>
 800140e:	e03e      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d112      	bne.n	800143e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141a:	f7ff f9a7 	bl	800076c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e084      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_ClockConfig+0x12a>
 800143c:	e027      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11d      	bne.n	8001482 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	e00a      	b.n	800145e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff f990 	bl	800076c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e06d      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_ClockConfig+0x158>
 800146a:	e010      	b.n	800148e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff f97e 	bl	800076c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e05b      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ee      	bne.n	800146c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d219      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_RCC_ClockConfig+0x1be>
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0201 	bic.w	r2, r3, #1
 80014b6:	4923      	ldr	r1, [pc, #140]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_ClockConfig+0x254>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e034      	b.n	800153a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4917      	ldr	r1, [pc, #92]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490f      	ldr	r1, [pc, #60]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f823 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_ClockConfig+0x258>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490b      	ldr	r1, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x25c>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x260>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x264>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f004 feb6 	bl	80062a0 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	72fb      	strb	r3, [r7, #11]

  return status;
 8001538:	7afb      	ldrb	r3, [r7, #11]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00
 8001548:	40023800 	.word	0x40023800
 800154c:	080081fc 	.word	0x080081fc
 8001550:	2000001c 	.word	0x2000001c
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b08e      	sub	sp, #56	; 0x38
 800155e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d00d      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x34>
 8001570:	2b0c      	cmp	r3, #12
 8001572:	f200 8092 	bhi.w	800169a <HAL_RCC_GetSysClockFreq+0x142>
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x28>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x2e>
 800157e:	e08c      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x170>)
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001584:	e097      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800158a:	e094      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x178>)
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	0d9b      	lsrs	r3, r3, #22
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d021      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	2200      	movs	r2, #0
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	61fa      	str	r2, [r7, #28]
 80015ba:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015c0:	464a      	mov	r2, r9
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	2300      	movs	r3, #0
 80015c8:	4644      	mov	r4, r8
 80015ca:	fb04 f303 	mul.w	r3, r4, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_RCC_GetSysClockFreq+0x174>)
 80015d2:	4644      	mov	r4, r8
 80015d4:	fba4 0102 	umull	r0, r1, r4, r2
 80015d8:	440b      	add	r3, r1
 80015da:	4619      	mov	r1, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	617a      	str	r2, [r7, #20]
 80015e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e8:	f7fe fdca 	bl	8000180 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
 80015f4:	e04e      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	2200      	movs	r2, #0
 80015fa:	469a      	mov	sl, r3
 80015fc:	4693      	mov	fp, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	465b      	mov	r3, fp
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	0159      	lsls	r1, r3, #5
 800160c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001610:	0150      	lsls	r0, r2, #5
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	ebb2 080a 	subs.w	r8, r2, sl
 800161a:	eb63 090b 	sbc.w	r9, r3, fp
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800162a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800162e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001632:	ebb2 0408 	subs.w	r4, r2, r8
 8001636:	eb63 0509 	sbc.w	r5, r3, r9
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	00eb      	lsls	r3, r5, #3
 8001644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001648:	00e2      	lsls	r2, r4, #3
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	eb14 030a 	adds.w	r3, r4, sl
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	eb45 030b 	adc.w	r3, r5, fp
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001666:	4629      	mov	r1, r5
 8001668:	028b      	lsls	r3, r1, #10
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	4604      	mov	r4, r0
 8001670:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001674:	4601      	mov	r1, r0
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001688:	f7fe fd7a 	bl	8000180 <__aeabi_uldivmod>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4613      	mov	r3, r2
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001698:	e00d      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0b5b      	lsrs	r3, r3, #13
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	016e3600 	.word	0x016e3600
 80016d0:	080081f0 	.word	0x080081f0

080016d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	2000001c 	.word	0x2000001c

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff2 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	; (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	0800820c 	.word	0x0800820c

08001710 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	220f      	movs	r2, #15
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_RCC_GetClockConfig+0x58>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_GetClockConfig+0x5c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40023800 	.word	0x40023800
 800176c:	40023c00 	.word	0x40023c00

08001770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12c      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e016      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6253      	str	r3, [r2, #36]	; 0x24
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80017c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80017d4:	d105      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80017dc:	d101      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80017de:	2301      	movs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0201 	bic.w	r2, r3, #1
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e031      	b.n	80018a6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f829 	bl	80018ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f000 f978 	bl	8001b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e03a      	b.n	800194e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d00e      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_TIM_Base_Start_IT+0x98>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d009      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_TIM_Base_Start_IT+0x9c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_TIM_Base_Start_IT+0xa0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b06      	cmp	r3, #6
 8001928:	d010      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	e007      	b.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40000400 	.word	0x40000400
 800195c:	40000800 	.word	0x40000800
 8001960:	40010800 	.word	0x40010800

08001964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d122      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d11b      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0202 	mvn.w	r2, #2
 8001990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8c1 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8b4 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8c3 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0204 	mvn.w	r2, #4
 80019e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f897 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f88a 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f899 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0208 	mvn.w	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f86d 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f860 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f86f 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0210 	mvn.w	r2, #16
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2208      	movs	r2, #8
 8001a92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f843 	bl	8001b2e <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f836 	bl	8001b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f845 	bl	8001b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0201 	mvn.w	r2, #1
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f004 fb90 	bl	8006208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b40      	cmp	r3, #64	; 0x40
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f81f 	bl	8001b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d00f      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <TIM_Base_SetConfig+0x38>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d017      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <TIM_Base_SetConfig+0xc8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <TIM_Base_SetConfig+0xcc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00f      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <TIM_Base_SetConfig+0xd0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00b      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <TIM_Base_SetConfig+0xd4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <TIM_Base_SetConfig+0xd8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0x82>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <TIM_Base_SetConfig+0xdc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	615a      	str	r2, [r3, #20]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40011000 	.word	0x40011000

08001c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	2b84      	cmp	r3, #132	; 0x84
 8001c58:	d005      	beq.n	8001c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	3303      	adds	r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c78:	f3ef 8305 	mrs	r3, IPSR
 8001c7c:	607b      	str	r3, [r7, #4]
  return(result);
 8001c7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c98:	f001 fd34 	bl	8003704 <vTaskStartScheduler>
  
  return osOK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8001ca6:	f7ff ffe4 	bl	8001c72 <inHandlerMode>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8001cb0:	f001 fe46 	bl	8003940 <xTaskGetTickCountFromISR>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	e002      	b.n	8001cbe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8001cb8:	f001 fe34 	bl	8003924 <xTaskGetTickCount>
 8001cbc:	4603      	mov	r3, r0
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc4:	b087      	sub	sp, #28
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685c      	ldr	r4, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cd8:	b29e      	uxth	r6, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ffaf 	bl	8001c44 <makeFreeRtosPriority>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f001 fa30 	bl	800315c <xTaskCreate>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <osDelay+0x16>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e000      	b.n	8001d28 <osDelay+0x18>
 8001d26:	2301      	movs	r3, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 fc7f 	bl	800362c <vTaskDelay>
  
  return osOK;
 8001d2e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f000 f9e7 	bl	8002120 <xQueueGenericCreate>
 8001d52:	4603      	mov	r3, r0
#endif
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <osMessagePut+0x1e>
    ticks = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8001d7a:	f7ff ff7a 	bl	8001c72 <inHandlerMode>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d018      	beq.n	8001db6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001d84:	f107 0210 	add.w	r2, r7, #16
 8001d88:	f107 0108 	add.w	r1, r7, #8
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fcbe 	bl	8002710 <xQueueGenericSendFromISR>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <osMessagePut+0x42>
      return osErrorOS;
 8001d9a:	23ff      	movs	r3, #255	; 0xff
 8001d9c:	e018      	b.n	8001dd0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d014      	beq.n	8001dce <osMessagePut+0x72>
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <osMessagePut+0x7c>)
 8001da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	e00b      	b.n	8001dce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001db6:	f107 0108 	add.w	r1, r7, #8
 8001dba:	2300      	movs	r3, #0
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 fa98 	bl	80022f4 <xQueueGenericSend>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <osMessagePut+0x72>
      return osErrorOS;
 8001dca:	23ff      	movs	r3, #255	; 0xff
 8001dcc:	e000      	b.n	8001dd0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	e000ed04 	.word	0xe000ed04

08001ddc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b08b      	sub	sp, #44	; 0x2c
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10a      	bne.n	8001e0c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	617b      	str	r3, [r7, #20]
    return event;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	461c      	mov	r4, r3
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e0a:	e054      	b.n	8001eb6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d103      	bne.n	8001e24 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e009      	b.n	8001e38 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <osMessageGet+0x5c>
      ticks = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8001e38:	f7ff ff1b 	bl	8001c72 <inHandlerMode>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01c      	beq.n	8001e7c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001e42:	f107 0220 	add.w	r2, r7, #32
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f000 ff6a 	bl	8002d28 <xQueueReceiveFromISR>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8001e5a:	2310      	movs	r3, #16
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e001      	b.n	8001e64 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01d      	beq.n	8001ea6 <osMessageGet+0xca>
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <osMessageGet+0xe4>)
 8001e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	e014      	b.n	8001ea6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	3304      	adds	r3, #4
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	68b8      	ldr	r0, [r7, #8]
 8001e88:	f000 fd4a 	bl	8002920 <xQueueReceive>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8001e92:	2310      	movs	r3, #16
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e006      	b.n	8001ea6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <osMessageGet+0xc6>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <osMessageGet+0xc8>
 8001ea2:	2340      	movs	r3, #64	; 0x40
 8001ea4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	372c      	adds	r7, #44	; 0x2c
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000ed04 	.word	0xe000ed04

08001ec4 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <osDelayUntil+0x18>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	e000      	b.n	8001ede <osDelayUntil+0x1a>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f001 faed 	bl	80034c0 <vTaskDelayUntil>
  
  return osOK;
 8001ee6:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f103 0208 	add.w	r2, r3, #8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 0208 	add.w	r2, r3, #8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f103 0208 	add.w	r2, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d103      	bne.n	8001fac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	e00c      	b.n	8001fc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e002      	b.n	8001fba <vListInsert+0x2e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d2f6      	bcs.n	8001fb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6892      	ldr	r2, [r2, #8]
 8002012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6852      	ldr	r2, [r2, #4]
 800201c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d103      	bne.n	8002030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1e5a      	subs	r2, r3, #1
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
	...

08002050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10a      	bne.n	800207a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002076:	bf00      	nop
 8002078:	e7fe      	b.n	8002078 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800207a:	f002 f9f7 	bl	800446c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	68f9      	ldr	r1, [r7, #12]
 8002088:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	441a      	add	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	3b01      	subs	r3, #1
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	441a      	add	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	22ff      	movs	r2, #255	; 0xff
 80020c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d114      	bne.n	80020fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01a      	beq.n	800210e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3310      	adds	r3, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 fdc7 	bl	8003c70 <xTaskRemoveFromEventList>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d012      	beq.n	800210e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <xQueueGenericReset+0xcc>)
 80020ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f3bf 8f4f 	dsb	sy
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	e009      	b.n	800210e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3310      	adds	r3, #16
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fef6 	bl	8001ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3324      	adds	r3, #36	; 0x24
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fef1 	bl	8001ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800210e:	f002 f9dd 	bl	80044cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	e000ed04 	.word	0xe000ed04

08002120 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	4613      	mov	r3, r2
 800212c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	613b      	str	r3, [r7, #16]
}
 8002146:	bf00      	nop
 8002148:	e7fe      	b.n	8002148 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e004      	b.n	8002160 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	3350      	adds	r3, #80	; 0x50
 8002164:	4618      	mov	r0, r3
 8002166:	f002 fa81 	bl	800466c <pvPortMalloc>
 800216a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	3350      	adds	r3, #80	; 0x50
 8002176:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002178:	79fa      	ldrb	r2, [r7, #7]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f821 	bl	80021cc <prvInitialiseNewQueue>
 800218a:	e016      	b.n	80021ba <xQueueGenericCreate+0x9a>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800218c:	f002 fb81 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8002190:	4603      	mov	r3, r0
 8002192:	4618      	mov	r0, r3
 8002194:	f002 fafc 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <xQueueGenericCreate+0xa4>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	4013      	ands	r3, r2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <xQueueGenericCreate+0x9a>
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <xQueueGenericCreate+0xa8>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	3340      	adds	r3, #64	; 0x40
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 ffd1 	bl	800515c <prvTraceStoreKernelCallWithNumericParamOnly>
		}

		return pxNewQueue;
 80021ba:	69bb      	ldr	r3, [r7, #24]
	}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000018 	.word	0x20000018
 80021c8:	2000000c 	.word	0x2000000c

080021cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	6a3a      	ldr	r2, [r7, #32]
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e002      	b.n	80021ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021fa:	2101      	movs	r1, #1
 80021fc:	6a38      	ldr	r0, [r7, #32]
 80021fe:	f7ff ff27 	bl	8002050 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800220a:	6a38      	ldr	r0, [r7, #32]
 800220c:	f002 faa7 	bl	800475e <prvTraceGetQueueType>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <prvInitialiseNewQueue+0x11c>)
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	4618      	mov	r0, r3
 800221a:	f003 fb25 	bl	8005868 <prvTraceGetObjectHandle>
 800221e:	4603      	mov	r3, r0
 8002220:	b29b      	uxth	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	6a38      	ldr	r0, [r7, #32]
 8002226:	f002 fb08 	bl	800483a <prvTraceSetQueueNumberLow16>
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <prvInitialiseNewQueue+0x120>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	6a38      	ldr	r0, [r7, #32]
 8002232:	f002 fb18 	bl	8004866 <prvTraceSetQueueNumberHigh16>
 8002236:	6a38      	ldr	r0, [r7, #32]
 8002238:	f002 fa91 	bl	800475e <prvTraceGetQueueType>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <prvInitialiseNewQueue+0x11c>)
 8002242:	5c9c      	ldrb	r4, [r3, r2]
 8002244:	6a38      	ldr	r0, [r7, #32]
 8002246:	f002 fadd 	bl	8004804 <prvTraceGetQueueNumberLow16>
 800224a:	4603      	mov	r3, r0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4619      	mov	r1, r3
 8002250:	4620      	mov	r0, r4
 8002252:	f003 fbb7 	bl	80059c4 <prvMarkObjectAsUsed>
 8002256:	f002 fb1c 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fa97 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <prvInitialiseNewQueue+0x124>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	4013      	ands	r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d025      	beq.n	80022be <prvInitialiseNewQueue+0xf2>
 8002272:	6a38      	ldr	r0, [r7, #32]
 8002274:	f002 fad3 	bl	800481e <prvTraceGetQueueNumberHigh16>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <prvInitialiseNewQueue+0x124>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	4013      	ands	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01a      	beq.n	80022be <prvInitialiseNewQueue+0xf2>
 8002288:	6a38      	ldr	r0, [r7, #32]
 800228a:	f002 fa68 	bl	800475e <prvTraceGetQueueType>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <prvInitialiseNewQueue+0x11c>)
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	3318      	adds	r3, #24
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461d      	mov	r5, r3
 800229c:	6a38      	ldr	r0, [r7, #32]
 800229e:	f002 fa5e 	bl	800475e <prvTraceGetQueueType>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <prvInitialiseNewQueue+0x11c>)
 80022a8:	5c9c      	ldrb	r4, [r3, r2]
 80022aa:	6a38      	ldr	r0, [r7, #32]
 80022ac:	f002 faaa 	bl	8004804 <prvTraceGetQueueNumberLow16>
 80022b0:	4603      	mov	r3, r0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	4621      	mov	r1, r4
 80022b8:	4628      	mov	r0, r5
 80022ba:	f002 fe0b 	bl	8004ed4 <prvTraceStoreKernelCall>
 80022be:	6a38      	ldr	r0, [r7, #32]
 80022c0:	f002 fa4d 	bl	800475e <prvTraceGetQueueType>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <prvInitialiseNewQueue+0x11c>)
 80022ca:	5c9c      	ldrb	r4, [r3, r2]
 80022cc:	6a38      	ldr	r0, [r7, #32]
 80022ce:	f002 fa99 	bl	8004804 <prvTraceGetQueueNumberLow16>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	4620      	mov	r0, r4
 80022dc:	f003 f890 	bl	8005400 <prvTraceSetObjectState>
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bdb0      	pop	{r4, r5, r7, pc}
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	2000001a 	.word	0x2000001a
 80022f0:	20000018 	.word	0x20000018

080022f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022f4:	b5b0      	push	{r4, r5, r7, lr}
 80022f6:	b08e      	sub	sp, #56	; 0x38
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <xQueueGenericSend+0x32>
	__asm volatile
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002322:	bf00      	nop
 8002324:	e7fe      	b.n	8002324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <xQueueGenericSend+0x40>
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <xQueueGenericSend+0x44>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <xQueueGenericSend+0x46>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <xQueueGenericSend+0x60>
	__asm volatile
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002350:	bf00      	nop
 8002352:	e7fe      	b.n	8002352 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d103      	bne.n	8002362 <xQueueGenericSend+0x6e>
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <xQueueGenericSend+0x72>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <xQueueGenericSend+0x74>
 8002366:	2300      	movs	r3, #0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <xQueueGenericSend+0x8e>
	__asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	623b      	str	r3, [r7, #32]
}
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002382:	f001 fe23 	bl	8003fcc <xTaskGetSchedulerState>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <xQueueGenericSend+0x9e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <xQueueGenericSend+0xa2>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <xQueueGenericSend+0xa4>
 8002396:	2300      	movs	r3, #0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	61fb      	str	r3, [r7, #28]
}
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023b2:	f002 f85b 	bl	800446c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	429a      	cmp	r2, r3
 80023c0:	d303      	bcc.n	80023ca <xQueueGenericSend+0xd6>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 8084 	bne.w	80024d2 <xQueueGenericSend+0x1de>
			{
				traceQUEUE_SEND( pxQueue );
 80023ca:	f002 fa62 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 f9dd 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	4ba6      	ldr	r3, [pc, #664]	; (8002674 <xQueueGenericSend+0x380>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	4013      	ands	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d02a      	beq.n	800243c <xQueueGenericSend+0x148>
 80023e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023e8:	f002 fa19 	bl	800481e <prvTraceGetQueueNumberHigh16>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	4ba0      	ldr	r3, [pc, #640]	; (8002674 <xQueueGenericSend+0x380>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	4013      	ands	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01f      	beq.n	800243c <xQueueGenericSend+0x148>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <xQueueGenericSend+0x124>
 8002402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002404:	f002 f9ab 	bl	800475e <prvTraceGetQueueType>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	4b9a      	ldr	r3, [pc, #616]	; (8002678 <xQueueGenericSend+0x384>)
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	3320      	adds	r3, #32
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461d      	mov	r5, r3
 8002416:	e000      	b.n	800241a <xQueueGenericSend+0x126>
 8002418:	2525      	movs	r5, #37	; 0x25
 800241a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800241c:	f002 f99f 	bl	800475e <prvTraceGetQueueType>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	4b94      	ldr	r3, [pc, #592]	; (8002678 <xQueueGenericSend+0x384>)
 8002426:	5c9c      	ldrb	r4, [r3, r2]
 8002428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800242a:	f002 f9eb 	bl	8004804 <prvTraceGetQueueNumberLow16>
 800242e:	4603      	mov	r3, r0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	4621      	mov	r1, r4
 8002436:	4628      	mov	r0, r5
 8002438:	f002 fd4c 	bl	8004ed4 <prvTraceStoreKernelCall>
 800243c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800243e:	f002 f98e 	bl	800475e <prvTraceGetQueueType>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <xQueueGenericSend+0x384>)
 8002448:	5c9c      	ldrb	r4, [r3, r2]
 800244a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800244c:	f002 f9da 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002450:	4603      	mov	r3, r0
 8002452:	b2dd      	uxtb	r5, r3
 8002454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002456:	f002 f982 	bl	800475e <prvTraceGetQueueType>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	4b86      	ldr	r3, [pc, #536]	; (8002678 <xQueueGenericSend+0x384>)
 8002460:	5c9b      	ldrb	r3, [r3, r2]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d005      	beq.n	8002472 <xQueueGenericSend+0x17e>
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e000      	b.n	8002474 <xQueueGenericSend+0x180>
 8002472:	2300      	movs	r3, #0
 8002474:	461a      	mov	r2, r3
 8002476:	4629      	mov	r1, r5
 8002478:	4620      	mov	r0, r4
 800247a:	f002 ffc1 	bl	8005400 <prvTraceSetObjectState>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002484:	f000 fd5a 	bl	8002f3c <prvCopyDataToQueue>
 8002488:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <xQueueGenericSend+0x1c0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	3324      	adds	r3, #36	; 0x24
 8002496:	4618      	mov	r0, r3
 8002498:	f001 fbea 	bl	8003c70 <xTaskRemoveFromEventList>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d013      	beq.n	80024ca <xQueueGenericSend+0x1d6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <xQueueGenericSend+0x388>)
 80024a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	e00a      	b.n	80024ca <xQueueGenericSend+0x1d6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <xQueueGenericSend+0x1d6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <xQueueGenericSend+0x388>)
 80024bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024ca:	f001 ffff 	bl	80044cc <vPortExitCritical>
				return pdPASS;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e115      	b.n	80026fe <xQueueGenericSend+0x40a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d13c      	bne.n	8002552 <xQueueGenericSend+0x25e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024d8:	f001 fff8 	bl	80044cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80024dc:	f002 f9d9 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 f954 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b61      	ldr	r3, [pc, #388]	; (8002674 <xQueueGenericSend+0x380>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d02a      	beq.n	800254e <xQueueGenericSend+0x25a>
 80024f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024fa:	f002 f990 	bl	800481e <prvTraceGetQueueNumberHigh16>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <xQueueGenericSend+0x380>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4013      	ands	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01f      	beq.n	800254e <xQueueGenericSend+0x25a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueGenericSend+0x236>
 8002514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002516:	f002 f922 	bl	800475e <prvTraceGetQueueType>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	4b56      	ldr	r3, [pc, #344]	; (8002678 <xQueueGenericSend+0x384>)
 8002520:	5c9b      	ldrb	r3, [r3, r2]
 8002522:	3348      	adds	r3, #72	; 0x48
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461d      	mov	r5, r3
 8002528:	e000      	b.n	800252c <xQueueGenericSend+0x238>
 800252a:	254d      	movs	r5, #77	; 0x4d
 800252c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800252e:	f002 f916 	bl	800475e <prvTraceGetQueueType>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	4b50      	ldr	r3, [pc, #320]	; (8002678 <xQueueGenericSend+0x384>)
 8002538:	5c9c      	ldrb	r4, [r3, r2]
 800253a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800253c:	f002 f962 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002540:	4603      	mov	r3, r0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	4621      	mov	r1, r4
 8002548:	4628      	mov	r0, r5
 800254a:	f002 fcc3 	bl	8004ed4 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 800254e:	2300      	movs	r3, #0
 8002550:	e0d5      	b.n	80026fe <xQueueGenericSend+0x40a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <xQueueGenericSend+0x272>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4618      	mov	r0, r3
 800255e:	f001 fbff 	bl	8003d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002562:	2301      	movs	r3, #1
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002566:	f001 ffb1 	bl	80044cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800256a:	f001 f91b 	bl	80037a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800256e:	f001 ff7d 	bl	800446c <vPortEnterCritical>
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002578:	b25b      	sxtb	r3, r3
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d103      	bne.n	8002588 <xQueueGenericSend+0x294>
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800258e:	b25b      	sxtb	r3, r3
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d103      	bne.n	800259e <xQueueGenericSend+0x2aa>
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800259e:	f001 ff95 	bl	80044cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025a2:	1d3a      	adds	r2, r7, #4
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 fbee 	bl	8003d8c <xTaskCheckForTimeOut>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d164      	bne.n	8002680 <xQueueGenericSend+0x38c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b8:	f000 fdb8 	bl	800312c <prvIsQueueFull>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d051      	beq.n	8002666 <xQueueGenericSend+0x372>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80025c2:	f002 f966 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 f8e1 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <xQueueGenericSend+0x380>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	4013      	ands	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02a      	beq.n	8002634 <xQueueGenericSend+0x340>
 80025de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e0:	f002 f91d 	bl	800481e <prvTraceGetQueueNumberHigh16>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <xQueueGenericSend+0x380>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01f      	beq.n	8002634 <xQueueGenericSend+0x340>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <xQueueGenericSend+0x31c>
 80025fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025fc:	f002 f8af 	bl	800475e <prvTraceGetQueueType>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <xQueueGenericSend+0x384>)
 8002606:	5c9b      	ldrb	r3, [r3, r2]
 8002608:	3370      	adds	r3, #112	; 0x70
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461d      	mov	r5, r3
 800260e:	e000      	b.n	8002612 <xQueueGenericSend+0x31e>
 8002610:	2575      	movs	r5, #117	; 0x75
 8002612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002614:	f002 f8a3 	bl	800475e <prvTraceGetQueueType>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <xQueueGenericSend+0x384>)
 800261e:	5c9c      	ldrb	r4, [r3, r2]
 8002620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002622:	f002 f8ef 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002626:	4603      	mov	r3, r0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4621      	mov	r1, r4
 800262e:	4628      	mov	r0, r5
 8002630:	f002 fc50 	bl	8004ed4 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	3310      	adds	r3, #16
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 faf3 	bl	8003c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002644:	f000 fd0a 	bl	800305c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002648:	f001 f8ba 	bl	80037c0 <xTaskResumeAll>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	f47f aeaf 	bne.w	80023b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <xQueueGenericSend+0x388>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	e6a5      	b.n	80023b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002668:	f000 fcf8 	bl	800305c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800266c:	f001 f8a8 	bl	80037c0 <xTaskResumeAll>
 8002670:	e69f      	b.n	80023b2 <xQueueGenericSend+0xbe>
 8002672:	bf00      	nop
 8002674:	20000018 	.word	0x20000018
 8002678:	2000000c 	.word	0x2000000c
 800267c:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002682:	f000 fceb 	bl	800305c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002686:	f001 f89b 	bl	80037c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800268a:	f002 f902 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 800268e:	4603      	mov	r3, r0
 8002690:	4618      	mov	r0, r3
 8002692:	f002 f87d 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <xQueueGenericSend+0x414>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02a      	beq.n	80026fc <xQueueGenericSend+0x408>
 80026a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a8:	f002 f8b9 	bl	800481e <prvTraceGetQueueNumberHigh16>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <xQueueGenericSend+0x414>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	4013      	ands	r3, r2
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01f      	beq.n	80026fc <xQueueGenericSend+0x408>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <xQueueGenericSend+0x3e4>
 80026c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c4:	f002 f84b 	bl	800475e <prvTraceGetQueueType>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <xQueueGenericSend+0x418>)
 80026ce:	5c9b      	ldrb	r3, [r3, r2]
 80026d0:	3348      	adds	r3, #72	; 0x48
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461d      	mov	r5, r3
 80026d6:	e000      	b.n	80026da <xQueueGenericSend+0x3e6>
 80026d8:	254d      	movs	r5, #77	; 0x4d
 80026da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026dc:	f002 f83f 	bl	800475e <prvTraceGetQueueType>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <xQueueGenericSend+0x418>)
 80026e6:	5c9c      	ldrb	r4, [r3, r2]
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f002 f88b 	bl	8004804 <prvTraceGetQueueNumberLow16>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	4621      	mov	r1, r4
 80026f6:	4628      	mov	r0, r5
 80026f8:	f002 fbec 	bl	8004ed4 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 80026fc:	2300      	movs	r3, #0
		}
	}
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3738      	adds	r7, #56	; 0x38
 8002702:	46bd      	mov	sp, r7
 8002704:	bdb0      	pop	{r4, r5, r7, pc}
 8002706:	bf00      	nop
 8002708:	20000018 	.word	0x20000018
 800270c:	2000000c 	.word	0x2000000c

08002710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b08e      	sub	sp, #56	; 0x38
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d103      	bne.n	800274c <xQueueGenericSendFromISR+0x3c>
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <xQueueGenericSendFromISR+0x40>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <xQueueGenericSendFromISR+0x42>
 8002750:	2300      	movs	r3, #0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	623b      	str	r3, [r7, #32]
}
 8002768:	bf00      	nop
 800276a:	e7fe      	b.n	800276a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d103      	bne.n	800277a <xQueueGenericSendFromISR+0x6a>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <xQueueGenericSendFromISR+0x6e>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <xQueueGenericSendFromISR+0x70>
 800277e:	2300      	movs	r3, #0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	61fb      	str	r3, [r7, #28]
}
 8002796:	bf00      	nop
 8002798:	e7fe      	b.n	8002798 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800279a:	f001 ff29 	bl	80045f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800279e:	f3ef 8211 	mrs	r2, BASEPRI
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	61ba      	str	r2, [r7, #24]
 80027b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <xQueueGenericSendFromISR+0xbc>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d16c      	bne.n	80028a6 <xQueueGenericSendFromISR+0x196>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d8:	f002 f821 	bl	800481e <prvTraceGetQueueNumberHigh16>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <xQueueGenericSendFromISR+0x208>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	4013      	ands	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01f      	beq.n	800282c <xQueueGenericSendFromISR+0x11c>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <xQueueGenericSendFromISR+0xf8>
 80027f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f4:	f001 ffb3 	bl	800475e <prvTraceGetQueueType>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <xQueueGenericSendFromISR+0x20c>)
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	3330      	adds	r3, #48	; 0x30
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461d      	mov	r5, r3
 8002806:	e000      	b.n	800280a <xQueueGenericSendFromISR+0xfa>
 8002808:	2535      	movs	r5, #53	; 0x35
 800280a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280c:	f001 ffa7 	bl	800475e <prvTraceGetQueueType>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	4b41      	ldr	r3, [pc, #260]	; (800291c <xQueueGenericSendFromISR+0x20c>)
 8002816:	5c9c      	ldrb	r4, [r3, r2]
 8002818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800281a:	f001 fff3 	bl	8004804 <prvTraceGetQueueNumberLow16>
 800281e:	4603      	mov	r3, r0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	4621      	mov	r1, r4
 8002826:	4628      	mov	r0, r5
 8002828:	f002 fb54 	bl	8004ed4 <prvTraceStoreKernelCall>
 800282c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800282e:	f001 ff96 	bl	800475e <prvTraceGetQueueType>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <xQueueGenericSendFromISR+0x20c>)
 8002838:	5c9c      	ldrb	r4, [r3, r2]
 800283a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800283c:	f001 ffe2 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002840:	4603      	mov	r3, r0
 8002842:	b2d9      	uxtb	r1, r3
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3301      	adds	r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	4620      	mov	r0, r4
 8002852:	f002 fdd5 	bl	8005400 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800285c:	f000 fb6e 	bl	8002f3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002860:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d112      	bne.n	8002890 <xQueueGenericSendFromISR+0x180>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <xQueueGenericSendFromISR+0x190>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	3324      	adds	r3, #36	; 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f001 f9fa 	bl	8003c70 <xTaskRemoveFromEventList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00e      	beq.n	80028a0 <xQueueGenericSendFromISR+0x190>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <xQueueGenericSendFromISR+0x190>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e007      	b.n	80028a0 <xQueueGenericSendFromISR+0x190>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002894:	3301      	adds	r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	b25a      	sxtb	r2, r3
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028a0:	2301      	movs	r3, #1
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80028a4:	e02c      	b.n	8002900 <xQueueGenericSendFromISR+0x1f0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80028a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a8:	f001 ffb9 	bl	800481e <prvTraceGetQueueNumberHigh16>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <xQueueGenericSendFromISR+0x208>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	4013      	ands	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01f      	beq.n	80028fc <xQueueGenericSendFromISR+0x1ec>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <xQueueGenericSendFromISR+0x1c8>
 80028c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028c4:	f001 ff4b 	bl	800475e <prvTraceGetQueueType>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <xQueueGenericSendFromISR+0x20c>)
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	3358      	adds	r3, #88	; 0x58
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461d      	mov	r5, r3
 80028d6:	e000      	b.n	80028da <xQueueGenericSendFromISR+0x1ca>
 80028d8:	255d      	movs	r5, #93	; 0x5d
 80028da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028dc:	f001 ff3f 	bl	800475e <prvTraceGetQueueType>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <xQueueGenericSendFromISR+0x20c>)
 80028e6:	5c9c      	ldrb	r4, [r3, r2]
 80028e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ea:	f001 ff8b 	bl	8004804 <prvTraceGetQueueNumberLow16>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	4621      	mov	r1, r4
 80028f6:	4628      	mov	r0, r5
 80028f8:	f002 faec 	bl	8004ed4 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800290a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800290e:	4618      	mov	r0, r3
 8002910:	3738      	adds	r7, #56	; 0x38
 8002912:	46bd      	mov	sp, r7
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	bf00      	nop
 8002918:	20000018 	.word	0x20000018
 800291c:	2000000c 	.word	0x2000000c

08002920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <xQueueReceive+0x30>
	__asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	623b      	str	r3, [r7, #32]
}
 800294c:	bf00      	nop
 800294e:	e7fe      	b.n	800294e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <xQueueReceive+0x3e>
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <xQueueReceive+0x42>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <xQueueReceive+0x44>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <xQueueReceive+0x5e>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	61fb      	str	r3, [r7, #28]
}
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800297e:	f001 fb25 	bl	8003fcc <xTaskGetSchedulerState>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <xQueueReceive+0x6e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <xQueueReceive+0x72>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <xQueueReceive+0x74>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <xQueueReceive+0x8e>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	61bb      	str	r3, [r7, #24]
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80029ae:	f001 fd5d 	bl	800446c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d07b      	beq.n	8002ab6 <xQueueReceive+0x196>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c2:	f000 fb25 	bl	8003010 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80029c6:	f001 ff64 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fedf 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4bac      	ldr	r3, [pc, #688]	; (8002c88 <xQueueReceive+0x368>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d025      	beq.n	8002a2e <xQueueReceive+0x10e>
 80029e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029e4:	f001 ff1b 	bl	800481e <prvTraceGetQueueNumberHigh16>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	4ba6      	ldr	r3, [pc, #664]	; (8002c88 <xQueueReceive+0x368>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01a      	beq.n	8002a2e <xQueueReceive+0x10e>
 80029f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029fa:	f001 feb0 	bl	800475e <prvTraceGetQueueType>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	4ba2      	ldr	r3, [pc, #648]	; (8002c8c <xQueueReceive+0x36c>)
 8002a04:	5c9b      	ldrb	r3, [r3, r2]
 8002a06:	3328      	adds	r3, #40	; 0x28
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a0e:	f001 fea6 	bl	800475e <prvTraceGetQueueType>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b9d      	ldr	r3, [pc, #628]	; (8002c8c <xQueueReceive+0x36c>)
 8002a18:	5c9c      	ldrb	r4, [r3, r2]
 8002a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a1c:	f001 fef2 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002a20:	4603      	mov	r3, r0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4621      	mov	r1, r4
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f002 fa53 	bl	8004ed4 <prvTraceStoreKernelCall>
 8002a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a30:	f001 fe95 	bl	800475e <prvTraceGetQueueType>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b94      	ldr	r3, [pc, #592]	; (8002c8c <xQueueReceive+0x36c>)
 8002a3a:	5c9c      	ldrb	r4, [r3, r2]
 8002a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a3e:	f001 fee1 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002a42:	4603      	mov	r3, r0
 8002a44:	b2dd      	uxtb	r5, r3
 8002a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a48:	f001 fe89 	bl	800475e <prvTraceGetQueueType>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b8e      	ldr	r3, [pc, #568]	; (8002c8c <xQueueReceive+0x36c>)
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d108      	bne.n	8002a6a <xQueueReceive+0x14a>
 8002a58:	f001 ff1b 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 fe89 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8002a64:	4603      	mov	r3, r0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e004      	b.n	8002a74 <xQueueReceive+0x154>
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	4629      	mov	r1, r5
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f002 fcc1 	bl	8005400 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00f      	beq.n	8002aae <xQueueReceive+0x18e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	3310      	adds	r3, #16
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 f8ec 	bl	8003c70 <xTaskRemoveFromEventList>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <xQueueReceive+0x18e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a9e:	4b7c      	ldr	r3, [pc, #496]	; (8002c90 <xQueueReceive+0x370>)
 8002aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002aae:	f001 fd0d 	bl	80044cc <vPortExitCritical>
				return pdPASS;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e12f      	b.n	8002d16 <xQueueReceive+0x3f6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d137      	bne.n	8002b2c <xQueueReceive+0x20c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002abc:	f001 fd06 	bl	80044cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ac0:	f001 fee7 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 fe62 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <xQueueReceive+0x368>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d025      	beq.n	8002b28 <xQueueReceive+0x208>
 8002adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ade:	f001 fe9e 	bl	800481e <prvTraceGetQueueNumberHigh16>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <xQueueReceive+0x368>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	4013      	ands	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01a      	beq.n	8002b28 <xQueueReceive+0x208>
 8002af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002af4:	f001 fe33 	bl	800475e <prvTraceGetQueueType>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b63      	ldr	r3, [pc, #396]	; (8002c8c <xQueueReceive+0x36c>)
 8002afe:	5c9b      	ldrb	r3, [r3, r2]
 8002b00:	3350      	adds	r3, #80	; 0x50
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461d      	mov	r5, r3
 8002b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b08:	f001 fe29 	bl	800475e <prvTraceGetQueueType>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <xQueueReceive+0x36c>)
 8002b12:	5c9c      	ldrb	r4, [r3, r2]
 8002b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b16:	f001 fe75 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4621      	mov	r1, r4
 8002b22:	4628      	mov	r0, r5
 8002b24:	f002 f9d6 	bl	8004ed4 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e0f4      	b.n	8002d16 <xQueueReceive+0x3f6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <xQueueReceive+0x220>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b32:	f107 0310 	add.w	r3, r7, #16
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f912 	bl	8003d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b40:	f001 fcc4 	bl	80044cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b44:	f000 fe2e 	bl	80037a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b48:	f001 fc90 	bl	800446c <vPortEnterCritical>
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b52:	b25b      	sxtb	r3, r3
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d103      	bne.n	8002b62 <xQueueReceive+0x242>
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d103      	bne.n	8002b78 <xQueueReceive+0x258>
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b78:	f001 fca8 	bl	80044cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b7c:	1d3a      	adds	r2, r7, #4
 8002b7e:	f107 0310 	add.w	r3, r7, #16
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 f901 	bl	8003d8c <xTaskCheckForTimeOut>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 8081 	bne.w	8002c94 <xQueueReceive+0x374>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b94:	f000 fab4 	bl	8003100 <prvIsQueueEmpty>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d06e      	beq.n	8002c7c <xQueueReceive+0x35c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8002b9e:	f001 fe78 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fdf3 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <xQueueReceive+0x368>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d025      	beq.n	8002c06 <xQueueReceive+0x2e6>
 8002bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bbc:	f001 fe2f 	bl	800481e <prvTraceGetQueueNumberHigh16>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <xQueueReceive+0x368>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01a      	beq.n	8002c06 <xQueueReceive+0x2e6>
 8002bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bd2:	f001 fdc4 	bl	800475e <prvTraceGetQueueType>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <xQueueReceive+0x36c>)
 8002bdc:	5c9b      	ldrb	r3, [r3, r2]
 8002bde:	3368      	adds	r3, #104	; 0x68
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461d      	mov	r5, r3
 8002be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002be6:	f001 fdba 	bl	800475e <prvTraceGetQueueType>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <xQueueReceive+0x36c>)
 8002bf0:	5c9c      	ldrb	r4, [r3, r2]
 8002bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf4:	f001 fe06 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4621      	mov	r1, r4
 8002c00:	4628      	mov	r0, r5
 8002c02:	f002 f967 	bl	8004ed4 <prvTraceStoreKernelCall>
 8002c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c08:	f001 fda9 	bl	800475e <prvTraceGetQueueType>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <xQueueReceive+0x36c>)
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d018      	beq.n	8002c4a <xQueueReceive+0x32a>
 8002c18:	f001 fe3b 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 fdb6 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <xQueueReceive+0x368>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <xQueueReceive+0x32a>
 8002c34:	f001 fe2d 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fd9b 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 fc53 	bl	80054f0 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3324      	adds	r3, #36	; 0x24
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 ffe8 	bl	8003c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c5a:	f000 f9ff 	bl	800305c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c5e:	f000 fdaf 	bl	80037c0 <xTaskResumeAll>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f aea2 	bne.w	80029ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <xQueueReceive+0x370>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	e698      	b.n	80029ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c7e:	f000 f9ed 	bl	800305c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c82:	f000 fd9d 	bl	80037c0 <xTaskResumeAll>
 8002c86:	e692      	b.n	80029ae <xQueueReceive+0x8e>
 8002c88:	20000018 	.word	0x20000018
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c96:	f000 f9e1 	bl	800305c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c9a:	f000 fd91 	bl	80037c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca0:	f000 fa2e 	bl	8003100 <prvIsQueueEmpty>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f43f ae81 	beq.w	80029ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cac:	f001 fdf1 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fd6c 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <xQueueReceive+0x400>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d025      	beq.n	8002d14 <xQueueReceive+0x3f4>
 8002cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cca:	f001 fda8 	bl	800481e <prvTraceGetQueueNumberHigh16>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <xQueueReceive+0x400>)
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d01a      	beq.n	8002d14 <xQueueReceive+0x3f4>
 8002cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce0:	f001 fd3d 	bl	800475e <prvTraceGetQueueType>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <xQueueReceive+0x404>)
 8002cea:	5c9b      	ldrb	r3, [r3, r2]
 8002cec:	3350      	adds	r3, #80	; 0x50
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cf4:	f001 fd33 	bl	800475e <prvTraceGetQueueType>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <xQueueReceive+0x404>)
 8002cfe:	5c9c      	ldrb	r4, [r3, r2]
 8002d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d02:	f001 fd7f 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002d06:	4603      	mov	r3, r0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f002 f8e0 	bl	8004ed4 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8002d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3730      	adds	r7, #48	; 0x30
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000018 	.word	0x20000018
 8002d24:	2000000c 	.word	0x2000000c

08002d28 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b08e      	sub	sp, #56	; 0x38
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	623b      	str	r3, [r7, #32]
}
 8002d50:	bf00      	nop
 8002d52:	e7fe      	b.n	8002d52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <xQueueReceiveFromISR+0x3a>
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <xQueueReceiveFromISR+0x3e>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <xQueueReceiveFromISR+0x40>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	61fb      	str	r3, [r7, #28]
}
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d82:	f001 fc35 	bl	80045f0 <vPortValidateInterruptPriority>
	__asm volatile
 8002d86:	f3ef 8211 	mrs	r2, BASEPRI
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	61ba      	str	r2, [r7, #24]
 8002d9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002d9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d06a      	beq.n	8002e84 <xQueueReceiveFromISR+0x15c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8002db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dba:	f001 fd30 	bl	800481e <prvTraceGetQueueNumberHigh16>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <xQueueReceiveFromISR+0x1c4>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01a      	beq.n	8002e04 <xQueueReceiveFromISR+0xdc>
 8002dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd0:	f001 fcc5 	bl	800475e <prvTraceGetQueueType>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <xQueueReceiveFromISR+0x1c8>)
 8002dda:	5c9b      	ldrb	r3, [r3, r2]
 8002ddc:	3338      	adds	r3, #56	; 0x38
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461d      	mov	r5, r3
 8002de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de4:	f001 fcbb 	bl	800475e <prvTraceGetQueueType>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <xQueueReceiveFromISR+0x1c8>)
 8002dee:	5c9c      	ldrb	r4, [r3, r2]
 8002df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df2:	f001 fd07 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002df6:	4603      	mov	r3, r0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f002 f868 	bl	8004ed4 <prvTraceStoreKernelCall>
 8002e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e06:	f001 fcaa 	bl	800475e <prvTraceGetQueueType>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <xQueueReceiveFromISR+0x1c8>)
 8002e10:	5c9c      	ldrb	r4, [r3, r2]
 8002e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e14:	f001 fcf6 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	b2d9      	uxtb	r1, r3
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f002 fae9 	bl	8005400 <prvTraceSetObjectState>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e32:	f000 f8ed 	bl	8003010 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	1e5a      	subs	r2, r3, #1
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d112      	bne.n	8002e6e <xQueueReceiveFromISR+0x146>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d016      	beq.n	8002e7e <xQueueReceiveFromISR+0x156>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	3310      	adds	r3, #16
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 ff0b 	bl	8003c70 <xTaskRemoveFromEventList>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <xQueueReceiveFromISR+0x156>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <xQueueReceiveFromISR+0x156>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e007      	b.n	8002e7e <xQueueReceiveFromISR+0x156>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	b25a      	sxtb	r2, r3
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
 8002e82:	e027      	b.n	8002ed4 <xQueueReceiveFromISR+0x1ac>
		}
		else
		{
			xReturn = pdFAIL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8a:	f001 fcc8 	bl	800481e <prvTraceGetQueueNumberHigh16>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <xQueueReceiveFromISR+0x1c4>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	4013      	ands	r3, r2
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01a      	beq.n	8002ed4 <xQueueReceiveFromISR+0x1ac>
 8002e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea0:	f001 fc5d 	bl	800475e <prvTraceGetQueueType>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <xQueueReceiveFromISR+0x1c8>)
 8002eaa:	5c9b      	ldrb	r3, [r3, r2]
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb4:	f001 fc53 	bl	800475e <prvTraceGetQueueType>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <xQueueReceiveFromISR+0x1c8>)
 8002ebe:	5c9c      	ldrb	r4, [r3, r2]
 8002ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec2:	f001 fc9f 	bl	8004804 <prvTraceGetQueueNumberLow16>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f002 f800 	bl	8004ed4 <prvTraceStoreKernelCall>
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f383 8811 	msr	BASEPRI, r3
}
 8002ede:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3738      	adds	r7, #56	; 0x38
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000018 	.word	0x20000018
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10d      	bne.n	8002f76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d14d      	bne.n	8002ffe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 f84e 	bl	8004008 <xTaskPriorityDisinherit>
 8002f6c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e043      	b.n	8002ffe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d119      	bne.n	8002fb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6898      	ldr	r0, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	461a      	mov	r2, r3
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	f003 fab2 	bl	80064f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	441a      	add	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d32b      	bcc.n	8002ffe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	e026      	b.n	8002ffe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68d8      	ldr	r0, [r3, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	f003 fa98 	bl	80064f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	425b      	negs	r3, r3
 8002fca:	441a      	add	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d207      	bcs.n	8002fec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d105      	bne.n	8002ffe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003006:	697b      	ldr	r3, [r7, #20]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d018      	beq.n	8003054 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	441a      	add	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d303      	bcc.n	8003044 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	461a      	mov	r2, r3
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	f003 fa4e 	bl	80064f0 <memcpy>
	}
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003064:	f001 fa02 	bl	800446c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800306e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003070:	e011      	b.n	8003096 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3324      	adds	r3, #36	; 0x24
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fdf6 	bl	8003c70 <xTaskRemoveFromEventList>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800308a:	f000 fee1 	bl	8003e50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	3b01      	subs	r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	dce9      	bgt.n	8003072 <prvUnlockQueue+0x16>
 800309e:	e000      	b.n	80030a2 <prvUnlockQueue+0x46>
					break;
 80030a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030aa:	f001 fa0f 	bl	80044cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030ae:	f001 f9dd 	bl	800446c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ba:	e011      	b.n	80030e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3310      	adds	r3, #16
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fdd1 	bl	8003c70 <xTaskRemoveFromEventList>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030d4:	f000 febc 	bl	8003e50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030d8:	7bbb      	ldrb	r3, [r7, #14]
 80030da:	3b01      	subs	r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dce9      	bgt.n	80030bc <prvUnlockQueue+0x60>
 80030e8:	e000      	b.n	80030ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	22ff      	movs	r2, #255	; 0xff
 80030f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030f4:	f001 f9ea 	bl	80044cc <vPortExitCritical>
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003108:	f001 f9b0 	bl	800446c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e001      	b.n	800311e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800311e:	f001 f9d5 	bl	80044cc <vPortExitCritical>

	return xReturn;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003134:	f001 f99a 	bl	800446c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	429a      	cmp	r2, r3
 8003142:	d102      	bne.n	800314a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e001      	b.n	800314e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800314e:	f001 f9bd 	bl	80044cc <vPortExitCritical>

	return xReturn;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af04      	add	r7, sp, #16
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f001 fa7b 	bl	800466c <pvPortMalloc>
 8003176:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00e      	beq.n	800319c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800317e:	20bc      	movs	r0, #188	; 0xbc
 8003180:	f001 fa74 	bl	800466c <pvPortMalloc>
 8003184:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
 8003192:	e005      	b.n	80031a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003194:	6978      	ldr	r0, [r7, #20]
 8003196:	f001 fabf 	bl	8004718 <vPortFree>
 800319a:	e001      	b.n	80031a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	2300      	movs	r3, #0
 80031aa:	9303      	str	r3, [sp, #12]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	9302      	str	r3, [sp, #8]
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f80f 	bl	80031e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031c2:	69f8      	ldr	r0, [r7, #28]
 80031c4:	f000 f8aa 	bl	800331c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031c8:	2301      	movs	r3, #1
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e002      	b.n	80031d4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031d4:	69bb      	ldr	r3, [r7, #24]
	}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	461a      	mov	r2, r3
 80031f8:	21a5      	movs	r1, #165	; 0xa5
 80031fa:	f003 f987 	bl	800650c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003208:	3b01      	subs	r3, #1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	617b      	str	r3, [r7, #20]
}
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e012      	b.n	8003264 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	7819      	ldrb	r1, [r3, #0]
 8003246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	4413      	add	r3, r2
 800324c:	3334      	adds	r3, #52	; 0x34
 800324e:	460a      	mov	r2, r1
 8003250:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d9e9      	bls.n	800323e <prvInitialiseNewTask+0x5e>
 800326a:	e000      	b.n	800326e <prvInitialiseNewTask+0x8e>
		{
			break;
 800326c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	2b06      	cmp	r3, #6
 800327a:	d901      	bls.n	8003280 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800327c:	2306      	movs	r3, #6
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	2200      	movs	r2, #0
 8003290:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	3304      	adds	r3, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fe49 	bl	8001f2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	3318      	adds	r3, #24
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fe44 	bl	8001f2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	f1c3 0207 	rsb	r2, r3, #7
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	3354      	adds	r3, #84	; 0x54
 80032d0:	2260      	movs	r2, #96	; 0x60
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 f919 	bl	800650c <memset>
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <prvInitialiseNewTask+0x130>)
 80032de:	659a      	str	r2, [r3, #88]	; 0x58
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <prvInitialiseNewTask+0x134>)
 80032e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <prvInitialiseNewTask+0x138>)
 80032ea:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	69b8      	ldr	r0, [r7, #24]
 80032f2:	f000 ffb7 	bl	8004264 <pxPortInitialiseStack>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	08008234 	.word	0x08008234
 8003314:	08008254 	.word	0x08008254
 8003318:	08008214 	.word	0x08008214

0800331c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003324:	f001 f8a2 	bl	800446c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003328:	4b5c      	ldr	r3, [pc, #368]	; (800349c <prvAddNewTaskToReadyList+0x180>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	4a5b      	ldr	r2, [pc, #364]	; (800349c <prvAddNewTaskToReadyList+0x180>)
 8003330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003332:	4b5b      	ldr	r3, [pc, #364]	; (80034a0 <prvAddNewTaskToReadyList+0x184>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800333a:	4a59      	ldr	r2, [pc, #356]	; (80034a0 <prvAddNewTaskToReadyList+0x184>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003340:	4b56      	ldr	r3, [pc, #344]	; (800349c <prvAddNewTaskToReadyList+0x180>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d110      	bne.n	800336a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003348:	f000 fdce 	bl	8003ee8 <prvInitialiseTaskLists>
 800334c:	e00d      	b.n	800336a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <prvAddNewTaskToReadyList+0x188>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003356:	4b52      	ldr	r3, [pc, #328]	; (80034a0 <prvAddNewTaskToReadyList+0x184>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	429a      	cmp	r2, r3
 8003362:	d802      	bhi.n	800336a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003364:	4a4e      	ldr	r2, [pc, #312]	; (80034a0 <prvAddNewTaskToReadyList+0x184>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800336a:	4b4f      	ldr	r3, [pc, #316]	; (80034a8 <prvAddNewTaskToReadyList+0x18c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	4a4d      	ldr	r2, [pc, #308]	; (80034a8 <prvAddNewTaskToReadyList+0x18c>)
 8003372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003374:	4b4c      	ldr	r3, [pc, #304]	; (80034a8 <prvAddNewTaskToReadyList+0x18c>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d048      	beq.n	8003414 <prvAddNewTaskToReadyList+0xf8>
 8003382:	2003      	movs	r0, #3
 8003384:	f002 fa70 	bl	8005868 <prvTraceGetObjectHandle>
 8003388:	4603      	mov	r3, r0
 800338a:	b29b      	uxth	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f001 fa0c 	bl	80047ac <prvTraceSetTaskNumberLow16>
 8003394:	4b45      	ldr	r3, [pc, #276]	; (80034ac <prvAddNewTaskToReadyList+0x190>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f001 fa1c 	bl	80047d8 <prvTraceSetTaskNumberHigh16>
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f001 f9e8 	bl	8004776 <prvTraceGetTaskNumberLow16>
 80033a6:	4603      	mov	r3, r0
 80033a8:	b2d9      	uxtb	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3334      	adds	r3, #52	; 0x34
 80033ae:	461a      	mov	r2, r3
 80033b0:	2003      	movs	r0, #3
 80033b2:	f002 fb4b 	bl	8005a4c <prvTraceSetObjectName>
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f001 f9dd 	bl	8004776 <prvTraceGetTaskNumberLow16>
 80033bc:	4603      	mov	r3, r0
 80033be:	b2d9      	uxtb	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	2003      	movs	r0, #3
 80033ca:	f001 ff9f 	bl	800530c <prvTraceSetPriorityProperty>
 80033ce:	f001 fa60 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 f9db 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <prvAddNewTaskToReadyList+0x194>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	4013      	ands	r3, r2
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d014      	beq.n	8003414 <prvAddNewTaskToReadyList+0xf8>
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 f9d0 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <prvAddNewTaskToReadyList+0x194>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <prvAddNewTaskToReadyList+0xf8>
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f001 f9b8 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8003406:	4603      	mov	r3, r0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	2103      	movs	r1, #3
 800340e:	201b      	movs	r0, #27
 8003410:	f001 fd60 	bl	8004ed4 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f001 f9bb 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <prvAddNewTaskToReadyList+0x194>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	4013      	ands	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <prvAddNewTaskToReadyList+0x11e>
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 f9a3 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8003430:	4603      	mov	r3, r0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fc5b 	bl	8004cf0 <prvTraceStoreTaskReady>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	2201      	movs	r2, #1
 8003440:	409a      	lsls	r2, r3
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <prvAddNewTaskToReadyList+0x198>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <prvAddNewTaskToReadyList+0x198>)
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <prvAddNewTaskToReadyList+0x19c>)
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f7fe fd6f 	bl	8001f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003468:	f001 f830 	bl	80044cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <prvAddNewTaskToReadyList+0x188>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <prvAddNewTaskToReadyList+0x176>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <prvAddNewTaskToReadyList+0x184>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	429a      	cmp	r2, r3
 8003480:	d207      	bcs.n	8003492 <prvAddNewTaskToReadyList+0x176>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <prvAddNewTaskToReadyList+0x1a0>)
 8003484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000298 	.word	0x20000298
 80034a0:	200001b0 	.word	0x200001b0
 80034a4:	200002a4 	.word	0x200002a4
 80034a8:	200002b4 	.word	0x200002b4
 80034ac:	2000001a 	.word	0x2000001a
 80034b0:	20000018 	.word	0x20000018
 80034b4:	200002a0 	.word	0x200002a0
 80034b8:	200001b4 	.word	0x200001b4
 80034bc:	e000ed04 	.word	0xe000ed04

080034c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <vTaskDelayUntil+0x2a>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	617b      	str	r3, [r7, #20]
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <vTaskDelayUntil+0x46>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	613b      	str	r3, [r7, #16]
}
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <vTaskDelayUntil+0x158>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <vTaskDelayUntil+0x64>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60fb      	str	r3, [r7, #12]
}
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003524:	f000 f93e 	bl	80037a4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003528:	4b3c      	ldr	r3, [pc, #240]	; (800361c <vTaskDelayUntil+0x15c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	4413      	add	r3, r2
 8003536:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	429a      	cmp	r2, r3
 8003540:	d20b      	bcs.n	800355a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	429a      	cmp	r2, r3
 800354a:	d211      	bcs.n	8003570 <vTaskDelayUntil+0xb0>
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	429a      	cmp	r2, r3
 8003552:	d90d      	bls.n	8003570 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003554:	2301      	movs	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	e00a      	b.n	8003570 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	429a      	cmp	r2, r3
 8003562:	d303      	bcc.n	800356c <vTaskDelayUntil+0xac>
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	429a      	cmp	r2, r3
 800356a:	d901      	bls.n	8003570 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800356c:	2301      	movs	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03a      	beq.n	80035f2 <vTaskDelayUntil+0x132>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800357c:	4b28      	ldr	r3, [pc, #160]	; (8003620 <vTaskDelayUntil+0x160>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f001 f905 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	4b26      	ldr	r3, [pc, #152]	; (8003624 <vTaskDelayUntil+0x164>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	4013      	ands	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <vTaskDelayUntil+0xf2>
 8003596:	69f9      	ldr	r1, [r7, #28]
 8003598:	2088      	movs	r0, #136	; 0x88
 800359a:	f001 fddf 	bl	800515c <prvTraceStoreKernelCallWithNumericParamOnly>
 800359e:	4b20      	ldr	r3, [pc, #128]	; (8003620 <vTaskDelayUntil+0x160>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f8e7 	bl	8004776 <prvTraceGetTaskNumberLow16>
 80035a8:	4603      	mov	r3, r0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 ff9f 	bl	80054f0 <prvTraceSetTaskInstanceFinished>
 80035b2:	f001 f96e 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 f8e9 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <vTaskDelayUntil+0x164>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <vTaskDelayUntil+0x124>
 80035ce:	f001 f960 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 f8ce 	bl	8004776 <prvTraceGetTaskNumberLow16>
 80035da:	4603      	mov	r3, r0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 ff86 	bl	80054f0 <prvTraceSetTaskInstanceFinished>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fdd3 	bl	8004198 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80035f2:	f000 f8e5 	bl	80037c0 <xTaskResumeAll>
 80035f6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <vTaskDelayUntil+0x14e>
		{
			portYIELD_WITHIN_API();
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <vTaskDelayUntil+0x168>)
 8003600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800360e:	bf00      	nop
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200002c0 	.word	0x200002c0
 800361c:	2000029c 	.word	0x2000029c
 8003620:	200001b0 	.word	0x200001b0
 8003624:	20000018 	.word	0x20000018
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04b      	beq.n	80036d6 <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <vTaskDelay+0xc8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <vTaskDelay+0x30>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60bb      	str	r3, [r7, #8]
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800365c:	f000 f8a2 	bl	80037a4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <vTaskDelay+0xcc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f893 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <vTaskDelay+0xd0>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <vTaskDelay+0x6a>
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	2089      	movs	r0, #137	; 0x89
 800367e:	f001 fd6d 	bl	800515c <prvTraceStoreKernelCallWithNumericParamOnly>
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <vTaskDelay+0xcc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f001 f875 	bl	8004776 <prvTraceGetTaskNumberLow16>
 800368c:	4603      	mov	r3, r0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	4618      	mov	r0, r3
 8003692:	f001 ff2d 	bl	80054f0 <prvTraceSetTaskInstanceFinished>
 8003696:	f001 f8fc 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f877 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <vTaskDelay+0xd0>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <vTaskDelay+0x9c>
 80036b2:	f001 f8ee 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 f85c 	bl	8004776 <prvTraceGetTaskNumberLow16>
 80036be:	4603      	mov	r3, r0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 ff14 	bl	80054f0 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036c8:	2100      	movs	r1, #0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fd64 	bl	8004198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036d0:	f000 f876 	bl	80037c0 <xTaskResumeAll>
 80036d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <vTaskDelay+0xd4>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200002c0 	.word	0x200002c0
 80036f8:	200001b0 	.word	0x200001b0
 80036fc:	20000018 	.word	0x20000018
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <vTaskStartScheduler+0x80>)
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2300      	movs	r3, #0
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2300      	movs	r3, #0
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	491c      	ldr	r1, [pc, #112]	; (8003788 <vTaskStartScheduler+0x84>)
 8003718:	481c      	ldr	r0, [pc, #112]	; (800378c <vTaskStartScheduler+0x88>)
 800371a:	f7ff fd1f 	bl	800315c <xTaskCreate>
 800371e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d11b      	bne.n	800375e <vTaskStartScheduler+0x5a>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60bb      	str	r3, [r7, #8]
}
 8003738:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <vTaskStartScheduler+0x8c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3354      	adds	r3, #84	; 0x54
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <vTaskStartScheduler+0x90>)
 8003742:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <vTaskStartScheduler+0x94>)
 8003746:	f04f 32ff 	mov.w	r2, #4294967295
 800374a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <vTaskStartScheduler+0x98>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <vTaskStartScheduler+0x9c>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003758:	f000 fe06 	bl	8004368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800375c:	e00e      	b.n	800377c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d10a      	bne.n	800377c <vTaskStartScheduler+0x78>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	607b      	str	r3, [r7, #4]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vTaskStartScheduler+0x76>
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200002bc 	.word	0x200002bc
 8003788:	08006e08 	.word	0x08006e08
 800378c:	08003eb9 	.word	0x08003eb9
 8003790:	200001b0 	.word	0x200001b0
 8003794:	20000020 	.word	0x20000020
 8003798:	200002b8 	.word	0x200002b8
 800379c:	200002a4 	.word	0x200002a4
 80037a0:	2000029c 	.word	0x2000029c

080037a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <vTaskSuspendAll+0x18>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	4a03      	ldr	r2, [pc, #12]	; (80037bc <vTaskSuspendAll+0x18>)
 80037b0:	6013      	str	r3, [r2, #0]
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200002c0 	.word	0x200002c0

080037c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037ce:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <xTaskResumeAll+0x13c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <xTaskResumeAll+0x2c>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	603b      	str	r3, [r7, #0]
}
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037ec:	f000 fe3e 	bl	800446c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037f0:	4b42      	ldr	r3, [pc, #264]	; (80038fc <xTaskResumeAll+0x13c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	4a41      	ldr	r2, [pc, #260]	; (80038fc <xTaskResumeAll+0x13c>)
 80037f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <xTaskResumeAll+0x13c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d174      	bne.n	80038ec <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003802:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <xTaskResumeAll+0x140>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d070      	beq.n	80038ec <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800380a:	e041      	b.n	8003890 <xTaskResumeAll+0xd0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800380c:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <xTaskResumeAll+0x144>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3318      	adds	r3, #24
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fbef 	bl	8001ffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3304      	adds	r3, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fbea 	bl	8001ffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 ffb1 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	4b35      	ldr	r3, [pc, #212]	; (8003908 <xTaskResumeAll+0x148>)
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	4013      	ands	r3, r2
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <xTaskResumeAll+0x8e>
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 ff99 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8003844:	4603      	mov	r3, r0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fa51 	bl	8004cf0 <prvTraceStoreTaskReady>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	2201      	movs	r2, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	4b2d      	ldr	r3, [pc, #180]	; (800390c <xTaskResumeAll+0x14c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	4a2b      	ldr	r2, [pc, #172]	; (800390c <xTaskResumeAll+0x14c>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4a28      	ldr	r2, [pc, #160]	; (8003910 <xTaskResumeAll+0x150>)
 800386e:	441a      	add	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7fe fb65 	bl	8001f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4b24      	ldr	r3, [pc, #144]	; (8003914 <xTaskResumeAll+0x154>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <xTaskResumeAll+0x158>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <xTaskResumeAll+0x144>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1b9      	bne.n	800380c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800389e:	f000 fb63 	bl	8003f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038a2:	4b1e      	ldr	r3, [pc, #120]	; (800391c <xTaskResumeAll+0x15c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038ae:	f000 f859 	bl	8003964 <xTaskIncrementTick>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <xTaskResumeAll+0x158>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f1      	bne.n	80038ae <xTaskResumeAll+0xee>

						uxPendedTicks = 0;
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <xTaskResumeAll+0x15c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <xTaskResumeAll+0x158>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <xTaskResumeAll+0x160>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038ec:	f000 fdee 	bl	80044cc <vPortExitCritical>

	return xAlreadyYielded;
 80038f0:	68bb      	ldr	r3, [r7, #8]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200002c0 	.word	0x200002c0
 8003900:	20000298 	.word	0x20000298
 8003904:	20000270 	.word	0x20000270
 8003908:	20000018 	.word	0x20000018
 800390c:	200002a0 	.word	0x200002a0
 8003910:	200001b4 	.word	0x200001b4
 8003914:	200001b0 	.word	0x200001b0
 8003918:	200002ac 	.word	0x200002ac
 800391c:	200002a8 	.word	0x200002a8
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <xTaskGetTickCount+0x18>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003930:	687b      	ldr	r3, [r7, #4]
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	2000029c 	.word	0x2000029c

08003940 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003946:	f000 fe53 	bl	80045f0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <xTaskGetTickCountFromISR+0x20>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003954:	683b      	ldr	r3, [r7, #0]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	2000029c 	.word	0x2000029c

08003964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800396e:	4b63      	ldr	r3, [pc, #396]	; (8003afc <xTaskIncrementTick+0x198>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d003      	beq.n	800397e <xTaskIncrementTick+0x1a>
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <xTaskIncrementTick+0x19c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d107      	bne.n	800398e <xTaskIncrementTick+0x2a>
 800397e:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <xTaskIncrementTick+0x1a0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a5f      	ldr	r2, [pc, #380]	; (8003b04 <xTaskIncrementTick+0x1a0>)
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	2000      	movs	r0, #0
 800398a:	f002 faab 	bl	8005ee4 <prvTracePortGetTimeStamp>
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <xTaskIncrementTick+0x198>)
 8003990:	681b      	ldr	r3, [r3, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003992:	4b5a      	ldr	r3, [pc, #360]	; (8003afc <xTaskIncrementTick+0x198>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80a0 	bne.w	8003adc <xTaskIncrementTick+0x178>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800399c:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <xTaskIncrementTick+0x1a4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039a4:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <xTaskIncrementTick+0x1a4>)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d120      	bne.n	80039f2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
 80039b0:	4b56      	ldr	r3, [pc, #344]	; (8003b0c <xTaskIncrementTick+0x1a8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <xTaskIncrementTick+0x6c>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	603b      	str	r3, [r7, #0]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xTaskIncrementTick+0x6a>
 80039d0:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <xTaskIncrementTick+0x1a8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b4e      	ldr	r3, [pc, #312]	; (8003b10 <xTaskIncrementTick+0x1ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a4c      	ldr	r2, [pc, #304]	; (8003b0c <xTaskIncrementTick+0x1a8>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4a4c      	ldr	r2, [pc, #304]	; (8003b10 <xTaskIncrementTick+0x1ac>)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <xTaskIncrementTick+0x1b0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4a4a      	ldr	r2, [pc, #296]	; (8003b14 <xTaskIncrementTick+0x1b0>)
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	f000 fabb 	bl	8003f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039f2:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <xTaskIncrementTick+0x1b4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d360      	bcc.n	8003abe <xTaskIncrementTick+0x15a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039fc:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <xTaskIncrementTick+0x1a8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <xTaskIncrementTick+0xa6>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <xTaskIncrementTick+0xa8>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a10:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <xTaskIncrementTick+0x1b4>)
 8003a12:	f04f 32ff 	mov.w	r2, #4294967295
 8003a16:	601a      	str	r2, [r3, #0]
					break;
 8003a18:	e051      	b.n	8003abe <xTaskIncrementTick+0x15a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <xTaskIncrementTick+0x1a8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d203      	bcs.n	8003a3a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a32:	4a39      	ldr	r2, [pc, #228]	; (8003b18 <xTaskIncrementTick+0x1b4>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6013      	str	r3, [r2, #0]
						break;
 8003a38:	e041      	b.n	8003abe <xTaskIncrementTick+0x15a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fadc 	bl	8001ffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3318      	adds	r3, #24
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fad3 	bl	8001ffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a56:	68b8      	ldr	r0, [r7, #8]
 8003a58:	f000 fe9a 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <xTaskIncrementTick+0x1b8>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <xTaskIncrementTick+0x118>
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f000 fe82 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8003a72:	4603      	mov	r3, r0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f93a 	bl	8004cf0 <prvTraceStoreTaskReady>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <xTaskIncrementTick+0x1bc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <xTaskIncrementTick+0x1bc>)
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <xTaskIncrementTick+0x1c0>)
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7fe fa4e 	bl	8001f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <xTaskIncrementTick+0x1c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3a1      	bcc.n	80039fc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003abc:	e79e      	b.n	80039fc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <xTaskIncrementTick+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4917      	ldr	r1, [pc, #92]	; (8003b24 <xTaskIncrementTick+0x1c0>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d907      	bls.n	8003ae6 <xTaskIncrementTick+0x182>
			{
				xSwitchRequired = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e004      	b.n	8003ae6 <xTaskIncrementTick+0x182>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <xTaskIncrementTick+0x19c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <xTaskIncrementTick+0x19c>)
 8003ae4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ae6:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <xTaskIncrementTick+0x1c8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <xTaskIncrementTick+0x18e>
		{
			xSwitchRequired = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003af2:	697b      	ldr	r3, [r7, #20]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	200002c0 	.word	0x200002c0
 8003b00:	200002a8 	.word	0x200002a8
 8003b04:	200022d8 	.word	0x200022d8
 8003b08:	2000029c 	.word	0x2000029c
 8003b0c:	20000268 	.word	0x20000268
 8003b10:	2000026c 	.word	0x2000026c
 8003b14:	200002b0 	.word	0x200002b0
 8003b18:	200002b8 	.word	0x200002b8
 8003b1c:	20000018 	.word	0x20000018
 8003b20:	200002a0 	.word	0x200002a0
 8003b24:	200001b4 	.word	0x200001b4
 8003b28:	200001b0 	.word	0x200001b0
 8003b2c:	200002ac 	.word	0x200002ac

08003b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b36:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <vTaskSwitchContext+0xdc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <vTaskSwitchContext+0xe0>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b44:	e05d      	b.n	8003c02 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8003b46:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <vTaskSwitchContext+0xe0>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <vTaskSwitchContext+0xe4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	fab3 f383 	clz	r3, r3
 8003b58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
 8003b5c:	f1c3 031f 	rsb	r3, r3, #31
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	492d      	ldr	r1, [pc, #180]	; (8003c18 <vTaskSwitchContext+0xe8>)
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	607b      	str	r3, [r7, #4]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <vTaskSwitchContext+0x5a>
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <vTaskSwitchContext+0xe8>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3308      	adds	r3, #8
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d104      	bne.n	8003bbc <vTaskSwitchContext+0x8c>
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <vTaskSwitchContext+0xec>)
 8003bc4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003bc6:	f000 fe64 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fddf 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <vTaskSwitchContext+0xf0>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <vTaskSwitchContext+0xc8>
 8003be2:	f000 fe56 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fdc4 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fb18 	bl	8005228 <prvTraceStoreTaskswitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <vTaskSwitchContext+0xec>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3354      	adds	r3, #84	; 0x54
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <vTaskSwitchContext+0xf4>)
 8003c00:	6013      	str	r3, [r2, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200002c0 	.word	0x200002c0
 8003c10:	200002ac 	.word	0x200002ac
 8003c14:	200002a0 	.word	0x200002a0
 8003c18:	200001b4 	.word	0x200001b4
 8003c1c:	200001b0 	.word	0x200001b0
 8003c20:	20000018 	.word	0x20000018
 8003c24:	20000020 	.word	0x20000020

08003c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60fb      	str	r3, [r7, #12]
}
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <vTaskPlaceOnEventList+0x44>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3318      	adds	r3, #24
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe f998 	bl	8001f8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f000 fa9a 	bl	8004198 <prvAddCurrentTaskToDelayedList>
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200001b0 	.word	0x200001b0

08003c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	60fb      	str	r3, [r7, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe f9ab 	bl	8001ffc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca6:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <xTaskRemoveFromEventList+0xd4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d12f      	bne.n	8003d0e <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe f9a2 	bl	8001ffc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cb8:	6938      	ldr	r0, [r7, #16]
 8003cba:	f000 fd69 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <xTaskRemoveFromEventList+0xd8>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <xTaskRemoveFromEventList+0x6e>
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f000 fd51 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 f809 	bl	8004cf0 <prvTraceStoreTaskReady>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <xTaskRemoveFromEventList+0xdc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <xTaskRemoveFromEventList+0xdc>)
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <xTaskRemoveFromEventList+0xe0>)
 8003cfe:	441a      	add	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7fe f91d 	bl	8001f46 <vListInsertEnd>
 8003d0c:	e005      	b.n	8003d1a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3318      	adds	r3, #24
 8003d12:	4619      	mov	r1, r3
 8003d14:	480f      	ldr	r0, [pc, #60]	; (8003d54 <xTaskRemoveFromEventList+0xe4>)
 8003d16:	f7fe f916 	bl	8001f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <xTaskRemoveFromEventList+0xe8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d905      	bls.n	8003d34 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <xTaskRemoveFromEventList+0xec>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e001      	b.n	8003d38 <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003d38:	697b      	ldr	r3, [r7, #20]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200002c0 	.word	0x200002c0
 8003d48:	20000018 	.word	0x20000018
 8003d4c:	200002a0 	.word	0x200002a0
 8003d50:	200001b4 	.word	0x200001b4
 8003d54:	20000270 	.word	0x20000270
 8003d58:	200001b0 	.word	0x200001b0
 8003d5c:	200002ac 	.word	0x200002ac

08003d60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <vTaskInternalSetTimeOutState+0x24>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <vTaskInternalSetTimeOutState+0x28>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	200002b0 	.word	0x200002b0
 8003d88:	2000029c 	.word	0x2000029c

08003d8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	613b      	str	r3, [r7, #16]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	60fb      	str	r3, [r7, #12]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dce:	f000 fb4d 	bl	800446c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <xTaskCheckForTimeOut+0xbc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d102      	bne.n	8003df2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	e023      	b.n	8003e3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <xTaskCheckForTimeOut+0xc0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d007      	beq.n	8003e0e <xTaskCheckForTimeOut+0x82>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e015      	b.n	8003e3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d20b      	bcs.n	8003e30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff9b 	bl	8003d60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e004      	b.n	8003e3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e3a:	f000 fb47 	bl	80044cc <vPortExitCritical>

	return xReturn;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	2000029c 	.word	0x2000029c
 8003e4c:	200002b0 	.word	0x200002b0

08003e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <vTaskMissedYield+0x14>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	200002ac 	.word	0x200002ac

08003e68 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e001      	b.n	8003e86 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8003e86:	68fb      	ldr	r3, [r7, #12]
	}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ec0:	f000 f84c 	bl	8003f5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <prvIdleTask+0x28>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d9f9      	bls.n	8003ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <prvIdleTask+0x2c>)
 8003ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003edc:	e7f0      	b.n	8003ec0 <prvIdleTask+0x8>
 8003ede:	bf00      	nop
 8003ee0:	200001b4 	.word	0x200001b4
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	e00c      	b.n	8003f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <prvInitialiseTaskLists+0x58>)
 8003f00:	4413      	add	r3, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fff4 	bl	8001ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d9ef      	bls.n	8003ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f14:	480b      	ldr	r0, [pc, #44]	; (8003f44 <prvInitialiseTaskLists+0x5c>)
 8003f16:	f7fd ffeb 	bl	8001ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f1a:	480b      	ldr	r0, [pc, #44]	; (8003f48 <prvInitialiseTaskLists+0x60>)
 8003f1c:	f7fd ffe8 	bl	8001ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f20:	480a      	ldr	r0, [pc, #40]	; (8003f4c <prvInitialiseTaskLists+0x64>)
 8003f22:	f7fd ffe5 	bl	8001ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f26:	480a      	ldr	r0, [pc, #40]	; (8003f50 <prvInitialiseTaskLists+0x68>)
 8003f28:	f7fd ffe2 	bl	8001ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <prvInitialiseTaskLists+0x6c>)
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <prvInitialiseTaskLists+0x5c>)
 8003f30:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <prvInitialiseTaskLists+0x70>)
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <prvInitialiseTaskLists+0x60>)
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200001b4 	.word	0x200001b4
 8003f44:	20000240 	.word	0x20000240
 8003f48:	20000254 	.word	0x20000254
 8003f4c:	20000270 	.word	0x20000270
 8003f50:	20000284 	.word	0x20000284
 8003f54:	20000268 	.word	0x20000268
 8003f58:	2000026c 	.word	0x2000026c

08003f5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <prvResetNextTaskUnblockTime+0x40>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <prvResetNextTaskUnblockTime+0x14>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <prvResetNextTaskUnblockTime+0x16>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <prvResetNextTaskUnblockTime+0x44>)
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f8a:	e008      	b.n	8003f9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <prvResetNextTaskUnblockTime+0x40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a04      	ldr	r2, [pc, #16]	; (8003fac <prvResetNextTaskUnblockTime+0x44>)
 8003f9c:	6013      	str	r3, [r2, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	20000268 	.word	0x20000268
 8003fac:	200002b8 	.word	0x200002b8

08003fb0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <xTaskGetCurrentTaskHandle+0x18>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003fbc:	687b      	ldr	r3, [r7, #4]
	}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	200001b0 	.word	0x200001b0

08003fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <xTaskGetSchedulerState+0x34>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e008      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <xTaskGetSchedulerState+0x38>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e001      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ff2:	687b      	ldr	r3, [r7, #4]
	}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	200002a4 	.word	0x200002a4
 8004004:	200002c0 	.word	0x200002c0

08004008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80af 	beq.w	800417e <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004020:	4b59      	ldr	r3, [pc, #356]	; (8004188 <xTaskPriorityDisinherit+0x180>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	429a      	cmp	r2, r3
 8004028:	d00a      	beq.n	8004040 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	60fb      	str	r3, [r7, #12]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	60bb      	str	r3, [r7, #8]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004062:	1e5a      	subs	r2, r3, #1
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	429a      	cmp	r2, r3
 8004072:	f000 8084 	beq.w	800417e <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	2b00      	cmp	r3, #0
 800407c:	d17f      	bne.n	800417e <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	3304      	adds	r3, #4
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd ffba 	bl	8001ffc <uxListRemove>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	493e      	ldr	r1, [pc, #248]	; (800418c <xTaskPriorityDisinherit+0x184>)
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xTaskPriorityDisinherit+0xb2>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	2201      	movs	r2, #1
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43da      	mvns	r2, r3
 80040b0:	4b37      	ldr	r3, [pc, #220]	; (8004190 <xTaskPriorityDisinherit+0x188>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4013      	ands	r3, r2
 80040b6:	4a36      	ldr	r2, [pc, #216]	; (8004190 <xTaskPriorityDisinherit+0x188>)
 80040b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80040ba:	6938      	ldr	r0, [r7, #16]
 80040bc:	f000 fb68 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 80040c0:	4603      	mov	r3, r0
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b33      	ldr	r3, [pc, #204]	; (8004194 <xTaskPriorityDisinherit+0x18c>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	4013      	ands	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <xTaskPriorityDisinherit+0x10a>
 80040d0:	6938      	ldr	r0, [r7, #16]
 80040d2:	f000 fb50 	bl	8004776 <prvTraceGetTaskNumberLow16>
 80040d6:	4603      	mov	r3, r0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461c      	mov	r4, r3
 80040dc:	6938      	ldr	r0, [r7, #16]
 80040de:	f000 fb4a 	bl	8004776 <prvTraceGetTaskNumberLow16>
 80040e2:	4603      	mov	r3, r0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4619      	mov	r1, r3
 80040e8:	2003      	movs	r0, #3
 80040ea:	f001 f94b 	bl	8005384 <prvTraceGetPriorityProperty>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4622      	mov	r2, r4
 80040f2:	2103      	movs	r1, #3
 80040f4:	208f      	movs	r0, #143	; 0x8f
 80040f6:	f000 ff6b 	bl	8004fd0 <prvTraceStoreKernelCallWithParam>
 80040fa:	6938      	ldr	r0, [r7, #16]
 80040fc:	f000 fb3b 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8004100:	4603      	mov	r3, r0
 8004102:	b2d9      	uxtb	r1, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	2003      	movs	r0, #3
 800410e:	f001 f8fd 	bl	800530c <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f1c3 0207 	rsb	r2, r3, #7
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004126:	6938      	ldr	r0, [r7, #16]
 8004128:	f000 fb32 	bl	8004790 <prvTraceGetTaskNumberHigh16>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	4b18      	ldr	r3, [pc, #96]	; (8004194 <xTaskPriorityDisinherit+0x18c>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <xTaskPriorityDisinherit+0x144>
 800413c:	6938      	ldr	r0, [r7, #16]
 800413e:	f000 fb1a 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8004142:	4603      	mov	r3, r0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fdd2 	bl	8004cf0 <prvTraceStoreTaskReady>
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2201      	movs	r2, #1
 8004152:	409a      	lsls	r2, r3
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <xTaskPriorityDisinherit+0x188>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <xTaskPriorityDisinherit+0x188>)
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a08      	ldr	r2, [pc, #32]	; (800418c <xTaskPriorityDisinherit+0x184>)
 800416c:	441a      	add	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f7fd fee6 	bl	8001f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800417e:	697b      	ldr	r3, [r7, #20]
	}
 8004180:	4618      	mov	r0, r3
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd90      	pop	{r4, r7, pc}
 8004188:	200001b0 	.word	0x200001b0
 800418c:	200001b4 	.word	0x200001b4
 8004190:	200002a0 	.word	0x200002a0
 8004194:	20000018 	.word	0x20000018

08004198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041a2:	4b29      	ldr	r3, [pc, #164]	; (8004248 <prvAddCurrentTaskToDelayedList+0xb0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd ff24 	bl	8001ffc <uxListRemove>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2201      	movs	r2, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	4a20      	ldr	r2, [pc, #128]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d10a      	bne.n	80041f0 <prvAddCurrentTaskToDelayedList+0x58>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	481a      	ldr	r0, [pc, #104]	; (8004254 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041ea:	f7fd feac 	bl	8001f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041ee:	e026      	b.n	800423e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d209      	bcs.n	800421c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <prvAddCurrentTaskToDelayedList+0xc0>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7fd feb9 	bl	8001f8c <vListInsert>
}
 800421a:	e010      	b.n	800423e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <prvAddCurrentTaskToDelayedList+0xc4>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7fd feaf 	bl	8001f8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d202      	bcs.n	800423e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6013      	str	r3, [r2, #0]
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2000029c 	.word	0x2000029c
 800424c:	200001b0 	.word	0x200001b0
 8004250:	200002a0 	.word	0x200002a0
 8004254:	20000284 	.word	0x20000284
 8004258:	2000026c 	.word	0x2000026c
 800425c:	20000268 	.word	0x20000268
 8004260:	200002b8 	.word	0x200002b8

08004264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b04      	subs	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800427c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3b04      	subs	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <pxPortInitialiseStack+0x54>)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b14      	subs	r3, #20
 800429e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3b20      	subs	r3, #32
 80042aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	080042bd 	.word	0x080042bd

080042bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <prvTaskExitError+0x54>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d00a      	beq.n	80042e6 <prvTaskExitError+0x2a>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <prvTaskExitError+0x28>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60bb      	str	r3, [r7, #8]
}
 80042f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042fa:	bf00      	nop
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0fc      	beq.n	80042fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000008 	.word	0x20000008
	...

08004320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <pxCurrentTCBConst2>)
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800432a:	f380 8809 	msr	PSP, r0
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	f04e 0e0d 	orr.w	lr, lr, #13
 800433e:	4770      	bx	lr

08004340 <pxCurrentTCBConst2>:
 8004340:	200001b0 	.word	0x200001b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004348:	4806      	ldr	r0, [pc, #24]	; (8004364 <prvPortStartFirstTask+0x1c>)
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f380 8808 	msr	MSP, r0
 8004352:	b662      	cpsie	i
 8004354:	b661      	cpsie	f
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	df00      	svc	0
 8004360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004362:	bf00      	nop
 8004364:	e000ed08 	.word	0xe000ed08

08004368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800436e:	4b3a      	ldr	r3, [pc, #232]	; (8004458 <xPortStartScheduler+0xf0>)
 8004370:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	22ff      	movs	r2, #255	; 0xff
 800437e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <xPortStartScheduler+0xf4>)
 8004394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004396:	4b32      	ldr	r3, [pc, #200]	; (8004460 <xPortStartScheduler+0xf8>)
 8004398:	2207      	movs	r2, #7
 800439a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439c:	e009      	b.n	80043b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800439e:	4b30      	ldr	r3, [pc, #192]	; (8004460 <xPortStartScheduler+0xf8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4a2e      	ldr	r2, [pc, #184]	; (8004460 <xPortStartScheduler+0xf8>)
 80043a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d0ef      	beq.n	800439e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80043be:	4b28      	ldr	r3, [pc, #160]	; (8004460 <xPortStartScheduler+0xf8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1c3 0307 	rsb	r3, r3, #7
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d00a      	beq.n	80043e0 <xPortStartScheduler+0x78>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	613b      	str	r3, [r7, #16]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043e0:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <xPortStartScheduler+0xf8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1c3 0307 	rsb	r3, r3, #7
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d00a      	beq.n	8004402 <xPortStartScheduler+0x9a>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60fb      	str	r3, [r7, #12]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <xPortStartScheduler+0x98>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004402:	4b17      	ldr	r3, [pc, #92]	; (8004460 <xPortStartScheduler+0xf8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <xPortStartScheduler+0xf8>)
 800440a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <xPortStartScheduler+0xf8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004414:	4a12      	ldr	r2, [pc, #72]	; (8004460 <xPortStartScheduler+0xf8>)
 8004416:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <xPortStartScheduler+0xfc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <xPortStartScheduler+0xfc>)
 8004426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800442a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800442c:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <xPortStartScheduler+0xfc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <xPortStartScheduler+0xfc>)
 8004432:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004436:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004438:	f000 f8b8 	bl	80045ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <xPortStartScheduler+0x100>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004442:	f7ff ff81 	bl	8004348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004446:	f7ff fb73 	bl	8003b30 <vTaskSwitchContext>
	prvTaskExitError();
 800444a:	f7ff ff37 	bl	80042bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000e400 	.word	0xe000e400
 800445c:	200002c4 	.word	0x200002c4
 8004460:	200002c8 	.word	0x200002c8
 8004464:	e000ed20 	.word	0xe000ed20
 8004468:	20000008 	.word	0x20000008

0800446c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	607b      	str	r3, [r7, #4]
}
 8004484:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <vPortEnterCritical+0x58>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3301      	adds	r3, #1
 800448c:	4a0d      	ldr	r2, [pc, #52]	; (80044c4 <vPortEnterCritical+0x58>)
 800448e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <vPortEnterCritical+0x58>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d10f      	bne.n	80044b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <vPortEnterCritical+0x5c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	603b      	str	r3, [r7, #0]
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <vPortEnterCritical+0x4a>
	}
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000008 	.word	0x20000008
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <vPortExitCritical+0x4c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <vPortExitCritical+0x24>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	607b      	str	r3, [r7, #4]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <vPortExitCritical+0x4c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	4a08      	ldr	r2, [pc, #32]	; (8004518 <vPortExitCritical+0x4c>)
 80044f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044fa:	4b07      	ldr	r3, [pc, #28]	; (8004518 <vPortExitCritical+0x4c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <vPortExitCritical+0x42>
 8004502:	2300      	movs	r3, #0
 8004504:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f383 8811 	msr	BASEPRI, r3
}
 800450c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	20000008 	.word	0x20000008
 800451c:	00000000 	.word	0x00000000

08004520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004520:	f3ef 8009 	mrs	r0, PSP
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <pxCurrentTCBConst>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004530:	6010      	str	r0, [r2, #0]
 8004532:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004536:	f04f 0050 	mov.w	r0, #80	; 0x50
 800453a:	f380 8811 	msr	BASEPRI, r0
 800453e:	f7ff faf7 	bl	8003b30 <vTaskSwitchContext>
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8811 	msr	BASEPRI, r0
 800454a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	6808      	ldr	r0, [r1, #0]
 8004552:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004556:	f380 8809 	msr	PSP, r0
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	4770      	bx	lr

08004560 <pxCurrentTCBConst>:
 8004560:	200001b0 	.word	0x200001b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004582:	f7ff f9ef 	bl	8003964 <xTaskIncrementTick>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <SysTick_Handler+0x40>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f383 8811 	msr	BASEPRI, r3
}
 800459e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <vPortSetupTimerInterrupt+0x30>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <vPortSetupTimerInterrupt+0x34>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <vPortSetupTimerInterrupt+0x38>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <vPortSetupTimerInterrupt+0x3c>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	4a08      	ldr	r2, [pc, #32]	; (80045ec <vPortSetupTimerInterrupt+0x40>)
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ce:	4b03      	ldr	r3, [pc, #12]	; (80045dc <vPortSetupTimerInterrupt+0x30>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	e000e010 	.word	0xe000e010
 80045e0:	e000e018 	.word	0xe000e018
 80045e4:	2000001c 	.word	0x2000001c
 80045e8:	10624dd3 	.word	0x10624dd3
 80045ec:	e000e014 	.word	0xe000e014

080045f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045f6:	f3ef 8305 	mrs	r3, IPSR
 80045fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	d914      	bls.n	800462c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <vPortValidateInterruptPriority+0x6c>)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800460c:	4b14      	ldr	r3, [pc, #80]	; (8004660 <vPortValidateInterruptPriority+0x70>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	7afa      	ldrb	r2, [r7, #11]
 8004612:	429a      	cmp	r2, r3
 8004614:	d20a      	bcs.n	800462c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	607b      	str	r3, [r7, #4]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <vPortValidateInterruptPriority+0x74>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <vPortValidateInterruptPriority+0x78>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d90a      	bls.n	8004652 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	603b      	str	r3, [r7, #0]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <vPortValidateInterruptPriority+0x60>
	}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	e000e3f0 	.word	0xe000e3f0
 8004660:	200002c4 	.word	0x200002c4
 8004664:	e000ed0c 	.word	0xe000ed0c
 8004668:	200002c8 	.word	0x200002c8

0800466c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f023 0307 	bic.w	r3, r3, #7
 8004688:	3308      	adds	r3, #8
 800468a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800468c:	f7ff f88a 	bl	80037a4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8004690:	4b1e      	ldr	r3, [pc, #120]	; (800470c <pvPortMalloc+0xa0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <pvPortMalloc+0xa4>)
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	461a      	mov	r2, r3
 80046a0:	4b1a      	ldr	r3, [pc, #104]	; (800470c <pvPortMalloc+0xa0>)
 80046a2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80046a4:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <pvPortMalloc+0xa8>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4413      	add	r3, r2
 80046ac:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d813      	bhi.n	80046dc <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80046b4:	4b17      	ldr	r3, [pc, #92]	; (8004714 <pvPortMalloc+0xa8>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	441a      	add	r2, r3
 80046bc:	4b15      	ldr	r3, [pc, #84]	; (8004714 <pvPortMalloc+0xa8>)
 80046be:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d90b      	bls.n	80046dc <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <pvPortMalloc+0xa0>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b12      	ldr	r3, [pc, #72]	; (8004714 <pvPortMalloc+0xa8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4413      	add	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80046d0:	4b10      	ldr	r3, [pc, #64]	; (8004714 <pvPortMalloc+0xa8>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4413      	add	r3, r2
 80046d8:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <pvPortMalloc+0xa8>)
 80046da:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <pvPortMalloc+0x84>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4619      	mov	r1, r3
 80046e8:	2094      	movs	r0, #148	; 0x94
 80046ea:	f000 fb65 	bl	8004db8 <vTraceStoreMemMangEvent>
 80046ee:	e005      	b.n	80046fc <pvPortMalloc+0x90>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	20e8      	movs	r0, #232	; 0xe8
 80046f8:	f000 fb5e 	bl	8004db8 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 80046fc:	f7ff f860 	bl	80037c0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8004700:	68fb      	ldr	r3, [r7, #12]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	200022d0 	.word	0x200022d0
 8004710:	200002d4 	.word	0x200002d4
 8004714:	200022cc 	.word	0x200022cc

08004718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <vPortFree+0x24>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60fb      	str	r3, [r7, #12]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <vPortFree+0x22>
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe fbd0 	bl	8002ef4 <uxQueueGetQueueNumber>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fe fbdc 	bl	8002f24 <ucQueueGetQueueType>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fb72 	bl	8003e68 <uxTaskGetTaskNumber>
 8004784:	4603      	mov	r3, r0
 8004786:	b29b      	uxth	r3, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fb65 	bl	8003e68 <uxTaskGetTaskNumber>
 800479e:	4603      	mov	r3, r0
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	b29b      	uxth	r3, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fb55 	bl	8003e68 <uxTaskGetTaskNumber>
 80047be:	4603      	mov	r3, r0
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fb61 	bl	8003e92 <vTaskSetTaskNumber>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fb3f 	bl	8003e68 <uxTaskGetTaskNumber>
 80047ea:	4603      	mov	r3, r0
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	4313      	orrs	r3, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fb4b 	bl	8003e92 <vTaskSetTaskNumber>
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff9a 	bl	8004746 <prvTraceGetQueueNumber>
 8004812:	4603      	mov	r3, r0
 8004814:	b29b      	uxth	r3, r3
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff8d 	bl	8004746 <prvTraceGetQueueNumber>
 800482c:	4603      	mov	r3, r0
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	b29b      	uxth	r3, r3
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ff7d 	bl	8004746 <prvTraceGetQueueNumber>
 800484c:	4603      	mov	r3, r0
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	4313      	orrs	r3, r2
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fe fb56 	bl	8002f0a <vQueueSetQueueNumber>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff67 	bl	8004746 <prvTraceGetQueueNumber>
 8004878:	4603      	mov	r3, r0
 800487a:	b29a      	uxth	r2, r3
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	4313      	orrs	r3, r2
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fe fb40 	bl	8002f0a <vQueueSetQueueNumber>
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8004892:	b580      	push	{r7, lr}
 8004894:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8004896:	f7ff fb8b 	bl	8003fb0 <xTaskGetCurrentTaskHandle>
 800489a:	4603      	mov	r3, r0
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}

080048a0 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80048a4:	4b63      	ldr	r3, [pc, #396]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2209      	movs	r2, #9
 80048aa:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80048ac:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	220a      	movs	r2, #10
 80048b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80048b6:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	220a      	movs	r2, #10
 80048bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80048c0:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	220a      	movs	r2, #10
 80048c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80048ca:	4b5a      	ldr	r3, [pc, #360]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	220f      	movs	r2, #15
 80048d0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80048d4:	4b57      	ldr	r3, [pc, #348]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2205      	movs	r2, #5
 80048da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80048de:	4b55      	ldr	r3, [pc, #340]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2205      	movs	r2, #5
 80048e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80048e8:	4b52      	ldr	r3, [pc, #328]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2205      	movs	r2, #5
 80048ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80048f2:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2205      	movs	r2, #5
 80048f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80048fc:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2205      	movs	r2, #5
 8004902:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8004906:	4b4b      	ldr	r3, [pc, #300]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	220f      	movs	r2, #15
 800490c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8004910:	4b48      	ldr	r3, [pc, #288]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	220f      	movs	r2, #15
 8004916:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800491a:	4b46      	ldr	r3, [pc, #280]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	220f      	movs	r2, #15
 8004920:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8004924:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	220f      	movs	r2, #15
 800492a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	220f      	movs	r2, #15
 8004934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8004938:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	220f      	movs	r2, #15
 800493e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8004942:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	220f      	movs	r2, #15
 8004948:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 800494c:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	220f      	movs	r2, #15
 8004952:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8004956:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	220f      	movs	r2, #15
 800495c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8004960:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2210      	movs	r2, #16
 8004966:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800496a:	4b32      	ldr	r3, [pc, #200]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8004974:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2210      	movs	r2, #16
 800497a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 800497e:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2213      	movs	r2, #19
 8004984:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2211      	movs	r2, #17
 800498e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8004992:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2210      	movs	r2, #16
 8004998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2213      	movs	r2, #19
 80049a2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2213      	movs	r2, #19
 80049ac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80049b0:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2213      	movs	r2, #19
 80049b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	22a0      	movs	r2, #160	; 0xa0
 80049ca:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80049d6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049e2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f240 22fd 	movw	r2, #765	; 0x2fd
 80049ee:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f240 3252 	movw	r2, #850	; 0x352
 80049fa:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f240 32a2 	movw	r2, #930	; 0x3a2
 8004a06:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f240 4201 	movw	r2, #1025	; 0x401
 8004a12:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8004a1e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <vTraceInitObjectPropertyTable+0x194>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	20003ca8 	.word	0x20003ca8

08004a38 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8004a3c:	4b2e      	ldr	r3, [pc, #184]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	825a      	strh	r2, [r3, #18]
 8004a42:	4b2d      	ldr	r3, [pc, #180]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a44:	8a5a      	ldrh	r2, [r3, #18]
 8004a46:	4b2c      	ldr	r3, [pc, #176]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a48:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a4c:	220a      	movs	r2, #10
 8004a4e:	829a      	strh	r2, [r3, #20]
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a52:	8a9a      	ldrh	r2, [r3, #20]
 8004a54:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a56:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8004a58:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a5a:	2214      	movs	r2, #20
 8004a5c:	82da      	strh	r2, [r3, #22]
 8004a5e:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a60:	8ada      	ldrh	r2, [r3, #22]
 8004a62:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a64:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a68:	221e      	movs	r2, #30
 8004a6a:	831a      	strh	r2, [r3, #24]
 8004a6c:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a6e:	8b1a      	ldrh	r2, [r3, #24]
 8004a70:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a72:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8004a74:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a76:	222d      	movs	r2, #45	; 0x2d
 8004a78:	835a      	strh	r2, [r3, #26]
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a7c:	8b5a      	ldrh	r2, [r3, #26]
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a80:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8004a82:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a84:	2232      	movs	r2, #50	; 0x32
 8004a86:	839a      	strh	r2, [r3, #28]
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a8a:	8b9a      	ldrh	r2, [r3, #28]
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a8e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a92:	2237      	movs	r2, #55	; 0x37
 8004a94:	83da      	strh	r2, [r3, #30]
 8004a96:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a98:	8bda      	ldrh	r2, [r3, #30]
 8004a9a:	4b17      	ldr	r3, [pc, #92]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004a9c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004aa0:	223c      	movs	r2, #60	; 0x3c
 8004aa2:	841a      	strh	r2, [r3, #32]
 8004aa4:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004aa6:	8c1a      	ldrh	r2, [r3, #32]
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004aaa:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004aae:	2241      	movs	r2, #65	; 0x41
 8004ab0:	845a      	strh	r2, [r3, #34]	; 0x22
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ab4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ab8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004abc:	2209      	movs	r2, #9
 8004abe:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ac2:	2213      	movs	r2, #19
 8004ac4:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ac8:	221d      	movs	r2, #29
 8004aca:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ace:	222c      	movs	r2, #44	; 0x2c
 8004ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ad4:	2231      	movs	r2, #49	; 0x31
 8004ad6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ada:	2236      	movs	r2, #54	; 0x36
 8004adc:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ae0:	223b      	movs	r2, #59	; 0x3b
 8004ae2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8004aea:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <vTraceInitObjectHandleStack+0xc0>)
 8004aec:	2245      	movs	r2, #69	; 0x45
 8004aee:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	200022fc 	.word	0x200022fc

08004afc <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d827      	bhi.n	8004b5c <pszTraceGetErrorNotEnoughHandles+0x60>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b39 	.word	0x08004b39
 8004b24:	08004b3d 	.word	0x08004b3d
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b59 	.word	0x08004b59
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8004b3a:	e010      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <pszTraceGetErrorNotEnoughHandles+0x70>)
 8004b3e:	e00e      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <pszTraceGetErrorNotEnoughHandles+0x74>)
 8004b42:	e00c      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8004b46:	e00a      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8004b4a:	e008      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <pszTraceGetErrorNotEnoughHandles+0x80>)
 8004b4e:	e006      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <pszTraceGetErrorNotEnoughHandles+0x84>)
 8004b52:	e004      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8004b56:	e002      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8004b5a:	e000      	b.n	8004b5e <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <pszTraceGetErrorNotEnoughHandles+0x90>)
	}
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	08006e10 	.word	0x08006e10
 8004b6c:	08006e58 	.word	0x08006e58
 8004b70:	08006ea0 	.word	0x08006ea0
 8004b74:	08006ef4 	.word	0x08006ef4
 8004b78:	08006f40 	.word	0x08006f40
 8004b7c:	08006f8c 	.word	0x08006f8c
 8004b80:	08006fd8 	.word	0x08006fd8
 8004b84:	0800702c 	.word	0x0800702c
 8004b88:	08007084 	.word	0x08007084
 8004b8c:	080070e0 	.word	0x080070e0

08004b90 <vTraceEnable>:
* 
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
 8004b98:	f000 fcd4 	bl	8005544 <prvTraceInitTraceData>
	
	if (startOption == TRC_START)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d102      	bne.n	8004ba8 <vTraceEnable+0x18>
	{
		vTraceStart();
 8004ba2:	f000 f887 	bl	8004cb4 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}	
}
 8004ba6:	e00c      	b.n	8004bc2 <vTraceEnable+0x32>
	else if (startOption == TRC_START_AWAIT_HOST)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d103      	bne.n	8004bb6 <vTraceEnable+0x26>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8004bae:	4807      	ldr	r0, [pc, #28]	; (8004bcc <vTraceEnable+0x3c>)
 8004bb0:	f000 ffaa 	bl	8005b08 <prvTraceError>
}
 8004bb4:	e005      	b.n	8004bc2 <vTraceEnable+0x32>
	else if (startOption != TRC_INIT)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <vTraceEnable+0x32>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8004bbc:	4804      	ldr	r0, [pc, #16]	; (8004bd0 <vTraceEnable+0x40>)
 8004bbe:	f000 ffa3 	bl	8005b08 <prvTraceError>
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08007110 	.word	0x08007110
 8004bd0:	08007150 	.word	0x08007150

08004bd4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 8004bde:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <uiTraceStart+0xcc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8004be6:	4b2e      	ldr	r3, [pc, #184]	; (8004ca0 <uiTraceStart+0xcc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <uiTraceStart+0x24>
 8004bee:	482d      	ldr	r0, [pc, #180]	; (8004ca4 <uiTraceStart+0xd0>)
 8004bf0:	f000 ff8a 	bl	8005b08 <prvTraceError>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e04e      	b.n	8004c96 <uiTraceStart+0xc2>
		return 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e04c      	b.n	8004c96 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <uiTraceStart+0xcc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <uiTraceStart+0x36>
		return 1; /* Already running */
 8004c06:	2301      	movs	r3, #1
 8004c08:	e045      	b.n	8004c96 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <uiTraceStart+0xd4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d13e      	bne.n	8004c90 <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c12:	f3ef 8310 	mrs	r3, PRIMASK
 8004c16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c18:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f383 8810 	msr	PRIMASK, r3
}
 8004c26:	bf00      	nop
 8004c28:	4b20      	ldr	r3, [pc, #128]	; (8004cac <uiTraceStart+0xd8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <uiTraceStart+0xd8>)
 8004c30:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <uiTraceStart+0xcc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8004c3a:	f7ff fe2a 	bl	8004892 <prvTraceGetCurrentTaskHandle>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fd98 	bl	8004776 <prvTraceGetTaskNumberLow16>
 8004c46:	4603      	mov	r3, r0
 8004c48:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d110      	bne.n	8004c72 <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8004c50:	2003      	movs	r0, #3
 8004c52:	f000 fe09 	bl	8005868 <prvTraceGetObjectHandle>
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <uiTraceStart+0xdc>)
 8004c5e:	4619      	mov	r1, r3
 8004c60:	2003      	movs	r0, #3
 8004c62:	f000 fef3 	bl	8005a4c <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	2003      	movs	r0, #3
 8004c6e:	f000 fb4d 	bl	800530c <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fad7 	bl	8005228 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <uiTraceStart+0xd8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <uiTraceStart+0xd8>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f383 8810 	msr	PRIMASK, r3
}
 8004c8e:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <uiTraceStart+0xcc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20003ca8 	.word	0x20003ca8
 8004ca4:	08007184 	.word	0x08007184
 8004ca8:	200022ec 	.word	0x200022ec
 8004cac:	200022e4 	.word	0x200022e4
 8004cb0:	080071c8 	.word	0x080071c8

08004cb4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8004cb8:	f7ff ff8c 	bl	8004bd4 <uiTraceStart>
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <vTraceStop+0x28>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <vTraceStop+0x28>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <vTraceStop+0x2c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <vTraceStop+0x2c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4798      	blx	r3
	}
}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20003ca8 	.word	0x20003ca8
 8004cec:	200022f4 	.word	0x200022f4

08004cf0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d04b      	beq.n	8004d98 <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8004d00:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <prvTraceStoreTaskReady+0xb4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d049      	beq.n	8004d9c <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	d903      	bls.n	8004d16 <prvTraceStoreTaskReady+0x26>
 8004d0e:	4826      	ldr	r0, [pc, #152]	; (8004da8 <prvTraceStoreTaskReady+0xb8>)
 8004d10:	f000 fefa 	bl	8005b08 <prvTraceError>
 8004d14:	e043      	b.n	8004d9e <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 8004d16:	4b25      	ldr	r3, [pc, #148]	; (8004dac <prvTraceStoreTaskReady+0xbc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8004d1e:	4824      	ldr	r0, [pc, #144]	; (8004db0 <prvTraceStoreTaskReady+0xc0>)
 8004d20:	f000 fef2 	bl	8005b08 <prvTraceError>
		return;
 8004d24:	e03b      	b.n	8004d9e <prvTraceStoreTaskReady+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d26:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	2301      	movs	r3, #1
 8004d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	bf00      	nop
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <prvTraceStoreTaskReady+0xbc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <prvTraceStoreTaskReady+0xbc>)
 8004d44:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8004d46:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <prvTraceStoreTaskReady+0xc4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d018      	beq.n	8004d82 <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004d50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d54:	f000 ffb6 	bl	8005cc4 <prvTraceGetDTS>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8004d60:	f000 fd06 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 8004d64:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	8b7a      	ldrh	r2, [r7, #26]
 8004d76:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	7e7a      	ldrb	r2, [r7, #25]
 8004d7c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004d7e:	f000 ff79 	bl	8005c74 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <prvTraceStoreTaskReady+0xbc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <prvTraceStoreTaskReady+0xbc>)
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f383 8810 	msr	PRIMASK, r3
}
 8004d96:	e002      	b.n	8004d9e <prvTraceStoreTaskReady+0xae>
		return;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <prvTraceStoreTaskReady+0xae>
		return;
 8004d9c:	bf00      	nop
}
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000014 	.word	0x20000014
 8004da8:	080073dc 	.word	0x080073dc
 8004dac:	200022e4 	.word	0x200022e4
 8004db0:	0800741c 	.word	0x0800741c
 8004db4:	20003ca8 	.word	0x20003ca8

08004db8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	; 0x38
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 8004dc4:	4b40      	ldr	r3, [pc, #256]	; (8004ec8 <vTraceStoreMemMangEvent+0x110>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d078      	beq.n	8004ebe <vTraceStoreMemMangEvent+0x106>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da03      	bge.n	8004dda <vTraceStoreMemMangEvent+0x22>
		size = (uint32_t)(- signed_size);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	425b      	negs	r3, r3
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd8:	e001      	b.n	8004dde <vTraceStoreMemMangEvent+0x26>
	else
		size = (uint32_t)(signed_size);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dde:	f3ef 8310 	mrs	r3, PRIMASK
 8004de2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004de4:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8004de6:	633b      	str	r3, [r7, #48]	; 0x30
 8004de8:	2301      	movs	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f383 8810 	msr	PRIMASK, r3
}
 8004df2:	bf00      	nop
 8004df4:	4b35      	ldr	r3, [pc, #212]	; (8004ecc <vTraceStoreMemMangEvent+0x114>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4a34      	ldr	r2, [pc, #208]	; (8004ecc <vTraceStoreMemMangEvent+0x114>)
 8004dfc:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
 8004e04:	4b32      	ldr	r3, [pc, #200]	; (8004ed0 <vTraceStoreMemMangEvent+0x118>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	4a30      	ldr	r2, [pc, #192]	; (8004ed0 <vTraceStoreMemMangEvent+0x118>)
 8004e0e:	6013      	str	r3, [r2, #0]
	
	if (RecorderDataPtr->recorderActive)
 8004e10:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <vTraceStoreMemMangEvent+0x110>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d046      	beq.n	8004ea8 <vTraceStoreMemMangEvent+0xf0>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8004e1a:	20ff      	movs	r0, #255	; 0xff
 8004e1c:	f000 ff52 	bl	8005cc4 <prvTraceGetDTS>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8004e26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e2c:	f000 f95a 	bl	80050e4 <prvTraceGetParam>
 8004e30:	4603      	mov	r3, r0
 8004e32:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8004e34:	f000 fc9c 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 8004e38:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d033      	beq.n	8004ea8 <vTraceStoreMemMangEvent+0xf0>
		{
			ms->dts = dts1;
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004e46:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004e52:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004e54:	f000 ff0e 	bl	8005c74 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e5e:	f000 f941 	bl	80050e4 <prvTraceGetParam>
 8004e62:	4603      	mov	r3, r0
 8004e64:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8004e6c:	f000 fc80 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 8004e70:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <vTraceStoreMemMangEvent+0xf0>
			{
				ma->addr_low = addr_low;
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e7c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004e84:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
 8004e9a:	f000 feeb 	bl	8005c74 <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <vTraceStoreMemMangEvent+0x110>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <vTraceStoreMemMangEvent+0x118>)
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8004ea8:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <vTraceStoreMemMangEvent+0x114>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <vTraceStoreMemMangEvent+0x114>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f383 8810 	msr	PRIMASK, r3
}
 8004ebc:	e000      	b.n	8004ec0 <vTraceStoreMemMangEvent+0x108>
		return;
 8004ebe:	bf00      	nop
}
 8004ec0:	3738      	adds	r7, #56	; 0x38
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20003ca8 	.word	0x20003ca8
 8004ecc:	200022e4 	.word	0x200022e4
 8004ed0:	200022f8 	.word	0x200022f8

08004ed4 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	460b      	mov	r3, r1
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2bfe      	cmp	r3, #254	; 0xfe
 8004ee6:	d903      	bls.n	8004ef0 <prvTraceStoreKernelCall+0x1c>
 8004ee8:	4832      	ldr	r0, [pc, #200]	; (8004fb4 <prvTraceStoreKernelCall+0xe0>)
 8004eea:	f000 fe0d 	bl	8005b08 <prvTraceError>
 8004eee:	e05d      	b.n	8004fac <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8004ef0:	7afb      	ldrb	r3, [r7, #11]
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d903      	bls.n	8004efe <prvTraceStoreKernelCall+0x2a>
 8004ef6:	4830      	ldr	r0, [pc, #192]	; (8004fb8 <prvTraceStoreKernelCall+0xe4>)
 8004ef8:	f000 fe06 	bl	8005b08 <prvTraceError>
 8004efc:	e056      	b.n	8004fac <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8004efe:	4b2f      	ldr	r3, [pc, #188]	; (8004fbc <prvTraceStoreKernelCall+0xe8>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	4413      	add	r3, r2
 8004f06:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d903      	bls.n	8004f1a <prvTraceStoreKernelCall+0x46>
 8004f12:	482b      	ldr	r0, [pc, #172]	; (8004fc0 <prvTraceStoreKernelCall+0xec>)
 8004f14:	f000 fdf8 	bl	8005b08 <prvTraceError>
 8004f18:	e048      	b.n	8004fac <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <prvTraceStoreKernelCall+0xf0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8004f22:	4829      	ldr	r0, [pc, #164]	; (8004fc8 <prvTraceStoreKernelCall+0xf4>)
 8004f24:	f000 fdf0 	bl	8005b08 <prvTraceError>
		return;
 8004f28:	e040      	b.n	8004fac <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 8004f2a:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <prvTraceStoreKernelCall+0xf8>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d03b      	beq.n	8004faa <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f32:	f3ef 8310 	mrs	r3, PRIMASK
 8004f36:	617b      	str	r3, [r7, #20]
  return(result);
 8004f38:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	bf00      	nop
 8004f48:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <prvTraceStoreKernelCall+0xf0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <prvTraceStoreKernelCall+0xf0>)
 8004f50:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <prvTraceStoreKernelCall+0xe8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01b      	beq.n	8004f94 <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004f5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004f60:	f000 feb0 	bl	8005cc4 <prvTraceGetDTS>
 8004f64:	4603      	mov	r3, r0
 8004f66:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8004f6e:	f000 fbff 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 8004f72:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004f7e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004f8e:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004f90:	f000 fe70 	bl	8005c74 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <prvTraceStoreKernelCall+0xf0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <prvTraceStoreKernelCall+0xf0>)
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f383 8810 	msr	PRIMASK, r3
}
 8004fa8:	e000      	b.n	8004fac <prvTraceStoreKernelCall+0xd8>
		return;
 8004faa:	bf00      	nop
}
 8004fac:	3728      	adds	r7, #40	; 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	0800748c 	.word	0x0800748c
 8004fb8:	080074c4 	.word	0x080074c4
 8004fbc:	20003ca8 	.word	0x20003ca8
 8004fc0:	0800750c 	.word	0x0800750c
 8004fc4:	200022e4 	.word	0x200022e4
 8004fc8:	08007554 	.word	0x08007554
 8004fcc:	200022f0 	.word	0x200022f0

08004fd0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2bfe      	cmp	r3, #254	; 0xfe
 8004fe4:	d903      	bls.n	8004fee <prvTraceStoreKernelCallWithParam+0x1e>
 8004fe6:	4838      	ldr	r0, [pc, #224]	; (80050c8 <prvTraceStoreKernelCallWithParam+0xf8>)
 8004fe8:	f000 fd8e 	bl	8005b08 <prvTraceError>
 8004fec:	e068      	b.n	80050c0 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d903      	bls.n	8004ffc <prvTraceStoreKernelCallWithParam+0x2c>
 8004ff4:	4835      	ldr	r0, [pc, #212]	; (80050cc <prvTraceStoreKernelCallWithParam+0xfc>)
 8004ff6:	f000 fd87 	bl	8005b08 <prvTraceError>
 8004ffa:	e061      	b.n	80050c0 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8004ffc:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <prvTraceStoreKernelCallWithParam+0x100>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	7afb      	ldrb	r3, [r7, #11]
 8005002:	4413      	add	r3, r2
 8005004:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4293      	cmp	r3, r2
 800500e:	d903      	bls.n	8005018 <prvTraceStoreKernelCallWithParam+0x48>
 8005010:	4830      	ldr	r0, [pc, #192]	; (80050d4 <prvTraceStoreKernelCallWithParam+0x104>)
 8005012:	f000 fd79 	bl	8005b08 <prvTraceError>
 8005016:	e053      	b.n	80050c0 <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 8005018:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <prvTraceStoreKernelCallWithParam+0x108>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8005020:	482e      	ldr	r0, [pc, #184]	; (80050dc <prvTraceStoreKernelCallWithParam+0x10c>)
 8005022:	f000 fd71 	bl	8005b08 <prvTraceError>
		return;
 8005026:	e04b      	b.n	80050c0 <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005028:	f3ef 8310 	mrs	r3, PRIMASK
 800502c:	617b      	str	r3, [r7, #20]
  return(result);
 800502e:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	2301      	movs	r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f383 8810 	msr	PRIMASK, r3
}
 800503c:	bf00      	nop
 800503e:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <prvTraceStoreKernelCallWithParam+0x108>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a24      	ldr	r2, [pc, #144]	; (80050d8 <prvTraceStoreKernelCallWithParam+0x108>)
 8005046:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005048:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <prvTraceStoreKernelCallWithParam+0x100>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	2b00      	cmp	r3, #0
 8005050:	d02b      	beq.n	80050aa <prvTraceStoreKernelCallWithParam+0xda>
 8005052:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <prvTraceStoreKernelCallWithParam+0x110>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d027      	beq.n	80050aa <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 800505a:	20ff      	movs	r0, #255	; 0xff
 800505c:	f000 fe32 	bl	8005cc4 <prvTraceGetDTS>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	20ff      	movs	r0, #255	; 0xff
 800506a:	f000 f83b 	bl	80050e4 <prvTraceGetParam>
 800506e:	4603      	mov	r3, r0
 8005070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 800507a:	f000 fb79 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 800507e:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800508c:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800509c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80050a4:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 80050a6:	f000 fde5 	bl	8005c74 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80050aa:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <prvTraceStoreKernelCallWithParam+0x108>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <prvTraceStoreKernelCallWithParam+0x108>)
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	bf00      	nop
}
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	0800758c 	.word	0x0800758c
 80050cc:	080075cc 	.word	0x080075cc
 80050d0:	20003ca8 	.word	0x20003ca8
 80050d4:	0800761c 	.word	0x0800761c
 80050d8:	200022e4 	.word	0x200022e4
 80050dc:	0800766c 	.word	0x0800766c
 80050e0:	200022f0 	.word	0x200022f0

080050e4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2bff      	cmp	r3, #255	; 0xff
 80050f2:	d009      	beq.n	8005108 <prvTraceGetParam+0x24>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <prvTraceGetParam+0x24>
 80050fe:	4816      	ldr	r0, [pc, #88]	; (8005158 <prvTraceGetParam+0x74>)
 8005100:	f000 fd02 	bl	8005b08 <prvTraceError>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	e023      	b.n	8005150 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d801      	bhi.n	8005114 <prvTraceGetParam+0x30>
	{
		return param;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	e01d      	b.n	8005150 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8005114:	f000 fb2c 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 8005118:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d014      	beq.n	800514a <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	43da      	mvns	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	4013      	ands	r3, r2
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	43da      	mvns	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4013      	ands	r3, r2
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8005146:	f000 fd95 	bl	8005c74 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4013      	ands	r3, r2
	}
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	080076a4 	.word	0x080076a4

0800515c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2bfe      	cmp	r3, #254	; 0xfe
 800516e:	d903      	bls.n	8005178 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8005170:	4828      	ldr	r0, [pc, #160]	; (8005214 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8005172:	f000 fcc9 	bl	8005b08 <prvTraceError>
 8005176:	e049      	b.n	800520c <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8005180:	4826      	ldr	r0, [pc, #152]	; (800521c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8005182:	f000 fcc1 	bl	8005b08 <prvTraceError>
		return;
 8005186:	e041      	b.n	800520c <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005188:	f3ef 8310 	mrs	r3, PRIMASK
 800518c:	613b      	str	r3, [r7, #16]
  return(result);
 800518e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	bf00      	nop
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3301      	adds	r3, #1
 80051a4:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80051a6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80051a8:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d021      	beq.n	80051f6 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01d      	beq.n	80051f6 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 80051ba:	20ff      	movs	r0, #255	; 0xff
 80051bc:	f000 fd82 	bl	8005cc4 <prvTraceGetDTS>
 80051c0:	4603      	mov	r3, r0
 80051c2:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80051ca:	f7ff ff8b 	bl	80050e4 <prvTraceGetParam>
 80051ce:	4603      	mov	r3, r0
 80051d0:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 80051d2:	f000 facd 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 80051d6:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	7ffa      	ldrb	r2, [r7, #31]
 80051e2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051f0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80051f2:	f000 fd3f 	bl	8005c74 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	4a06      	ldr	r2, [pc, #24]	; (8005218 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	bf00      	nop
}
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	080076e0 	.word	0x080076e0
 8005218:	200022e4 	.word	0x200022e4
 800521c:	08007738 	.word	0x08007738
 8005220:	20003ca8 	.word	0x20003ca8
 8005224:	200022f0 	.word	0x200022f0

08005228 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	2b0f      	cmp	r3, #15
 8005236:	d903      	bls.n	8005240 <prvTraceStoreTaskswitch+0x18>
 8005238:	482f      	ldr	r0, [pc, #188]	; (80052f8 <prvTraceStoreTaskswitch+0xd0>)
 800523a:	f000 fc65 	bl	8005b08 <prvTraceError>
 800523e:	e058      	b.n	80052f2 <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005240:	f3ef 8310 	mrs	r3, PRIMASK
 8005244:	60fb      	str	r3, [r7, #12]
  return(result);
 8005246:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	2301      	movs	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f383 8810 	msr	PRIMASK, r3
}
 8005254:	bf00      	nop
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <prvTraceStoreTaskswitch+0xd4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <prvTraceStoreTaskswitch+0xd4>)
 800525e:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <prvTraceStoreTaskswitch+0xd8>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	79fa      	ldrb	r2, [r7, #7]
 8005266:	429a      	cmp	r2, r3
 8005268:	d038      	beq.n	80052dc <prvTraceStoreTaskswitch+0xb4>
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <prvTraceStoreTaskswitch+0xdc>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	2b00      	cmp	r3, #0
 8005272:	d033      	beq.n	80052dc <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8005274:	4b24      	ldr	r3, [pc, #144]	; (8005308 <prvTraceStoreTaskswitch+0xe0>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800527a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800527e:	f000 fd21 	bl	8005cc4 <prvTraceGetDTS>
 8005282:	4603      	mov	r3, r0
 8005284:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <prvTraceStoreTaskswitch+0xd8>)
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 800528c:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <prvTraceStoreTaskswitch+0xd8>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8005292:	f000 fa6d 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 8005296:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01e      	beq.n	80052dc <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 800529e:	4b18      	ldr	r3, [pc, #96]	; (8005300 <prvTraceStoreTaskswitch+0xd8>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	4619      	mov	r1, r3
 80052a4:	2003      	movs	r0, #3
 80052a6:	f000 f8e7 	bl	8005478 <prvTraceGetObjectState>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d103      	bne.n	80052b8 <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2207      	movs	r2, #7
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e002      	b.n	80052be <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2206      	movs	r2, #6
 80052bc:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	8b7a      	ldrh	r2, [r7, #26]
 80052c2:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	7e7a      	ldrb	r2, [r7, #25]
 80052c8:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <prvTraceStoreTaskswitch+0xd8>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	4619      	mov	r1, r3
 80052d2:	2003      	movs	r0, #3
 80052d4:	f000 f894 	bl	8005400 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80052d8:	f000 fccc 	bl	8005c74 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <prvTraceStoreTaskswitch+0xd4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	4a06      	ldr	r2, [pc, #24]	; (80052fc <prvTraceStoreTaskswitch+0xd4>)
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	bf00      	nop
}
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	08007770 	.word	0x08007770
 80052fc:	200022e4 	.word	0x200022e4
 8005300:	200022f0 	.word	0x200022f0
 8005304:	20003ca8 	.word	0x20003ca8
 8005308:	200022d4 	.word	0x200022d4

0800530c <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
 8005316:	460b      	mov	r3, r1
 8005318:	71bb      	strb	r3, [r7, #6]
 800531a:	4613      	mov	r3, r2
 800531c:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d903      	bls.n	800532c <prvTraceSetPriorityProperty+0x20>
 8005324:	4814      	ldr	r0, [pc, #80]	; (8005378 <prvTraceSetPriorityProperty+0x6c>)
 8005326:	f000 fbef 	bl	8005b08 <prvTraceError>
 800532a:	e022      	b.n	8005372 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <prvTraceSetPriorityProperty+0x70>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	4413      	add	r3, r2
 8005334:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005338:	79ba      	ldrb	r2, [r7, #6]
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <prvTraceSetPriorityProperty+0x3a>
 800533e:	4810      	ldr	r0, [pc, #64]	; (8005380 <prvTraceSetPriorityProperty+0x74>)
 8005340:	f000 fbe2 	bl	8005b08 <prvTraceError>
 8005344:	e015      	b.n	8005372 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <prvTraceSetPriorityProperty+0x70>)
 8005348:	681c      	ldr	r4, [r3, #0]
 800534a:	79fa      	ldrb	r2, [r7, #7]
 800534c:	79bb      	ldrb	r3, [r7, #6]
 800534e:	4611      	mov	r1, r2
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fa31 	bl	80057b8 <uiIndexOfObject>
 8005356:	4603      	mov	r3, r0
 8005358:	4619      	mov	r1, r3
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <prvTraceSetPriorityProperty+0x70>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	4413      	add	r3, r2
 8005362:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005366:	440b      	add	r3, r1
 8005368:	3301      	adds	r3, #1
 800536a:	4423      	add	r3, r4
 800536c:	797a      	ldrb	r2, [r7, #5]
 800536e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bd90      	pop	{r4, r7, pc}
 8005378:	08007904 	.word	0x08007904
 800537c:	20003ca8 	.word	0x20003ca8
 8005380:	08007950 	.word	0x08007950

08005384 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	460a      	mov	r2, r1
 800538e:	71fb      	strb	r3, [r7, #7]
 8005390:	4613      	mov	r3, r2
 8005392:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	2b08      	cmp	r3, #8
 8005398:	d904      	bls.n	80053a4 <prvTraceGetPriorityProperty+0x20>
 800539a:	4816      	ldr	r0, [pc, #88]	; (80053f4 <prvTraceGetPriorityProperty+0x70>)
 800539c:	f000 fbb4 	bl	8005b08 <prvTraceError>
 80053a0:	2300      	movs	r3, #0
 80053a2:	e022      	b.n	80053ea <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <prvTraceGetPriorityProperty+0x74>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	4413      	add	r3, r2
 80053ac:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80053b0:	79ba      	ldrb	r2, [r7, #6]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d904      	bls.n	80053c0 <prvTraceGetPriorityProperty+0x3c>
 80053b6:	4811      	ldr	r0, [pc, #68]	; (80053fc <prvTraceGetPriorityProperty+0x78>)
 80053b8:	f000 fba6 	bl	8005b08 <prvTraceError>
 80053bc:	2300      	movs	r3, #0
 80053be:	e014      	b.n	80053ea <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <prvTraceGetPriorityProperty+0x74>)
 80053c2:	681c      	ldr	r4, [r3, #0]
 80053c4:	79fa      	ldrb	r2, [r7, #7]
 80053c6:	79bb      	ldrb	r3, [r7, #6]
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f9f4 	bl	80057b8 <uiIndexOfObject>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4619      	mov	r1, r3
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <prvTraceGetPriorityProperty+0x74>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4413      	add	r3, r2
 80053dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80053e0:	440b      	add	r3, r1
 80053e2:	3301      	adds	r3, #1
 80053e4:	4423      	add	r3, r4
 80053e6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	bf00      	nop
 80053f4:	08007990 	.word	0x08007990
 80053f8:	20003ca8 	.word	0x20003ca8
 80053fc:	080079dc 	.word	0x080079dc

08005400 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
 800540a:	460b      	mov	r3, r1
 800540c:	71bb      	strb	r3, [r7, #6]
 800540e:	4613      	mov	r3, r2
 8005410:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d903      	bls.n	8005420 <prvTraceSetObjectState+0x20>
 8005418:	4814      	ldr	r0, [pc, #80]	; (800546c <prvTraceSetObjectState+0x6c>)
 800541a:	f000 fb75 	bl	8005b08 <prvTraceError>
 800541e:	e021      	b.n	8005464 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <prvTraceSetObjectState+0x70>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	4413      	add	r3, r2
 8005428:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800542c:	79ba      	ldrb	r2, [r7, #6]
 800542e:	429a      	cmp	r2, r3
 8005430:	d903      	bls.n	800543a <prvTraceSetObjectState+0x3a>
 8005432:	4810      	ldr	r0, [pc, #64]	; (8005474 <prvTraceSetObjectState+0x74>)
 8005434:	f000 fb68 	bl	8005b08 <prvTraceError>
 8005438:	e014      	b.n	8005464 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <prvTraceSetObjectState+0x70>)
 800543c:	681c      	ldr	r4, [r3, #0]
 800543e:	79fa      	ldrb	r2, [r7, #7]
 8005440:	79bb      	ldrb	r3, [r7, #6]
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f9b7 	bl	80057b8 <uiIndexOfObject>
 800544a:	4603      	mov	r3, r0
 800544c:	4619      	mov	r1, r3
 800544e:	4b08      	ldr	r3, [pc, #32]	; (8005470 <prvTraceSetObjectState+0x70>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	4413      	add	r3, r2
 8005456:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800545a:	440b      	add	r3, r1
 800545c:	4423      	add	r3, r4
 800545e:	797a      	ldrb	r2, [r7, #5]
 8005460:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	bd90      	pop	{r4, r7, pc}
 800546a:	bf00      	nop
 800546c:	08007a1c 	.word	0x08007a1c
 8005470:	20003ca8 	.word	0x20003ca8
 8005474:	08007a60 	.word	0x08007a60

08005478 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	460a      	mov	r2, r1
 8005482:	71fb      	strb	r3, [r7, #7]
 8005484:	4613      	mov	r3, r2
 8005486:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d904      	bls.n	8005498 <prvTraceGetObjectState+0x20>
 800548e:	4815      	ldr	r0, [pc, #84]	; (80054e4 <prvTraceGetObjectState+0x6c>)
 8005490:	f000 fb3a 	bl	8005b08 <prvTraceError>
 8005494:	2300      	movs	r3, #0
 8005496:	e021      	b.n	80054dc <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <prvTraceGetObjectState+0x70>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	4413      	add	r3, r2
 80054a0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80054a4:	79ba      	ldrb	r2, [r7, #6]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d904      	bls.n	80054b4 <prvTraceGetObjectState+0x3c>
 80054aa:	4810      	ldr	r0, [pc, #64]	; (80054ec <prvTraceGetObjectState+0x74>)
 80054ac:	f000 fb2c 	bl	8005b08 <prvTraceError>
 80054b0:	2300      	movs	r3, #0
 80054b2:	e013      	b.n	80054dc <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <prvTraceGetObjectState+0x70>)
 80054b6:	681c      	ldr	r4, [r3, #0]
 80054b8:	79fa      	ldrb	r2, [r7, #7]
 80054ba:	79bb      	ldrb	r3, [r7, #6]
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f97a 	bl	80057b8 <uiIndexOfObject>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4619      	mov	r1, r3
 80054c8:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <prvTraceGetObjectState+0x70>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	4413      	add	r3, r2
 80054d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054d4:	440b      	add	r3, r1
 80054d6:	4423      	add	r3, r4
 80054d8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd90      	pop	{r4, r7, pc}
 80054e4:	08007a9c 	.word	0x08007a9c
 80054e8:	20003ca8 	.word	0x20003ca8
 80054ec:	08007ae0 	.word	0x08007ae0

080054f0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 80054fa:	4b10      	ldr	r3, [pc, #64]	; (800553c <prvTraceSetTaskInstanceFinished+0x4c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8005502:	79fa      	ldrb	r2, [r7, #7]
 8005504:	429a      	cmp	r2, r3
 8005506:	d903      	bls.n	8005510 <prvTraceSetTaskInstanceFinished+0x20>
 8005508:	480d      	ldr	r0, [pc, #52]	; (8005540 <prvTraceSetTaskInstanceFinished+0x50>)
 800550a:	f000 fafd 	bl	8005b08 <prvTraceError>
 800550e:	e011      	b.n	8005534 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <prvTraceSetTaskInstanceFinished+0x4c>)
 8005512:	681c      	ldr	r4, [r3, #0]
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	2103      	movs	r1, #3
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f94d 	bl	80057b8 <uiIndexOfObject>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <prvTraceSetTaskInstanceFinished+0x4c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800552a:	4413      	add	r3, r2
 800552c:	4423      	add	r3, r4
 800552e:	2200      	movs	r2, #0
 8005530:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
#endif
}
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bd90      	pop	{r4, r7, pc}
 800553a:	bf00      	nop
 800553c:	20003ca8 	.word	0x20003ca8
 8005540:	08007b1c 	.word	0x08007b1c

08005544 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
 8005548:	4b83      	ldr	r3, [pc, #524]	; (8005758 <prvTraceInitTraceData+0x214>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8005550:	4b81      	ldr	r3, [pc, #516]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005552:	4a82      	ldr	r2, [pc, #520]	; (800575c <prvTraceInitTraceData+0x218>)
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e006      	b.n	8005566 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
 8005558:	4b7f      	ldr	r3, [pc, #508]	; (8005758 <prvTraceInitTraceData+0x214>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	f000 80f6 	beq.w	8005752 <prvTraceInitTraceData+0x20e>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
 8005566:	4b7e      	ldr	r3, [pc, #504]	; (8005760 <prvTraceInitTraceData+0x21c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a7e      	ldr	r2, [pc, #504]	; (8005764 <prvTraceInitTraceData+0x220>)
 800556c:	6013      	str	r3, [r2, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 800556e:	4b7a      	ldr	r3, [pc, #488]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f641 1218 	movw	r2, #6424	; 0x1918
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f000 ffc7 	bl	800650c <memset>
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800557e:	4b76      	ldr	r3, [pc, #472]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8005586:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8005588:	4b73      	ldr	r3, [pc, #460]	; (8005758 <prvTraceInitTraceData+0x214>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2205      	movs	r2, #5
 800558e:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8005590:	4b71      	ldr	r3, [pc, #452]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8005598:	4b6f      	ldr	r3, [pc, #444]	; (8005758 <prvTraceInitTraceData+0x214>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f641 1218 	movw	r2, #6424	; 0x1918
 80055a0:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 80055a2:	4b6d      	ldr	r3, [pc, #436]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055aa:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 80055ac:	4b6a      	ldr	r3, [pc, #424]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80055b6:	4b68      	ldr	r3, [pc, #416]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80055be:	4b66      	ldr	r3, [pc, #408]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 80055c6:	f7ff f96b 	bl	80048a0 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80055ca:	4b63      	ldr	r3, [pc, #396]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 80055d2:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80055d6:	4b60      	ldr	r3, [pc, #384]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80055de:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80055e2:	4b5d      	ldr	r3, [pc, #372]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80055ec:	4b5a      	ldr	r3, [pc, #360]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80055f4:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80055f8:	4b57      	ldr	r3, [pc, #348]	; (8005758 <prvTraceInitTraceData+0x214>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005600:	2250      	movs	r2, #80	; 0x50
 8005602:	4959      	ldr	r1, [pc, #356]	; (8005768 <prvTraceInitTraceData+0x224>)
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f9fb 	bl	8005a00 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 800560a:	4b53      	ldr	r3, [pc, #332]	; (8005758 <prvTraceInitTraceData+0x214>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8005612:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 8005616:	4b50      	ldr	r3, [pc, #320]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561e:	220a      	movs	r2, #10
 8005620:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
	RecorderDataPtr->endmarker1 = 0x0B;
 8005624:	4b4c      	ldr	r3, [pc, #304]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562c:	220b      	movs	r2, #11
 800562e:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
	RecorderDataPtr->endmarker2 = 0x0C;
 8005632:	4b49      	ldr	r3, [pc, #292]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563a:	220c      	movs	r2, #12
 800563c:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
	RecorderDataPtr->endmarker3 = 0x0D;
 8005640:	4b45      	ldr	r3, [pc, #276]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005648:	220d      	movs	r2, #13
 800564a:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
	RecorderDataPtr->endmarker4 = 0x71;
 800564e:	4b42      	ldr	r3, [pc, #264]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005656:	2271      	movs	r2, #113	; 0x71
 8005658:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	RecorderDataPtr->endmarker5 = 0x72;
 800565c:	4b3e      	ldr	r3, [pc, #248]	; (8005758 <prvTraceInitTraceData+0x214>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005664:	2272      	movs	r2, #114	; 0x72
 8005666:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
	RecorderDataPtr->endmarker6 = 0x73;
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <prvTraceInitTraceData+0x214>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005672:	2273      	movs	r2, #115	; 0x73
 8005674:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
	RecorderDataPtr->endmarker7 = 0x74;
 8005678:	4b37      	ldr	r3, [pc, #220]	; (8005758 <prvTraceInitTraceData+0x214>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005680:	2274      	movs	r2, #116	; 0x74
 8005682:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
	RecorderDataPtr->endmarker8 = 0xF1;
 8005686:	4b34      	ldr	r3, [pc, #208]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568e:	22f1      	movs	r2, #241	; 0xf1
 8005690:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
	RecorderDataPtr->endmarker9 = 0xF2;
 8005694:	4b30      	ldr	r3, [pc, #192]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569c:	22f2      	movs	r2, #242	; 0xf2
 800569e:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
	RecorderDataPtr->endmarker10 = 0xF3;
 80056a2:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	22f3      	movs	r2, #243	; 0xf3
 80056ac:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
	RecorderDataPtr->endmarker11 = 0xF4;
 80056b0:	4b29      	ldr	r3, [pc, #164]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b8:	22f4      	movs	r2, #244	; 0xf4
 80056ba:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 80056be:	f7ff f9bb 	bl	8004a38 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
 80056c2:	4b25      	ldr	r3, [pc, #148]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	22f4      	movs	r2, #244	; 0xf4
 80056c8:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80056ca:	4b23      	ldr	r3, [pc, #140]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	22f3      	movs	r2, #243	; 0xf3
 80056d0:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80056d2:	4b21      	ldr	r3, [pc, #132]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	22f2      	movs	r2, #242	; 0xf2
 80056d8:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80056da:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	22f1      	movs	r2, #241	; 0xf1
 80056e0:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2274      	movs	r2, #116	; 0x74
 80056e8:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2273      	movs	r2, #115	; 0x73
 80056f0:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2272      	movs	r2, #114	; 0x72
 80056f8:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <prvTraceInitTraceData+0x214>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2271      	movs	r2, #113	; 0x71
 8005700:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2204      	movs	r2, #4
 8005708:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <prvTraceInitTraceData+0x214>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2203      	movs	r2, #3
 8005710:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2202      	movs	r2, #2
 8005718:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <prvTraceInitTraceData+0x214>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 8005722:	4b12      	ldr	r3, [pc, #72]	; (800576c <prvTraceInitTraceData+0x228>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d010      	beq.n	800574c <prvTraceInitTraceData+0x208>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <prvTraceInitTraceData+0x214>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005732:	4a0e      	ldr	r2, [pc, #56]	; (800576c <prvTraceInitTraceData+0x228>)
 8005734:	6811      	ldr	r1, [r2, #0]
 8005736:	2250      	movs	r2, #80	; 0x50
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f961 	bl	8005a00 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <prvTraceInitTraceData+0x214>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		vTraceStop();
 8005748:	f7ff faba 	bl	8004cc0 <vTraceStop>
	}


	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 800574c:	f000 fb92 	bl	8005e74 <prvTraceInitCortexM>
 8005750:	e000      	b.n	8005754 <prvTraceInitTraceData+0x210>
			return;
 8005752:	bf00      	nop
#endif
}
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20003ca8 	.word	0x20003ca8
 800575c:	20002390 	.word	0x20002390
 8005760:	e0001004 	.word	0xe0001004
 8005764:	2000238c 	.word	0x2000238c
 8005768:	08007b64 	.word	0x08007b64
 800576c:	200022ec 	.word	0x200022ec

08005770 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	e013      	b.n	80057aa <prvTraceNextFreeEventBufferSlot+0x3a>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800578c:	d304      	bcc.n	8005798 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 800578e:	4809      	ldr	r0, [pc, #36]	; (80057b4 <prvTraceNextFreeEventBufferSlot+0x44>)
 8005790:	f000 f9ba 	bl	8005b08 <prvTraceError>
		return NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	e008      	b.n	80057aa <prvTraceNextFreeEventBufferSlot+0x3a>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <prvTraceNextFreeEventBufferSlot+0x40>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80057a8:	4413      	add	r3, r2
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20003ca8 	.word	0x20003ca8
 80057b4:	08007b78 	.word	0x08007b78

080057b8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	460a      	mov	r2, r1
 80057c2:	71fb      	strb	r3, [r7, #7]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80057c8:	79bb      	ldrb	r3, [r7, #6]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d904      	bls.n	80057d8 <uiIndexOfObject+0x20>
 80057ce:	4822      	ldr	r0, [pc, #136]	; (8005858 <uiIndexOfObject+0xa0>)
 80057d0:	f000 f99a 	bl	8005b08 <prvTraceError>
 80057d4:	2300      	movs	r3, #0
 80057d6:	e03a      	b.n	800584e <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <uiIndexOfObject+0x38>
 80057de:	4b1f      	ldr	r3, [pc, #124]	; (800585c <uiIndexOfObject+0xa4>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	79bb      	ldrb	r3, [r7, #6]
 80057e4:	4413      	add	r3, r2
 80057e6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80057ea:	79fa      	ldrb	r2, [r7, #7]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d904      	bls.n	80057fa <uiIndexOfObject+0x42>
 80057f0:	481b      	ldr	r0, [pc, #108]	; (8005860 <uiIndexOfObject+0xa8>)
 80057f2:	f000 f989 	bl	8005b08 <prvTraceError>
 80057f6:	2300      	movs	r3, #0
 80057f8:	e029      	b.n	800584e <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80057fa:	79bb      	ldrb	r3, [r7, #6]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d822      	bhi.n	8005846 <uiIndexOfObject+0x8e>
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01f      	beq.n	8005846 <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <uiIndexOfObject+0xa4>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	79bb      	ldrb	r3, [r7, #6]
 800580c:	4413      	add	r3, r2
 800580e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8005812:	79fa      	ldrb	r2, [r7, #7]
 8005814:	429a      	cmp	r2, r3
 8005816:	d816      	bhi.n	8005846 <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005818:	4b10      	ldr	r3, [pc, #64]	; (800585c <uiIndexOfObject+0xa4>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	79bb      	ldrb	r3, [r7, #6]
 800581e:	3340      	adds	r3, #64	; 0x40
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	4413      	add	r3, r2
 8005824:	891a      	ldrh	r2, [r3, #8]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <uiIndexOfObject+0xa4>)
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	79bb      	ldrb	r3, [r7, #6]
 800582c:	440b      	add	r3, r1
 800582e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005832:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8005834:	79f9      	ldrb	r1, [r7, #7]
 8005836:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005838:	b289      	uxth	r1, r1
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	b29b      	uxth	r3, r3
 8005840:	4413      	add	r3, r2
 8005842:	b29b      	uxth	r3, r3
 8005844:	e003      	b.n	800584e <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8005846:	4807      	ldr	r0, [pc, #28]	; (8005864 <uiIndexOfObject+0xac>)
 8005848:	f000 f95e 	bl	8005b08 <prvTraceError>
	return 0;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	08007ba0 	.word	0x08007ba0
 800585c:	20003ca8 	.word	0x20003ca8
 8005860:	08007be0 	.word	0x08007be0
 8005864:	08007c20 	.word	0x08007c20

08005868 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8005872:	4b4e      	ldr	r3, [pc, #312]	; (80059ac <prvTraceGetObjectHandle+0x144>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <prvTraceGetObjectHandle+0x1c>
 800587a:	484d      	ldr	r0, [pc, #308]	; (80059b0 <prvTraceGetObjectHandle+0x148>)
 800587c:	f000 f944 	bl	8005b08 <prvTraceError>
 8005880:	2300      	movs	r3, #0
 8005882:	e08f      	b.n	80059a4 <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d904      	bls.n	8005894 <prvTraceGetObjectHandle+0x2c>
 800588a:	484a      	ldr	r0, [pc, #296]	; (80059b4 <prvTraceGetObjectHandle+0x14c>)
 800588c:	f000 f93c 	bl	8005b08 <prvTraceError>
 8005890:	2300      	movs	r3, #0
 8005892:	e087      	b.n	80059a4 <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005894:	f3ef 8310 	mrs	r3, PRIMASK
 8005898:	60fb      	str	r3, [r7, #12]
  return(result);
 800589a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	2301      	movs	r3, #1
 80058a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f383 8810 	msr	PRIMASK, r3
}
 80058a8:	bf00      	nop
 80058aa:	4b43      	ldr	r3, [pc, #268]	; (80059b8 <prvTraceGetObjectHandle+0x150>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a41      	ldr	r2, [pc, #260]	; (80059b8 <prvTraceGetObjectHandle+0x150>)
 80058b2:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	4a41      	ldr	r2, [pc, #260]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 80058b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058bc:	461a      	mov	r2, r3
 80058be:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <prvTraceGetObjectHandle+0x158>)
 80058c0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80058c2:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <prvTraceGetObjectHandle+0x158>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a3d      	ldr	r2, [pc, #244]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 80058c8:	4413      	add	r3, r2
 80058ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d114      	bne.n	80058fc <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <prvTraceGetObjectHandle+0x158>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	4938      	ldr	r1, [pc, #224]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 80058dc:	3308      	adds	r3, #8
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	440b      	add	r3, r1
 80058e2:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 80058ea:	4b35      	ldr	r3, [pc, #212]	; (80059c0 <prvTraceGetObjectHandle+0x158>)
 80058ec:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80058ee:	3201      	adds	r2, #1
 80058f0:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 80058f2:	4a32      	ldr	r2, [pc, #200]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 80058f4:	4413      	add	r3, r2
 80058f6:	460a      	mov	r2, r1
 80058f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <prvTraceGetObjectHandle+0x158>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2e      	ldr	r2, [pc, #184]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 8005902:	4413      	add	r3, r2
 8005904:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005908:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 800590e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	4929      	ldr	r1, [pc, #164]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 8005916:	3310      	adds	r3, #16
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	440b      	add	r3, r1
 800591c:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800591e:	429a      	cmp	r2, r3
 8005920:	d90a      	bls.n	8005938 <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f8e9 	bl	8004afc <pszTraceGetErrorNotEnoughHandles>
 800592a:	4603      	mov	r3, r0
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f8eb 	bl	8005b08 <prvTraceError>
		handle = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e029      	b.n	800598c <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	4a20      	ldr	r2, [pc, #128]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 800593c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005940:	3201      	adds	r2, #1
 8005942:	b291      	uxth	r1, r2
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 8005946:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	4a1b      	ldr	r2, [pc, #108]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 800594e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005952:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	4a19      	ldr	r2, [pc, #100]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 8005958:	3308      	adds	r3, #8
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4413      	add	r3, r2
 800595e:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8005960:	1acb      	subs	r3, r1, r3
 8005962:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 8005968:	3318      	adds	r3, #24
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	88db      	ldrh	r3, [r3, #6]
 8005970:	461a      	mov	r2, r3
		if (hndCount >
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4293      	cmp	r3, r2
 8005976:	dd09      	ble.n	800598c <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 800597c:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 800597e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005980:	4a0e      	ldr	r2, [pc, #56]	; (80059bc <prvTraceGetObjectHandle+0x154>)
 8005982:	3318      	adds	r3, #24
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	460a      	mov	r2, r1
 800598a:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <prvTraceGetObjectHandle+0x150>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3b01      	subs	r3, #1
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <prvTraceGetObjectHandle+0x150>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f383 8810 	msr	PRIMASK, r3
}
 80059a0:	bf00      	nop

	return handle;
 80059a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3720      	adds	r7, #32
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20003ca8 	.word	0x20003ca8
 80059b0:	080071d4 	.word	0x080071d4
 80059b4:	08007c60 	.word	0x08007c60
 80059b8:	200022e4 	.word	0x200022e4
 80059bc:	200022fc 	.word	0x200022fc
 80059c0:	20003cac 	.word	0x20003cac

080059c4 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	460a      	mov	r2, r1
 80059ce:	71fb      	strb	r3, [r7, #7]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 80059d4:	79fa      	ldrb	r2, [r7, #7]
 80059d6:	79bb      	ldrb	r3, [r7, #6]
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff feec 	bl	80057b8 <uiIndexOfObject>
 80059e0:	4603      	mov	r3, r0
 80059e2:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <prvMarkObjectAsUsed+0x38>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	4413      	add	r3, r2
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20003ca8 	.word	0x20003ca8

08005a00 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e010      	b.n	8005a34 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	441a      	add	r2, r3
 8005a18:	68f9      	ldr	r1, [r7, #12]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	440b      	add	r3, r1
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3301      	adds	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d3ea      	bcc.n	8005a12 <prvStrncpy+0x12>
			break;
	}
}
 8005a3c:	e000      	b.n	8005a40 <prvStrncpy+0x40>
			break;
 8005a3e:	bf00      	nop
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
	...

08005a4c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	603a      	str	r2, [r7, #0]
 8005a56:	71fb      	strb	r3, [r7, #7]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <prvTraceSetObjectName+0x1e>
 8005a62:	4823      	ldr	r0, [pc, #140]	; (8005af0 <prvTraceSetObjectName+0xa4>)
 8005a64:	f000 f850 	bl	8005b08 <prvTraceError>
 8005a68:	e03e      	b.n	8005ae8 <prvTraceSetObjectName+0x9c>

	if (objectclass >= TRACE_NCLASSES)
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d903      	bls.n	8005a78 <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8005a70:	4820      	ldr	r0, [pc, #128]	; (8005af4 <prvTraceSetObjectName+0xa8>)
 8005a72:	f000 f849 	bl	8005b08 <prvTraceError>
		return;
 8005a76:	e037      	b.n	8005ae8 <prvTraceSetObjectName+0x9c>
	}

	if (handle == 0)
 8005a78:	79bb      	ldrb	r3, [r7, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8005a7e:	481e      	ldr	r0, [pc, #120]	; (8005af8 <prvTraceSetObjectName+0xac>)
 8005a80:	f000 f842 	bl	8005b08 <prvTraceError>
		return;
 8005a84:	e030      	b.n	8005ae8 <prvTraceSetObjectName+0x9c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8005a86:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <prvTraceSetObjectName+0xb0>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005a92:	79ba      	ldrb	r2, [r7, #6]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d908      	bls.n	8005aaa <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff f82e 	bl	8004afc <pszTraceGetErrorNotEnoughHandles>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f830 	bl	8005b08 <prvTraceError>
 8005aa8:	e01e      	b.n	8005ae8 <prvTraceSetObjectName+0x9c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8005aaa:	79fa      	ldrb	r2, [r7, #7]
 8005aac:	79bb      	ldrb	r3, [r7, #6]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fe81 	bl	80057b8 <uiIndexOfObject>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <prvTraceSetObjectName+0xb4>)
 8005abc:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <prvTraceSetObjectName+0xb8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d110      	bne.n	8005ae8 <prvTraceSetObjectName+0x9c>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <prvTraceSetObjectName+0xb0>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <prvTraceSetObjectName+0xb4>)
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	3398      	adds	r3, #152	; 0x98
 8005ad0:	4413      	add	r3, r2
 8005ad2:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8005ad4:	4b09      	ldr	r3, [pc, #36]	; (8005afc <prvTraceSetObjectName+0xb0>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	4413      	add	r3, r2
 8005adc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	f7ff ff8c 	bl	8005a00 <prvStrncpy>
		}
	}
}
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	08007d64 	.word	0x08007d64
 8005af4:	08007d98 	.word	0x08007d98
 8005af8:	08007dc8 	.word	0x08007dc8
 8005afc:	20003ca8 	.word	0x20003ca8
 8005b00:	20003cb0 	.word	0x20003cb0
 8005b04:	200022ec 	.word	0x200022ec

08005b08 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <prvTraceError+0x50>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <prvTraceError+0x14>
	{
		vTraceStop();
 8005b18:	f7ff f8d2 	bl	8004cc0 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <prvTraceError+0x54>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d115      	bne.n	8005b50 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8005b24:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <prvTraceError+0x54>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <prvTraceError+0x50>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <prvTraceError+0x50>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005b3a:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <prvTraceError+0x54>)
 8005b3c:	6811      	ldr	r1, [r2, #0]
 8005b3e:	2250      	movs	r2, #80	; 0x50
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ff5d 	bl	8005a00 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8005b46:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <prvTraceError+0x50>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		}
	}
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20003ca8 	.word	0x20003ca8
 8005b5c:	200022ec 	.word	0x200022ec

08005b60 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d172      	bne.n	8005c5e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
 8005b78:	483c      	ldr	r0, [pc, #240]	; (8005c6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8005b7a:	f7ff ffc5 	bl	8005b08 <prvTraceError>
 8005b7e:	e072      	b.n	8005c66 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x106>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8005b80:	4b3b      	ldr	r3, [pc, #236]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4413      	add	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8005b8c:	4b38      	ldr	r3, [pc, #224]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8005b9a:	2b98      	cmp	r3, #152	; 0x98
 8005b9c:	d928      	bls.n	8005bf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8005b9e:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8005bac:	2ba7      	cmp	r3, #167	; 0xa7
 8005bae:	d81f      	bhi.n	8005bf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8005bb0:	4b2f      	ldr	r3, [pc, #188]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8005bbe:	3368      	adds	r3, #104	; 0x68
 8005bc0:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8005bc2:	7bfa      	ldrb	r2, [r7, #15]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	441a      	add	r2, r3
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d241      	bcs.n	8005c56 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8005bd2:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005bde:	18d0      	adds	r0, r2, r3
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	3301      	adds	r3, #1
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	461a      	mov	r2, r3
 8005be8:	2100      	movs	r1, #0
 8005bea:	f000 fc8f 	bl	800650c <memset>
		{
 8005bee:	e032      	b.n	8005c56 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8005bf0:	4b1f      	ldr	r3, [pc, #124]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d12a      	bne.n	8005c58 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d20c      	bcs.n	8005c2a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xca>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8005c10:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005c1c:	4413      	add	r3, r2
 8005c1e:	2208      	movs	r2, #8
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fc72 	bl	800650c <memset>
 8005c28:	e016      	b.n	8005c58 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005c32:	2204      	movs	r2, #4
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fc68 	bl	800650c <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005c48:	4413      	add	r3, r2
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fc5c 	bl	800650c <memset>
 8005c54:	e000      	b.n	8005c58 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
 8005c56:	bf00      	nop
			}
		}
		i++;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d38c      	bcc.n	8005b80 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	08007e28 	.word	0x08007e28
 8005c70:	20003ca8 	.word	0x20003ca8

08005c74 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <prvTraceUpdateCounters+0x4c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01b      	beq.n	8005cba <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <prvTraceUpdateCounters+0x4c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	3201      	adds	r2, #1
 8005c8a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <prvTraceUpdateCounters+0x4c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	3201      	adds	r2, #1
 8005c94:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <prvTraceUpdateCounters+0x4c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ca0:	d307      	bcc.n	8005cb2 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <prvTraceUpdateCounters+0x4c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <prvTraceUpdateCounters+0x4c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f7ff ff54 	bl	8005b60 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8005cb8:	e000      	b.n	8005cbc <prvTraceUpdateCounters+0x48>
		return;
 8005cba:	bf00      	nop
#endif
}
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20003ca8 	.word	0x20003ca8

08005cc4 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	2bff      	cmp	r3, #255	; 0xff
 8005cde:	d009      	beq.n	8005cf4 <prvTraceGetDTS+0x30>
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <prvTraceGetDTS+0x30>
 8005cea:	485a      	ldr	r0, [pc, #360]	; (8005e54 <prvTraceGetDTS+0x190>)
 8005cec:	f7ff ff0c 	bl	8005b08 <prvTraceError>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e0ab      	b.n	8005e4c <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8005cf4:	4b58      	ldr	r3, [pc, #352]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d116      	bne.n	8005d2c <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 8005cfe:	4b57      	ldr	r3, [pc, #348]	; (8005e5c <prvTraceGetDTS+0x198>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d006      	beq.n	8005d14 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8005d06:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <prvTraceGetDTS+0x198>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b53      	ldr	r3, [pc, #332]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	0892      	lsrs	r2, r2, #2
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24
 8005d12:	e00b      	b.n	8005d2c <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8005d14:	4b52      	ldr	r3, [pc, #328]	; (8005e60 <prvTraceGetDTS+0x19c>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b52      	ldr	r3, [pc, #328]	; (8005e64 <prvTraceGetDTS+0x1a0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d005      	beq.n	8005d2c <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8005d20:	4b51      	ldr	r3, [pc, #324]	; (8005e68 <prvTraceGetDTS+0x1a4>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b4c      	ldr	r3, [pc, #304]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0892      	lsrs	r2, r2, #2
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8005d2c:	f107 030c 	add.w	r3, r7, #12
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 f8d7 	bl	8005ee4 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <prvTraceGetDTS+0x1a8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a4a      	ldr	r2, [pc, #296]	; (8005e6c <prvTraceGetDTS+0x1a8>)
 8005d44:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8005d46:	4b44      	ldr	r3, [pc, #272]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d043      	beq.n	8005dd8 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8005d50:	4b41      	ldr	r3, [pc, #260]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d91d      	bls.n	8005d98 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d62:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d6e:	4b3a      	ldr	r3, [pc, #232]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	440a      	add	r2, r1
 8005d74:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8005d76:	4b38      	ldr	r3, [pc, #224]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005d7c:	4b36      	ldr	r3, [pc, #216]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d88:	fb00 f202 	mul.w	r2, r0, r2
 8005d8c:	1a9a      	subs	r2, r3, r2
 8005d8e:	4b32      	ldr	r3, [pc, #200]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	440a      	add	r2, r1
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
 8005d96:	e007      	b.n	8005da8 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8005d98:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005d9e:	4b2e      	ldr	r3, [pc, #184]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	440a      	add	r2, r1
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8005da8:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dae:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d313      	bcc.n	8005de0 <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8005db8:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	3201      	adds	r2, #1
 8005dc0:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8005dc2:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005dc8:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dce:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	1a8a      	subs	r2, r1, r2
 8005dd4:	629a      	str	r2, [r3, #40]	; 0x28
 8005dd6:	e003      	b.n	8005de0 <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8005dd8:	4b1f      	ldr	r3, [pc, #124]	; (8005e58 <prvTraceGetDTS+0x194>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d92c      	bls.n	8005e42 <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8005de8:	f7ff fcc2 	bl	8005770 <prvTraceNextFreeEventBufferSlot>
 8005dec:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d026      	beq.n	8005e42 <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10b      	bne.n	8005e16 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	22a9      	movs	r2, #169	; 0xa9
 8005e02:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	0c1b      	lsrs	r3, r3, #16
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	705a      	strb	r2, [r3, #1]
 8005e14:	e013      	b.n	8005e3e <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	2bff      	cmp	r3, #255	; 0xff
 8005e1a:	d10d      	bne.n	8005e38 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	22a8      	movs	r2, #168	; 0xa8
 8005e20:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	0e1b      	lsrs	r3, r3, #24
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	705a      	strb	r2, [r3, #1]
 8005e36:	e002      	b.n	8005e3e <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8005e38:	480d      	ldr	r0, [pc, #52]	; (8005e70 <prvTraceGetDTS+0x1ac>)
 8005e3a:	f7ff fe65 	bl	8005b08 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8005e3e:	f7ff ff19 	bl	8005c74 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	b29b      	uxth	r3, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	08007e80 	.word	0x08007e80
 8005e58:	20003ca8 	.word	0x20003ca8
 8005e5c:	200022e8 	.word	0x200022e8
 8005e60:	e0001004 	.word	0xe0001004
 8005e64:	2000238c 	.word	0x2000238c
 8005e68:	2000001c 	.word	0x2000001c
 8005e6c:	20003cb4 	.word	0x20003cb4
 8005e70:	08007ec0 	.word	0x08007ec0

08005e74 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8005e78:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <prvTraceInitCortexM+0x54>)
 8005e7a:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <prvTraceInitCortexM+0x58>)
 8005e7c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <prvTraceInitCortexM+0x5c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <prvTraceInitCortexM+0x5c>)
 8005e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e88:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <prvTraceInitCortexM+0x5c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8005e92:	4810      	ldr	r0, [pc, #64]	; (8005ed4 <prvTraceInitCortexM+0x60>)
 8005e94:	f7ff fe38 	bl	8005b08 <prvTraceError>
			break;
 8005e98:	e013      	b.n	8005ec2 <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <prvTraceInitCortexM+0x64>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8005ea6:	480d      	ldr	r0, [pc, #52]	; (8005edc <prvTraceInitCortexM+0x68>)
 8005ea8:	f7ff fe2e 	bl	8005b08 <prvTraceError>
			break;
 8005eac:	e009      	b.n	8005ec2 <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <prvTraceInitCortexM+0x6c>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <prvTraceInitCortexM+0x64>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <prvTraceInitCortexM+0x64>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	e0001fb0 	.word	0xe0001fb0
 8005ecc:	c5acce55 	.word	0xc5acce55
 8005ed0:	e000edfc 	.word	0xe000edfc
 8005ed4:	080080ac 	.word	0x080080ac
 8005ed8:	e0001000 	.word	0xe0001000
 8005edc:	080080d8 	.word	0x080080d8
 8005ee0:	e0001004 	.word	0xe0001004

08005ee4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <prvTracePortGetTimeStamp+0x80>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d107      	bne.n	8005f10 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d028      	beq.n	8005f58 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8005f06:	4b18      	ldr	r3, [pc, #96]	; (8005f68 <prvTracePortGetTimeStamp+0x84>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
		return;
 8005f0e:	e023      	b.n	8005f58 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8005f10:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <prvTracePortGetTimeStamp+0x88>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <prvTracePortGetTimeStamp+0x8c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	1ad2      	subs	r2, r2, r3
 8005f1e:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <prvTracePortGetTimeStamp+0x90>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	089b      	lsrs	r3, r3, #2
 8005f2a:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <prvTracePortGetTimeStamp+0x90>)
 8005f34:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvTracePortGetTimeStamp+0x84>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <prvTracePortGetTimeStamp+0x84>)
 8005f40:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <prvTracePortGetTimeStamp+0x84>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8005f50:	4a07      	ldr	r2, [pc, #28]	; (8005f70 <prvTracePortGetTimeStamp+0x8c>)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e000      	b.n	8005f5a <prvTracePortGetTimeStamp+0x76>
		return;
 8005f58:	bf00      	nop
}
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	200022dc 	.word	0x200022dc
 8005f68:	200022e0 	.word	0x200022e0
 8005f6c:	e0001004 	.word	0xe0001004
 8005f70:	20003cb8 	.word	0x20003cb8
 8005f74:	20003cbc 	.word	0x20003cbc

08005f78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005f78:	b5b0      	push	{r4, r5, r7, lr}
 8005f7a:	b090      	sub	sp, #64	; 0x40
 8005f7c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	mailbox1 = osMessageCreate( osMessageQ(mailbox1), NULL);
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4818      	ldr	r0, [pc, #96]	; (8005fe4 <MX_FREERTOS_Init+0x6c>)
 8005f82:	f7fb fed9 	bl	8001d38 <osMessageCreate>
 8005f86:	4603      	mov	r3, r0
 8005f88:	4a17      	ldr	r2, [pc, #92]	; (8005fe8 <MX_FREERTOS_Init+0x70>)
 8005f8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	//TODO:creer taches 1, 2 et 3
		//osThreadDef(TASK1, task1Fn, ..., 0, ...);
		//... = osThreadCreate (osThread(TASK1), NULL);
		osThreadDef(TACHE1,task1Fn,osPriorityHigh, 0,configMINIMAL_STACK_SIZE);
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <MX_FREERTOS_Init+0x74>)
 8005f8e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8005f92:	461d      	mov	r5, r3
 8005f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	6023      	str	r3, [r4, #0]
		osThreadCreate (osThread(TACHE1), NULL);
 8005f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fb fe8d 	bl	8001cc2 <osThreadCreate>
		osThreadDef(TACHE2,task2Fn,osPriorityNormal, 0,configMINIMAL_STACK_SIZE);
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <MX_FREERTOS_Init+0x78>)
 8005faa:	f107 0418 	add.w	r4, r7, #24
 8005fae:	461d      	mov	r5, r3
 8005fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	6023      	str	r3, [r4, #0]
		osThreadCreate (osThread(TACHE2), NULL);
 8005fb8:	f107 0318 	add.w	r3, r7, #24
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fb fe7f 	bl	8001cc2 <osThreadCreate>
		osThreadDef(TACHE3,task3Fn,osPriorityLow, 0,configMINIMAL_STACK_SIZE);
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <MX_FREERTOS_Init+0x7c>)
 8005fc6:	1d3c      	adds	r4, r7, #4
 8005fc8:	461d      	mov	r5, r3
 8005fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	6023      	str	r3, [r4, #0]
		osThreadCreate (osThread(TACHE3), NULL);
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fb fe73 	bl	8001cc2 <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

}
 8005fdc:	bf00      	nop
 8005fde:	3740      	adds	r7, #64	; 0x40
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8005fe4:	080081e8 	.word	0x080081e8
 8005fe8:	20003cc0 	.word	0x20003cc0
 8005fec:	0800811c 	.word	0x0800811c
 8005ff0:	08008130 	.word	0x08008130
 8005ff4:	08008144 	.word	0x08008144

08005ff8 <task1Fn>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
/* task1Fn function */
void task1Fn(void const * argument)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	uint32_t  tick_os_actuelle= 0 ;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]

 /* Infinite loop */
	while(1){
		tick_os_actuelle = (uint32_t) osKernelSysTick();
 8006004:	f7fb fe4d 	bl	8001ca2 <osKernelSysTick>
 8006008:	4603      	mov	r3, r0
 800600a:	60fb      	str	r3, [r7, #12]



		MESN_UART_PutString_Poll((uint8_t *) "\r\n Task1 -- MsgSent ");
 800600c:	4808      	ldr	r0, [pc, #32]	; (8006030 <task1Fn+0x38>)
 800600e:	f7fa fb11 	bl	8000634 <MESN_UART_PutString_Poll>
		//depot de ma tick dans le mail box
		osMessagePut(mailbox1, tick_os_actuelle, 0);
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <task1Fn+0x3c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f7fb fe9e 	bl	8001d5c <osMessagePut>

		osDelayUntil(&tick_os_actuelle, 500);
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006028:	4618      	mov	r0, r3
 800602a:	f7fb ff4b 	bl	8001ec4 <osDelayUntil>
		tick_os_actuelle = (uint32_t) osKernelSysTick();
 800602e:	e7e9      	b.n	8006004 <task1Fn+0xc>
 8006030:	08008158 	.word	0x08008158
 8006034:	20003cc0 	.word	0x20003cc0

08006038 <task2Fn>:

}

/* task2Fn function */
void task2Fn(void const * argument)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08e      	sub	sp, #56	; 0x38
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	// def d'une structure qui contient tout les informations du mailbox
	osEvent srt ;
	uint32_t val_a_prendre = 0; // ou restorere le msg recue
 8006040:	2300      	movs	r3, #0
 8006042:	637b      	str	r3, [r7, #52]	; 0x34

	/* Infinite loop */
	 while(1){

		 //	prendre la dernière valeur du mailbox
		  srt = osMessageGet(mailbox1, 300);
 8006044:	4b10      	ldr	r3, [pc, #64]	; (8006088 <task2Fn+0x50>)
 8006046:	6819      	ldr	r1, [r3, #0]
 8006048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800604c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006050:	4618      	mov	r0, r3
 8006052:	f7fb fec3 	bl	8001ddc <osMessageGet>
		  if(srt.status == osEventMessage){
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	2b10      	cmp	r3, #16
 800605a:	d10e      	bne.n	800607a <task2Fn+0x42>
			  val_a_prendre = srt.value.v;
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
		  	  //send uart val du mailbox

		  	  sprintf(tab,"\r\nTask 2 : - MsRCieved : %ld ",val_a_prendre);
 8006060:	f107 0308 	add.w	r3, r7, #8
 8006064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006066:	4909      	ldr	r1, [pc, #36]	; (800608c <task2Fn+0x54>)
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fafb 	bl	8006664 <siprintf>

		  	  MESN_UART_PutString_Poll((uint8_t * ) tab);
 800606e:	f107 0308 	add.w	r3, r7, #8
 8006072:	4618      	mov	r0, r3
 8006074:	f7fa fade 	bl	8000634 <MESN_UART_PutString_Poll>
 8006078:	e7e4      	b.n	8006044 <task2Fn+0xc>
		  }else if (srt.status == osEventTimeout ){
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d1e1      	bne.n	8006044 <task2Fn+0xc>
			  MESN_UART_PutString_Poll((uint8_t * ) "\r\n tache 2 - timeout" );
 8006080:	4803      	ldr	r0, [pc, #12]	; (8006090 <task2Fn+0x58>)
 8006082:	f7fa fad7 	bl	8000634 <MESN_UART_PutString_Poll>
		  srt = osMessageGet(mailbox1, 300);
 8006086:	e7dd      	b.n	8006044 <task2Fn+0xc>
 8006088:	20003cc0 	.word	0x20003cc0
 800608c:	08008170 	.word	0x08008170
 8006090:	08008190 	.word	0x08008190

08006094 <task3Fn>:
}


/* task3Fn function */
void task3Fn(void const * argument)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

/* Infinite loop */
	 while(1){

		 MESN_UART_PutString_Poll((uint8_t * )"\r\nTask 3 ### ");
 800609c:	4803      	ldr	r0, [pc, #12]	; (80060ac <task3Fn+0x18>)
 800609e:	f7fa fac9 	bl	8000634 <MESN_UART_PutString_Poll>
		 osDelay(100);
 80060a2:	2064      	movs	r0, #100	; 0x64
 80060a4:	f7fb fe34 	bl	8001d10 <osDelay>
		 MESN_UART_PutString_Poll((uint8_t * )"\r\nTask 3 ### ");
 80060a8:	e7f8      	b.n	800609c <task3Fn+0x8>
 80060aa:	bf00      	nop
 80060ac:	080081a8 	.word	0x080081a8

080060b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060b6:	f107 030c 	add.w	r3, r7, #12
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	609a      	str	r2, [r3, #8]
 80060c2:	60da      	str	r2, [r3, #12]
 80060c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c6:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <MX_GPIO_Init+0x90>)
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <MX_GPIO_Init+0x90>)
 80060cc:	f043 0304 	orr.w	r3, r3, #4
 80060d0:	61d3      	str	r3, [r2, #28]
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <MX_GPIO_Init+0x90>)
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060de:	4b18      	ldr	r3, [pc, #96]	; (8006140 <MX_GPIO_Init+0x90>)
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	4a17      	ldr	r2, [pc, #92]	; (8006140 <MX_GPIO_Init+0x90>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	61d3      	str	r3, [r2, #28]
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <MX_GPIO_Init+0x90>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	607b      	str	r3, [r7, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80060f6:	2200      	movs	r2, #0
 80060f8:	2120      	movs	r1, #32
 80060fa:	4812      	ldr	r0, [pc, #72]	; (8006144 <MX_GPIO_Init+0x94>)
 80060fc:	f7fa fdb0 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800610a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	4619      	mov	r1, r3
 8006116:	480c      	ldr	r0, [pc, #48]	; (8006148 <MX_GPIO_Init+0x98>)
 8006118:	f7fa fc12 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800611c:	2320      	movs	r3, #32
 800611e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006120:	2301      	movs	r3, #1
 8006122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006124:	2300      	movs	r3, #0
 8006126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4619      	mov	r1, r3
 8006132:	4804      	ldr	r0, [pc, #16]	; (8006144 <MX_GPIO_Init+0x94>)
 8006134:	f7fa fc04 	bl	8000940 <HAL_GPIO_Init>

}
 8006138:	bf00      	nop
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40023800 	.word	0x40023800
 8006144:	40020000 	.word	0x40020000
 8006148:	40020800 	.word	0x40020800

0800614c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006150:	f7fa fae2 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006154:	f000 f812 	bl	800617c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  vTraceEnable(TRC_START);
 8006158:	2001      	movs	r0, #1
 800615a:	f7fe fd19 	bl	8004b90 <vTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800615e:	f7ff ffa7 	bl	80060b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MESN_UART_Init();
 8006162:	f7fa f991 	bl	8000488 <MESN_UART_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8006166:	f7ff ff07 	bl	8005f78 <MX_FREERTOS_Init>

  /* Start scheduler */
  //TODO ...
  MESN_UART_PutString_Poll((uint8_t * )"\r\n start os ");
 800616a:	4803      	ldr	r0, [pc, #12]	; (8006178 <main+0x2c>)
 800616c:	f7fa fa62 	bl	8000634 <MESN_UART_PutString_Poll>

 //vTaskStartScheIdleTaskduler();
  osKernelStart();
 8006170:	f7fb fd90 	bl	8001c94 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006174:	e7fe      	b.n	8006174 <main+0x28>
 8006176:	bf00      	nop
 8006178:	080081d8 	.word	0x080081d8

0800617c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b092      	sub	sp, #72	; 0x48
 8006180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006182:	f107 0314 	add.w	r3, r7, #20
 8006186:	2234      	movs	r2, #52	; 0x34
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f9be 	bl	800650c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006190:	463b      	mov	r3, r7
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	609a      	str	r2, [r3, #8]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800619e:	4b19      	ldr	r3, [pc, #100]	; (8006204 <SystemClock_Config+0x88>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80061a6:	4a17      	ldr	r2, [pc, #92]	; (8006204 <SystemClock_Config+0x88>)
 80061a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061ac:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80061ae:	2302      	movs	r3, #2
 80061b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061b2:	2301      	movs	r3, #1
 80061b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80061b6:	2310      	movs	r3, #16
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061be:	f107 0314 	add.w	r3, r7, #20
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa fd64 	bl	8000c90 <HAL_RCC_OscConfig>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80061ce:	f000 f82d 	bl	800622c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061d2:	230f      	movs	r3, #15
 80061d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80061d6:	2301      	movs	r3, #1
 80061d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80061e6:	463b      	mov	r3, r7
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fb f880 	bl	80012f0 <HAL_RCC_ClockConfig>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80061f6:	f000 f819 	bl	800622c <Error_Handler>
  }
}
 80061fa:	bf00      	nop
 80061fc:	3748      	adds	r7, #72	; 0x48
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40007000 	.word	0x40007000

08006208 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a04      	ldr	r2, [pc, #16]	; (8006228 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800621a:	f7fa fa95 	bl	8000748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40001400 	.word	0x40001400

0800622c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006230:	b672      	cpsid	i
}
 8006232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006234:	e7fe      	b.n	8006234 <Error_Handler+0x8>
	...

08006238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800623e:	4b17      	ldr	r3, [pc, #92]	; (800629c <HAL_MspInit+0x64>)
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	4a16      	ldr	r2, [pc, #88]	; (800629c <HAL_MspInit+0x64>)
 8006244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006248:	6253      	str	r3, [r2, #36]	; 0x24
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <HAL_MspInit+0x64>)
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <HAL_MspInit+0x64>)
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4a10      	ldr	r2, [pc, #64]	; (800629c <HAL_MspInit+0x64>)
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	6213      	str	r3, [r2, #32]
 8006262:	4b0e      	ldr	r3, [pc, #56]	; (800629c <HAL_MspInit+0x64>)
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	60bb      	str	r3, [r7, #8]
 800626c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <HAL_MspInit+0x64>)
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <HAL_MspInit+0x64>)
 8006274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006278:	6253      	str	r3, [r2, #36]	; 0x24
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <HAL_MspInit+0x64>)
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006286:	2200      	movs	r2, #0
 8006288:	210f      	movs	r1, #15
 800628a:	f06f 0001 	mvn.w	r0, #1
 800628e:	f7fa fb2c 	bl	80008ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006292:	bf00      	nop
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800

080062a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	; 0x38
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80062b6:	4b32      	ldr	r3, [pc, #200]	; (8006380 <HAL_InitTick+0xe0>)
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	4a31      	ldr	r2, [pc, #196]	; (8006380 <HAL_InitTick+0xe0>)
 80062bc:	f043 0320 	orr.w	r3, r3, #32
 80062c0:	6253      	str	r3, [r2, #36]	; 0x24
 80062c2:	4b2f      	ldr	r3, [pc, #188]	; (8006380 <HAL_InitTick+0xe0>)
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80062ce:	f107 0210 	add.w	r2, r7, #16
 80062d2:	f107 0314 	add.w	r3, r7, #20
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fb fa19 	bl	8001710 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d103      	bne.n	80062f0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80062e8:	f7fb f9fe 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 80062ec:	6378      	str	r0, [r7, #52]	; 0x34
 80062ee:	e004      	b.n	80062fa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fb f9fa 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 80062f4:	4603      	mov	r3, r0
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	4a21      	ldr	r2, [pc, #132]	; (8006384 <HAL_InitTick+0xe4>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	0c9b      	lsrs	r3, r3, #18
 8006304:	3b01      	subs	r3, #1
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8006308:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <HAL_InitTick+0xe8>)
 800630a:	4a20      	ldr	r2, [pc, #128]	; (800638c <HAL_InitTick+0xec>)
 800630c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800630e:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <HAL_InitTick+0xe8>)
 8006310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006314:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8006316:	4a1c      	ldr	r2, [pc, #112]	; (8006388 <HAL_InitTick+0xe8>)
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800631c:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <HAL_InitTick+0xe8>)
 800631e:	2200      	movs	r2, #0
 8006320:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006322:	4b19      	ldr	r3, [pc, #100]	; (8006388 <HAL_InitTick+0xe8>)
 8006324:	2200      	movs	r2, #0
 8006326:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8006328:	4817      	ldr	r0, [pc, #92]	; (8006388 <HAL_InitTick+0xe8>)
 800632a:	f7fb fa81 	bl	8001830 <HAL_TIM_Base_Init>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006334:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11b      	bne.n	8006374 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800633c:	4812      	ldr	r0, [pc, #72]	; (8006388 <HAL_InitTick+0xe8>)
 800633e:	f7fb fabf 	bl	80018c0 <HAL_TIM_Base_Start_IT>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006348:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800634c:	2b00      	cmp	r3, #0
 800634e:	d111      	bne.n	8006374 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006350:	202c      	movs	r0, #44	; 0x2c
 8006352:	f7fa fae6 	bl	8000922 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b0f      	cmp	r3, #15
 800635a:	d808      	bhi.n	800636e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800635c:	2200      	movs	r2, #0
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	202c      	movs	r0, #44	; 0x2c
 8006362:	f7fa fac2 	bl	80008ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006366:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <HAL_InitTick+0xf0>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e002      	b.n	8006374 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006378:	4618      	mov	r0, r3
 800637a:	3738      	adds	r7, #56	; 0x38
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40023800 	.word	0x40023800
 8006384:	431bde83 	.word	0x431bde83
 8006388:	20003cc4 	.word	0x20003cc4
 800638c:	40001400 	.word	0x40001400
 8006390:	20000000 	.word	0x20000000

08006394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006398:	e7fe      	b.n	8006398 <NMI_Handler+0x4>

0800639a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800639a:	b480      	push	{r7}
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800639e:	e7fe      	b.n	800639e <HardFault_Handler+0x4>

080063a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063a4:	e7fe      	b.n	80063a4 <MemManage_Handler+0x4>

080063a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063a6:	b480      	push	{r7}
 80063a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063aa:	e7fe      	b.n	80063aa <BusFault_Handler+0x4>

080063ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063b0:	e7fe      	b.n	80063b0 <UsageFault_Handler+0x4>

080063b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063b2:	b480      	push	{r7}
 80063b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063b6:	bf00      	nop
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr
	...

080063c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80063c4:	4802      	ldr	r0, [pc, #8]	; (80063d0 <TIM7_IRQHandler+0x10>)
 80063c6:	f7fb facd 	bl	8001964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20003cc4 	.word	0x20003cc4

080063d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063dc:	4a14      	ldr	r2, [pc, #80]	; (8006430 <_sbrk+0x5c>)
 80063de:	4b15      	ldr	r3, [pc, #84]	; (8006434 <_sbrk+0x60>)
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063e8:	4b13      	ldr	r3, [pc, #76]	; (8006438 <_sbrk+0x64>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <_sbrk+0x64>)
 80063f2:	4a12      	ldr	r2, [pc, #72]	; (800643c <_sbrk+0x68>)
 80063f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <_sbrk+0x64>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	d207      	bcs.n	8006414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006404:	f000 f848 	bl	8006498 <__errno>
 8006408:	4603      	mov	r3, r0
 800640a:	220c      	movs	r2, #12
 800640c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	e009      	b.n	8006428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <_sbrk+0x64>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <_sbrk+0x64>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	4a05      	ldr	r2, [pc, #20]	; (8006438 <_sbrk+0x64>)
 8006424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20014000 	.word	0x20014000
 8006434:	00000400 	.word	0x00000400
 8006438:	20003d04 	.word	0x20003d04
 800643c:	20003d18 	.word	0x20003d18

08006440 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800644c:	480c      	ldr	r0, [pc, #48]	; (8006480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800644e:	490d      	ldr	r1, [pc, #52]	; (8006484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006450:	4a0d      	ldr	r2, [pc, #52]	; (8006488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006454:	e002      	b.n	800645c <LoopCopyDataInit>

08006456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800645a:	3304      	adds	r3, #4

0800645c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800645c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800645e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006460:	d3f9      	bcc.n	8006456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006462:	4a0a      	ldr	r2, [pc, #40]	; (800648c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006464:	4c0a      	ldr	r4, [pc, #40]	; (8006490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006468:	e001      	b.n	800646e <LoopFillZerobss>

0800646a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800646a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800646c:	3204      	adds	r2, #4

0800646e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800646e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006470:	d3fb      	bcc.n	800646a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006472:	f7ff ffe5 	bl	8006440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006476:	f000 f815 	bl	80064a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800647a:	f7ff fe67 	bl	800614c <main>
  bx lr
 800647e:	4770      	bx	lr
  ldr r0, =_sdata
 8006480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006484:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8006488:	080082b8 	.word	0x080082b8
  ldr r2, =_sbss
 800648c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8006490:	20003d18 	.word	0x20003d18

08006494 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006494:	e7fe      	b.n	8006494 <ADC1_IRQHandler>
	...

08006498 <__errno>:
 8006498:	4b01      	ldr	r3, [pc, #4]	; (80064a0 <__errno+0x8>)
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000020 	.word	0x20000020

080064a4 <__libc_init_array>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	2600      	movs	r6, #0
 80064a8:	4d0c      	ldr	r5, [pc, #48]	; (80064dc <__libc_init_array+0x38>)
 80064aa:	4c0d      	ldr	r4, [pc, #52]	; (80064e0 <__libc_init_array+0x3c>)
 80064ac:	1b64      	subs	r4, r4, r5
 80064ae:	10a4      	asrs	r4, r4, #2
 80064b0:	42a6      	cmp	r6, r4
 80064b2:	d109      	bne.n	80064c8 <__libc_init_array+0x24>
 80064b4:	f000 fc9c 	bl	8006df0 <_init>
 80064b8:	2600      	movs	r6, #0
 80064ba:	4d0a      	ldr	r5, [pc, #40]	; (80064e4 <__libc_init_array+0x40>)
 80064bc:	4c0a      	ldr	r4, [pc, #40]	; (80064e8 <__libc_init_array+0x44>)
 80064be:	1b64      	subs	r4, r4, r5
 80064c0:	10a4      	asrs	r4, r4, #2
 80064c2:	42a6      	cmp	r6, r4
 80064c4:	d105      	bne.n	80064d2 <__libc_init_array+0x2e>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064cc:	4798      	blx	r3
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7ee      	b.n	80064b0 <__libc_init_array+0xc>
 80064d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d6:	4798      	blx	r3
 80064d8:	3601      	adds	r6, #1
 80064da:	e7f2      	b.n	80064c2 <__libc_init_array+0x1e>
 80064dc:	080082b0 	.word	0x080082b0
 80064e0:	080082b0 	.word	0x080082b0
 80064e4:	080082b0 	.word	0x080082b0
 80064e8:	080082b4 	.word	0x080082b4

080064ec <__retarget_lock_acquire_recursive>:
 80064ec:	4770      	bx	lr

080064ee <__retarget_lock_release_recursive>:
 80064ee:	4770      	bx	lr

080064f0 <memcpy>:
 80064f0:	440a      	add	r2, r1
 80064f2:	4291      	cmp	r1, r2
 80064f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064f8:	d100      	bne.n	80064fc <memcpy+0xc>
 80064fa:	4770      	bx	lr
 80064fc:	b510      	push	{r4, lr}
 80064fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006502:	4291      	cmp	r1, r2
 8006504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006508:	d1f9      	bne.n	80064fe <memcpy+0xe>
 800650a:	bd10      	pop	{r4, pc}

0800650c <memset>:
 800650c:	4603      	mov	r3, r0
 800650e:	4402      	add	r2, r0
 8006510:	4293      	cmp	r3, r2
 8006512:	d100      	bne.n	8006516 <memset+0xa>
 8006514:	4770      	bx	lr
 8006516:	f803 1b01 	strb.w	r1, [r3], #1
 800651a:	e7f9      	b.n	8006510 <memset+0x4>

0800651c <sbrk_aligned>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	4e0e      	ldr	r6, [pc, #56]	; (8006558 <sbrk_aligned+0x3c>)
 8006520:	460c      	mov	r4, r1
 8006522:	6831      	ldr	r1, [r6, #0]
 8006524:	4605      	mov	r5, r0
 8006526:	b911      	cbnz	r1, 800652e <sbrk_aligned+0x12>
 8006528:	f000 f88c 	bl	8006644 <_sbrk_r>
 800652c:	6030      	str	r0, [r6, #0]
 800652e:	4621      	mov	r1, r4
 8006530:	4628      	mov	r0, r5
 8006532:	f000 f887 	bl	8006644 <_sbrk_r>
 8006536:	1c43      	adds	r3, r0, #1
 8006538:	d00a      	beq.n	8006550 <sbrk_aligned+0x34>
 800653a:	1cc4      	adds	r4, r0, #3
 800653c:	f024 0403 	bic.w	r4, r4, #3
 8006540:	42a0      	cmp	r0, r4
 8006542:	d007      	beq.n	8006554 <sbrk_aligned+0x38>
 8006544:	1a21      	subs	r1, r4, r0
 8006546:	4628      	mov	r0, r5
 8006548:	f000 f87c 	bl	8006644 <_sbrk_r>
 800654c:	3001      	adds	r0, #1
 800654e:	d101      	bne.n	8006554 <sbrk_aligned+0x38>
 8006550:	f04f 34ff 	mov.w	r4, #4294967295
 8006554:	4620      	mov	r0, r4
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	20003d10 	.word	0x20003d10

0800655c <_malloc_r>:
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	1ccd      	adds	r5, r1, #3
 8006562:	f025 0503 	bic.w	r5, r5, #3
 8006566:	3508      	adds	r5, #8
 8006568:	2d0c      	cmp	r5, #12
 800656a:	bf38      	it	cc
 800656c:	250c      	movcc	r5, #12
 800656e:	2d00      	cmp	r5, #0
 8006570:	4607      	mov	r7, r0
 8006572:	db01      	blt.n	8006578 <_malloc_r+0x1c>
 8006574:	42a9      	cmp	r1, r5
 8006576:	d905      	bls.n	8006584 <_malloc_r+0x28>
 8006578:	230c      	movs	r3, #12
 800657a:	2600      	movs	r6, #0
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	4630      	mov	r0, r6
 8006580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006584:	4e2e      	ldr	r6, [pc, #184]	; (8006640 <_malloc_r+0xe4>)
 8006586:	f000 f88d 	bl	80066a4 <__malloc_lock>
 800658a:	6833      	ldr	r3, [r6, #0]
 800658c:	461c      	mov	r4, r3
 800658e:	bb34      	cbnz	r4, 80065de <_malloc_r+0x82>
 8006590:	4629      	mov	r1, r5
 8006592:	4638      	mov	r0, r7
 8006594:	f7ff ffc2 	bl	800651c <sbrk_aligned>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	4604      	mov	r4, r0
 800659c:	d14d      	bne.n	800663a <_malloc_r+0xde>
 800659e:	6834      	ldr	r4, [r6, #0]
 80065a0:	4626      	mov	r6, r4
 80065a2:	2e00      	cmp	r6, #0
 80065a4:	d140      	bne.n	8006628 <_malloc_r+0xcc>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	4631      	mov	r1, r6
 80065aa:	4638      	mov	r0, r7
 80065ac:	eb04 0803 	add.w	r8, r4, r3
 80065b0:	f000 f848 	bl	8006644 <_sbrk_r>
 80065b4:	4580      	cmp	r8, r0
 80065b6:	d13a      	bne.n	800662e <_malloc_r+0xd2>
 80065b8:	6821      	ldr	r1, [r4, #0]
 80065ba:	3503      	adds	r5, #3
 80065bc:	1a6d      	subs	r5, r5, r1
 80065be:	f025 0503 	bic.w	r5, r5, #3
 80065c2:	3508      	adds	r5, #8
 80065c4:	2d0c      	cmp	r5, #12
 80065c6:	bf38      	it	cc
 80065c8:	250c      	movcc	r5, #12
 80065ca:	4638      	mov	r0, r7
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7ff ffa5 	bl	800651c <sbrk_aligned>
 80065d2:	3001      	adds	r0, #1
 80065d4:	d02b      	beq.n	800662e <_malloc_r+0xd2>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	442b      	add	r3, r5
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	e00e      	b.n	80065fc <_malloc_r+0xa0>
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	1b52      	subs	r2, r2, r5
 80065e2:	d41e      	bmi.n	8006622 <_malloc_r+0xc6>
 80065e4:	2a0b      	cmp	r2, #11
 80065e6:	d916      	bls.n	8006616 <_malloc_r+0xba>
 80065e8:	1961      	adds	r1, r4, r5
 80065ea:	42a3      	cmp	r3, r4
 80065ec:	6025      	str	r5, [r4, #0]
 80065ee:	bf18      	it	ne
 80065f0:	6059      	strne	r1, [r3, #4]
 80065f2:	6863      	ldr	r3, [r4, #4]
 80065f4:	bf08      	it	eq
 80065f6:	6031      	streq	r1, [r6, #0]
 80065f8:	5162      	str	r2, [r4, r5]
 80065fa:	604b      	str	r3, [r1, #4]
 80065fc:	4638      	mov	r0, r7
 80065fe:	f104 060b 	add.w	r6, r4, #11
 8006602:	f000 f855 	bl	80066b0 <__malloc_unlock>
 8006606:	f026 0607 	bic.w	r6, r6, #7
 800660a:	1d23      	adds	r3, r4, #4
 800660c:	1af2      	subs	r2, r6, r3
 800660e:	d0b6      	beq.n	800657e <_malloc_r+0x22>
 8006610:	1b9b      	subs	r3, r3, r6
 8006612:	50a3      	str	r3, [r4, r2]
 8006614:	e7b3      	b.n	800657e <_malloc_r+0x22>
 8006616:	6862      	ldr	r2, [r4, #4]
 8006618:	42a3      	cmp	r3, r4
 800661a:	bf0c      	ite	eq
 800661c:	6032      	streq	r2, [r6, #0]
 800661e:	605a      	strne	r2, [r3, #4]
 8006620:	e7ec      	b.n	80065fc <_malloc_r+0xa0>
 8006622:	4623      	mov	r3, r4
 8006624:	6864      	ldr	r4, [r4, #4]
 8006626:	e7b2      	b.n	800658e <_malloc_r+0x32>
 8006628:	4634      	mov	r4, r6
 800662a:	6876      	ldr	r6, [r6, #4]
 800662c:	e7b9      	b.n	80065a2 <_malloc_r+0x46>
 800662e:	230c      	movs	r3, #12
 8006630:	4638      	mov	r0, r7
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	f000 f83c 	bl	80066b0 <__malloc_unlock>
 8006638:	e7a1      	b.n	800657e <_malloc_r+0x22>
 800663a:	6025      	str	r5, [r4, #0]
 800663c:	e7de      	b.n	80065fc <_malloc_r+0xa0>
 800663e:	bf00      	nop
 8006640:	20003d0c 	.word	0x20003d0c

08006644 <_sbrk_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	2300      	movs	r3, #0
 8006648:	4d05      	ldr	r5, [pc, #20]	; (8006660 <_sbrk_r+0x1c>)
 800664a:	4604      	mov	r4, r0
 800664c:	4608      	mov	r0, r1
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	f7ff fec0 	bl	80063d4 <_sbrk>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_sbrk_r+0x1a>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	b103      	cbz	r3, 800665e <_sbrk_r+0x1a>
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	20003d14 	.word	0x20003d14

08006664 <siprintf>:
 8006664:	b40e      	push	{r1, r2, r3}
 8006666:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800666a:	b500      	push	{lr}
 800666c:	b09c      	sub	sp, #112	; 0x70
 800666e:	ab1d      	add	r3, sp, #116	; 0x74
 8006670:	9002      	str	r0, [sp, #8]
 8006672:	9006      	str	r0, [sp, #24]
 8006674:	9107      	str	r1, [sp, #28]
 8006676:	9104      	str	r1, [sp, #16]
 8006678:	4808      	ldr	r0, [pc, #32]	; (800669c <siprintf+0x38>)
 800667a:	4909      	ldr	r1, [pc, #36]	; (80066a0 <siprintf+0x3c>)
 800667c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006680:	9105      	str	r1, [sp, #20]
 8006682:	6800      	ldr	r0, [r0, #0]
 8006684:	a902      	add	r1, sp, #8
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	f000 f8bc 	bl	8006804 <_svfiprintf_r>
 800668c:	2200      	movs	r2, #0
 800668e:	9b02      	ldr	r3, [sp, #8]
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	b01c      	add	sp, #112	; 0x70
 8006694:	f85d eb04 	ldr.w	lr, [sp], #4
 8006698:	b003      	add	sp, #12
 800669a:	4770      	bx	lr
 800669c:	20000020 	.word	0x20000020
 80066a0:	ffff0208 	.word	0xffff0208

080066a4 <__malloc_lock>:
 80066a4:	4801      	ldr	r0, [pc, #4]	; (80066ac <__malloc_lock+0x8>)
 80066a6:	f7ff bf21 	b.w	80064ec <__retarget_lock_acquire_recursive>
 80066aa:	bf00      	nop
 80066ac:	20003d08 	.word	0x20003d08

080066b0 <__malloc_unlock>:
 80066b0:	4801      	ldr	r0, [pc, #4]	; (80066b8 <__malloc_unlock+0x8>)
 80066b2:	f7ff bf1c 	b.w	80064ee <__retarget_lock_release_recursive>
 80066b6:	bf00      	nop
 80066b8:	20003d08 	.word	0x20003d08

080066bc <_free_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4605      	mov	r5, r0
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d040      	beq.n	8006746 <_free_r+0x8a>
 80066c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c8:	1f0c      	subs	r4, r1, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfb8      	it	lt
 80066ce:	18e4      	addlt	r4, r4, r3
 80066d0:	f7ff ffe8 	bl	80066a4 <__malloc_lock>
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <_free_r+0x8c>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	b933      	cbnz	r3, 80066e8 <_free_r+0x2c>
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	6014      	str	r4, [r2, #0]
 80066de:	4628      	mov	r0, r5
 80066e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e4:	f7ff bfe4 	b.w	80066b0 <__malloc_unlock>
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d908      	bls.n	80066fe <_free_r+0x42>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	1821      	adds	r1, r4, r0
 80066f0:	428b      	cmp	r3, r1
 80066f2:	bf01      	itttt	eq
 80066f4:	6819      	ldreq	r1, [r3, #0]
 80066f6:	685b      	ldreq	r3, [r3, #4]
 80066f8:	1809      	addeq	r1, r1, r0
 80066fa:	6021      	streq	r1, [r4, #0]
 80066fc:	e7ed      	b.n	80066da <_free_r+0x1e>
 80066fe:	461a      	mov	r2, r3
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	b10b      	cbz	r3, 8006708 <_free_r+0x4c>
 8006704:	42a3      	cmp	r3, r4
 8006706:	d9fa      	bls.n	80066fe <_free_r+0x42>
 8006708:	6811      	ldr	r1, [r2, #0]
 800670a:	1850      	adds	r0, r2, r1
 800670c:	42a0      	cmp	r0, r4
 800670e:	d10b      	bne.n	8006728 <_free_r+0x6c>
 8006710:	6820      	ldr	r0, [r4, #0]
 8006712:	4401      	add	r1, r0
 8006714:	1850      	adds	r0, r2, r1
 8006716:	4283      	cmp	r3, r0
 8006718:	6011      	str	r1, [r2, #0]
 800671a:	d1e0      	bne.n	80066de <_free_r+0x22>
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4401      	add	r1, r0
 8006722:	6011      	str	r1, [r2, #0]
 8006724:	6053      	str	r3, [r2, #4]
 8006726:	e7da      	b.n	80066de <_free_r+0x22>
 8006728:	d902      	bls.n	8006730 <_free_r+0x74>
 800672a:	230c      	movs	r3, #12
 800672c:	602b      	str	r3, [r5, #0]
 800672e:	e7d6      	b.n	80066de <_free_r+0x22>
 8006730:	6820      	ldr	r0, [r4, #0]
 8006732:	1821      	adds	r1, r4, r0
 8006734:	428b      	cmp	r3, r1
 8006736:	bf01      	itttt	eq
 8006738:	6819      	ldreq	r1, [r3, #0]
 800673a:	685b      	ldreq	r3, [r3, #4]
 800673c:	1809      	addeq	r1, r1, r0
 800673e:	6021      	streq	r1, [r4, #0]
 8006740:	6063      	str	r3, [r4, #4]
 8006742:	6054      	str	r4, [r2, #4]
 8006744:	e7cb      	b.n	80066de <_free_r+0x22>
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20003d0c 	.word	0x20003d0c

0800674c <__ssputs_r>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	688e      	ldr	r6, [r1, #8]
 8006752:	4682      	mov	sl, r0
 8006754:	429e      	cmp	r6, r3
 8006756:	460c      	mov	r4, r1
 8006758:	4690      	mov	r8, r2
 800675a:	461f      	mov	r7, r3
 800675c:	d838      	bhi.n	80067d0 <__ssputs_r+0x84>
 800675e:	898a      	ldrh	r2, [r1, #12]
 8006760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006764:	d032      	beq.n	80067cc <__ssputs_r+0x80>
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	6909      	ldr	r1, [r1, #16]
 800676a:	3301      	adds	r3, #1
 800676c:	eba5 0901 	sub.w	r9, r5, r1
 8006770:	6965      	ldr	r5, [r4, #20]
 8006772:	444b      	add	r3, r9
 8006774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800677c:	106d      	asrs	r5, r5, #1
 800677e:	429d      	cmp	r5, r3
 8006780:	bf38      	it	cc
 8006782:	461d      	movcc	r5, r3
 8006784:	0553      	lsls	r3, r2, #21
 8006786:	d531      	bpl.n	80067ec <__ssputs_r+0xa0>
 8006788:	4629      	mov	r1, r5
 800678a:	f7ff fee7 	bl	800655c <_malloc_r>
 800678e:	4606      	mov	r6, r0
 8006790:	b950      	cbnz	r0, 80067a8 <__ssputs_r+0x5c>
 8006792:	230c      	movs	r3, #12
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	f8ca 3000 	str.w	r3, [sl]
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a8:	464a      	mov	r2, r9
 80067aa:	6921      	ldr	r1, [r4, #16]
 80067ac:	f7ff fea0 	bl	80064f0 <memcpy>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	6126      	str	r6, [r4, #16]
 80067be:	444e      	add	r6, r9
 80067c0:	6026      	str	r6, [r4, #0]
 80067c2:	463e      	mov	r6, r7
 80067c4:	6165      	str	r5, [r4, #20]
 80067c6:	eba5 0509 	sub.w	r5, r5, r9
 80067ca:	60a5      	str	r5, [r4, #8]
 80067cc:	42be      	cmp	r6, r7
 80067ce:	d900      	bls.n	80067d2 <__ssputs_r+0x86>
 80067d0:	463e      	mov	r6, r7
 80067d2:	4632      	mov	r2, r6
 80067d4:	4641      	mov	r1, r8
 80067d6:	6820      	ldr	r0, [r4, #0]
 80067d8:	f000 fab8 	bl	8006d4c <memmove>
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	2000      	movs	r0, #0
 80067e0:	1b9b      	subs	r3, r3, r6
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	4433      	add	r3, r6
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	e7db      	b.n	80067a4 <__ssputs_r+0x58>
 80067ec:	462a      	mov	r2, r5
 80067ee:	f000 fac7 	bl	8006d80 <_realloc_r>
 80067f2:	4606      	mov	r6, r0
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d1e1      	bne.n	80067bc <__ssputs_r+0x70>
 80067f8:	4650      	mov	r0, sl
 80067fa:	6921      	ldr	r1, [r4, #16]
 80067fc:	f7ff ff5e 	bl	80066bc <_free_r>
 8006800:	e7c7      	b.n	8006792 <__ssputs_r+0x46>
	...

08006804 <_svfiprintf_r>:
 8006804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006808:	4698      	mov	r8, r3
 800680a:	898b      	ldrh	r3, [r1, #12]
 800680c:	4607      	mov	r7, r0
 800680e:	061b      	lsls	r3, r3, #24
 8006810:	460d      	mov	r5, r1
 8006812:	4614      	mov	r4, r2
 8006814:	b09d      	sub	sp, #116	; 0x74
 8006816:	d50e      	bpl.n	8006836 <_svfiprintf_r+0x32>
 8006818:	690b      	ldr	r3, [r1, #16]
 800681a:	b963      	cbnz	r3, 8006836 <_svfiprintf_r+0x32>
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	f7ff fe9d 	bl	800655c <_malloc_r>
 8006822:	6028      	str	r0, [r5, #0]
 8006824:	6128      	str	r0, [r5, #16]
 8006826:	b920      	cbnz	r0, 8006832 <_svfiprintf_r+0x2e>
 8006828:	230c      	movs	r3, #12
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	e0d1      	b.n	80069d6 <_svfiprintf_r+0x1d2>
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	616b      	str	r3, [r5, #20]
 8006836:	2300      	movs	r3, #0
 8006838:	9309      	str	r3, [sp, #36]	; 0x24
 800683a:	2320      	movs	r3, #32
 800683c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006840:	2330      	movs	r3, #48	; 0x30
 8006842:	f04f 0901 	mov.w	r9, #1
 8006846:	f8cd 800c 	str.w	r8, [sp, #12]
 800684a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80069f0 <_svfiprintf_r+0x1ec>
 800684e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006852:	4623      	mov	r3, r4
 8006854:	469a      	mov	sl, r3
 8006856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800685a:	b10a      	cbz	r2, 8006860 <_svfiprintf_r+0x5c>
 800685c:	2a25      	cmp	r2, #37	; 0x25
 800685e:	d1f9      	bne.n	8006854 <_svfiprintf_r+0x50>
 8006860:	ebba 0b04 	subs.w	fp, sl, r4
 8006864:	d00b      	beq.n	800687e <_svfiprintf_r+0x7a>
 8006866:	465b      	mov	r3, fp
 8006868:	4622      	mov	r2, r4
 800686a:	4629      	mov	r1, r5
 800686c:	4638      	mov	r0, r7
 800686e:	f7ff ff6d 	bl	800674c <__ssputs_r>
 8006872:	3001      	adds	r0, #1
 8006874:	f000 80aa 	beq.w	80069cc <_svfiprintf_r+0x1c8>
 8006878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800687a:	445a      	add	r2, fp
 800687c:	9209      	str	r2, [sp, #36]	; 0x24
 800687e:	f89a 3000 	ldrb.w	r3, [sl]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a2 	beq.w	80069cc <_svfiprintf_r+0x1c8>
 8006888:	2300      	movs	r3, #0
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006892:	f10a 0a01 	add.w	sl, sl, #1
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	9307      	str	r3, [sp, #28]
 800689a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800689e:	931a      	str	r3, [sp, #104]	; 0x68
 80068a0:	4654      	mov	r4, sl
 80068a2:	2205      	movs	r2, #5
 80068a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a8:	4851      	ldr	r0, [pc, #324]	; (80069f0 <_svfiprintf_r+0x1ec>)
 80068aa:	f000 fa41 	bl	8006d30 <memchr>
 80068ae:	9a04      	ldr	r2, [sp, #16]
 80068b0:	b9d8      	cbnz	r0, 80068ea <_svfiprintf_r+0xe6>
 80068b2:	06d0      	lsls	r0, r2, #27
 80068b4:	bf44      	itt	mi
 80068b6:	2320      	movmi	r3, #32
 80068b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068bc:	0711      	lsls	r1, r2, #28
 80068be:	bf44      	itt	mi
 80068c0:	232b      	movmi	r3, #43	; 0x2b
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ca:	2b2a      	cmp	r3, #42	; 0x2a
 80068cc:	d015      	beq.n	80068fa <_svfiprintf_r+0xf6>
 80068ce:	4654      	mov	r4, sl
 80068d0:	2000      	movs	r0, #0
 80068d2:	f04f 0c0a 	mov.w	ip, #10
 80068d6:	9a07      	ldr	r2, [sp, #28]
 80068d8:	4621      	mov	r1, r4
 80068da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068de:	3b30      	subs	r3, #48	; 0x30
 80068e0:	2b09      	cmp	r3, #9
 80068e2:	d94e      	bls.n	8006982 <_svfiprintf_r+0x17e>
 80068e4:	b1b0      	cbz	r0, 8006914 <_svfiprintf_r+0x110>
 80068e6:	9207      	str	r2, [sp, #28]
 80068e8:	e014      	b.n	8006914 <_svfiprintf_r+0x110>
 80068ea:	eba0 0308 	sub.w	r3, r0, r8
 80068ee:	fa09 f303 	lsl.w	r3, r9, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	46a2      	mov	sl, r4
 80068f6:	9304      	str	r3, [sp, #16]
 80068f8:	e7d2      	b.n	80068a0 <_svfiprintf_r+0x9c>
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	1d19      	adds	r1, r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	9103      	str	r1, [sp, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	bfbb      	ittet	lt
 8006906:	425b      	neglt	r3, r3
 8006908:	f042 0202 	orrlt.w	r2, r2, #2
 800690c:	9307      	strge	r3, [sp, #28]
 800690e:	9307      	strlt	r3, [sp, #28]
 8006910:	bfb8      	it	lt
 8006912:	9204      	strlt	r2, [sp, #16]
 8006914:	7823      	ldrb	r3, [r4, #0]
 8006916:	2b2e      	cmp	r3, #46	; 0x2e
 8006918:	d10c      	bne.n	8006934 <_svfiprintf_r+0x130>
 800691a:	7863      	ldrb	r3, [r4, #1]
 800691c:	2b2a      	cmp	r3, #42	; 0x2a
 800691e:	d135      	bne.n	800698c <_svfiprintf_r+0x188>
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	3402      	adds	r4, #2
 8006924:	1d1a      	adds	r2, r3, #4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	9203      	str	r2, [sp, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfb8      	it	lt
 800692e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006932:	9305      	str	r3, [sp, #20]
 8006934:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80069f4 <_svfiprintf_r+0x1f0>
 8006938:	2203      	movs	r2, #3
 800693a:	4650      	mov	r0, sl
 800693c:	7821      	ldrb	r1, [r4, #0]
 800693e:	f000 f9f7 	bl	8006d30 <memchr>
 8006942:	b140      	cbz	r0, 8006956 <_svfiprintf_r+0x152>
 8006944:	2340      	movs	r3, #64	; 0x40
 8006946:	eba0 000a 	sub.w	r0, r0, sl
 800694a:	fa03 f000 	lsl.w	r0, r3, r0
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	3401      	adds	r4, #1
 8006952:	4303      	orrs	r3, r0
 8006954:	9304      	str	r3, [sp, #16]
 8006956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695a:	2206      	movs	r2, #6
 800695c:	4826      	ldr	r0, [pc, #152]	; (80069f8 <_svfiprintf_r+0x1f4>)
 800695e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006962:	f000 f9e5 	bl	8006d30 <memchr>
 8006966:	2800      	cmp	r0, #0
 8006968:	d038      	beq.n	80069dc <_svfiprintf_r+0x1d8>
 800696a:	4b24      	ldr	r3, [pc, #144]	; (80069fc <_svfiprintf_r+0x1f8>)
 800696c:	bb1b      	cbnz	r3, 80069b6 <_svfiprintf_r+0x1b2>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	3307      	adds	r3, #7
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	3308      	adds	r3, #8
 8006978:	9303      	str	r3, [sp, #12]
 800697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697c:	4433      	add	r3, r6
 800697e:	9309      	str	r3, [sp, #36]	; 0x24
 8006980:	e767      	b.n	8006852 <_svfiprintf_r+0x4e>
 8006982:	460c      	mov	r4, r1
 8006984:	2001      	movs	r0, #1
 8006986:	fb0c 3202 	mla	r2, ip, r2, r3
 800698a:	e7a5      	b.n	80068d8 <_svfiprintf_r+0xd4>
 800698c:	2300      	movs	r3, #0
 800698e:	f04f 0c0a 	mov.w	ip, #10
 8006992:	4619      	mov	r1, r3
 8006994:	3401      	adds	r4, #1
 8006996:	9305      	str	r3, [sp, #20]
 8006998:	4620      	mov	r0, r4
 800699a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800699e:	3a30      	subs	r2, #48	; 0x30
 80069a0:	2a09      	cmp	r2, #9
 80069a2:	d903      	bls.n	80069ac <_svfiprintf_r+0x1a8>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0c5      	beq.n	8006934 <_svfiprintf_r+0x130>
 80069a8:	9105      	str	r1, [sp, #20]
 80069aa:	e7c3      	b.n	8006934 <_svfiprintf_r+0x130>
 80069ac:	4604      	mov	r4, r0
 80069ae:	2301      	movs	r3, #1
 80069b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b4:	e7f0      	b.n	8006998 <_svfiprintf_r+0x194>
 80069b6:	ab03      	add	r3, sp, #12
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	462a      	mov	r2, r5
 80069bc:	4638      	mov	r0, r7
 80069be:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <_svfiprintf_r+0x1fc>)
 80069c0:	a904      	add	r1, sp, #16
 80069c2:	f3af 8000 	nop.w
 80069c6:	1c42      	adds	r2, r0, #1
 80069c8:	4606      	mov	r6, r0
 80069ca:	d1d6      	bne.n	800697a <_svfiprintf_r+0x176>
 80069cc:	89ab      	ldrh	r3, [r5, #12]
 80069ce:	065b      	lsls	r3, r3, #25
 80069d0:	f53f af2c 	bmi.w	800682c <_svfiprintf_r+0x28>
 80069d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069d6:	b01d      	add	sp, #116	; 0x74
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	ab03      	add	r3, sp, #12
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	462a      	mov	r2, r5
 80069e2:	4638      	mov	r0, r7
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <_svfiprintf_r+0x1fc>)
 80069e6:	a904      	add	r1, sp, #16
 80069e8:	f000 f87c 	bl	8006ae4 <_printf_i>
 80069ec:	e7eb      	b.n	80069c6 <_svfiprintf_r+0x1c2>
 80069ee:	bf00      	nop
 80069f0:	08008274 	.word	0x08008274
 80069f4:	0800827a 	.word	0x0800827a
 80069f8:	0800827e 	.word	0x0800827e
 80069fc:	00000000 	.word	0x00000000
 8006a00:	0800674d 	.word	0x0800674d

08006a04 <_printf_common>:
 8006a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	4616      	mov	r6, r2
 8006a0a:	4699      	mov	r9, r3
 8006a0c:	688a      	ldr	r2, [r1, #8]
 8006a0e:	690b      	ldr	r3, [r1, #16]
 8006a10:	4607      	mov	r7, r0
 8006a12:	4293      	cmp	r3, r2
 8006a14:	bfb8      	it	lt
 8006a16:	4613      	movlt	r3, r2
 8006a18:	6033      	str	r3, [r6, #0]
 8006a1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a1e:	460c      	mov	r4, r1
 8006a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a24:	b10a      	cbz	r2, 8006a2a <_printf_common+0x26>
 8006a26:	3301      	adds	r3, #1
 8006a28:	6033      	str	r3, [r6, #0]
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	0699      	lsls	r1, r3, #26
 8006a2e:	bf42      	ittt	mi
 8006a30:	6833      	ldrmi	r3, [r6, #0]
 8006a32:	3302      	addmi	r3, #2
 8006a34:	6033      	strmi	r3, [r6, #0]
 8006a36:	6825      	ldr	r5, [r4, #0]
 8006a38:	f015 0506 	ands.w	r5, r5, #6
 8006a3c:	d106      	bne.n	8006a4c <_printf_common+0x48>
 8006a3e:	f104 0a19 	add.w	sl, r4, #25
 8006a42:	68e3      	ldr	r3, [r4, #12]
 8006a44:	6832      	ldr	r2, [r6, #0]
 8006a46:	1a9b      	subs	r3, r3, r2
 8006a48:	42ab      	cmp	r3, r5
 8006a4a:	dc28      	bgt.n	8006a9e <_printf_common+0x9a>
 8006a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a50:	1e13      	subs	r3, r2, #0
 8006a52:	6822      	ldr	r2, [r4, #0]
 8006a54:	bf18      	it	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	0692      	lsls	r2, r2, #26
 8006a5a:	d42d      	bmi.n	8006ab8 <_printf_common+0xb4>
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a64:	47c0      	blx	r8
 8006a66:	3001      	adds	r0, #1
 8006a68:	d020      	beq.n	8006aac <_printf_common+0xa8>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	68e5      	ldr	r5, [r4, #12]
 8006a6e:	f003 0306 	and.w	r3, r3, #6
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	bf18      	it	ne
 8006a76:	2500      	movne	r5, #0
 8006a78:	6832      	ldr	r2, [r6, #0]
 8006a7a:	f04f 0600 	mov.w	r6, #0
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	bf08      	it	eq
 8006a82:	1aad      	subeq	r5, r5, r2
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	bf08      	it	eq
 8006a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	bfc4      	itt	gt
 8006a90:	1a9b      	subgt	r3, r3, r2
 8006a92:	18ed      	addgt	r5, r5, r3
 8006a94:	341a      	adds	r4, #26
 8006a96:	42b5      	cmp	r5, r6
 8006a98:	d11a      	bne.n	8006ad0 <_printf_common+0xcc>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e008      	b.n	8006ab0 <_printf_common+0xac>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	47c0      	blx	r8
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d103      	bne.n	8006ab4 <_printf_common+0xb0>
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	3501      	adds	r5, #1
 8006ab6:	e7c4      	b.n	8006a42 <_printf_common+0x3e>
 8006ab8:	2030      	movs	r0, #48	; 0x30
 8006aba:	18e1      	adds	r1, r4, r3
 8006abc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ac6:	4422      	add	r2, r4
 8006ac8:	3302      	adds	r3, #2
 8006aca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ace:	e7c5      	b.n	8006a5c <_printf_common+0x58>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	47c0      	blx	r8
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0e6      	beq.n	8006aac <_printf_common+0xa8>
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7d9      	b.n	8006a96 <_printf_common+0x92>
	...

08006ae4 <_printf_i>:
 8006ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	7e0f      	ldrb	r7, [r1, #24]
 8006aea:	4691      	mov	r9, r2
 8006aec:	2f78      	cmp	r7, #120	; 0x78
 8006aee:	4680      	mov	r8, r0
 8006af0:	460c      	mov	r4, r1
 8006af2:	469a      	mov	sl, r3
 8006af4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006afa:	d807      	bhi.n	8006b0c <_printf_i+0x28>
 8006afc:	2f62      	cmp	r7, #98	; 0x62
 8006afe:	d80a      	bhi.n	8006b16 <_printf_i+0x32>
 8006b00:	2f00      	cmp	r7, #0
 8006b02:	f000 80d9 	beq.w	8006cb8 <_printf_i+0x1d4>
 8006b06:	2f58      	cmp	r7, #88	; 0x58
 8006b08:	f000 80a4 	beq.w	8006c54 <_printf_i+0x170>
 8006b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b14:	e03a      	b.n	8006b8c <_printf_i+0xa8>
 8006b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b1a:	2b15      	cmp	r3, #21
 8006b1c:	d8f6      	bhi.n	8006b0c <_printf_i+0x28>
 8006b1e:	a101      	add	r1, pc, #4	; (adr r1, 8006b24 <_printf_i+0x40>)
 8006b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006b91 	.word	0x08006b91
 8006b2c:	08006b0d 	.word	0x08006b0d
 8006b30:	08006b0d 	.word	0x08006b0d
 8006b34:	08006b0d 	.word	0x08006b0d
 8006b38:	08006b0d 	.word	0x08006b0d
 8006b3c:	08006b91 	.word	0x08006b91
 8006b40:	08006b0d 	.word	0x08006b0d
 8006b44:	08006b0d 	.word	0x08006b0d
 8006b48:	08006b0d 	.word	0x08006b0d
 8006b4c:	08006b0d 	.word	0x08006b0d
 8006b50:	08006c9f 	.word	0x08006c9f
 8006b54:	08006bc1 	.word	0x08006bc1
 8006b58:	08006c81 	.word	0x08006c81
 8006b5c:	08006b0d 	.word	0x08006b0d
 8006b60:	08006b0d 	.word	0x08006b0d
 8006b64:	08006cc1 	.word	0x08006cc1
 8006b68:	08006b0d 	.word	0x08006b0d
 8006b6c:	08006bc1 	.word	0x08006bc1
 8006b70:	08006b0d 	.word	0x08006b0d
 8006b74:	08006b0d 	.word	0x08006b0d
 8006b78:	08006c89 	.word	0x08006c89
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	1d1a      	adds	r2, r3, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	602a      	str	r2, [r5, #0]
 8006b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0a4      	b.n	8006cda <_printf_i+0x1f6>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	6829      	ldr	r1, [r5, #0]
 8006b94:	0606      	lsls	r6, r0, #24
 8006b96:	f101 0304 	add.w	r3, r1, #4
 8006b9a:	d50a      	bpl.n	8006bb2 <_printf_i+0xce>
 8006b9c:	680e      	ldr	r6, [r1, #0]
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	da03      	bge.n	8006bac <_printf_i+0xc8>
 8006ba4:	232d      	movs	r3, #45	; 0x2d
 8006ba6:	4276      	negs	r6, r6
 8006ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bac:	230a      	movs	r3, #10
 8006bae:	485e      	ldr	r0, [pc, #376]	; (8006d28 <_printf_i+0x244>)
 8006bb0:	e019      	b.n	8006be6 <_printf_i+0x102>
 8006bb2:	680e      	ldr	r6, [r1, #0]
 8006bb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bb8:	602b      	str	r3, [r5, #0]
 8006bba:	bf18      	it	ne
 8006bbc:	b236      	sxthne	r6, r6
 8006bbe:	e7ef      	b.n	8006ba0 <_printf_i+0xbc>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	1d19      	adds	r1, r3, #4
 8006bc6:	6029      	str	r1, [r5, #0]
 8006bc8:	0601      	lsls	r1, r0, #24
 8006bca:	d501      	bpl.n	8006bd0 <_printf_i+0xec>
 8006bcc:	681e      	ldr	r6, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <_printf_i+0xf2>
 8006bd0:	0646      	lsls	r6, r0, #25
 8006bd2:	d5fb      	bpl.n	8006bcc <_printf_i+0xe8>
 8006bd4:	881e      	ldrh	r6, [r3, #0]
 8006bd6:	2f6f      	cmp	r7, #111	; 0x6f
 8006bd8:	bf0c      	ite	eq
 8006bda:	2308      	moveq	r3, #8
 8006bdc:	230a      	movne	r3, #10
 8006bde:	4852      	ldr	r0, [pc, #328]	; (8006d28 <_printf_i+0x244>)
 8006be0:	2100      	movs	r1, #0
 8006be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006be6:	6865      	ldr	r5, [r4, #4]
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	bfa8      	it	ge
 8006bec:	6821      	ldrge	r1, [r4, #0]
 8006bee:	60a5      	str	r5, [r4, #8]
 8006bf0:	bfa4      	itt	ge
 8006bf2:	f021 0104 	bicge.w	r1, r1, #4
 8006bf6:	6021      	strge	r1, [r4, #0]
 8006bf8:	b90e      	cbnz	r6, 8006bfe <_printf_i+0x11a>
 8006bfa:	2d00      	cmp	r5, #0
 8006bfc:	d04d      	beq.n	8006c9a <_printf_i+0x1b6>
 8006bfe:	4615      	mov	r5, r2
 8006c00:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c04:	fb03 6711 	mls	r7, r3, r1, r6
 8006c08:	5dc7      	ldrb	r7, [r0, r7]
 8006c0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c0e:	4637      	mov	r7, r6
 8006c10:	42bb      	cmp	r3, r7
 8006c12:	460e      	mov	r6, r1
 8006c14:	d9f4      	bls.n	8006c00 <_printf_i+0x11c>
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d10b      	bne.n	8006c32 <_printf_i+0x14e>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	07de      	lsls	r6, r3, #31
 8006c1e:	d508      	bpl.n	8006c32 <_printf_i+0x14e>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	6861      	ldr	r1, [r4, #4]
 8006c24:	4299      	cmp	r1, r3
 8006c26:	bfde      	ittt	le
 8006c28:	2330      	movle	r3, #48	; 0x30
 8006c2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c32:	1b52      	subs	r2, r2, r5
 8006c34:	6122      	str	r2, [r4, #16]
 8006c36:	464b      	mov	r3, r9
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	f8cd a000 	str.w	sl, [sp]
 8006c40:	aa03      	add	r2, sp, #12
 8006c42:	f7ff fedf 	bl	8006a04 <_printf_common>
 8006c46:	3001      	adds	r0, #1
 8006c48:	d14c      	bne.n	8006ce4 <_printf_i+0x200>
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	b004      	add	sp, #16
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	4834      	ldr	r0, [pc, #208]	; (8006d28 <_printf_i+0x244>)
 8006c56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c5a:	6829      	ldr	r1, [r5, #0]
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c62:	6029      	str	r1, [r5, #0]
 8006c64:	061d      	lsls	r5, r3, #24
 8006c66:	d514      	bpl.n	8006c92 <_printf_i+0x1ae>
 8006c68:	07df      	lsls	r7, r3, #31
 8006c6a:	bf44      	itt	mi
 8006c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006c70:	6023      	strmi	r3, [r4, #0]
 8006c72:	b91e      	cbnz	r6, 8006c7c <_printf_i+0x198>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	f023 0320 	bic.w	r3, r3, #32
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	e7af      	b.n	8006be0 <_printf_i+0xfc>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	f043 0320 	orr.w	r3, r3, #32
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	2378      	movs	r3, #120	; 0x78
 8006c8a:	4828      	ldr	r0, [pc, #160]	; (8006d2c <_printf_i+0x248>)
 8006c8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c90:	e7e3      	b.n	8006c5a <_printf_i+0x176>
 8006c92:	0659      	lsls	r1, r3, #25
 8006c94:	bf48      	it	mi
 8006c96:	b2b6      	uxthmi	r6, r6
 8006c98:	e7e6      	b.n	8006c68 <_printf_i+0x184>
 8006c9a:	4615      	mov	r5, r2
 8006c9c:	e7bb      	b.n	8006c16 <_printf_i+0x132>
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	6826      	ldr	r6, [r4, #0]
 8006ca2:	1d18      	adds	r0, r3, #4
 8006ca4:	6961      	ldr	r1, [r4, #20]
 8006ca6:	6028      	str	r0, [r5, #0]
 8006ca8:	0635      	lsls	r5, r6, #24
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	d501      	bpl.n	8006cb2 <_printf_i+0x1ce>
 8006cae:	6019      	str	r1, [r3, #0]
 8006cb0:	e002      	b.n	8006cb8 <_printf_i+0x1d4>
 8006cb2:	0670      	lsls	r0, r6, #25
 8006cb4:	d5fb      	bpl.n	8006cae <_printf_i+0x1ca>
 8006cb6:	8019      	strh	r1, [r3, #0]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4615      	mov	r5, r2
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	e7ba      	b.n	8006c36 <_printf_i+0x152>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	1d1a      	adds	r2, r3, #4
 8006cc6:	602a      	str	r2, [r5, #0]
 8006cc8:	681d      	ldr	r5, [r3, #0]
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 f82f 	bl	8006d30 <memchr>
 8006cd2:	b108      	cbz	r0, 8006cd8 <_printf_i+0x1f4>
 8006cd4:	1b40      	subs	r0, r0, r5
 8006cd6:	6060      	str	r0, [r4, #4]
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce2:	e7a8      	b.n	8006c36 <_printf_i+0x152>
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4640      	mov	r0, r8
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	47d0      	blx	sl
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d0ab      	beq.n	8006c4a <_printf_i+0x166>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	079b      	lsls	r3, r3, #30
 8006cf6:	d413      	bmi.n	8006d20 <_printf_i+0x23c>
 8006cf8:	68e0      	ldr	r0, [r4, #12]
 8006cfa:	9b03      	ldr	r3, [sp, #12]
 8006cfc:	4298      	cmp	r0, r3
 8006cfe:	bfb8      	it	lt
 8006d00:	4618      	movlt	r0, r3
 8006d02:	e7a4      	b.n	8006c4e <_printf_i+0x16a>
 8006d04:	2301      	movs	r3, #1
 8006d06:	4632      	mov	r2, r6
 8006d08:	4649      	mov	r1, r9
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	47d0      	blx	sl
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d09b      	beq.n	8006c4a <_printf_i+0x166>
 8006d12:	3501      	adds	r5, #1
 8006d14:	68e3      	ldr	r3, [r4, #12]
 8006d16:	9903      	ldr	r1, [sp, #12]
 8006d18:	1a5b      	subs	r3, r3, r1
 8006d1a:	42ab      	cmp	r3, r5
 8006d1c:	dcf2      	bgt.n	8006d04 <_printf_i+0x220>
 8006d1e:	e7eb      	b.n	8006cf8 <_printf_i+0x214>
 8006d20:	2500      	movs	r5, #0
 8006d22:	f104 0619 	add.w	r6, r4, #25
 8006d26:	e7f5      	b.n	8006d14 <_printf_i+0x230>
 8006d28:	08008285 	.word	0x08008285
 8006d2c:	08008296 	.word	0x08008296

08006d30 <memchr>:
 8006d30:	4603      	mov	r3, r0
 8006d32:	b510      	push	{r4, lr}
 8006d34:	b2c9      	uxtb	r1, r1
 8006d36:	4402      	add	r2, r0
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	d101      	bne.n	8006d42 <memchr+0x12>
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e003      	b.n	8006d4a <memchr+0x1a>
 8006d42:	7804      	ldrb	r4, [r0, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	428c      	cmp	r4, r1
 8006d48:	d1f6      	bne.n	8006d38 <memchr+0x8>
 8006d4a:	bd10      	pop	{r4, pc}

08006d4c <memmove>:
 8006d4c:	4288      	cmp	r0, r1
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	eb01 0402 	add.w	r4, r1, r2
 8006d54:	d902      	bls.n	8006d5c <memmove+0x10>
 8006d56:	4284      	cmp	r4, r0
 8006d58:	4623      	mov	r3, r4
 8006d5a:	d807      	bhi.n	8006d6c <memmove+0x20>
 8006d5c:	1e43      	subs	r3, r0, #1
 8006d5e:	42a1      	cmp	r1, r4
 8006d60:	d008      	beq.n	8006d74 <memmove+0x28>
 8006d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d6a:	e7f8      	b.n	8006d5e <memmove+0x12>
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	4402      	add	r2, r0
 8006d70:	428a      	cmp	r2, r1
 8006d72:	d100      	bne.n	8006d76 <memmove+0x2a>
 8006d74:	bd10      	pop	{r4, pc}
 8006d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d7e:	e7f7      	b.n	8006d70 <memmove+0x24>

08006d80 <_realloc_r>:
 8006d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d84:	4680      	mov	r8, r0
 8006d86:	4614      	mov	r4, r2
 8006d88:	460e      	mov	r6, r1
 8006d8a:	b921      	cbnz	r1, 8006d96 <_realloc_r+0x16>
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d92:	f7ff bbe3 	b.w	800655c <_malloc_r>
 8006d96:	b92a      	cbnz	r2, 8006da4 <_realloc_r+0x24>
 8006d98:	f7ff fc90 	bl	80066bc <_free_r>
 8006d9c:	4625      	mov	r5, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da4:	f000 f81b 	bl	8006dde <_malloc_usable_size_r>
 8006da8:	4284      	cmp	r4, r0
 8006daa:	4607      	mov	r7, r0
 8006dac:	d802      	bhi.n	8006db4 <_realloc_r+0x34>
 8006dae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006db2:	d812      	bhi.n	8006dda <_realloc_r+0x5a>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4640      	mov	r0, r8
 8006db8:	f7ff fbd0 	bl	800655c <_malloc_r>
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d0ed      	beq.n	8006d9e <_realloc_r+0x1e>
 8006dc2:	42bc      	cmp	r4, r7
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	bf28      	it	cs
 8006dca:	463a      	movcs	r2, r7
 8006dcc:	f7ff fb90 	bl	80064f0 <memcpy>
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	f7ff fc72 	bl	80066bc <_free_r>
 8006dd8:	e7e1      	b.n	8006d9e <_realloc_r+0x1e>
 8006dda:	4635      	mov	r5, r6
 8006ddc:	e7df      	b.n	8006d9e <_realloc_r+0x1e>

08006dde <_malloc_usable_size_r>:
 8006dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de2:	1f18      	subs	r0, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bfbc      	itt	lt
 8006de8:	580b      	ldrlt	r3, [r1, r0]
 8006dea:	18c0      	addlt	r0, r0, r3
 8006dec:	4770      	bx	lr
	...

08006df0 <_init>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	bf00      	nop
 8006df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df6:	bc08      	pop	{r3}
 8006df8:	469e      	mov	lr, r3
 8006dfa:	4770      	bx	lr

08006dfc <_fini>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr
