
expl_tool_h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b07c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067f0  0801b320  0801b320  0001c320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08021b10  08021b10  00022b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08021b18  08021b18  00022b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08021b1c  08021b1c  00022b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000394  24000000  08021b20  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002e94  24000394  08021eb4  00023394  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003228  08021eb4  00024228  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00023394  2**0
                  CONTENTS, READONLY
 10 .debug_info   00061563  00000000  00000000  000233c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000cc1a  00000000  00000000  00084925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002870  00000000  00000000  00091540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001044  00000000  00000000  00093db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba8d  00000000  00000000  00094df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a29c  00000000  00000000  000d0881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174fa5  00000000  00000000  0010ab1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000008f  00000000  00000000  0027fac2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a894  00000000  00000000  0027fb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  0028a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00024fe1  00000000  00000000  0028a449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00005358  00000000  00000000  002af42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000394 	.word	0x24000394
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b304 	.word	0x0801b304

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000398 	.word	0x24000398
 80002dc:	0801b304 	.word	0x0801b304

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__gedf2>:
 8000728:	f04f 3cff 	mov.w	ip, #4294967295
 800072c:	e006      	b.n	800073c <__cmpdf2+0x4>
 800072e:	bf00      	nop

08000730 <__ledf2>:
 8000730:	f04f 0c01 	mov.w	ip, #1
 8000734:	e002      	b.n	800073c <__cmpdf2+0x4>
 8000736:	bf00      	nop

08000738 <__cmpdf2>:
 8000738:	f04f 0c01 	mov.w	ip, #1
 800073c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000740:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000744:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000748:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000752:	d01b      	beq.n	800078c <__cmpdf2+0x54>
 8000754:	b001      	add	sp, #4
 8000756:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800075a:	bf0c      	ite	eq
 800075c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000760:	ea91 0f03 	teqne	r1, r3
 8000764:	bf02      	ittt	eq
 8000766:	ea90 0f02 	teqeq	r0, r2
 800076a:	2000      	moveq	r0, #0
 800076c:	4770      	bxeq	lr
 800076e:	f110 0f00 	cmn.w	r0, #0
 8000772:	ea91 0f03 	teq	r1, r3
 8000776:	bf58      	it	pl
 8000778:	4299      	cmppl	r1, r3
 800077a:	bf08      	it	eq
 800077c:	4290      	cmpeq	r0, r2
 800077e:	bf2c      	ite	cs
 8000780:	17d8      	asrcs	r0, r3, #31
 8000782:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000786:	f040 0001 	orr.w	r0, r0, #1
 800078a:	4770      	bx	lr
 800078c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000790:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000794:	d102      	bne.n	800079c <__cmpdf2+0x64>
 8000796:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800079a:	d107      	bne.n	80007ac <__cmpdf2+0x74>
 800079c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a4:	d1d6      	bne.n	8000754 <__cmpdf2+0x1c>
 80007a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007aa:	d0d3      	beq.n	8000754 <__cmpdf2+0x1c>
 80007ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <__aeabi_cdrcmple>:
 80007b4:	4684      	mov	ip, r0
 80007b6:	4610      	mov	r0, r2
 80007b8:	4662      	mov	r2, ip
 80007ba:	468c      	mov	ip, r1
 80007bc:	4619      	mov	r1, r3
 80007be:	4663      	mov	r3, ip
 80007c0:	e000      	b.n	80007c4 <__aeabi_cdcmpeq>
 80007c2:	bf00      	nop

080007c4 <__aeabi_cdcmpeq>:
 80007c4:	b501      	push	{r0, lr}
 80007c6:	f7ff ffb7 	bl	8000738 <__cmpdf2>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	bf48      	it	mi
 80007ce:	f110 0f00 	cmnmi.w	r0, #0
 80007d2:	bd01      	pop	{r0, pc}

080007d4 <__aeabi_dcmpeq>:
 80007d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007d8:	f7ff fff4 	bl	80007c4 <__aeabi_cdcmpeq>
 80007dc:	bf0c      	ite	eq
 80007de:	2001      	moveq	r0, #1
 80007e0:	2000      	movne	r0, #0
 80007e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007e6:	bf00      	nop

080007e8 <__aeabi_dcmplt>:
 80007e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007ec:	f7ff ffea 	bl	80007c4 <__aeabi_cdcmpeq>
 80007f0:	bf34      	ite	cc
 80007f2:	2001      	movcc	r0, #1
 80007f4:	2000      	movcs	r0, #0
 80007f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fa:	bf00      	nop

080007fc <__aeabi_dcmple>:
 80007fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000800:	f7ff ffe0 	bl	80007c4 <__aeabi_cdcmpeq>
 8000804:	bf94      	ite	ls
 8000806:	2001      	movls	r0, #1
 8000808:	2000      	movhi	r0, #0
 800080a:	f85d fb08 	ldr.w	pc, [sp], #8
 800080e:	bf00      	nop

08000810 <__aeabi_dcmpge>:
 8000810:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000814:	f7ff ffce 	bl	80007b4 <__aeabi_cdrcmple>
 8000818:	bf94      	ite	ls
 800081a:	2001      	movls	r0, #1
 800081c:	2000      	movhi	r0, #0
 800081e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000822:	bf00      	nop

08000824 <__aeabi_dcmpgt>:
 8000824:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000828:	f7ff ffc4 	bl	80007b4 <__aeabi_cdrcmple>
 800082c:	bf34      	ite	cc
 800082e:	2001      	movcc	r0, #1
 8000830:	2000      	movcs	r0, #0
 8000832:	f85d fb08 	ldr.w	pc, [sp], #8
 8000836:	bf00      	nop

08000838 <__aeabi_dcmpun>:
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__aeabi_dcmpun+0x10>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d10a      	bne.n	800085e <__aeabi_dcmpun+0x26>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__aeabi_dcmpun+0x20>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d102      	bne.n	800085e <__aeabi_dcmpun+0x26>
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	4770      	bx	lr
 800085e:	f04f 0001 	mov.w	r0, #1
 8000862:	4770      	bx	lr

08000864 <__aeabi_d2iz>:
 8000864:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000868:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800086c:	d215      	bcs.n	800089a <__aeabi_d2iz+0x36>
 800086e:	d511      	bpl.n	8000894 <__aeabi_d2iz+0x30>
 8000870:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000874:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000878:	d912      	bls.n	80008a0 <__aeabi_d2iz+0x3c>
 800087a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800087e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000882:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000886:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800088a:	fa23 f002 	lsr.w	r0, r3, r2
 800088e:	bf18      	it	ne
 8000890:	4240      	negne	r0, r0
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d105      	bne.n	80008ac <__aeabi_d2iz+0x48>
 80008a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008a4:	bf08      	it	eq
 80008a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2f>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008bc:	bf24      	itt	cs
 80008be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008c6:	d90d      	bls.n	80008e4 <__aeabi_d2f+0x30>
 80008c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008dc:	bf08      	it	eq
 80008de:	f020 0001 	biceq.w	r0, r0, #1
 80008e2:	4770      	bx	lr
 80008e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008e8:	d121      	bne.n	800092e <__aeabi_d2f+0x7a>
 80008ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ee:	bfbc      	itt	lt
 80008f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008f4:	4770      	bxlt	lr
 80008f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008fe:	f1c2 0218 	rsb	r2, r2, #24
 8000902:	f1c2 0c20 	rsb	ip, r2, #32
 8000906:	fa10 f30c 	lsls.w	r3, r0, ip
 800090a:	fa20 f002 	lsr.w	r0, r0, r2
 800090e:	bf18      	it	ne
 8000910:	f040 0001 	orrne.w	r0, r0, #1
 8000914:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000918:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800091c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000920:	ea40 000c 	orr.w	r0, r0, ip
 8000924:	fa23 f302 	lsr.w	r3, r3, r2
 8000928:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800092c:	e7cc      	b.n	80008c8 <__aeabi_d2f+0x14>
 800092e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000932:	d107      	bne.n	8000944 <__aeabi_d2f+0x90>
 8000934:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000938:	bf1e      	ittt	ne
 800093a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800093e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000942:	4770      	bxne	lr
 8000944:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <__aeabi_uldivmod>:
 8000954:	b953      	cbnz	r3, 800096c <__aeabi_uldivmod+0x18>
 8000956:	b94a      	cbnz	r2, 800096c <__aeabi_uldivmod+0x18>
 8000958:	2900      	cmp	r1, #0
 800095a:	bf08      	it	eq
 800095c:	2800      	cmpeq	r0, #0
 800095e:	bf1c      	itt	ne
 8000960:	f04f 31ff 	movne.w	r1, #4294967295
 8000964:	f04f 30ff 	movne.w	r0, #4294967295
 8000968:	f000 b9c4 	b.w	8000cf4 <__aeabi_idiv0>
 800096c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000970:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000974:	f000 f860 	bl	8000a38 <__udivmoddi4>
 8000978:	f8dd e004 	ldr.w	lr, [sp, #4]
 800097c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000980:	b004      	add	sp, #16
 8000982:	4770      	bx	lr

08000984 <__aeabi_d2lz>:
 8000984:	b508      	push	{r3, lr}
 8000986:	4602      	mov	r2, r0
 8000988:	460b      	mov	r3, r1
 800098a:	ec43 2b17 	vmov	d7, r2, r3
 800098e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	d403      	bmi.n	80009a0 <__aeabi_d2lz+0x1c>
 8000998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800099c:	f000 b82c 	b.w	80009f8 <__aeabi_d2ulz>
 80009a0:	eeb1 7b47 	vneg.f64	d7, d7
 80009a4:	ec51 0b17 	vmov	r0, r1, d7
 80009a8:	f000 f826 	bl	80009f8 <__aeabi_d2ulz>
 80009ac:	4240      	negs	r0, r0
 80009ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b2:	bd08      	pop	{r3, pc}
 80009b4:	0000      	movs	r0, r0
	...

080009b8 <__aeabi_f2ulz>:
 80009b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009e8 <__aeabi_f2ulz+0x30>
 80009bc:	ee07 0a10 	vmov	s14, r0
 80009c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009f0 <__aeabi_f2ulz+0x38>
 80009c4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80009c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009cc:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80009d0:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009d4:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009dc:	ee16 1a10 	vmov	r1, s12
 80009e0:	ee17 0a90 	vmov	r0, s15
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	00000000 	.word	0x00000000
 80009ec:	3df00000 	.word	0x3df00000
 80009f0:	00000000 	.word	0x00000000
 80009f4:	41f00000 	.word	0x41f00000

080009f8 <__aeabi_d2ulz>:
 80009f8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000a28 <__aeabi_d2ulz+0x30>
 80009fc:	ec41 0b17 	vmov	d7, r0, r1
 8000a00:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000a30 <__aeabi_d2ulz+0x38>
 8000a04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a08:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000a0c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000a10:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000a14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a18:	ee16 1a10 	vmov	r1, s12
 8000a1c:	ee17 0a90 	vmov	r0, s15
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	f3af 8000 	nop.w
 8000a28:	00000000 	.word	0x00000000
 8000a2c:	3df00000 	.word	0x3df00000
 8000a30:	00000000 	.word	0x00000000
 8000a34:	41f00000 	.word	0x41f00000

08000a38 <__udivmoddi4>:
 8000a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a3c:	9d08      	ldr	r5, [sp, #32]
 8000a3e:	460c      	mov	r4, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14e      	bne.n	8000ae2 <__udivmoddi4+0xaa>
 8000a44:	4694      	mov	ip, r2
 8000a46:	458c      	cmp	ip, r1
 8000a48:	4686      	mov	lr, r0
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	d962      	bls.n	8000b16 <__udivmoddi4+0xde>
 8000a50:	b14a      	cbz	r2, 8000a66 <__udivmoddi4+0x2e>
 8000a52:	f1c2 0320 	rsb	r3, r2, #32
 8000a56:	4091      	lsls	r1, r2
 8000a58:	fa20 f303 	lsr.w	r3, r0, r3
 8000a5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a60:	4319      	orrs	r1, r3
 8000a62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6a:	fa1f f68c 	uxth.w	r6, ip
 8000a6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a76:	fb07 1114 	mls	r1, r7, r4, r1
 8000a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7e:	fb04 f106 	mul.w	r1, r4, r6
 8000a82:	4299      	cmp	r1, r3
 8000a84:	d90a      	bls.n	8000a9c <__udivmoddi4+0x64>
 8000a86:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8e:	f080 8112 	bcs.w	8000cb6 <__udivmoddi4+0x27e>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 810f 	bls.w	8000cb6 <__udivmoddi4+0x27e>
 8000a98:	3c02      	subs	r4, #2
 8000a9a:	4463      	add	r3, ip
 8000a9c:	1a59      	subs	r1, r3, r1
 8000a9e:	fa1f f38e 	uxth.w	r3, lr
 8000aa2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa6:	fb07 1110 	mls	r1, r7, r0, r1
 8000aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aae:	fb00 f606 	mul.w	r6, r0, r6
 8000ab2:	429e      	cmp	r6, r3
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x94>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000abe:	f080 80fc 	bcs.w	8000cba <__udivmoddi4+0x282>
 8000ac2:	429e      	cmp	r6, r3
 8000ac4:	f240 80f9 	bls.w	8000cba <__udivmoddi4+0x282>
 8000ac8:	4463      	add	r3, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	1b9b      	subs	r3, r3, r6
 8000ace:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11d      	cbz	r5, 8000ade <__udivmoddi4+0xa6>
 8000ad6:	40d3      	lsrs	r3, r2
 8000ad8:	2200      	movs	r2, #0
 8000ada:	e9c5 3200 	strd	r3, r2, [r5]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d905      	bls.n	8000af2 <__udivmoddi4+0xba>
 8000ae6:	b10d      	cbz	r5, 8000aec <__udivmoddi4+0xb4>
 8000ae8:	e9c5 0100 	strd	r0, r1, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4608      	mov	r0, r1
 8000af0:	e7f5      	b.n	8000ade <__udivmoddi4+0xa6>
 8000af2:	fab3 f183 	clz	r1, r3
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d146      	bne.n	8000b88 <__udivmoddi4+0x150>
 8000afa:	42a3      	cmp	r3, r4
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xcc>
 8000afe:	4290      	cmp	r0, r2
 8000b00:	f0c0 80f0 	bcc.w	8000ce4 <__udivmoddi4+0x2ac>
 8000b04:	1a86      	subs	r6, r0, r2
 8000b06:	eb64 0303 	sbc.w	r3, r4, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	2d00      	cmp	r5, #0
 8000b0e:	d0e6      	beq.n	8000ade <__udivmoddi4+0xa6>
 8000b10:	e9c5 6300 	strd	r6, r3, [r5]
 8000b14:	e7e3      	b.n	8000ade <__udivmoddi4+0xa6>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	f040 8090 	bne.w	8000c3c <__udivmoddi4+0x204>
 8000b1c:	eba1 040c 	sub.w	r4, r1, ip
 8000b20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b24:	fa1f f78c 	uxth.w	r7, ip
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b32:	fb08 4416 	mls	r4, r8, r6, r4
 8000b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3a:	fb07 f006 	mul.w	r0, r7, r6
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x11c>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x11a>
 8000b4c:	4298      	cmp	r0, r3
 8000b4e:	f200 80cd 	bhi.w	8000cec <__udivmoddi4+0x2b4>
 8000b52:	4626      	mov	r6, r4
 8000b54:	1a1c      	subs	r4, r3, r0
 8000b56:	fa1f f38e 	uxth.w	r3, lr
 8000b5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b66:	fb00 f707 	mul.w	r7, r0, r7
 8000b6a:	429f      	cmp	r7, r3
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x148>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x146>
 8000b78:	429f      	cmp	r7, r3
 8000b7a:	f200 80b0 	bhi.w	8000cde <__udivmoddi4+0x2a6>
 8000b7e:	4620      	mov	r0, r4
 8000b80:	1bdb      	subs	r3, r3, r7
 8000b82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0x9c>
 8000b88:	f1c1 0620 	rsb	r6, r1, #32
 8000b8c:	408b      	lsls	r3, r1
 8000b8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b92:	431f      	orrs	r7, r3
 8000b94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b98:	fa04 f301 	lsl.w	r3, r4, r1
 8000b9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ba0:	40f4      	lsrs	r4, r6
 8000ba2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba6:	0c38      	lsrs	r0, r7, #16
 8000ba8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bac:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb0:	fa1f fc87 	uxth.w	ip, r7
 8000bb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc0:	45a1      	cmp	r9, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x1a6>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bce:	f080 8084 	bcs.w	8000cda <__udivmoddi4+0x2a2>
 8000bd2:	45a1      	cmp	r9, r4
 8000bd4:	f240 8081 	bls.w	8000cda <__udivmoddi4+0x2a2>
 8000bd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bdc:	443c      	add	r4, r7
 8000bde:	eba4 0409 	sub.w	r4, r4, r9
 8000be2:	fa1f f983 	uxth.w	r9, r3
 8000be6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bea:	fb00 4413 	mls	r4, r0, r3, r4
 8000bee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	d907      	bls.n	8000c0a <__udivmoddi4+0x1d2>
 8000bfa:	193c      	adds	r4, r7, r4
 8000bfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c00:	d267      	bcs.n	8000cd2 <__udivmoddi4+0x29a>
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d965      	bls.n	8000cd2 <__udivmoddi4+0x29a>
 8000c06:	3b02      	subs	r3, #2
 8000c08:	443c      	add	r4, r7
 8000c0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c12:	eba4 040c 	sub.w	r4, r4, ip
 8000c16:	429c      	cmp	r4, r3
 8000c18:	46ce      	mov	lr, r9
 8000c1a:	469c      	mov	ip, r3
 8000c1c:	d351      	bcc.n	8000cc2 <__udivmoddi4+0x28a>
 8000c1e:	d04e      	beq.n	8000cbe <__udivmoddi4+0x286>
 8000c20:	b155      	cbz	r5, 8000c38 <__udivmoddi4+0x200>
 8000c22:	ebb8 030e 	subs.w	r3, r8, lr
 8000c26:	eb64 040c 	sbc.w	r4, r4, ip
 8000c2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2e:	40cb      	lsrs	r3, r1
 8000c30:	431e      	orrs	r6, r3
 8000c32:	40cc      	lsrs	r4, r1
 8000c34:	e9c5 6400 	strd	r6, r4, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	e750      	b.n	8000ade <__udivmoddi4+0xa6>
 8000c3c:	f1c2 0320 	rsb	r3, r2, #32
 8000c40:	fa20 f103 	lsr.w	r1, r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	fa24 f303 	lsr.w	r3, r4, r3
 8000c4c:	4094      	lsls	r4, r2
 8000c4e:	430c      	orrs	r4, r1
 8000c50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c58:	fa1f f78c 	uxth.w	r7, ip
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3110 	mls	r1, r8, r0, r3
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb00 f107 	mul.w	r1, r0, r7
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x24c>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c7a:	d22c      	bcs.n	8000cd6 <__udivmoddi4+0x29e>
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d92a      	bls.n	8000cd6 <__udivmoddi4+0x29e>
 8000c80:	3802      	subs	r0, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1a5b      	subs	r3, r3, r1
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000c90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c94:	fb01 f307 	mul.w	r3, r1, r7
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x276>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca4:	d213      	bcs.n	8000cce <__udivmoddi4+0x296>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d911      	bls.n	8000cce <__udivmoddi4+0x296>
 8000caa:	3902      	subs	r1, #2
 8000cac:	4464      	add	r4, ip
 8000cae:	1ae4      	subs	r4, r4, r3
 8000cb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb4:	e739      	b.n	8000b2a <__udivmoddi4+0xf2>
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	e6f0      	b.n	8000a9c <__udivmoddi4+0x64>
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e706      	b.n	8000acc <__udivmoddi4+0x94>
 8000cbe:	45c8      	cmp	r8, r9
 8000cc0:	d2ae      	bcs.n	8000c20 <__udivmoddi4+0x1e8>
 8000cc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7a8      	b.n	8000c20 <__udivmoddi4+0x1e8>
 8000cce:	4631      	mov	r1, r6
 8000cd0:	e7ed      	b.n	8000cae <__udivmoddi4+0x276>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	e799      	b.n	8000c0a <__udivmoddi4+0x1d2>
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	e7d4      	b.n	8000c84 <__udivmoddi4+0x24c>
 8000cda:	46d6      	mov	lr, sl
 8000cdc:	e77f      	b.n	8000bde <__udivmoddi4+0x1a6>
 8000cde:	4463      	add	r3, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e74d      	b.n	8000b80 <__udivmoddi4+0x148>
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	4623      	mov	r3, r4
 8000ce8:	4608      	mov	r0, r1
 8000cea:	e70f      	b.n	8000b0c <__udivmoddi4+0xd4>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	e730      	b.n	8000b54 <__udivmoddi4+0x11c>
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d04:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <MX_DMA_Init+0x6c>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_DMA_Init+0x6c>)
 8000d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	200d      	movs	r0, #13
 8000d22:	f001 feba 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d26:	200d      	movs	r0, #13
 8000d28:	f001 fed1 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	200e      	movs	r0, #14
 8000d32:	f001 feb2 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d36:	200e      	movs	r0, #14
 8000d38:	f001 fec9 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2011      	movs	r0, #17
 8000d42:	f001 feaa 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d46:	2011      	movs	r0, #17
 8000d48:	f001 fec1 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	202f      	movs	r0, #47	@ 0x2f
 8000d52:	f001 fea2 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d56:	202f      	movs	r0, #47	@ 0x2f
 8000d58:	f001 feb9 	bl	8002ace <HAL_NVIC_EnableIRQ>

}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024400 	.word	0x58024400

08000d68 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b97      	ldr	r3, [pc, #604]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	4a95      	ldr	r2, [pc, #596]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8e:	4b93      	ldr	r3, [pc, #588]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	4a8e      	ldr	r2, [pc, #568]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dac:	4b8b      	ldr	r3, [pc, #556]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	f003 0320 	and.w	r3, r3, #32
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b88      	ldr	r3, [pc, #544]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a86      	ldr	r2, [pc, #536]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b84      	ldr	r3, [pc, #528]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b80      	ldr	r3, [pc, #512]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a7f      	ldr	r2, [pc, #508]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b7c      	ldr	r3, [pc, #496]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	4b79      	ldr	r3, [pc, #484]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a77      	ldr	r2, [pc, #476]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b75      	ldr	r3, [pc, #468]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e14:	4b71      	ldr	r3, [pc, #452]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a70      	ldr	r2, [pc, #448]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b6d      	ldr	r3, [pc, #436]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	4b6a      	ldr	r3, [pc, #424]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a68      	ldr	r2, [pc, #416]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b66      	ldr	r3, [pc, #408]	@ (8000fdc <MX_GPIO_Init+0x274>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_EN5_GPIO_Port, SEN_EN5_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2102      	movs	r1, #2
 8000e54:	4862      	ldr	r0, [pc, #392]	@ (8000fe0 <MX_GPIO_Init+0x278>)
 8000e56:	f005 f9af 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_SEL1_Pin|SPI_SEL2_Pin|SPI_SEL0_Pin|SEN_EN4_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f240 4113 	movw	r1, #1043	@ 0x413
 8000e60:	4860      	ldr	r0, [pc, #384]	@ (8000fe4 <MX_GPIO_Init+0x27c>)
 8000e62:	f005 f9a9 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEN_EN1_Pin|LED_3_Pin|SEN_EN3_Pin|SEN_EN2_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f244 0129 	movw	r1, #16425	@ 0x4029
 8000e6c:	485e      	ldr	r0, [pc, #376]	@ (8000fe8 <MX_GPIO_Init+0x280>)
 8000e6e:	f005 f9a3 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_EN_GPIO_Port, SPI_EN_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e78:	485c      	ldr	r0, [pc, #368]	@ (8000fec <MX_GPIO_Init+0x284>)
 8000e7a:	f005 f99d 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2140      	movs	r1, #64	@ 0x40
 8000e82:	4859      	ldr	r0, [pc, #356]	@ (8000fe8 <MX_GPIO_Init+0x280>)
 8000e84:	f005 f998 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4858      	ldr	r0, [pc, #352]	@ (8000ff0 <MX_GPIO_Init+0x288>)
 8000e8e:	f005 f993 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BOUTTON_Bleu_Pin|SEN_INT5_Pin;
 8000e92:	f242 0301 	movw	r3, #8193	@ 0x2001
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	484d      	ldr	r0, [pc, #308]	@ (8000fe0 <MX_GPIO_Init+0x278>)
 8000eaa:	f004 feb3 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEN_EN5_Pin;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SEN_EN5_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4846      	ldr	r0, [pc, #280]	@ (8000fe0 <MX_GPIO_Init+0x278>)
 8000ec6:	f004 fea5 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_SEL1_Pin|SPI_SEL2_Pin|SPI_SEL0_Pin|SEN_EN4_Pin;
 8000eca:	f240 4313 	movw	r3, #1043	@ 0x413
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4840      	ldr	r0, [pc, #256]	@ (8000fe4 <MX_GPIO_Init+0x27c>)
 8000ee4:	f004 fe96 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SEN_EN1_Pin|SEN_EN3_Pin|SEN_EN2_Pin|A121_SPI_SS_Pin;
 8000ee8:	2369      	movs	r3, #105	@ 0x69
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	483a      	ldr	r0, [pc, #232]	@ (8000fe8 <MX_GPIO_Init+0x280>)
 8000f00:	f004 fe88 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SEN_INT3_Pin|SEN_INT4_Pin;
 8000f04:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4833      	ldr	r0, [pc, #204]	@ (8000fe8 <MX_GPIO_Init+0x280>)
 8000f1c:	f004 fe7a 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000f20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	482b      	ldr	r0, [pc, #172]	@ (8000fe8 <MX_GPIO_Init+0x280>)
 8000f3a:	f004 fe6b 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SEN_INT2_Pin|SEN_INT1_Pin;
 8000f3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4823      	ldr	r0, [pc, #140]	@ (8000fe4 <MX_GPIO_Init+0x27c>)
 8000f56:	f004 fe5d 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_EN_Pin;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_EN_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481e      	ldr	r0, [pc, #120]	@ (8000fec <MX_GPIO_Init+0x284>)
 8000f74:	f004 fe4e 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <MX_GPIO_Init+0x288>)
 8000f90:	f004 fe40 	bl	8005c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2006      	movs	r0, #6
 8000f9a:	f001 fd7e 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f001 fd95 	bl	8002ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 fd76 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f001 fd8d 	bl	8002ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2017      	movs	r0, #23
 8000fba:	f001 fd6e 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fbe:	2017      	movs	r0, #23
 8000fc0:	f001 fd85 	bl	8002ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2028      	movs	r0, #40	@ 0x28
 8000fca:	f001 fd66 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fce:	2028      	movs	r0, #40	@ 0x28
 8000fd0:	f001 fd7d 	bl	8002ace <HAL_NVIC_EnableIRQ>

}
 8000fd4:	bf00      	nop
 8000fd6:	3730      	adds	r7, #48	@ 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	58020800 	.word	0x58020800
 8000fe4:	58020000 	.word	0x58020000
 8000fe8:	58020400 	.word	0x58020400
 8000fec:	58021800 	.word	0x58021800
 8000ff0:	58021000 	.word	0x58021000

08000ff4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <MX_I2C2_Init+0x74>)
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <MX_I2C2_Init+0x78>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <MX_I2C2_Init+0x7c>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 164;
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001006:	22a4      	movs	r2, #164	@ 0xa4
 8001008:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100a:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <MX_I2C2_Init+0x74>)
 800100c:	2201      	movs	r2, #1
 800100e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_I2C2_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_I2C2_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800102e:	480e      	ldr	r0, [pc, #56]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001030:	f005 f900 	bl	8006234 <HAL_I2C_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800103a:	f000 f951 	bl	80012e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103e:	2100      	movs	r1, #0
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001042:	f005 f9ad 	bl	80063a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 f948 	bl	80012e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_I2C2_Init+0x74>)
 8001054:	f005 f9ef 	bl	8006436 <HAL_I2CEx_ConfigDigitalFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 f93f 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	240003b0 	.word	0x240003b0
 800106c:	40005800 	.word	0x40005800
 8001070:	00909beb 	.word	0x00909beb

08001074 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ba      	sub	sp, #232	@ 0xe8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	22c0      	movs	r2, #192	@ 0xc0
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f017 fc27 	bl	80188e8 <memset>
  if(i2cHandle->Instance==I2C2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2a      	ldr	r2, [pc, #168]	@ (8001148 <HAL_I2C_MspInit+0xd4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d14d      	bne.n	8001140 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010a4:	f04f 0208 	mov.w	r2, #8
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fa28 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010c6:	f000 f90b 	bl	80012e0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_I2C_MspInit+0xd8>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <HAL_I2C_MspInit+0xd8>)
 80010d2:	f043 0320 	orr.w	r3, r3, #32
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_I2C_MspInit+0xd8>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80010e8:	2303      	movs	r3, #3
 80010ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001100:	2304      	movs	r3, #4
 8001102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001106:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800110a:	4619      	mov	r1, r3
 800110c:	4810      	ldr	r0, [pc, #64]	@ (8001150 <HAL_I2C_MspInit+0xdc>)
 800110e:	f004 fd81 	bl	8005c14 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_I2C_MspInit+0xd8>)
 8001114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001118:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <HAL_I2C_MspInit+0xd8>)
 800111a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800111e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_I2C_MspInit+0xd8>)
 8001124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2021      	movs	r0, #33	@ 0x21
 8001136:	f001 fcb0 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800113a:	2021      	movs	r0, #33	@ 0x21
 800113c:	f001 fcc7 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	37e8      	adds	r7, #232	@ 0xe8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005800 	.word	0x40005800
 800114c:	58024400 	.word	0x58024400
 8001150:	58021400 	.word	0x58021400

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001158:	f000 f896 	bl	8001288 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f001 fac6 	bl	80026ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f814 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f7ff fe00 	bl	8000d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001168:	f7ff fdc6 	bl	8000cf8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800116c:	f000 fcfe 	bl	8001b6c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001170:	f000 f8bc 	bl	80012ec <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001174:	f000 fcac 	bl	8001ad0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001178:	f000 f984 	bl	8001484 <MX_SPI1_Init>
  MX_I2C2_Init();
 800117c:	f7ff ff3a 	bl	8000ff4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	acconeer_main(0, NULL);
 8001180:	2100      	movs	r1, #0
 8001182:	2000      	movs	r0, #0
 8001184:	f001 f864 	bl	8002250 <acconeer_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <main+0x34>

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09c      	sub	sp, #112	@ 0x70
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001196:	224c      	movs	r2, #76	@ 0x4c
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f017 fba4 	bl	80188e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2220      	movs	r2, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f017 fb9e 	bl	80188e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f005 f98f 	bl	80064d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <SystemClock_Config+0xf4>)
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	4a31      	ldr	r2, [pc, #196]	@ (8001280 <SystemClock_Config+0xf4>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <SystemClock_Config+0xf4>)
 80011c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <SystemClock_Config+0xf8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001284 <SystemClock_Config+0xf8>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <SystemClock_Config+0xf8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e8:	bf00      	nop
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <SystemClock_Config+0xf8>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011f6:	d1f8      	bne.n	80011ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011f8:	230a      	movs	r3, #10
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001210:	2304      	movs	r3, #4
 8001212:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001214:	230a      	movs	r3, #10
 8001216:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001218:	2302      	movs	r3, #2
 800121a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001224:	230c      	movs	r3, #12
 8001226:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001228:	2302      	movs	r3, #2
 800122a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001234:	4618      	mov	r0, r3
 8001236:	f005 f985 	bl	8006544 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001240:	f000 f84e 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	233f      	movs	r3, #63	@ 0x3f
 8001246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2303      	movs	r3, #3
 800124a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001258:	2340      	movs	r3, #64	@ 0x40
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f005 fdc5 	bl	8006df8 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001274:	f000 f834 	bl	80012e0 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3770      	adds	r7, #112	@ 0x70
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58000400 	.word	0x58000400
 8001284:	58024800 	.word	0x58024800

08001288 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800129a:	f001 fc45 	bl	8002b28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800129e:	2301      	movs	r3, #1
 80012a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012aa:	231f      	movs	r3, #31
 80012ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012ae:	2387      	movs	r3, #135	@ 0x87
 80012b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012b6:	2300      	movs	r3, #0
 80012b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012be:	2301      	movs	r3, #1
 80012c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ca:	463b      	mov	r3, r7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fc63 	bl	8002b98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012d2:	2004      	movs	r0, #4
 80012d4:	f001 fc40 	bl	8002b58 <HAL_MPU_Enable>

}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <Error_Handler+0x8>

080012ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b090      	sub	sp, #64	@ 0x40
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2228      	movs	r2, #40	@ 0x28
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f017 faeb 	bl	80188e8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001312:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001314:	4a41      	ldr	r2, [pc, #260]	@ (800141c <MX_RTC_Init+0x130>)
 8001316:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001318:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <MX_RTC_Init+0x12c>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 800131e:	4b3e      	ldr	r3, [pc, #248]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001320:	221f      	movs	r2, #31
 8001322:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8001324:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001326:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800132a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800132c:	4b3a      	ldr	r3, [pc, #232]	@ (8001418 <MX_RTC_Init+0x12c>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001332:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001338:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <MX_RTC_Init+0x12c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001344:	4834      	ldr	r0, [pc, #208]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001346:	f007 ff0f 	bl	8009168 <HAL_RTC_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001350:	f7ff ffc6 	bl	80012e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001366:	2300      	movs	r3, #0
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800136e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	4828      	ldr	r0, [pc, #160]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001378:	f007 ff78 	bl	800926c <HAL_RTC_SetTime>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001382:	f7ff ffad 	bl	80012e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001386:	2301      	movs	r3, #1
 8001388:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800138c:	2301      	movs	r3, #1
 800138e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800139e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a2:	2200      	movs	r2, #0
 80013a4:	4619      	mov	r1, r3
 80013a6:	481c      	ldr	r0, [pc, #112]	@ (8001418 <MX_RTC_Init+0x12c>)
 80013a8:	f007 fffe 	bl	80093a8 <HAL_RTC_SetDate>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 80013b2:	f7ff ff95 	bl	80012e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80013e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	480a      	ldr	r0, [pc, #40]	@ (8001418 <MX_RTC_Init+0x12c>)
 80013ee:	f008 f863 	bl	80094b8 <HAL_RTC_SetAlarm>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_RTC_Init+0x110>
  {
    Error_Handler();
 80013f8:	f7ff ff72 	bl	80012e0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_RTC_Init+0x12c>)
 8001402:	f008 fa3d 	bl	8009880 <HAL_RTCEx_SetWakeUpTimer>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800140c:	f7ff ff68 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3740      	adds	r7, #64	@ 0x40
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	24000404 	.word	0x24000404
 800141c:	58004000 	.word	0x58004000

08001420 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0b2      	sub	sp, #200	@ 0xc8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	22c0      	movs	r2, #192	@ 0xc0
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f017 fa59 	bl	80188e8 <memset>
  if(rtcHandle->Instance==RTC)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_RTC_MspInit+0x5c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d119      	bne.n	8001474 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001440:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800144c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001450:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	4618      	mov	r0, r3
 800145a:	f006 f859 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001464:	f7ff ff3c 	bl	80012e0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_RTC_MspInit+0x60>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_RTC_MspInit+0x60>)
 800146e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001472:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001474:	bf00      	nop
 8001476:	37c8      	adds	r7, #200	@ 0xc8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	58004000 	.word	0x58004000
 8001480:	58024400 	.word	0x58024400

08001484 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <MX_SPI1_Init+0xa4>)
 800148a:	4a28      	ldr	r2, [pc, #160]	@ (800152c <MX_SPI1_Init+0xa8>)
 800148c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800148e:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001490:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800149c:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <MX_SPI1_Init+0xa4>)
 800149e:	2207      	movs	r2, #7
 80014a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014b8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80014bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001504:	2200      	movs	r2, #0
 8001506:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <MX_SPI1_Init+0xa4>)
 800150a:	2200      	movs	r2, #0
 800150c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001516:	f008 fb1d 	bl	8009b54 <HAL_SPI_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001520:	f7ff fede 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24000428 	.word	0x24000428
 800152c:	40013000 	.word	0x40013000

08001530 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0ba      	sub	sp, #232	@ 0xe8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	22c0      	movs	r2, #192	@ 0xc0
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f017 f9c9 	bl	80188e8 <memset>
  if(spiHandle->Instance==SPI1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a57      	ldr	r2, [pc, #348]	@ (80016b8 <HAL_SPI_MspInit+0x188>)
 800155c:	4293      	cmp	r3, r2
 800155e:	f040 80a7 	bne.w	80016b0 <HAL_SPI_MspInit+0x180>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001562:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800156e:	2300      	movs	r3, #0
 8001570:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4618      	mov	r0, r3
 8001578:	f005 ffca 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001582:	f7ff fead 	bl	80012e0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <HAL_SPI_MspInit+0x18c>)
 8001588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800158c:	4a4b      	ldr	r2, [pc, #300]	@ (80016bc <HAL_SPI_MspInit+0x18c>)
 800158e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <HAL_SPI_MspInit+0x18c>)
 8001598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800159c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b45      	ldr	r3, [pc, #276]	@ (80016bc <HAL_SPI_MspInit+0x18c>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015aa:	4a44      	ldr	r2, [pc, #272]	@ (80016bc <HAL_SPI_MspInit+0x18c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b4:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <HAL_SPI_MspInit+0x18c>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80015c2:	23e0      	movs	r3, #224	@ 0xe0
 80015c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015da:	2305      	movs	r3, #5
 80015dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4836      	ldr	r0, [pc, #216]	@ (80016c0 <HAL_SPI_MspInit+0x190>)
 80015e8:	f004 fb14 	bl	8005c14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 80015ec:	4b35      	ldr	r3, [pc, #212]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 80015ee:	4a36      	ldr	r2, [pc, #216]	@ (80016c8 <HAL_SPI_MspInit+0x198>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80015f2:	4b34      	ldr	r3, [pc, #208]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 80015f4:	2225      	movs	r2, #37	@ 0x25
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f8:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 8001606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800160a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160c:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001612:	4b2c      	ldr	r3, [pc, #176]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001618:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800162a:	4826      	ldr	r0, [pc, #152]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 800162c:	f001 faf4 	bl	8002c18 <HAL_DMA_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001636:	f7ff fe53 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 800163e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001640:	4a20      	ldr	r2, [pc, #128]	@ (80016c4 <HAL_SPI_MspInit+0x194>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001648:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <HAL_SPI_MspInit+0x1a0>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 800164e:	2226      	movs	r2, #38	@ 0x26
 8001650:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001654:	2240      	movs	r2, #64	@ 0x40
 8001656:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001664:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001684:	4811      	ldr	r0, [pc, #68]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001686:	f001 fac7 	bl	8002c18 <HAL_DMA_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001690:	f7ff fe26 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 8001698:	679a      	str	r2, [r3, #120]	@ 0x78
 800169a:	4a0c      	ldr	r2, [pc, #48]	@ (80016cc <HAL_SPI_MspInit+0x19c>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2023      	movs	r0, #35	@ 0x23
 80016a6:	f001 f9f8 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016aa:	2023      	movs	r0, #35	@ 0x23
 80016ac:	f001 fa0f 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	37e8      	adds	r7, #232	@ 0xe8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013000 	.word	0x40013000
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020000 	.word	0x58020000
 80016c4:	240004b0 	.word	0x240004b0
 80016c8:	40020040 	.word	0x40020040
 80016cc:	24000528 	.word	0x24000528
 80016d0:	40020058 	.word	0x40020058

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_MspInit+0x30>)
 80016dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016e0:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x30>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x30>)
 80016ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	58024400 	.word	0x58024400

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <NMI_Handler+0x4>

08001710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <MemManage_Handler+0x4>

08001720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <UsageFault_Handler+0x4>

08001730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175e:	f001 f837 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}

08001766 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT5_Pin);
 800176a:	2001      	movs	r0, #1
 800176c:	f004 fd3d 	bl	80061ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT4_Pin);
 8001778:	2010      	movs	r0, #16
 800177a:	f004 fd36 	bl	80061ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA1_Stream2_IRQHandler+0x10>)
 800178a:	f002 ff25 	bl	80045d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	240004b0 	.word	0x240004b0

08001798 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <DMA1_Stream3_IRQHandler+0x10>)
 800179e:	f002 ff1b 	bl	80045d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000528 	.word	0x24000528

080017ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA1_Stream6_IRQHandler+0x10>)
 80017b2:	f002 ff11 	bl	80045d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	240006cc 	.word	0x240006cc

080017c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT2_Pin);
 80017c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017c8:	f004 fd0f 	bl	80061ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEN_INT1_Pin);
 80017cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017d0:	f004 fd0b 	bl	80061ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <I2C2_EV_IRQHandler+0x10>)
 80017de:	f004 fdc5 	bl	800636c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	240003b0 	.word	0x240003b0

080017ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <SPI1_IRQHandler+0x10>)
 80017f2:	f008 fe0d 	bl	800a410 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	24000428 	.word	0x24000428

08001800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <USART2_IRQHandler+0x10>)
 8001806:	f009 fba5 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	240005a4 	.word	0x240005a4

08001814 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT3_Pin);
 8001818:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800181c:	f004 fce5 	bl	80061ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOUTTON_Bleu_Pin);
 8001820:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001824:	f004 fce1 	bl	80061ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <DMA1_Stream7_IRQHandler+0x10>)
 8001832:	f002 fed1 	bl	80045d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24000744 	.word	0x24000744

08001840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_kill>:

int _kill(int pid, int sig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185a:	f017 f8cf 	bl	80189fc <__errno>
 800185e:	4603      	mov	r3, r0
 8001860:	2216      	movs	r2, #22
 8001862:	601a      	str	r2, [r3, #0]
  return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_exit>:

void _exit (int status)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffe7 	bl	8001850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001882:	bf00      	nop
 8001884:	e7fd      	b.n	8001882 <_exit+0x12>

08001886 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e00a      	b.n	80018ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001898:	f3af 8000 	nop.w
 800189c:	4601      	mov	r1, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	60ba      	str	r2, [r7, #8]
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbf0      	blt.n	8001898 <_read+0x12>
  }

  return len;
 80018b6:	687b      	ldr	r3, [r7, #4]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_close>:
//  }
//  return len;
//}

int _close(int file)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_isatty>:

int _isatty(int file)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_write>:
  (void)env;
  errno = ENOMEM;
  return -1;
}
int _write(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t *)ptr, len, 0xFFFF);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	b29a      	uxth	r2, r3
 8001938:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	4804      	ldr	r0, [pc, #16]	@ (8001950 <_write+0x28>)
 8001940:	f009 f8f8 	bl	800ab34 <HAL_UART_Transmit>
	return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	24000638 	.word	0x24000638

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f017 f83a 	bl	80189fc <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	24080000 	.word	0x24080000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	240005a0 	.word	0x240005a0
 80019bc:	24003228 	.word	0x24003228

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019c4:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <SystemInit+0xe4>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ca:	4a36      	ldr	r2, [pc, #216]	@ (8001aa4 <SystemInit+0xe4>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019d4:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <SystemInit+0xe8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	2b06      	cmp	r3, #6
 80019de:	d807      	bhi.n	80019f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019e0:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <SystemInit+0xe8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 030f 	bic.w	r3, r3, #15
 80019e8:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <SystemInit+0xe8>)
 80019ea:	f043 0307 	orr.w	r3, r3, #7
 80019ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <SystemInit+0xec>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2d      	ldr	r2, [pc, #180]	@ (8001aac <SystemInit+0xec>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <SystemInit+0xec>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a02:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <SystemInit+0xec>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4929      	ldr	r1, [pc, #164]	@ (8001aac <SystemInit+0xec>)
 8001a08:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <SystemInit+0xf0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <SystemInit+0xe8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <SystemInit+0xe8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 030f 	bic.w	r3, r3, #15
 8001a22:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <SystemInit+0xe8>)
 8001a24:	f043 0307 	orr.w	r3, r3, #7
 8001a28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <SystemInit+0xec>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <SystemInit+0xec>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <SystemInit+0xec>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <SystemInit+0xec>)
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <SystemInit+0xf4>)
 8001a40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <SystemInit+0xec>)
 8001a44:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <SystemInit+0xf8>)
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <SystemInit+0xec>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <SystemInit+0xfc>)
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <SystemInit+0xec>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <SystemInit+0xec>)
 8001a56:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <SystemInit+0xfc>)
 8001a58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <SystemInit+0xec>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <SystemInit+0xec>)
 8001a62:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <SystemInit+0xfc>)
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <SystemInit+0xec>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <SystemInit+0xec>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <SystemInit+0xec>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <SystemInit+0xec>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <SystemInit+0x100>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <SystemInit+0x104>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a8a:	d202      	bcs.n	8001a92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <SystemInit+0x108>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <SystemInit+0x10c>)
 8001a94:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00
 8001aa8:	52002000 	.word	0x52002000
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ab4:	02020200 	.word	0x02020200
 8001ab8:	01ff0000 	.word	0x01ff0000
 8001abc:	01010280 	.word	0x01010280
 8001ac0:	5c001000 	.word	0x5c001000
 8001ac4:	ffff0000 	.word	0xffff0000
 8001ac8:	51008108 	.word	0x51008108
 8001acc:	52004000 	.word	0x52004000

08001ad0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001ad6:	4a24      	ldr	r2, [pc, #144]	@ (8001b68 <MX_USART2_UART_Init+0x98>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ada:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001afc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b00:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1a:	4812      	ldr	r0, [pc, #72]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b1c:	f008 ff7b 	bl	800aa16 <HAL_UART_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001b26:	f7ff fbdb 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b2e:	f00b f849 	bl	800cbc4 <HAL_UARTEx_SetTxFifoThreshold>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001b38:	f7ff fbd2 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b40:	f00b f87e 	bl	800cc40 <HAL_UARTEx_SetRxFifoThreshold>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001b4a:	f7ff fbc9 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001b50:	f00a ffff 	bl	800cb52 <HAL_UARTEx_DisableFifoMode>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001b5a:	f7ff fbc1 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	240005a4 	.word	0x240005a4
 8001b68:	40004400 	.word	0x40004400

08001b6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b72:	4a23      	ldr	r2, [pc, #140]	@ (8001c00 <MX_USART3_UART_Init+0x94>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001b76:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b78:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bae:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb4:	4811      	ldr	r0, [pc, #68]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bb6:	f008 ff2e 	bl	800aa16 <HAL_UART_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bc0:	f7ff fb8e 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	480d      	ldr	r0, [pc, #52]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bc8:	f00a fffc 	bl	800cbc4 <HAL_UARTEx_SetTxFifoThreshold>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bd2:	f7ff fb85 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bda:	f00b f831 	bl	800cc40 <HAL_UARTEx_SetRxFifoThreshold>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001be4:	f7ff fb7c 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bea:	f00a ffb2 	bl	800cb52 <HAL_UARTEx_DisableFifoMode>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bf4:	f7ff fb74 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	24000638 	.word	0x24000638
 8001c00:	40004800 	.word	0x40004800

08001c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0be      	sub	sp, #248	@ 0xf8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c1c:	f107 0320 	add.w	r3, r7, #32
 8001c20:	22c0      	movs	r2, #192	@ 0xc0
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f016 fe5f 	bl	80188e8 <memset>
  if(uartHandle->Instance==USART2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a91      	ldr	r2, [pc, #580]	@ (8001e74 <HAL_UART_MspInit+0x270>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f040 80ce 	bne.w	8001dd2 <HAL_UART_MspInit+0x1ce>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c36:	f04f 0202 	mov.w	r2, #2
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c48:	f107 0320 	add.w	r3, r7, #32
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fc5f 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001c58:	f7ff fb42 	bl	80012e0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5c:	4b86      	ldr	r3, [pc, #536]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c62:	4a85      	ldr	r2, [pc, #532]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c6c:	4b82      	ldr	r3, [pc, #520]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c80:	4a7d      	ldr	r2, [pc, #500]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c98:	4b77      	ldr	r3, [pc, #476]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9e:	4a76      	ldr	r2, [pc, #472]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca8:	4b73      	ldr	r3, [pc, #460]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4868      	ldr	r0, [pc, #416]	@ (8001e7c <HAL_UART_MspInit+0x278>)
 8001cdc:	f003 ff9a 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_CTS_Pin|UART_RTS_Pin;
 8001ce0:	2318      	movs	r3, #24
 8001ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d02:	4619      	mov	r1, r3
 8001d04:	485e      	ldr	r0, [pc, #376]	@ (8001e80 <HAL_UART_MspInit+0x27c>)
 8001d06:	f003 ff85 	bl	8005c14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8001d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8001e88 <HAL_UART_MspInit+0x284>)
 8001d0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001d10:	4b5c      	ldr	r3, [pc, #368]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d12:	222b      	movs	r2, #43	@ 0x2b
 8001d14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d16:	4b5b      	ldr	r3, [pc, #364]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1c:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d22:	4b58      	ldr	r3, [pc, #352]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2a:	4b56      	ldr	r3, [pc, #344]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d30:	4b54      	ldr	r3, [pc, #336]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d36:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3c:	4b51      	ldr	r3, [pc, #324]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d42:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d48:	484e      	ldr	r0, [pc, #312]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d4a:	f000 ff65 	bl	8002c18 <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001d54:	f7ff fac4 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d60:	4a48      	ldr	r2, [pc, #288]	@ (8001e84 <HAL_UART_MspInit+0x280>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream7;
 8001d66:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d68:	4a49      	ldr	r2, [pc, #292]	@ (8001e90 <HAL_UART_MspInit+0x28c>)
 8001d6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001d6c:	4b47      	ldr	r3, [pc, #284]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d6e:	222c      	movs	r2, #44	@ 0x2c
 8001d70:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d72:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d74:	2240      	movs	r2, #64	@ 0x40
 8001d76:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b44      	ldr	r3, [pc, #272]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b43      	ldr	r3, [pc, #268]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d86:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d92:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d98:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001da4:	4839      	ldr	r0, [pc, #228]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001da6:	f000 ff37 	bl	8002c18 <HAL_DMA_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_UART_MspInit+0x1b0>
    {
      Error_Handler();
 8001db0:	f7ff fa96 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a35      	ldr	r2, [pc, #212]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001db8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001dba:	4a34      	ldr	r2, [pc, #208]	@ (8001e8c <HAL_UART_MspInit+0x288>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2026      	movs	r0, #38	@ 0x26
 8001dc6:	f000 fe68 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dca:	2026      	movs	r0, #38	@ 0x26
 8001dcc:	f000 fe7f 	bl	8002ace <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dd0:	e04b      	b.n	8001e6a <HAL_UART_MspInit+0x266>
  else if(uartHandle->Instance==USART3)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e94 <HAL_UART_MspInit+0x290>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d146      	bne.n	8001e6a <HAL_UART_MspInit+0x266>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ddc:	f04f 0202 	mov.w	r2, #2
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 fb8c 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001dfe:	f7ff fa6f 	bl	80012e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e02:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e08:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001e0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e26:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_UART_MspInit+0x274>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 8001e3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4806      	ldr	r0, [pc, #24]	@ (8001e80 <HAL_UART_MspInit+0x27c>)
 8001e66:	f003 fed5 	bl	8005c14 <HAL_GPIO_Init>
}
 8001e6a:	bf00      	nop
 8001e6c:	37f8      	adds	r7, #248	@ 0xf8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40004400 	.word	0x40004400
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	58020000 	.word	0x58020000
 8001e80:	58020c00 	.word	0x58020c00
 8001e84:	240006cc 	.word	0x240006cc
 8001e88:	400200a0 	.word	0x400200a0
 8001e8c:	24000744 	.word	0x24000744
 8001e90:	400200b8 	.word	0x400200b8
 8001e94:	40004800 	.word	0x40004800

08001e98 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <HAL_UART_MspDeInit+0x7c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d11e      	bne.n	8001ee8 <HAL_UART_MspDeInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_UART_MspDeInit+0x80>)
 8001eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_UART_MspDeInit+0x80>)
 8001eb2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001eb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    */
    HAL_GPIO_DeInit(GPIOA, UART_TX_Pin|UART_RX_Pin);
 8001eba:	210c      	movs	r1, #12
 8001ebc:	4817      	ldr	r0, [pc, #92]	@ (8001f1c <HAL_UART_MspDeInit+0x84>)
 8001ebe:	f004 f859 	bl	8005f74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, UART_CTS_Pin|UART_RTS_Pin);
 8001ec2:	2118      	movs	r1, #24
 8001ec4:	4816      	ldr	r0, [pc, #88]	@ (8001f20 <HAL_UART_MspDeInit+0x88>)
 8001ec6:	f004 f855 	bl	8005f74 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 f9fd 	bl	80032d0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 f9f8 	bl	80032d0 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001ee0:	2026      	movs	r0, #38	@ 0x26
 8001ee2:	f000 fe02 	bl	8002aea <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8001ee6:	e011      	b.n	8001f0c <HAL_UART_MspDeInit+0x74>
  else if(uartHandle->Instance==USART3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <HAL_UART_MspDeInit+0x8c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10c      	bne.n	8001f0c <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_UART_MspDeInit+0x80>)
 8001ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <HAL_UART_MspDeInit+0x80>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    HAL_GPIO_DeInit(GPIOD, DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin);
 8001f02:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001f06:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <HAL_UART_MspDeInit+0x88>)
 8001f08:	f004 f834 	bl	8005f74 <HAL_GPIO_DeInit>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40004400 	.word	0x40004400
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	58020000 	.word	0x58020000
 8001f20:	58020c00 	.word	0x58020c00
 8001f24:	40004800 	.word	0x40004800

08001f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f2c:	f7ff fd48 	bl	80019c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f32:	490d      	ldr	r1, [pc, #52]	@ (8001f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f48:	4c0a      	ldr	r4, [pc, #40]	@ (8001f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f56:	f016 fd57 	bl	8018a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5a:	f7ff f8fb 	bl	8001154 <main>
  bx  lr
 8001f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f68:	24000394 	.word	0x24000394
  ldr r2, =_sidata
 8001f6c:	08021b20 	.word	0x08021b20
  ldr r2, =_sbss
 8001f70:	24000394 	.word	0x24000394
  ldr r4, =_ebss
 8001f74:	24003228 	.word	0x24003228

08001f78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC3_IRQHandler>
	...

08001f7c <uart_wait_for_tx_done>:

static char exploration_server_command_buffer[2048];


static void uart_wait_for_tx_done(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f82:	b672      	cpsid	i
}
 8001f84:	bf00      	nop
	while (true)
	{
		__disable_irq();
		bool active = uart_tx_active;
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <uart_wait_for_tx_done+0x2c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f8c:	b662      	cpsie	i
}
 8001f8e:	bf00      	nop
		__enable_irq();
		if (active)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <uart_wait_for_tx_done+0x1e>
		{
			__WFI();
 8001f96:	bf30      	wfi
	{
 8001f98:	e7f3      	b.n	8001f82 <uart_wait_for_tx_done+0x6>
		}
		else
		{
			break;
 8001f9a:	bf00      	nop
		}
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	240007c4 	.word	0x240007c4

08001fac <write_to_client>:
 * @param[in] size data size in bytes
 *
 * @return true if successful
 */
static void write_to_client(const void *data, uint32_t size)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	const uint8_t *data8 = (const uint8_t *)data;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	613b      	str	r3, [r7, #16]

	size_t pos = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]

	while (pos < size)
 8001fbe:	e020      	b.n	8002002 <write_to_client+0x56>
	{
		/* Wait for previous transmit to be done */
		uart_wait_for_tx_done();
 8001fc0:	f7ff ffdc 	bl	8001f7c <uart_wait_for_tx_done>

		size_t this_size = ((size - pos) < UART_DMA_BUFFER_SIZE) ? (size - pos) : UART_DMA_BUFFER_SIZE;
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fce:	bf28      	it	cs
 8001fd0:	f44f 5300 	movcs.w	r3, #8192	@ 0x2000
 8001fd4:	60fb      	str	r3, [r7, #12]
		memcpy(uart_dma_buffer, &data8[pos], this_size);
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4413      	add	r3, r2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <write_to_client+0x68>)
 8001fe2:	f016 fd38 	bl	8018a56 <memcpy>

		uart_tx_active = true;
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <write_to_client+0x6c>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&EXPLORATION_SERVER_UART_HANDLE, uart_dma_buffer, this_size);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	@ (8002014 <write_to_client+0x68>)
 8001ff4:	4809      	ldr	r0, [pc, #36]	@ (800201c <write_to_client+0x70>)
 8001ff6:	f008 fe2b 	bl	800ac50 <HAL_UART_Transmit_DMA>
		pos += this_size;
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
	while (pos < size)
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3da      	bcc.n	8001fc0 <write_to_client+0x14>
	}
}
 800200a:	bf00      	nop
 800200c:	bf00      	nop
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	240007c8 	.word	0x240007c8
 8002018:	240007c4 	.word	0x240007c4
 800201c:	240005a4 	.word	0x240005a4

08002020 <restart_input>:

/**
 * @brief Restart input of new command
 */
static void restart_input(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	memset(command_buffer, 0, command_buffer_size);
 8002024:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <restart_input+0x30>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <restart_input+0x34>)
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f016 fc5a 	bl	80188e8 <memset>
	/**
	 * Stop previous reception
	 * Clear buffer
	 * Re-start receive after a line has been received.
	 */
	HAL_UART_AbortReceive(&EXPLORATION_SERVER_UART_HANDLE);
 8002034:	4808      	ldr	r0, [pc, #32]	@ (8002058 <restart_input+0x38>)
 8002036:	f008 fed7 	bl	800ade8 <HAL_UART_AbortReceive>
	HAL_UART_Receive_DMA(&EXPLORATION_SERVER_UART_HANDLE, (uint8_t *)command_buffer, command_buffer_size);
 800203a:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <restart_input+0x30>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <restart_input+0x34>)
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	b292      	uxth	r2, r2
 8002044:	4619      	mov	r1, r3
 8002046:	4804      	ldr	r0, [pc, #16]	@ (8002058 <restart_input+0x38>)
 8002048:	f008 fe82 	bl	800ad50 <HAL_UART_Receive_DMA>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	240007bc 	.word	0x240007bc
 8002054:	240007c0 	.word	0x240007c0
 8002058:	240005a4 	.word	0x240005a4

0800205c <set_baudrate>:


static void set_baudrate(uint32_t baudrate)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	/* Wait for previous transmit to be done before changing baudrate */
	uart_wait_for_tx_done();
 8002064:	f7ff ff8a 	bl	8001f7c <uart_wait_for_tx_done>

	HAL_UART_AbortReceive(&EXPLORATION_SERVER_UART_HANDLE);
 8002068:	480e      	ldr	r0, [pc, #56]	@ (80020a4 <set_baudrate+0x48>)
 800206a:	f008 febd 	bl	800ade8 <HAL_UART_AbortReceive>
	HAL_UART_DeInit(&EXPLORATION_SERVER_UART_HANDLE);
 800206e:	480d      	ldr	r0, [pc, #52]	@ (80020a4 <set_baudrate+0x48>)
 8002070:	f008 fd21 	bl	800aab6 <HAL_UART_DeInit>
	EXPLORATION_SERVER_UART_HANDLE.Init.BaudRate = baudrate;
 8002074:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <set_baudrate+0x48>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&EXPLORATION_SERVER_UART_HANDLE) != HAL_OK)
 800207a:	480a      	ldr	r0, [pc, #40]	@ (80020a4 <set_baudrate+0x48>)
 800207c:	f008 fccb 	bl	800aa16 <HAL_UART_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <set_baudrate+0x2e>
	{
		Error_Handler();
 8002086:	f7ff f92b 	bl	80012e0 <Error_Handler>
	}

	HAL_UART_Receive_DMA(&EXPLORATION_SERVER_UART_HANDLE, (uint8_t *)command_buffer, command_buffer_size);
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <set_baudrate+0x4c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a07      	ldr	r2, [pc, #28]	@ (80020ac <set_baudrate+0x50>)
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	b292      	uxth	r2, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <set_baudrate+0x48>)
 8002098:	f008 fe5a 	bl	800ad50 <HAL_UART_Receive_DMA>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	240005a4 	.word	0x240005a4
 80020a8:	240007bc 	.word	0x240007bc
 80020ac:	240007c0 	.word	0x240007c0

080020b0 <get_tick>:


static uint32_t get_tick(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	return acc_integration_get_time();
 80020b4:	f000 fafc 	bl	80026b0 <acc_integration_get_time>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <acc_exploration_server_stm32_init>:
	.ticks_per_second = 1000,
};


void acc_exploration_server_stm32_init(const char *hw, char *buffer, size_t buffer_size)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	command_buffer      = buffer;
 80020cc:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <acc_exploration_server_stm32_init+0x30>)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6013      	str	r3, [r2, #0]
	command_buffer_size = buffer_size;
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <acc_exploration_server_stm32_init+0x34>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6013      	str	r3, [r2, #0]
	acc_exploration_server_init(command_buffer, command_buffer_size, hw, ACC_LOG_LEVEL_INFO);
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <acc_exploration_server_stm32_init+0x30>)
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <acc_exploration_server_stm32_init+0x34>)
 80020de:	6819      	ldr	r1, [r3, #0]
 80020e0:	2302      	movs	r3, #2
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	f011 f9a8 	bl	8013438 <acc_exploration_server_init>
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	240007bc 	.word	0x240007bc
 80020f4:	240007c0 	.word	0x240007c0

080020f8 <acc_exploration_server_stm32_main>:


void acc_exploration_server_stm32_main(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
	 * The embedded exploration server for STM32 can stream UART input data
	 * directly into the input buffer.
	 *
	 * Setup DMA into buffer with buffer_size.
	 */
	HAL_UART_Receive_DMA(&EXPLORATION_SERVER_UART_HANDLE, (uint8_t *)command_buffer, command_buffer_size);
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <acc_exploration_server_stm32_main+0x78>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1c      	ldr	r2, [pc, #112]	@ (8002174 <acc_exploration_server_stm32_main+0x7c>)
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	b292      	uxth	r2, r2
 8002108:	4619      	mov	r1, r3
 800210a:	481b      	ldr	r0, [pc, #108]	@ (8002178 <acc_exploration_server_stm32_main+0x80>)
 800210c:	f008 fe20 	bl	800ad50 <HAL_UART_Receive_DMA>

	while (true)
	{

		ACC_LOG_DEBUG("Running.");
 8002110:	4a1a      	ldr	r2, [pc, #104]	@ (800217c <acc_exploration_server_stm32_main+0x84>)
 8002112:	491b      	ldr	r1, [pc, #108]	@ (8002180 <acc_exploration_server_stm32_main+0x88>)
 8002114:	2004      	movs	r0, #4
 8002116:	f000 f867 	bl	80021e8 <acc_integration_log>
		/* Default values */
		acc_exploration_server_state_t state            = ACC_EXPLORATION_SERVER_WAITING;
 800211a:	2300      	movs	r3, #0
 800211c:	71fb      	strb	r3, [r7, #7]
		int32_t                        ticks_until_next = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]

		if (acc_exploration_server_process(&server_if, &state, &ticks_until_next))
 8002122:	463a      	mov	r2, r7
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	4619      	mov	r1, r3
 8002128:	4816      	ldr	r0, [pc, #88]	@ (8002184 <acc_exploration_server_stm32_main+0x8c>)
 800212a:	f011 fa27 	bl	801357c <acc_exploration_server_process>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d017      	beq.n	8002164 <acc_exploration_server_stm32_main+0x6c>
		{
			switch (state)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d006      	beq.n	8002148 <acc_exploration_server_stm32_main+0x50>
 800213a:	2b02      	cmp	r3, #2
 800213c:	dce8      	bgt.n	8002110 <acc_exploration_server_stm32_main+0x18>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <acc_exploration_server_stm32_main+0x5e>
 8002142:	2b01      	cmp	r3, #1
 8002144:	d009      	beq.n	800215a <acc_exploration_server_stm32_main+0x62>
 8002146:	e011      	b.n	800216c <acc_exploration_server_stm32_main+0x74>
			{
				case ACC_EXPLORATION_SERVER_STOPPED:
					/* Stop exploration server, not implemented for this target */
					ACC_LOG_ERROR("Exploration server command 'stop_application' not supported.");
 8002148:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <acc_exploration_server_stm32_main+0x90>)
 800214a:	490d      	ldr	r1, [pc, #52]	@ (8002180 <acc_exploration_server_stm32_main+0x88>)
 800214c:	2000      	movs	r0, #0
 800214e:	f000 f84b 	bl	80021e8 <acc_integration_log>
					__WFI();
 8002152:	bf30      	wfi
					break;
 8002154:	e00a      	b.n	800216c <acc_exploration_server_stm32_main+0x74>
				case ACC_EXPLORATION_SERVER_WAITING:
					/* Idle time, just wait for next interrupt */
					__WFI();
 8002156:	bf30      	wfi
					break;
 8002158:	e008      	b.n	800216c <acc_exploration_server_stm32_main+0x74>
				case ACC_EXPLORATION_SERVER_STREAMING:
					if (ticks_until_next > 1)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	dd04      	ble.n	800216a <acc_exploration_server_stm32_main+0x72>
					{
						/* More than 1 tick to sleep, wait for next interrupt (at the most 1ms away) */
						__WFI();
 8002160:	bf30      	wfi
					}

					break;
 8002162:	e002      	b.n	800216a <acc_exploration_server_stm32_main+0x72>
			}
		}
		else
		{
			/* Error */
			Error_Handler();
 8002164:	f7ff f8bc 	bl	80012e0 <Error_Handler>
 8002168:	e7d2      	b.n	8002110 <acc_exploration_server_stm32_main+0x18>
					break;
 800216a:	bf00      	nop
	{
 800216c:	e7d0      	b.n	8002110 <acc_exploration_server_stm32_main+0x18>
 800216e:	bf00      	nop
 8002170:	240007bc 	.word	0x240007bc
 8002174:	240007c0 	.word	0x240007c0
 8002178:	240005a4 	.word	0x240005a4
 800217c:	0801b320 	.word	0x0801b320
 8002180:	0801b32c 	.word	0x0801b32c
 8002184:	0801b4ec 	.word	0x0801b4ec
 8002188:	0801b348 	.word	0x0801b348

0800218c <HAL_UART_ErrorCallback>:
	}
}


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	if (huart == &EXPLORATION_SERVER_UART_HANDLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <HAL_UART_ErrorCallback+0x2c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d108      	bne.n	80021ae <HAL_UART_ErrorCallback+0x22>
	{
		/* Check framing error bit to detect break condition */
		if ((huart->ErrorCode & HAL_UART_ERROR_FE) == HAL_UART_ERROR_FE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d101      	bne.n	80021ae <HAL_UART_ErrorCallback+0x22>
		{
			HAL_NVIC_SystemReset();
 80021aa:	f000 fcac 	bl	8002b06 <HAL_NVIC_SystemReset>
		}
	}
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	240005a4 	.word	0x240005a4

080021bc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *h_uart)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	if (h_uart == &EXPLORATION_SERVER_UART_HANDLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <HAL_UART_TxCpltCallback+0x24>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d102      	bne.n	80021d2 <HAL_UART_TxCpltCallback+0x16>
	{
		uart_tx_active = false;
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_UART_TxCpltCallback+0x28>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
	}
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	240005a4 	.word	0x240005a4
 80021e4:	240007c4 	.word	0x240007c4

080021e8 <acc_integration_log>:


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80021e8:	b40c      	push	{r2, r3}
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b0aa      	sub	sp, #168	@ 0xa8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	6039      	str	r1, [r7, #0]
 80021f4:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 80021f6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80021fa:	60bb      	str	r3, [r7, #8]
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80021fc:	f107 000c 	add.w	r0, r7, #12
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002206:	2196      	movs	r1, #150	@ 0x96
 8002208:	f016 fab2 	bl	8018770 <vsniprintf>
 800220c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

	va_end(ap);

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8002210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002214:	2b95      	cmp	r3, #149	@ 0x95
 8002216:	dd0b      	ble.n	8002230 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8002218:	232e      	movs	r3, #46	@ 0x2e
 800221a:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 800221e:	232e      	movs	r3, #46	@ 0x2e
 8002220:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8002224:	232e      	movs	r3, #46	@ 0x2e
 8002226:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	acc_exploration_server_send_log(server_if.write, level, module, log_buffer);
 8002230:	4806      	ldr	r0, [pc, #24]	@ (800224c <acc_integration_log+0x64>)
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	79f9      	ldrb	r1, [r7, #7]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	f011 fe79 	bl	8013f30 <acc_exploration_server_send_log>
}
 800223e:	bf00      	nop
 8002240:	37a8      	adds	r7, #168	@ 0xa8
 8002242:	46bd      	mov	sp, r7
 8002244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002248:	b002      	add	sp, #8
 800224a:	4770      	bx	lr
 800224c:	08001fad 	.word	0x08001fad

08002250 <acconeer_main>:

int acconeer_main(int argc, char *argv[]);


int acconeer_main(int argc, char *argv[])
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	printf("Acconeer Exploration Server\n");
 800225a:	4814      	ldr	r0, [pc, #80]	@ (80022ac <acconeer_main+0x5c>)
 800225c:	f016 f9f2 	bl	8018644 <puts>

	// Wait for host line break to end before starting exploration server
	while (HAL_GPIO_ReadPin(UART_RX_GPIO_Port, UART_RX_Pin) == GPIO_PIN_RESET)
 8002260:	e005      	b.n	800226e <acconeer_main+0x1e>
	{
		printf("Waiting for host line break to end...\n");
 8002262:	4813      	ldr	r0, [pc, #76]	@ (80022b0 <acconeer_main+0x60>)
 8002264:	f016 f9ee 	bl	8018644 <puts>
		HAL_Delay(10);
 8002268:	200a      	movs	r0, #10
 800226a:	f000 fad1 	bl	8002810 <HAL_Delay>
	while (HAL_GPIO_ReadPin(UART_RX_GPIO_Port, UART_RX_Pin) == GPIO_PIN_RESET)
 800226e:	2108      	movs	r1, #8
 8002270:	4810      	ldr	r0, [pc, #64]	@ (80022b4 <acconeer_main+0x64>)
 8002272:	f003 ff89 	bl	8006188 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f2      	beq.n	8002262 <acconeer_main+0x12>
	}

	// Clear out any pending garbage and errors on the UART line by deinit/init
	// it again. This avoids that the HAL_UART_ErrorCallback() is called (leading
	// to an additional reset cycle) if the RX line was previously low.
	HAL_UART_DeInit(&EXPLORATION_SERVER_UART_HANDLE);
 800227c:	480e      	ldr	r0, [pc, #56]	@ (80022b8 <acconeer_main+0x68>)
 800227e:	f008 fc1a 	bl	800aab6 <HAL_UART_DeInit>
	if (HAL_UART_Init(&EXPLORATION_SERVER_UART_HANDLE) != HAL_OK)
 8002282:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <acconeer_main+0x68>)
 8002284:	f008 fbc7 	bl	800aa16 <HAL_UART_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <acconeer_main+0x42>
	{
		Error_Handler();
 800228e:	f7ff f827 	bl	80012e0 <Error_Handler>
	}

	acc_exploration_server_stm32_init("xm125",
 8002292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002296:	4909      	ldr	r1, [pc, #36]	@ (80022bc <acconeer_main+0x6c>)
 8002298:	4809      	ldr	r0, [pc, #36]	@ (80022c0 <acconeer_main+0x70>)
 800229a:	f7ff ff11 	bl	80020c0 <acc_exploration_server_stm32_init>
	                                  exploration_server_command_buffer,
	                                  sizeof(exploration_server_command_buffer));
	acc_exploration_server_stm32_main();
 800229e:	f7ff ff2b 	bl	80020f8 <acc_exploration_server_stm32_main>

	return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	0801b388 	.word	0x0801b388
 80022b0:	0801b3a4 	.word	0x0801b3a4
 80022b4:	58020000 	.word	0x58020000
 80022b8:	240005a4 	.word	0x240005a4
 80022bc:	240027c8 	.word	0x240027c8
 80022c0:	0801b3cc 	.word	0x0801b3cc

080022c4 <disable_interrupts>:
	{SEN_EN5_GPIO_Port, SEN_EN5_Pin, SEN_INT5_GPIO_Port, SEN_INT5_Pin},
};


static inline void disable_interrupts(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
	__disable_irq();
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80022da:	b662      	cpsie	i
}
 80022dc:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80022de:	f3bf 8f6f 	isb	sy
}
 80022e2:	bf00      	nop
	__enable_irq();
	__ISB();
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <spi_select>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void spi_select(acc_sensor_id_t sensor_id)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	GPIO_PinState sel0 = GPIO_PIN_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState sel1 = GPIO_PIN_RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState sel2 = GPIO_PIN_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	737b      	strb	r3, [r7, #13]

	switch (sensor_id)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	2b04      	cmp	r3, #4
 800230a:	d81b      	bhi.n	8002344 <spi_select+0x54>
 800230c:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <spi_select+0x24>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002345 	.word	0x08002345
 8002318:	08002329 	.word	0x08002329
 800231c:	0800232f 	.word	0x0800232f
 8002320:	08002335 	.word	0x08002335
 8002324:	0800233f 	.word	0x0800233f
	{
		case 1:
			break;
		case 2:
			sel0 = GPIO_PIN_SET;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
			break;
 800232c:	e00b      	b.n	8002346 <spi_select+0x56>
		case 3:
			sel1 = GPIO_PIN_SET;
 800232e:	2301      	movs	r3, #1
 8002330:	73bb      	strb	r3, [r7, #14]
			break;
 8002332:	e008      	b.n	8002346 <spi_select+0x56>
		case 4:
			sel0 = GPIO_PIN_SET;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
			sel1 = GPIO_PIN_SET;
 8002338:	2301      	movs	r3, #1
 800233a:	73bb      	strb	r3, [r7, #14]
			break;
 800233c:	e003      	b.n	8002346 <spi_select+0x56>
		case 5:
			sel2 = GPIO_PIN_SET;
 800233e:	2301      	movs	r3, #1
 8002340:	737b      	strb	r3, [r7, #13]
			break;
 8002342:	e000      	b.n	8002346 <spi_select+0x56>
		default:
			break;
 8002344:	bf00      	nop
	}

	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, sel0);
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	461a      	mov	r2, r3
 800234a:	2110      	movs	r1, #16
 800234c:	4809      	ldr	r0, [pc, #36]	@ (8002374 <spi_select+0x84>)
 800234e:	f003 ff33 	bl	80061b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL1_GPIO_Port, SPI_SEL1_Pin, sel1);
 8002352:	7bbb      	ldrb	r3, [r7, #14]
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	4806      	ldr	r0, [pc, #24]	@ (8002374 <spi_select+0x84>)
 800235a:	f003 ff2d 	bl	80061b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL2_GPIO_Port, SPI_SEL2_Pin, sel2);
 800235e:	7b7b      	ldrb	r3, [r7, #13]
 8002360:	461a      	mov	r2, r3
 8002362:	2102      	movs	r1, #2
 8002364:	4803      	ldr	r0, [pc, #12]	@ (8002374 <spi_select+0x84>)
 8002366:	f003 ff27 	bl	80061b8 <HAL_GPIO_WritePin>
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	58020000 	.word	0x58020000

08002378 <acc_hal_integration_sensor_transfer>:


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <acc_hal_integration_sensor_transfer+0x18>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d901      	bls.n	8002394 <acc_hal_integration_sensor_transfer+0x1c>
	{
		Error_Handler();
 8002390:	f7fe ffa6 	bl	80012e0 <Error_Handler>
	}

	spi_select(sensor_id);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff ffab 	bl	80022f0 <spi_select>

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 800239a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800239e:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2140      	movs	r1, #64	@ 0x40
 80023a4:	480a      	ldr	r0, [pc, #40]	@ (80023d0 <acc_hal_integration_sensor_transfer+0x58>)
 80023a6:	f003 ff07 	bl	80061b8 <HAL_GPIO_WritePin>
		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

#else
	HAL_SPI_TransmitReceive(&A121_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	4806      	ldr	r0, [pc, #24]	@ (80023d4 <acc_hal_integration_sensor_transfer+0x5c>)
 80023ba:	f007 fcef 	bl	8009d9c <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 80023be:	2201      	movs	r2, #1
 80023c0:	2140      	movs	r1, #64	@ 0x40
 80023c2:	4803      	ldr	r0, [pc, #12]	@ (80023d0 <acc_hal_integration_sensor_transfer+0x58>)
 80023c4:	f003 fef8 	bl	80061b8 <HAL_GPIO_WritePin>
}
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	58020400 	.word	0x58020400
 80023d4:	24000428 	.word	0x24000428

080023d8 <acc_hal_integration_sensor_supply_on>:


void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <acc_hal_integration_sensor_supply_on+0x14>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d901      	bls.n	80023f0 <acc_hal_integration_sensor_supply_on+0x18>
	{
		Error_Handler();
 80023ec:	f7fe ff78 	bl	80012e0 <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <acc_hal_integration_sensor_supply_off>:


void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <acc_hal_integration_sensor_supply_off+0x14>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d901      	bls.n	8002410 <acc_hal_integration_sensor_supply_off+0x18>
	{
		Error_Handler();
 800240c:	f7fe ff68 	bl	80012e0 <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <acc_hal_integration_sensor_enable>:


void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <acc_hal_integration_sensor_enable+0x14>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d901      	bls.n	8002430 <acc_hal_integration_sensor_enable+0x18>
	{
		Error_Handler();
 800242c:	f7fe ff58 	bl	80012e0 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <acc_hal_integration_sensor_enable+0x48>)
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_SET);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	b29b      	uxth	r3, r3
 8002446:	2201      	movs	r2, #1
 8002448:	4619      	mov	r1, r3
 800244a:	f003 feb5 	bl	80061b8 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal has time to stabilize
	acc_integration_sleep_us(2000);
 800244e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002452:	f000 f905 	bl	8002660 <acc_integration_sleep_us>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	0801b504 	.word	0x0801b504

08002464 <acc_hal_integration_sensor_disable>:


void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <acc_hal_integration_sensor_disable+0x14>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d901      	bls.n	800247c <acc_hal_integration_sensor_disable+0x18>
	{
		Error_Handler();
 8002478:	f7fe ff32 	bl	80012e0 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <acc_hal_integration_sensor_disable+0x48>)
 8002484:	4413      	add	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_RESET);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	b29b      	uxth	r3, r3
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	f003 fe8f 	bl	80061b8 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_us(2000);
 800249a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800249e:	f000 f8df 	bl	8002660 <acc_integration_sleep_us>
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0801b504 	.word	0x0801b504

080024b0 <acc_hal_integration_wait_for_sensor_interrupt>:


bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	bool status = false;
 80024ba:	2300      	movs	r3, #0
 80024bc:	77fb      	strb	r3, [r7, #31]

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d901      	bls.n	80024ce <acc_hal_integration_wait_for_sensor_interrupt+0x1e>
	{
		Error_Handler();
 80024ca:	f7fe ff09 	bl	80012e0 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info  = &sensor_infos[sensor_id - 1];
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002550 <acc_hal_integration_wait_for_sensor_interrupt+0xa0>)
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
	GPIO_TypeDef            *int_port     = sensor_info->int_port;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	617b      	str	r3, [r7, #20]
	uint32_t                int_pin_mask  = sensor_info->int_pin_mask;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	613b      	str	r3, [r7, #16]
	const uint32_t          wait_begin_ms = HAL_GetTick();
 80024e6:	f000 f987 	bl	80027f8 <HAL_GetTick>
 80024ea:	60f8      	str	r0, [r7, #12]

	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 80024ec:	e00d      	b.n	800250a <acc_hal_integration_wait_for_sensor_interrupt+0x5a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80024ee:	f7ff fee9 	bl	80022c4 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6978      	ldr	r0, [r7, #20]
 80024fa:	f003 fe45 	bl	8006188 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d000      	beq.n	8002506 <acc_hal_integration_wait_for_sensor_interrupt+0x56>
		{
			__WFI();
 8002504:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8002506:	f7ff fee6 	bl	80022d6 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	b29b      	uxth	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f003 fe39 	bl	8006188 <HAL_GPIO_ReadPin>
 8002516:	4603      	mov	r3, r0
 8002518:	2b01      	cmp	r3, #1
 800251a:	d007      	beq.n	800252c <acc_hal_integration_wait_for_sensor_interrupt+0x7c>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 800251c:	f000 f96c 	bl	80027f8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8e0      	bhi.n	80024ee <acc_hal_integration_wait_for_sensor_interrupt+0x3e>
	}

	status = HAL_GPIO_ReadPin(int_port, int_pin_mask) == GPIO_PIN_SET;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	b29b      	uxth	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f003 fe28 	bl	8006188 <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	77fb      	strb	r3, [r7, #31]

	return status;
 8002544:	7ffb      	ldrb	r3, [r7, #31]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	0801b504 	.word	0x0801b504

08002554 <acc_hal_integration_sensor_count>:


uint16_t acc_hal_integration_sensor_count(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	return SENSOR_COUNT;
 8002558:	2305      	movs	r3, #5
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <acc_hal_rss_integration_get_implementation>:


const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
		.log      = acc_integration_log,

		.optimization.transfer16 = NULL,
	};

	return &val;
 8002568:	4b02      	ldr	r3, [pc, #8]	@ (8002574 <acc_hal_rss_integration_get_implementation+0x10>)
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	0801b554 	.word	0x0801b554

08002578 <disable_interrupts>:
	uint32_t ASCR;                /*!< GPIO analog switch control register  */
	uint32_t RCC_GPIO_CLK_ENABLE; /*!< GPIO Port Clock Enable               */
} gpio_config_t;

static inline void disable_interrupts(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800257c:	b672      	cpsid	i
}
 800257e:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002580:	f3bf 8f4f 	dsb	sy
}
 8002584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002586:	f3bf 8f6f 	isb	sy
}
 800258a:	bf00      	nop
	__disable_irq();
	__DSB();
	__ISB();
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800259a:	b662      	cpsie	i
}
 800259c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800259e:	f3bf 8f4f 	dsb	sy
}
 80025a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025a4:	f3bf 8f6f 	isb	sy
}
 80025a8:	bf00      	nop
	__enable_irq();
	__DSB();
	__ISB();
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <acc_integration_enable_wake_up>:
	rtc_wakeup_triggered = true;
}


static void acc_integration_enable_wake_up(uint32_t time_usec)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	uint32_t wakeup_clock;
	uint32_t wakeup_counter;

	rtc_wakeup_triggered = false;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <acc_integration_enable_wake_up+0x78>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
	// RTC_WAKEUPCLOCK_RTCCLK_DIV16 gives 1÷32000×16 = 500  us resolution and max 32s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV8  gives 1÷32000×8  = 250  us resolution and max 16s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV4  gives 1÷32000×4  = 125  us resolution and max 8s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV2  gives 1÷32000×2  = 62.5 us resolution and max 4s
	// RTC_WAKEUPCLOCK_CK_SPRE_16BITS gives            1000 ms resolution and max 18h
	if (time_usec > 30000000)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002630 <acc_integration_enable_wake_up+0x7c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d909      	bls.n	80025de <acc_integration_enable_wake_up+0x2a>
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_CK_SPRE_16BITS;
 80025ca:	2304      	movs	r3, #4
 80025cc:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec / 1000000) - 1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <acc_integration_enable_wake_up+0x80>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9b      	lsrs	r3, r3, #18
 80025d8:	3b01      	subs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	e018      	b.n	8002610 <acc_integration_enable_wake_up+0x5c>
	}
	else if (time_usec > 100000)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <acc_integration_enable_wake_up+0x84>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d90a      	bls.n	80025fc <acc_integration_enable_wake_up+0x48>
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV16;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec * 2 / 1000) - 1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4a13      	ldr	r2, [pc, #76]	@ (800263c <acc_integration_enable_wake_up+0x88>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	3b01      	subs	r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	e009      	b.n	8002610 <acc_integration_enable_wake_up+0x5c>
	}
	else
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV2;
 80025fc:	2303      	movs	r3, #3
 80025fe:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec * 16 / 1000) - 1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <acc_integration_enable_wake_up+0x88>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	3b01      	subs	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_RTCEx_SetWakeUpTimer_IT(&MODULE_RTC_HANDLE, wakeup_counter, wakeup_clock) != HAL_OK)
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	480a      	ldr	r0, [pc, #40]	@ (8002640 <acc_integration_enable_wake_up+0x8c>)
 8002616:	f007 f9ad 	bl	8009974 <HAL_RTCEx_SetWakeUpTimer_IT>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <acc_integration_enable_wake_up+0x70>
	{
		Error_Handler();
 8002620:	f7fe fe5e 	bl	80012e0 <Error_Handler>
	}
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24002fc8 	.word	0x24002fc8
 8002630:	01c9c380 	.word	0x01c9c380
 8002634:	431bde83 	.word	0x431bde83
 8002638:	000186a0 	.word	0x000186a0
 800263c:	10624dd3 	.word	0x10624dd3
 8002640:	24000404 	.word	0x24000404

08002644 <acc_integration_disable_wake_up>:


static void acc_integration_disable_wake_up(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_DeactivateWakeUpTimer(&MODULE_RTC_HANDLE) != HAL_OK)
 8002648:	4804      	ldr	r0, [pc, #16]	@ (800265c <acc_integration_disable_wake_up+0x18>)
 800264a:	f007 fa25 	bl	8009a98 <HAL_RTCEx_DeactivateWakeUpTimer>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <acc_integration_disable_wake_up+0x14>
	{
		Error_Handler();
 8002654:	f7fe fe44 	bl	80012e0 <Error_Handler>
	}
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	24000404 	.word	0x24000404

08002660 <acc_integration_sleep_us>:
	acc_integration_sleep_us(time_msec * 1000);
}


void acc_integration_sleep_us(uint32_t time_usec)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	acc_integration_enable_wake_up(time_usec);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ffa3 	bl	80025b4 <acc_integration_enable_wake_up>

	while (!rtc_wakeup_triggered)
 800266e:	e00c      	b.n	800268a <acc_integration_sleep_us+0x2a>
	{
		// Turn off interrupts
		disable_interrupts();
 8002670:	f7ff ff82 	bl	8002578 <disable_interrupts>

		if (!rtc_wakeup_triggered)
 8002674:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <acc_integration_sleep_us+0x4c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d000      	beq.n	8002686 <acc_integration_sleep_us+0x26>
		{
			__WFI();
 8002684:	bf30      	wfi
		}

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
 8002686:	f7ff ff86 	bl	8002596 <enable_interrupts>
	while (!rtc_wakeup_triggered)
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <acc_integration_sleep_us+0x4c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ea      	bne.n	8002670 <acc_integration_sleep_us+0x10>
	}

	rtc_wakeup_triggered = false;
 800269a:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <acc_integration_sleep_us+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]

	acc_integration_disable_wake_up();
 80026a0:	f7ff ffd0 	bl	8002644 <acc_integration_disable_wake_up>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	24002fc8 	.word	0x24002fc8

080026b0 <acc_integration_get_time>:
	}
}


uint32_t acc_integration_get_time(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80026b4:	f000 f8a0 	bl	80027f8 <HAL_GetTick>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	bd80      	pop	{r7, pc}

080026be <acc_integration_mem_alloc>:


void *acc_integration_mem_alloc(size_t size)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	return malloc(size);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f014 fbac 	bl	8016e24 <malloc>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <acc_integration_mem_free>:
	return calloc(nmemb, size);
}


void acc_integration_mem_free(void *ptr)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
	free(ptr);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f014 fba8 	bl	8016e34 <free>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f2:	2003      	movs	r0, #3
 80026f4:	f000 f9c6 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f8:	f004 fd34 	bl	8007164 <HAL_RCC_GetSysClockFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_Init+0x68>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	4913      	ldr	r1, [pc, #76]	@ (8002758 <HAL_Init+0x6c>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002716:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <HAL_Init+0x68>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a0e      	ldr	r2, [pc, #56]	@ (8002758 <HAL_Init+0x6c>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a0b      	ldr	r2, [pc, #44]	@ (800275c <HAL_Init+0x70>)
 800272e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002730:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <HAL_Init+0x74>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002736:	200f      	movs	r0, #15
 8002738:	f000 f814 	bl	8002764 <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e002      	b.n	800274c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002746:	f7fe ffc5 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58024400 	.word	0x58024400
 8002758:	0801b4dc 	.word	0x0801b4dc
 800275c:	24000004 	.word	0x24000004
 8002760:	24000000 	.word	0x24000000

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800276c:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_InitTick+0x60>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e021      	b.n	80027bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <HAL_InitTick+0x64>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_InitTick+0x60>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f9bd 	bl	8002b0e <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f000 f975 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	@ (80027cc <HAL_InitTick+0x68>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2400000c 	.word	0x2400000c
 80027c8:	24000000 	.word	0x24000000
 80027cc:	24000008 	.word	0x24000008

080027d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_IncTick+0x20>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_IncTick+0x24>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	@ (80027f4 <HAL_IncTick+0x24>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	2400000c 	.word	0x2400000c
 80027f4:	24002fcc 	.word	0x24002fcc

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b03      	ldr	r3, [pc, #12]	@ (800280c <HAL_GetTick+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	24002fcc 	.word	0x24002fcc

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff ffee 	bl	80027f8 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002836:	bf00      	nop
 8002838:	f7ff ffde 	bl	80027f8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2400000c 	.word	0x2400000c

08002858 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800285c:	4b03      	ldr	r3, [pc, #12]	@ (800286c <HAL_GetREVID+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0c1b      	lsrs	r3, r3, #16
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	5c001000 	.word	0x5c001000

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 800289a:	4313      	orrs	r3, r2
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	@ (80028b0 <__NVIC_SetPriorityGrouping+0x40>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00
 80028b4:	05fa0000 	.word	0x05fa0000

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	@ (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db12      	blt.n	8002948 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	490a      	ldr	r1, [pc, #40]	@ (8002954 <__NVIC_DisableIRQ+0x44>)
 800292a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	3320      	adds	r3, #32
 8002938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800293c:	f3bf 8f4f 	dsb	sy
}
 8002940:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002942:	f3bf 8f6f 	isb	sy
}
 8002946:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	@ (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	@ (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	@ 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	@ 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002a18:	f3bf 8f4f 	dsb	sy
}
 8002a1c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <__NVIC_SystemReset+0x24>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a26:	4904      	ldr	r1, [pc, #16]	@ (8002a38 <__NVIC_SystemReset+0x24>)
 8002a28:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <__NVIC_SystemReset+0x28>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a2e:	f3bf 8f4f 	dsb	sy
}
 8002a32:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <__NVIC_SystemReset+0x20>
 8002a38:	e000ed00 	.word	0xe000ed00
 8002a3c:	05fa0004 	.word	0x05fa0004

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f7ff ff78 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff feef 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff06 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff7a 	bl	80029ac <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff49 	bl	8002958 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fef9 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff09 	bl	8002910 <__NVIC_DisableIRQ>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002b0a:	f7ff ff83 	bl	8002a14 <__NVIC_SystemReset>

08002b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff92 	bl	8002a40 <SysTick_Config>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b2c:	f3bf 8f5f 	dmb	sy
}
 8002b30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <HAL_MPU_Disable+0x28>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	4a06      	ldr	r2, [pc, #24]	@ (8002b50 <HAL_MPU_Disable+0x28>)
 8002b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_MPU_Disable+0x2c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	605a      	str	r2, [r3, #4]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00
 8002b54:	e000ed90 	.word	0xe000ed90

08002b58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002b60:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <HAL_MPU_Enable+0x38>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_MPU_Enable+0x3c>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_MPU_Enable+0x3c>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b74:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002b76:	f3bf 8f4f 	dsb	sy
}
 8002b7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b7c:	f3bf 8f6f 	isb	sy
}
 8002b80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed90 	.word	0xe000ed90
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	785a      	ldrb	r2, [r3, #1]
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002ba6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002bb4:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7b1b      	ldrb	r3, [r3, #12]
 8002bc0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7adb      	ldrb	r3, [r3, #11]
 8002bc6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7a9b      	ldrb	r3, [r3, #10]
 8002bce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7b5b      	ldrb	r3, [r3, #13]
 8002bd6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002bd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7b9b      	ldrb	r3, [r3, #14]
 8002bde:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002be0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7bdb      	ldrb	r3, [r3, #15]
 8002be6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002be8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7a5b      	ldrb	r3, [r3, #9]
 8002bee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002bf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7a1b      	ldrb	r3, [r3, #8]
 8002bf6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002bf8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c04:	6113      	str	r3, [r2, #16]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed90 	.word	0xe000ed90

08002c18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff fdea 	bl	80027f8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e316      	b.n	800325e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a66      	ldr	r2, [pc, #408]	@ (8002dd0 <HAL_DMA_Init+0x1b8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a65      	ldr	r2, [pc, #404]	@ (8002dd4 <HAL_DMA_Init+0x1bc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a63      	ldr	r2, [pc, #396]	@ (8002dd8 <HAL_DMA_Init+0x1c0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a62      	ldr	r2, [pc, #392]	@ (8002ddc <HAL_DMA_Init+0x1c4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a60      	ldr	r2, [pc, #384]	@ (8002de0 <HAL_DMA_Init+0x1c8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5f      	ldr	r2, [pc, #380]	@ (8002de4 <HAL_DMA_Init+0x1cc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5d      	ldr	r2, [pc, #372]	@ (8002de8 <HAL_DMA_Init+0x1d0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dec <HAL_DMA_Init+0x1d4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5a      	ldr	r2, [pc, #360]	@ (8002df0 <HAL_DMA_Init+0x1d8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a59      	ldr	r2, [pc, #356]	@ (8002df4 <HAL_DMA_Init+0x1dc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a57      	ldr	r2, [pc, #348]	@ (8002df8 <HAL_DMA_Init+0x1e0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a56      	ldr	r2, [pc, #344]	@ (8002dfc <HAL_DMA_Init+0x1e4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a54      	ldr	r2, [pc, #336]	@ (8002e00 <HAL_DMA_Init+0x1e8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a53      	ldr	r2, [pc, #332]	@ (8002e04 <HAL_DMA_Init+0x1ec>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a51      	ldr	r2, [pc, #324]	@ (8002e08 <HAL_DMA_Init+0x1f0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_Init+0xb8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a50      	ldr	r2, [pc, #320]	@ (8002e0c <HAL_DMA_Init+0x1f4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Init+0xbc>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_Init+0xbe>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 813b 	beq.w	8002f52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a37      	ldr	r2, [pc, #220]	@ (8002dd0 <HAL_DMA_Init+0x1b8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d04a      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a36      	ldr	r2, [pc, #216]	@ (8002dd4 <HAL_DMA_Init+0x1bc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d045      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a34      	ldr	r2, [pc, #208]	@ (8002dd8 <HAL_DMA_Init+0x1c0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d040      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a33      	ldr	r2, [pc, #204]	@ (8002ddc <HAL_DMA_Init+0x1c4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d03b      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a31      	ldr	r2, [pc, #196]	@ (8002de0 <HAL_DMA_Init+0x1c8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d036      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a30      	ldr	r2, [pc, #192]	@ (8002de4 <HAL_DMA_Init+0x1cc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d031      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002de8 <HAL_DMA_Init+0x1d0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02c      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2d      	ldr	r2, [pc, #180]	@ (8002dec <HAL_DMA_Init+0x1d4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d027      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2b      	ldr	r2, [pc, #172]	@ (8002df0 <HAL_DMA_Init+0x1d8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002df4 <HAL_DMA_Init+0x1dc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d01d      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a28      	ldr	r2, [pc, #160]	@ (8002df8 <HAL_DMA_Init+0x1e0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d018      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a27      	ldr	r2, [pc, #156]	@ (8002dfc <HAL_DMA_Init+0x1e4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a25      	ldr	r2, [pc, #148]	@ (8002e00 <HAL_DMA_Init+0x1e8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a24      	ldr	r2, [pc, #144]	@ (8002e04 <HAL_DMA_Init+0x1ec>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	@ (8002e08 <HAL_DMA_Init+0x1f0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_DMA_Init+0x174>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a21      	ldr	r2, [pc, #132]	@ (8002e0c <HAL_DMA_Init+0x1f4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d108      	bne.n	8002d9e <HAL_DMA_Init+0x186>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e007      	b.n	8002dae <HAL_DMA_Init+0x196>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dae:	e02f      	b.n	8002e10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db0:	f7ff fd22 	bl	80027f8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d928      	bls.n	8002e10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e246      	b.n	800325e <HAL_DMA_Init+0x646>
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1c8      	bne.n	8002db0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4b83      	ldr	r3, [pc, #524]	@ (8003038 <HAL_DMA_Init+0x420>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e74:	4b71      	ldr	r3, [pc, #452]	@ (800303c <HAL_DMA_Init+0x424>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b71      	ldr	r3, [pc, #452]	@ (8003040 <HAL_DMA_Init+0x428>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e80:	d328      	bcc.n	8002ed4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b28      	cmp	r3, #40	@ 0x28
 8002e88:	d903      	bls.n	8002e92 <HAL_DMA_Init+0x27a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e90:	d917      	bls.n	8002ec2 <HAL_DMA_Init+0x2aa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e98:	d903      	bls.n	8002ea2 <HAL_DMA_Init+0x28a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b42      	cmp	r3, #66	@ 0x42
 8002ea0:	d90f      	bls.n	8002ec2 <HAL_DMA_Init+0x2aa>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b46      	cmp	r3, #70	@ 0x46
 8002ea8:	d903      	bls.n	8002eb2 <HAL_DMA_Init+0x29a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b48      	cmp	r3, #72	@ 0x48
 8002eb0:	d907      	bls.n	8002ec2 <HAL_DMA_Init+0x2aa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b4e      	cmp	r3, #78	@ 0x4e
 8002eb8:	d905      	bls.n	8002ec6 <HAL_DMA_Init+0x2ae>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b52      	cmp	r3, #82	@ 0x52
 8002ec0:	d801      	bhi.n	8002ec6 <HAL_DMA_Init+0x2ae>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMA_Init+0x2b0>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0307 	bic.w	r3, r3, #7
 8002eea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d117      	bne.n	8002f2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00e      	beq.n	8002f2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f002 fcf5 	bl	8005900 <DMA_CheckFifoParam>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2240      	movs	r2, #64	@ 0x40
 8002f20:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e197      	b.n	800325e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f002 fc30 	bl	800579c <DMA_CalcBaseAndBitshift>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	223f      	movs	r2, #63	@ 0x3f
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e0cd      	b.n	80030ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3b      	ldr	r2, [pc, #236]	@ (8003044 <HAL_DMA_Init+0x42c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_DMA_Init+0x38a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a39      	ldr	r2, [pc, #228]	@ (8003048 <HAL_DMA_Init+0x430>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_DMA_Init+0x38a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a38      	ldr	r2, [pc, #224]	@ (800304c <HAL_DMA_Init+0x434>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_DMA_Init+0x38a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a36      	ldr	r2, [pc, #216]	@ (8003050 <HAL_DMA_Init+0x438>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_DMA_Init+0x38a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a35      	ldr	r2, [pc, #212]	@ (8003054 <HAL_DMA_Init+0x43c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Init+0x38a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a33      	ldr	r2, [pc, #204]	@ (8003058 <HAL_DMA_Init+0x440>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_DMA_Init+0x38a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a32      	ldr	r2, [pc, #200]	@ (800305c <HAL_DMA_Init+0x444>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_Init+0x38a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a30      	ldr	r2, [pc, #192]	@ (8003060 <HAL_DMA_Init+0x448>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Init+0x38e>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_DMA_Init+0x390>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8097 	beq.w	80030dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a24      	ldr	r2, [pc, #144]	@ (8003044 <HAL_DMA_Init+0x42c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d021      	beq.n	8002ffc <HAL_DMA_Init+0x3e4>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a22      	ldr	r2, [pc, #136]	@ (8003048 <HAL_DMA_Init+0x430>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01c      	beq.n	8002ffc <HAL_DMA_Init+0x3e4>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a21      	ldr	r2, [pc, #132]	@ (800304c <HAL_DMA_Init+0x434>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d017      	beq.n	8002ffc <HAL_DMA_Init+0x3e4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003050 <HAL_DMA_Init+0x438>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d012      	beq.n	8002ffc <HAL_DMA_Init+0x3e4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1e      	ldr	r2, [pc, #120]	@ (8003054 <HAL_DMA_Init+0x43c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00d      	beq.n	8002ffc <HAL_DMA_Init+0x3e4>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <HAL_DMA_Init+0x440>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d008      	beq.n	8002ffc <HAL_DMA_Init+0x3e4>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <HAL_DMA_Init+0x444>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <HAL_DMA_Init+0x3e4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	@ (8003060 <HAL_DMA_Init+0x448>)
 8002ffa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <HAL_DMA_Init+0x44c>)
 8003018:	4013      	ands	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d021      	beq.n	8003068 <HAL_DMA_Init+0x450>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b80      	cmp	r3, #128	@ 0x80
 800302a:	d102      	bne.n	8003032 <HAL_DMA_Init+0x41a>
 800302c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003030:	e01b      	b.n	800306a <HAL_DMA_Init+0x452>
 8003032:	2300      	movs	r3, #0
 8003034:	e019      	b.n	800306a <HAL_DMA_Init+0x452>
 8003036:	bf00      	nop
 8003038:	fe10803f 	.word	0xfe10803f
 800303c:	5c001000 	.word	0x5c001000
 8003040:	ffff0000 	.word	0xffff0000
 8003044:	58025408 	.word	0x58025408
 8003048:	5802541c 	.word	0x5802541c
 800304c:	58025430 	.word	0x58025430
 8003050:	58025444 	.word	0x58025444
 8003054:	58025458 	.word	0x58025458
 8003058:	5802546c 	.word	0x5802546c
 800305c:	58025480 	.word	0x58025480
 8003060:	58025494 	.word	0x58025494
 8003064:	fffe000f 	.word	0xfffe000f
 8003068:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003078:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003080:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003088:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003090:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003098:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003268 <HAL_DMA_Init+0x650>)
 80030b0:	4413      	add	r3, r2
 80030b2:	4a6e      	ldr	r2, [pc, #440]	@ (800326c <HAL_DMA_Init+0x654>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f002 fb6b 	bl	800579c <DMA_CalcBaseAndBitshift>
 80030c6:	4603      	mov	r3, r0
 80030c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2201      	movs	r2, #1
 80030d4:	409a      	lsls	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e008      	b.n	80030ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2240      	movs	r2, #64	@ 0x40
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0b7      	b.n	800325e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003270 <HAL_DMA_Init+0x658>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d072      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003274 <HAL_DMA_Init+0x65c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d06d      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5c      	ldr	r2, [pc, #368]	@ (8003278 <HAL_DMA_Init+0x660>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d068      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5a      	ldr	r2, [pc, #360]	@ (800327c <HAL_DMA_Init+0x664>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d063      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a59      	ldr	r2, [pc, #356]	@ (8003280 <HAL_DMA_Init+0x668>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d05e      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a57      	ldr	r2, [pc, #348]	@ (8003284 <HAL_DMA_Init+0x66c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d059      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a56      	ldr	r2, [pc, #344]	@ (8003288 <HAL_DMA_Init+0x670>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d054      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_DMA_Init+0x674>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04f      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a53      	ldr	r2, [pc, #332]	@ (8003290 <HAL_DMA_Init+0x678>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04a      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a51      	ldr	r2, [pc, #324]	@ (8003294 <HAL_DMA_Init+0x67c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d045      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_DMA_Init+0x680>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d040      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4e      	ldr	r2, [pc, #312]	@ (800329c <HAL_DMA_Init+0x684>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03b      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4d      	ldr	r2, [pc, #308]	@ (80032a0 <HAL_DMA_Init+0x688>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4b      	ldr	r2, [pc, #300]	@ (80032a4 <HAL_DMA_Init+0x68c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a4a      	ldr	r2, [pc, #296]	@ (80032a8 <HAL_DMA_Init+0x690>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d02c      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a48      	ldr	r2, [pc, #288]	@ (80032ac <HAL_DMA_Init+0x694>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d027      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a47      	ldr	r2, [pc, #284]	@ (80032b0 <HAL_DMA_Init+0x698>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a45      	ldr	r2, [pc, #276]	@ (80032b4 <HAL_DMA_Init+0x69c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a44      	ldr	r2, [pc, #272]	@ (80032b8 <HAL_DMA_Init+0x6a0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a42      	ldr	r2, [pc, #264]	@ (80032bc <HAL_DMA_Init+0x6a4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a41      	ldr	r2, [pc, #260]	@ (80032c0 <HAL_DMA_Init+0x6a8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a3f      	ldr	r2, [pc, #252]	@ (80032c4 <HAL_DMA_Init+0x6ac>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3e      	ldr	r2, [pc, #248]	@ (80032c8 <HAL_DMA_Init+0x6b0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_DMA_Init+0x5c6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3c      	ldr	r2, [pc, #240]	@ (80032cc <HAL_DMA_Init+0x6b4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_DMA_Init+0x5ca>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_DMA_Init+0x5cc>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d032      	beq.n	800324e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f002 fc05 	bl	80059f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b80      	cmp	r3, #128	@ 0x80
 80031f4:	d102      	bne.n	80031fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003210:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <HAL_DMA_Init+0x624>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d80c      	bhi.n	800323c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f002 fc82 	bl	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	e008      	b.n	800324e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	a7fdabf8 	.word	0xa7fdabf8
 800326c:	cccccccd 	.word	0xcccccccd
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494

080032d0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1a8      	b.n	8003634 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a82      	ldr	r2, [pc, #520]	@ (80034f0 <HAL_DMA_DeInit+0x220>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d04a      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a80      	ldr	r2, [pc, #512]	@ (80034f4 <HAL_DMA_DeInit+0x224>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d045      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7f      	ldr	r2, [pc, #508]	@ (80034f8 <HAL_DMA_DeInit+0x228>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d040      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a7d      	ldr	r2, [pc, #500]	@ (80034fc <HAL_DMA_DeInit+0x22c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03b      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7c      	ldr	r2, [pc, #496]	@ (8003500 <HAL_DMA_DeInit+0x230>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d036      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a7a      	ldr	r2, [pc, #488]	@ (8003504 <HAL_DMA_DeInit+0x234>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d031      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a79      	ldr	r2, [pc, #484]	@ (8003508 <HAL_DMA_DeInit+0x238>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d02c      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a77      	ldr	r2, [pc, #476]	@ (800350c <HAL_DMA_DeInit+0x23c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d027      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a76      	ldr	r2, [pc, #472]	@ (8003510 <HAL_DMA_DeInit+0x240>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a74      	ldr	r2, [pc, #464]	@ (8003514 <HAL_DMA_DeInit+0x244>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	@ (8003518 <HAL_DMA_DeInit+0x248>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a71      	ldr	r2, [pc, #452]	@ (800351c <HAL_DMA_DeInit+0x24c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a70      	ldr	r2, [pc, #448]	@ (8003520 <HAL_DMA_DeInit+0x250>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6e      	ldr	r2, [pc, #440]	@ (8003524 <HAL_DMA_DeInit+0x254>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6d      	ldr	r2, [pc, #436]	@ (8003528 <HAL_DMA_DeInit+0x258>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_DMA_DeInit+0xb2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6b      	ldr	r2, [pc, #428]	@ (800352c <HAL_DMA_DeInit+0x25c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <HAL_DMA_DeInit+0xc4>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e007      	b.n	80033a4 <HAL_DMA_DeInit+0xd4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a51      	ldr	r2, [pc, #324]	@ (80034f0 <HAL_DMA_DeInit+0x220>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d04a      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a50      	ldr	r2, [pc, #320]	@ (80034f4 <HAL_DMA_DeInit+0x224>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d045      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a4e      	ldr	r2, [pc, #312]	@ (80034f8 <HAL_DMA_DeInit+0x228>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d040      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a4d      	ldr	r2, [pc, #308]	@ (80034fc <HAL_DMA_DeInit+0x22c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d03b      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003500 <HAL_DMA_DeInit+0x230>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d036      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4a      	ldr	r2, [pc, #296]	@ (8003504 <HAL_DMA_DeInit+0x234>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d031      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a48      	ldr	r2, [pc, #288]	@ (8003508 <HAL_DMA_DeInit+0x238>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02c      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a47      	ldr	r2, [pc, #284]	@ (800350c <HAL_DMA_DeInit+0x23c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d027      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a45      	ldr	r2, [pc, #276]	@ (8003510 <HAL_DMA_DeInit+0x240>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d022      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a44      	ldr	r2, [pc, #272]	@ (8003514 <HAL_DMA_DeInit+0x244>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d01d      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a42      	ldr	r2, [pc, #264]	@ (8003518 <HAL_DMA_DeInit+0x248>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d018      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a41      	ldr	r2, [pc, #260]	@ (800351c <HAL_DMA_DeInit+0x24c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d013      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3f      	ldr	r2, [pc, #252]	@ (8003520 <HAL_DMA_DeInit+0x250>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00e      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a3e      	ldr	r2, [pc, #248]	@ (8003524 <HAL_DMA_DeInit+0x254>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d009      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3c      	ldr	r2, [pc, #240]	@ (8003528 <HAL_DMA_DeInit+0x258>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <HAL_DMA_DeInit+0x174>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3b      	ldr	r2, [pc, #236]	@ (800352c <HAL_DMA_DeInit+0x25c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_DMA_DeInit+0x178>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_DMA_DeInit+0x17a>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d025      	beq.n	800349a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2200      	movs	r2, #0
 800345c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2221      	movs	r2, #33	@ 0x21
 800347c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f002 f98c 	bl	800579c <DMA_CalcBaseAndBitshift>
 8003484:	4603      	mov	r3, r0
 8003486:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	223f      	movs	r2, #63	@ 0x3f
 8003492:	409a      	lsls	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	e081      	b.n	800359e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a24      	ldr	r2, [pc, #144]	@ (8003530 <HAL_DMA_DeInit+0x260>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_DMA_DeInit+0x21a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a22      	ldr	r2, [pc, #136]	@ (8003534 <HAL_DMA_DeInit+0x264>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_DeInit+0x21a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a21      	ldr	r2, [pc, #132]	@ (8003538 <HAL_DMA_DeInit+0x268>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d018      	beq.n	80034ea <HAL_DMA_DeInit+0x21a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1f      	ldr	r2, [pc, #124]	@ (800353c <HAL_DMA_DeInit+0x26c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_DMA_DeInit+0x21a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003540 <HAL_DMA_DeInit+0x270>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_DMA_DeInit+0x21a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003544 <HAL_DMA_DeInit+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_DMA_DeInit+0x21a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1b      	ldr	r2, [pc, #108]	@ (8003548 <HAL_DMA_DeInit+0x278>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_DMA_DeInit+0x21a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a19      	ldr	r2, [pc, #100]	@ (800354c <HAL_DMA_DeInit+0x27c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d132      	bne.n	8003550 <HAL_DMA_DeInit+0x280>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e031      	b.n	8003552 <HAL_DMA_DeInit+0x282>
 80034ee:	bf00      	nop
 80034f0:	40020010 	.word	0x40020010
 80034f4:	40020028 	.word	0x40020028
 80034f8:	40020040 	.word	0x40020040
 80034fc:	40020058 	.word	0x40020058
 8003500:	40020070 	.word	0x40020070
 8003504:	40020088 	.word	0x40020088
 8003508:	400200a0 	.word	0x400200a0
 800350c:	400200b8 	.word	0x400200b8
 8003510:	40020410 	.word	0x40020410
 8003514:	40020428 	.word	0x40020428
 8003518:	40020440 	.word	0x40020440
 800351c:	40020458 	.word	0x40020458
 8003520:	40020470 	.word	0x40020470
 8003524:	40020488 	.word	0x40020488
 8003528:	400204a0 	.word	0x400204a0
 800352c:	400204b8 	.word	0x400204b8
 8003530:	58025408 	.word	0x58025408
 8003534:	5802541c 	.word	0x5802541c
 8003538:	58025430 	.word	0x58025430
 800353c:	58025444 	.word	0x58025444
 8003540:	58025458 	.word	0x58025458
 8003544:	5802546c 	.word	0x5802546c
 8003548:	58025480 	.word	0x58025480
 800354c:	58025494 	.word	0x58025494
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d021      	beq.n	800359a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f002 f90c 	bl	800579c <DMA_CalcBaseAndBitshift>
 8003584:	4603      	mov	r3, r0
 8003586:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	e001      	b.n	800359e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e04a      	b.n	8003634 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f002 fa2a 	bl	80059f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035bc:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00f      	beq.n	80035e6 <HAL_DMA_DeInit+0x316>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d80b      	bhi.n	80035e6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f002 faac 	bl	8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035e4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e226      	b.n	8003aa6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_DMA_Start_IT+0x2a>
 8003662:	2302      	movs	r3, #2
 8003664:	e21f      	b.n	8003aa6 <HAL_DMA_Start_IT+0x46a>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	f040 820a 	bne.w	8003a90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a68      	ldr	r2, [pc, #416]	@ (8003830 <HAL_DMA_Start_IT+0x1f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d04a      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a66      	ldr	r2, [pc, #408]	@ (8003834 <HAL_DMA_Start_IT+0x1f8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d045      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a65      	ldr	r2, [pc, #404]	@ (8003838 <HAL_DMA_Start_IT+0x1fc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d040      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a63      	ldr	r2, [pc, #396]	@ (800383c <HAL_DMA_Start_IT+0x200>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d03b      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a62      	ldr	r2, [pc, #392]	@ (8003840 <HAL_DMA_Start_IT+0x204>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d036      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a60      	ldr	r2, [pc, #384]	@ (8003844 <HAL_DMA_Start_IT+0x208>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d031      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003848 <HAL_DMA_Start_IT+0x20c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d02c      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5d      	ldr	r2, [pc, #372]	@ (800384c <HAL_DMA_Start_IT+0x210>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d027      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a5c      	ldr	r2, [pc, #368]	@ (8003850 <HAL_DMA_Start_IT+0x214>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d022      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003854 <HAL_DMA_Start_IT+0x218>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01d      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a59      	ldr	r2, [pc, #356]	@ (8003858 <HAL_DMA_Start_IT+0x21c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d018      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a57      	ldr	r2, [pc, #348]	@ (800385c <HAL_DMA_Start_IT+0x220>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a56      	ldr	r2, [pc, #344]	@ (8003860 <HAL_DMA_Start_IT+0x224>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a54      	ldr	r2, [pc, #336]	@ (8003864 <HAL_DMA_Start_IT+0x228>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a53      	ldr	r2, [pc, #332]	@ (8003868 <HAL_DMA_Start_IT+0x22c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_DMA_Start_IT+0xee>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a51      	ldr	r2, [pc, #324]	@ (800386c <HAL_DMA_Start_IT+0x230>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <HAL_DMA_Start_IT+0x100>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e007      	b.n	800374c <HAL_DMA_Start_IT+0x110>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f001 fe76 	bl	8005444 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a34      	ldr	r2, [pc, #208]	@ (8003830 <HAL_DMA_Start_IT+0x1f4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d04a      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a33      	ldr	r2, [pc, #204]	@ (8003834 <HAL_DMA_Start_IT+0x1f8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d045      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a31      	ldr	r2, [pc, #196]	@ (8003838 <HAL_DMA_Start_IT+0x1fc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d040      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a30      	ldr	r2, [pc, #192]	@ (800383c <HAL_DMA_Start_IT+0x200>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d03b      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <HAL_DMA_Start_IT+0x204>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d036      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2d      	ldr	r2, [pc, #180]	@ (8003844 <HAL_DMA_Start_IT+0x208>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d031      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2b      	ldr	r2, [pc, #172]	@ (8003848 <HAL_DMA_Start_IT+0x20c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d02c      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2a      	ldr	r2, [pc, #168]	@ (800384c <HAL_DMA_Start_IT+0x210>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d027      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a28      	ldr	r2, [pc, #160]	@ (8003850 <HAL_DMA_Start_IT+0x214>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d022      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a27      	ldr	r2, [pc, #156]	@ (8003854 <HAL_DMA_Start_IT+0x218>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01d      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a25      	ldr	r2, [pc, #148]	@ (8003858 <HAL_DMA_Start_IT+0x21c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a24      	ldr	r2, [pc, #144]	@ (800385c <HAL_DMA_Start_IT+0x220>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	@ (8003860 <HAL_DMA_Start_IT+0x224>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a21      	ldr	r2, [pc, #132]	@ (8003864 <HAL_DMA_Start_IT+0x228>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003868 <HAL_DMA_Start_IT+0x22c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_DMA_Start_IT+0x1bc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	@ (800386c <HAL_DMA_Start_IT+0x230>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Start_IT+0x1c0>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_DMA_Start_IT+0x1c2>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d036      	beq.n	8003870 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 021e 	bic.w	r2, r3, #30
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0216 	orr.w	r2, r2, #22
 8003814:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d03e      	beq.n	800389c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0208 	orr.w	r2, r2, #8
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e035      	b.n	800389c <HAL_DMA_Start_IT+0x260>
 8003830:	40020010 	.word	0x40020010
 8003834:	40020028 	.word	0x40020028
 8003838:	40020040 	.word	0x40020040
 800383c:	40020058 	.word	0x40020058
 8003840:	40020070 	.word	0x40020070
 8003844:	40020088 	.word	0x40020088
 8003848:	400200a0 	.word	0x400200a0
 800384c:	400200b8 	.word	0x400200b8
 8003850:	40020410 	.word	0x40020410
 8003854:	40020428 	.word	0x40020428
 8003858:	40020440 	.word	0x40020440
 800385c:	40020458 	.word	0x40020458
 8003860:	40020470 	.word	0x40020470
 8003864:	40020488 	.word	0x40020488
 8003868:	400204a0 	.word	0x400204a0
 800386c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 020e 	bic.w	r2, r3, #14
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 020a 	orr.w	r2, r2, #10
 8003882:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0204 	orr.w	r2, r2, #4
 800389a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a83      	ldr	r2, [pc, #524]	@ (8003ab0 <HAL_DMA_Start_IT+0x474>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d072      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a82      	ldr	r2, [pc, #520]	@ (8003ab4 <HAL_DMA_Start_IT+0x478>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d06d      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a80      	ldr	r2, [pc, #512]	@ (8003ab8 <HAL_DMA_Start_IT+0x47c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d068      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7f      	ldr	r2, [pc, #508]	@ (8003abc <HAL_DMA_Start_IT+0x480>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d063      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac0 <HAL_DMA_Start_IT+0x484>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d05e      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ac4 <HAL_DMA_Start_IT+0x488>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d059      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a7a      	ldr	r2, [pc, #488]	@ (8003ac8 <HAL_DMA_Start_IT+0x48c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d054      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a79      	ldr	r2, [pc, #484]	@ (8003acc <HAL_DMA_Start_IT+0x490>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04f      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a77      	ldr	r2, [pc, #476]	@ (8003ad0 <HAL_DMA_Start_IT+0x494>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04a      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a76      	ldr	r2, [pc, #472]	@ (8003ad4 <HAL_DMA_Start_IT+0x498>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d045      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a74      	ldr	r2, [pc, #464]	@ (8003ad8 <HAL_DMA_Start_IT+0x49c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d040      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a73      	ldr	r2, [pc, #460]	@ (8003adc <HAL_DMA_Start_IT+0x4a0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d03b      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a71      	ldr	r2, [pc, #452]	@ (8003ae0 <HAL_DMA_Start_IT+0x4a4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d036      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a70      	ldr	r2, [pc, #448]	@ (8003ae4 <HAL_DMA_Start_IT+0x4a8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d031      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae8 <HAL_DMA_Start_IT+0x4ac>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02c      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6d      	ldr	r2, [pc, #436]	@ (8003aec <HAL_DMA_Start_IT+0x4b0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d027      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6b      	ldr	r2, [pc, #428]	@ (8003af0 <HAL_DMA_Start_IT+0x4b4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6a      	ldr	r2, [pc, #424]	@ (8003af4 <HAL_DMA_Start_IT+0x4b8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01d      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a68      	ldr	r2, [pc, #416]	@ (8003af8 <HAL_DMA_Start_IT+0x4bc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a67      	ldr	r2, [pc, #412]	@ (8003afc <HAL_DMA_Start_IT+0x4c0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a65      	ldr	r2, [pc, #404]	@ (8003b00 <HAL_DMA_Start_IT+0x4c4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a64      	ldr	r2, [pc, #400]	@ (8003b04 <HAL_DMA_Start_IT+0x4c8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a62      	ldr	r2, [pc, #392]	@ (8003b08 <HAL_DMA_Start_IT+0x4cc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_DMA_Start_IT+0x350>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a61      	ldr	r2, [pc, #388]	@ (8003b0c <HAL_DMA_Start_IT+0x4d0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_DMA_Start_IT+0x354>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_DMA_Start_IT+0x356>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01a      	beq.n	80039cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a37      	ldr	r2, [pc, #220]	@ (8003ab0 <HAL_DMA_Start_IT+0x474>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d04a      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a36      	ldr	r2, [pc, #216]	@ (8003ab4 <HAL_DMA_Start_IT+0x478>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d045      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a34      	ldr	r2, [pc, #208]	@ (8003ab8 <HAL_DMA_Start_IT+0x47c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d040      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a33      	ldr	r2, [pc, #204]	@ (8003abc <HAL_DMA_Start_IT+0x480>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d03b      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a31      	ldr	r2, [pc, #196]	@ (8003ac0 <HAL_DMA_Start_IT+0x484>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d036      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a30      	ldr	r2, [pc, #192]	@ (8003ac4 <HAL_DMA_Start_IT+0x488>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d031      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac8 <HAL_DMA_Start_IT+0x48c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02c      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2d      	ldr	r2, [pc, #180]	@ (8003acc <HAL_DMA_Start_IT+0x490>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d027      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad0 <HAL_DMA_Start_IT+0x494>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d022      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad4 <HAL_DMA_Start_IT+0x498>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d01d      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a28      	ldr	r2, [pc, #160]	@ (8003ad8 <HAL_DMA_Start_IT+0x49c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d018      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a27      	ldr	r2, [pc, #156]	@ (8003adc <HAL_DMA_Start_IT+0x4a0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a25      	ldr	r2, [pc, #148]	@ (8003ae0 <HAL_DMA_Start_IT+0x4a4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a24      	ldr	r2, [pc, #144]	@ (8003ae4 <HAL_DMA_Start_IT+0x4a8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <HAL_DMA_Start_IT+0x4ac>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_Start_IT+0x430>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a21      	ldr	r2, [pc, #132]	@ (8003aec <HAL_DMA_Start_IT+0x4b0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <HAL_DMA_Start_IT+0x442>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e012      	b.n	8003aa4 <HAL_DMA_Start_IT+0x468>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e009      	b.n	8003aa4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40020010 	.word	0x40020010
 8003ab4:	40020028 	.word	0x40020028
 8003ab8:	40020040 	.word	0x40020040
 8003abc:	40020058 	.word	0x40020058
 8003ac0:	40020070 	.word	0x40020070
 8003ac4:	40020088 	.word	0x40020088
 8003ac8:	400200a0 	.word	0x400200a0
 8003acc:	400200b8 	.word	0x400200b8
 8003ad0:	40020410 	.word	0x40020410
 8003ad4:	40020428 	.word	0x40020428
 8003ad8:	40020440 	.word	0x40020440
 8003adc:	40020458 	.word	0x40020458
 8003ae0:	40020470 	.word	0x40020470
 8003ae4:	40020488 	.word	0x40020488
 8003ae8:	400204a0 	.word	0x400204a0
 8003aec:	400204b8 	.word	0x400204b8
 8003af0:	58025408 	.word	0x58025408
 8003af4:	5802541c 	.word	0x5802541c
 8003af8:	58025430 	.word	0x58025430
 8003afc:	58025444 	.word	0x58025444
 8003b00:	58025458 	.word	0x58025458
 8003b04:	5802546c 	.word	0x5802546c
 8003b08:	58025480 	.word	0x58025480
 8003b0c:	58025494 	.word	0x58025494

08003b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7fe fe6e 	bl	80027f8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e2dc      	b.n	80040e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d008      	beq.n	8003b46 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2280      	movs	r2, #128	@ 0x80
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e2cd      	b.n	80040e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a76      	ldr	r2, [pc, #472]	@ (8003d24 <HAL_DMA_Abort+0x214>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04a      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a74      	ldr	r2, [pc, #464]	@ (8003d28 <HAL_DMA_Abort+0x218>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d045      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a73      	ldr	r2, [pc, #460]	@ (8003d2c <HAL_DMA_Abort+0x21c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d040      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a71      	ldr	r2, [pc, #452]	@ (8003d30 <HAL_DMA_Abort+0x220>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d03b      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a70      	ldr	r2, [pc, #448]	@ (8003d34 <HAL_DMA_Abort+0x224>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d036      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d38 <HAL_DMA_Abort+0x228>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6d      	ldr	r2, [pc, #436]	@ (8003d3c <HAL_DMA_Abort+0x22c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02c      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6b      	ldr	r2, [pc, #428]	@ (8003d40 <HAL_DMA_Abort+0x230>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8003d44 <HAL_DMA_Abort+0x234>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a68      	ldr	r2, [pc, #416]	@ (8003d48 <HAL_DMA_Abort+0x238>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a67      	ldr	r2, [pc, #412]	@ (8003d4c <HAL_DMA_Abort+0x23c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a65      	ldr	r2, [pc, #404]	@ (8003d50 <HAL_DMA_Abort+0x240>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a64      	ldr	r2, [pc, #400]	@ (8003d54 <HAL_DMA_Abort+0x244>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a62      	ldr	r2, [pc, #392]	@ (8003d58 <HAL_DMA_Abort+0x248>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a61      	ldr	r2, [pc, #388]	@ (8003d5c <HAL_DMA_Abort+0x24c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_Abort+0xd6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a5f      	ldr	r2, [pc, #380]	@ (8003d60 <HAL_DMA_Abort+0x250>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_DMA_Abort+0xda>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_DMA_Abort+0xdc>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 021e 	bic.w	r2, r2, #30
 8003bfe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e00a      	b.n	8003c2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020e 	bic.w	r2, r2, #14
 8003c26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a3c      	ldr	r2, [pc, #240]	@ (8003d24 <HAL_DMA_Abort+0x214>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d072      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d28 <HAL_DMA_Abort+0x218>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d06d      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a39      	ldr	r2, [pc, #228]	@ (8003d2c <HAL_DMA_Abort+0x21c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d068      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a37      	ldr	r2, [pc, #220]	@ (8003d30 <HAL_DMA_Abort+0x220>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d063      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a36      	ldr	r2, [pc, #216]	@ (8003d34 <HAL_DMA_Abort+0x224>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d05e      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a34      	ldr	r2, [pc, #208]	@ (8003d38 <HAL_DMA_Abort+0x228>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d059      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a33      	ldr	r2, [pc, #204]	@ (8003d3c <HAL_DMA_Abort+0x22c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d054      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a31      	ldr	r2, [pc, #196]	@ (8003d40 <HAL_DMA_Abort+0x230>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d04f      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a30      	ldr	r2, [pc, #192]	@ (8003d44 <HAL_DMA_Abort+0x234>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04a      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d48 <HAL_DMA_Abort+0x238>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d045      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	@ (8003d4c <HAL_DMA_Abort+0x23c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d50 <HAL_DMA_Abort+0x240>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2a      	ldr	r2, [pc, #168]	@ (8003d54 <HAL_DMA_Abort+0x244>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d036      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a28      	ldr	r2, [pc, #160]	@ (8003d58 <HAL_DMA_Abort+0x248>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a27      	ldr	r2, [pc, #156]	@ (8003d5c <HAL_DMA_Abort+0x24c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d02c      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a25      	ldr	r2, [pc, #148]	@ (8003d60 <HAL_DMA_Abort+0x250>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <HAL_DMA_Abort+0x254>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <HAL_DMA_Abort+0x258>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <HAL_DMA_Abort+0x25c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d70 <HAL_DMA_Abort+0x260>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003d74 <HAL_DMA_Abort+0x264>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1c      	ldr	r2, [pc, #112]	@ (8003d78 <HAL_DMA_Abort+0x268>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d7c <HAL_DMA_Abort+0x26c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_Abort+0x20e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_DMA_Abort+0x270>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d132      	bne.n	8003d84 <HAL_DMA_Abort+0x274>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e031      	b.n	8003d86 <HAL_DMA_Abort+0x276>
 8003d22:	bf00      	nop
 8003d24:	40020010 	.word	0x40020010
 8003d28:	40020028 	.word	0x40020028
 8003d2c:	40020040 	.word	0x40020040
 8003d30:	40020058 	.word	0x40020058
 8003d34:	40020070 	.word	0x40020070
 8003d38:	40020088 	.word	0x40020088
 8003d3c:	400200a0 	.word	0x400200a0
 8003d40:	400200b8 	.word	0x400200b8
 8003d44:	40020410 	.word	0x40020410
 8003d48:	40020428 	.word	0x40020428
 8003d4c:	40020440 	.word	0x40020440
 8003d50:	40020458 	.word	0x40020458
 8003d54:	40020470 	.word	0x40020470
 8003d58:	40020488 	.word	0x40020488
 8003d5c:	400204a0 	.word	0x400204a0
 8003d60:	400204b8 	.word	0x400204b8
 8003d64:	58025408 	.word	0x58025408
 8003d68:	5802541c 	.word	0x5802541c
 8003d6c:	58025430 	.word	0x58025430
 8003d70:	58025444 	.word	0x58025444
 8003d74:	58025458 	.word	0x58025458
 8003d78:	5802546c 	.word	0x5802546c
 8003d7c:	58025480 	.word	0x58025480
 8003d80:	58025494 	.word	0x58025494
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f54 <HAL_DMA_Abort+0x444>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04a      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f58 <HAL_DMA_Abort+0x448>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d045      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f5c <HAL_DMA_Abort+0x44c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d040      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a68      	ldr	r2, [pc, #416]	@ (8003f60 <HAL_DMA_Abort+0x450>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d03b      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a67      	ldr	r2, [pc, #412]	@ (8003f64 <HAL_DMA_Abort+0x454>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d036      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a65      	ldr	r2, [pc, #404]	@ (8003f68 <HAL_DMA_Abort+0x458>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d031      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a64      	ldr	r2, [pc, #400]	@ (8003f6c <HAL_DMA_Abort+0x45c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d02c      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a62      	ldr	r2, [pc, #392]	@ (8003f70 <HAL_DMA_Abort+0x460>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d027      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a61      	ldr	r2, [pc, #388]	@ (8003f74 <HAL_DMA_Abort+0x464>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5f      	ldr	r2, [pc, #380]	@ (8003f78 <HAL_DMA_Abort+0x468>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01d      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5e      	ldr	r2, [pc, #376]	@ (8003f7c <HAL_DMA_Abort+0x46c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5c      	ldr	r2, [pc, #368]	@ (8003f80 <HAL_DMA_Abort+0x470>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a5b      	ldr	r2, [pc, #364]	@ (8003f84 <HAL_DMA_Abort+0x474>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a59      	ldr	r2, [pc, #356]	@ (8003f88 <HAL_DMA_Abort+0x478>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a58      	ldr	r2, [pc, #352]	@ (8003f8c <HAL_DMA_Abort+0x47c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_DMA_Abort+0x32a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a56      	ldr	r2, [pc, #344]	@ (8003f90 <HAL_DMA_Abort+0x480>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <HAL_DMA_Abort+0x33c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e007      	b.n	8003e5c <HAL_DMA_Abort+0x34c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e5c:	e013      	b.n	8003e86 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e5e:	f7fe fccb 	bl	80027f8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d90c      	bls.n	8003e86 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2203      	movs	r2, #3
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e12d      	b.n	80040e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e5      	bne.n	8003e5e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2f      	ldr	r2, [pc, #188]	@ (8003f54 <HAL_DMA_Abort+0x444>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d04a      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f58 <HAL_DMA_Abort+0x448>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d045      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8003f5c <HAL_DMA_Abort+0x44c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d040      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f60 <HAL_DMA_Abort+0x450>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d03b      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a29      	ldr	r2, [pc, #164]	@ (8003f64 <HAL_DMA_Abort+0x454>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d036      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <HAL_DMA_Abort+0x458>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a26      	ldr	r2, [pc, #152]	@ (8003f6c <HAL_DMA_Abort+0x45c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d02c      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a24      	ldr	r2, [pc, #144]	@ (8003f70 <HAL_DMA_Abort+0x460>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d027      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a23      	ldr	r2, [pc, #140]	@ (8003f74 <HAL_DMA_Abort+0x464>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d022      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <HAL_DMA_Abort+0x468>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01d      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a20      	ldr	r2, [pc, #128]	@ (8003f7c <HAL_DMA_Abort+0x46c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d018      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1e      	ldr	r2, [pc, #120]	@ (8003f80 <HAL_DMA_Abort+0x470>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f84 <HAL_DMA_Abort+0x474>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <HAL_DMA_Abort+0x478>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1a      	ldr	r2, [pc, #104]	@ (8003f8c <HAL_DMA_Abort+0x47c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_DMA_Abort+0x422>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a18      	ldr	r2, [pc, #96]	@ (8003f90 <HAL_DMA_Abort+0x480>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_DMA_Abort+0x426>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_DMA_Abort+0x428>
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02b      	beq.n	8003f94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	223f      	movs	r2, #63	@ 0x3f
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	e02a      	b.n	8003faa <HAL_DMA_Abort+0x49a>
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a4f      	ldr	r2, [pc, #316]	@ (80040ec <HAL_DMA_Abort+0x5dc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d072      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80040f0 <HAL_DMA_Abort+0x5e0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d06d      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80040f4 <HAL_DMA_Abort+0x5e4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d068      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80040f8 <HAL_DMA_Abort+0x5e8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d063      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a49      	ldr	r2, [pc, #292]	@ (80040fc <HAL_DMA_Abort+0x5ec>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d05e      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a47      	ldr	r2, [pc, #284]	@ (8004100 <HAL_DMA_Abort+0x5f0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d059      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a46      	ldr	r2, [pc, #280]	@ (8004104 <HAL_DMA_Abort+0x5f4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d054      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a44      	ldr	r2, [pc, #272]	@ (8004108 <HAL_DMA_Abort+0x5f8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d04f      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a43      	ldr	r2, [pc, #268]	@ (800410c <HAL_DMA_Abort+0x5fc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d04a      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a41      	ldr	r2, [pc, #260]	@ (8004110 <HAL_DMA_Abort+0x600>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d045      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a40      	ldr	r2, [pc, #256]	@ (8004114 <HAL_DMA_Abort+0x604>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d040      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3e      	ldr	r2, [pc, #248]	@ (8004118 <HAL_DMA_Abort+0x608>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d03b      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3d      	ldr	r2, [pc, #244]	@ (800411c <HAL_DMA_Abort+0x60c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d036      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a3b      	ldr	r2, [pc, #236]	@ (8004120 <HAL_DMA_Abort+0x610>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d031      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3a      	ldr	r2, [pc, #232]	@ (8004124 <HAL_DMA_Abort+0x614>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d02c      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a38      	ldr	r2, [pc, #224]	@ (8004128 <HAL_DMA_Abort+0x618>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d027      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a37      	ldr	r2, [pc, #220]	@ (800412c <HAL_DMA_Abort+0x61c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d022      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a35      	ldr	r2, [pc, #212]	@ (8004130 <HAL_DMA_Abort+0x620>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01d      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_DMA_Abort+0x624>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a32      	ldr	r2, [pc, #200]	@ (8004138 <HAL_DMA_Abort+0x628>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_DMA_Abort+0x62c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2f      	ldr	r2, [pc, #188]	@ (8004140 <HAL_DMA_Abort+0x630>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2e      	ldr	r2, [pc, #184]	@ (8004144 <HAL_DMA_Abort+0x634>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_DMA_Abort+0x58a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2c      	ldr	r2, [pc, #176]	@ (8004148 <HAL_DMA_Abort+0x638>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_DMA_Abort+0x58e>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_DMA_Abort+0x590>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d015      	beq.n	80040d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80040ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40020010 	.word	0x40020010
 80040f0:	40020028 	.word	0x40020028
 80040f4:	40020040 	.word	0x40020040
 80040f8:	40020058 	.word	0x40020058
 80040fc:	40020070 	.word	0x40020070
 8004100:	40020088 	.word	0x40020088
 8004104:	400200a0 	.word	0x400200a0
 8004108:	400200b8 	.word	0x400200b8
 800410c:	40020410 	.word	0x40020410
 8004110:	40020428 	.word	0x40020428
 8004114:	40020440 	.word	0x40020440
 8004118:	40020458 	.word	0x40020458
 800411c:	40020470 	.word	0x40020470
 8004120:	40020488 	.word	0x40020488
 8004124:	400204a0 	.word	0x400204a0
 8004128:	400204b8 	.word	0x400204b8
 800412c:	58025408 	.word	0x58025408
 8004130:	5802541c 	.word	0x5802541c
 8004134:	58025430 	.word	0x58025430
 8004138:	58025444 	.word	0x58025444
 800413c:	58025458 	.word	0x58025458
 8004140:	5802546c 	.word	0x5802546c
 8004144:	58025480 	.word	0x58025480
 8004148:	58025494 	.word	0x58025494

0800414c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e237      	b.n	80045ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d004      	beq.n	8004174 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2280      	movs	r2, #128	@ 0x80
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e22c      	b.n	80045ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5c      	ldr	r2, [pc, #368]	@ (80042ec <HAL_DMA_Abort_IT+0x1a0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d04a      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a5b      	ldr	r2, [pc, #364]	@ (80042f0 <HAL_DMA_Abort_IT+0x1a4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d045      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a59      	ldr	r2, [pc, #356]	@ (80042f4 <HAL_DMA_Abort_IT+0x1a8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d040      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a58      	ldr	r2, [pc, #352]	@ (80042f8 <HAL_DMA_Abort_IT+0x1ac>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d03b      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a56      	ldr	r2, [pc, #344]	@ (80042fc <HAL_DMA_Abort_IT+0x1b0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d036      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a55      	ldr	r2, [pc, #340]	@ (8004300 <HAL_DMA_Abort_IT+0x1b4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d031      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a53      	ldr	r2, [pc, #332]	@ (8004304 <HAL_DMA_Abort_IT+0x1b8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d02c      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a52      	ldr	r2, [pc, #328]	@ (8004308 <HAL_DMA_Abort_IT+0x1bc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d027      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a50      	ldr	r2, [pc, #320]	@ (800430c <HAL_DMA_Abort_IT+0x1c0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4f      	ldr	r2, [pc, #316]	@ (8004310 <HAL_DMA_Abort_IT+0x1c4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d01d      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004314 <HAL_DMA_Abort_IT+0x1c8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004318 <HAL_DMA_Abort_IT+0x1cc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <HAL_DMA_Abort_IT+0x1d0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a49      	ldr	r2, [pc, #292]	@ (8004320 <HAL_DMA_Abort_IT+0x1d4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a47      	ldr	r2, [pc, #284]	@ (8004324 <HAL_DMA_Abort_IT+0x1d8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_DMA_Abort_IT+0xc8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a46      	ldr	r2, [pc, #280]	@ (8004328 <HAL_DMA_Abort_IT+0x1dc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Abort_IT+0xcc>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_DMA_Abort_IT+0xce>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8086 	beq.w	800432c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2204      	movs	r2, #4
 8004224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2f      	ldr	r2, [pc, #188]	@ (80042ec <HAL_DMA_Abort_IT+0x1a0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d04a      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2e      	ldr	r2, [pc, #184]	@ (80042f0 <HAL_DMA_Abort_IT+0x1a4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d045      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2c      	ldr	r2, [pc, #176]	@ (80042f4 <HAL_DMA_Abort_IT+0x1a8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d040      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2b      	ldr	r2, [pc, #172]	@ (80042f8 <HAL_DMA_Abort_IT+0x1ac>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d03b      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a29      	ldr	r2, [pc, #164]	@ (80042fc <HAL_DMA_Abort_IT+0x1b0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d036      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a28      	ldr	r2, [pc, #160]	@ (8004300 <HAL_DMA_Abort_IT+0x1b4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d031      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <HAL_DMA_Abort_IT+0x1b8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02c      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a25      	ldr	r2, [pc, #148]	@ (8004308 <HAL_DMA_Abort_IT+0x1bc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d027      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a23      	ldr	r2, [pc, #140]	@ (800430c <HAL_DMA_Abort_IT+0x1c0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a22      	ldr	r2, [pc, #136]	@ (8004310 <HAL_DMA_Abort_IT+0x1c4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d01d      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a20      	ldr	r2, [pc, #128]	@ (8004314 <HAL_DMA_Abort_IT+0x1c8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1f      	ldr	r2, [pc, #124]	@ (8004318 <HAL_DMA_Abort_IT+0x1cc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <HAL_DMA_Abort_IT+0x1d0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004320 <HAL_DMA_Abort_IT+0x1d4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004324 <HAL_DMA_Abort_IT+0x1d8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_DMA_Abort_IT+0x17c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <HAL_DMA_Abort_IT+0x1dc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d108      	bne.n	80042da <HAL_DMA_Abort_IT+0x18e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e178      	b.n	80045cc <HAL_DMA_Abort_IT+0x480>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e16f      	b.n	80045cc <HAL_DMA_Abort_IT+0x480>
 80042ec:	40020010 	.word	0x40020010
 80042f0:	40020028 	.word	0x40020028
 80042f4:	40020040 	.word	0x40020040
 80042f8:	40020058 	.word	0x40020058
 80042fc:	40020070 	.word	0x40020070
 8004300:	40020088 	.word	0x40020088
 8004304:	400200a0 	.word	0x400200a0
 8004308:	400200b8 	.word	0x400200b8
 800430c:	40020410 	.word	0x40020410
 8004310:	40020428 	.word	0x40020428
 8004314:	40020440 	.word	0x40020440
 8004318:	40020458 	.word	0x40020458
 800431c:	40020470 	.word	0x40020470
 8004320:	40020488 	.word	0x40020488
 8004324:	400204a0 	.word	0x400204a0
 8004328:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 020e 	bic.w	r2, r2, #14
 800433a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6c      	ldr	r2, [pc, #432]	@ (80044f4 <HAL_DMA_Abort_IT+0x3a8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6b      	ldr	r2, [pc, #428]	@ (80044f8 <HAL_DMA_Abort_IT+0x3ac>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d045      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a69      	ldr	r2, [pc, #420]	@ (80044fc <HAL_DMA_Abort_IT+0x3b0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a68      	ldr	r2, [pc, #416]	@ (8004500 <HAL_DMA_Abort_IT+0x3b4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d03b      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a66      	ldr	r2, [pc, #408]	@ (8004504 <HAL_DMA_Abort_IT+0x3b8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a65      	ldr	r2, [pc, #404]	@ (8004508 <HAL_DMA_Abort_IT+0x3bc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d031      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a63      	ldr	r2, [pc, #396]	@ (800450c <HAL_DMA_Abort_IT+0x3c0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a62      	ldr	r2, [pc, #392]	@ (8004510 <HAL_DMA_Abort_IT+0x3c4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d027      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a60      	ldr	r2, [pc, #384]	@ (8004514 <HAL_DMA_Abort_IT+0x3c8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a5f      	ldr	r2, [pc, #380]	@ (8004518 <HAL_DMA_Abort_IT+0x3cc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a5d      	ldr	r2, [pc, #372]	@ (800451c <HAL_DMA_Abort_IT+0x3d0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004520 <HAL_DMA_Abort_IT+0x3d4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004524 <HAL_DMA_Abort_IT+0x3d8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a59      	ldr	r2, [pc, #356]	@ (8004528 <HAL_DMA_Abort_IT+0x3dc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a57      	ldr	r2, [pc, #348]	@ (800452c <HAL_DMA_Abort_IT+0x3e0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_Abort_IT+0x290>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a56      	ldr	r2, [pc, #344]	@ (8004530 <HAL_DMA_Abort_IT+0x3e4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <HAL_DMA_Abort_IT+0x2a2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <HAL_DMA_Abort_IT+0x2b2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3c      	ldr	r2, [pc, #240]	@ (80044f4 <HAL_DMA_Abort_IT+0x3a8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d072      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3a      	ldr	r2, [pc, #232]	@ (80044f8 <HAL_DMA_Abort_IT+0x3ac>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d06d      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a39      	ldr	r2, [pc, #228]	@ (80044fc <HAL_DMA_Abort_IT+0x3b0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d068      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a37      	ldr	r2, [pc, #220]	@ (8004500 <HAL_DMA_Abort_IT+0x3b4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d063      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a36      	ldr	r2, [pc, #216]	@ (8004504 <HAL_DMA_Abort_IT+0x3b8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d05e      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a34      	ldr	r2, [pc, #208]	@ (8004508 <HAL_DMA_Abort_IT+0x3bc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d059      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a33      	ldr	r2, [pc, #204]	@ (800450c <HAL_DMA_Abort_IT+0x3c0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d054      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a31      	ldr	r2, [pc, #196]	@ (8004510 <HAL_DMA_Abort_IT+0x3c4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d04f      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a30      	ldr	r2, [pc, #192]	@ (8004514 <HAL_DMA_Abort_IT+0x3c8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d04a      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2e      	ldr	r2, [pc, #184]	@ (8004518 <HAL_DMA_Abort_IT+0x3cc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d045      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <HAL_DMA_Abort_IT+0x3d0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d040      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2b      	ldr	r2, [pc, #172]	@ (8004520 <HAL_DMA_Abort_IT+0x3d4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d03b      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2a      	ldr	r2, [pc, #168]	@ (8004524 <HAL_DMA_Abort_IT+0x3d8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d036      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a28      	ldr	r2, [pc, #160]	@ (8004528 <HAL_DMA_Abort_IT+0x3dc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d031      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a27      	ldr	r2, [pc, #156]	@ (800452c <HAL_DMA_Abort_IT+0x3e0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d02c      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a25      	ldr	r2, [pc, #148]	@ (8004530 <HAL_DMA_Abort_IT+0x3e4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d027      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a24      	ldr	r2, [pc, #144]	@ (8004534 <HAL_DMA_Abort_IT+0x3e8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d022      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a22      	ldr	r2, [pc, #136]	@ (8004538 <HAL_DMA_Abort_IT+0x3ec>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01d      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a21      	ldr	r2, [pc, #132]	@ (800453c <HAL_DMA_Abort_IT+0x3f0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d018      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004540 <HAL_DMA_Abort_IT+0x3f4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <HAL_DMA_Abort_IT+0x3f8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00e      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <HAL_DMA_Abort_IT+0x3fc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d009      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1b      	ldr	r2, [pc, #108]	@ (800454c <HAL_DMA_Abort_IT+0x400>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_DMA_Abort_IT+0x3a2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a19      	ldr	r2, [pc, #100]	@ (8004550 <HAL_DMA_Abort_IT+0x404>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d132      	bne.n	8004554 <HAL_DMA_Abort_IT+0x408>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e031      	b.n	8004556 <HAL_DMA_Abort_IT+0x40a>
 80044f2:	bf00      	nop
 80044f4:	40020010 	.word	0x40020010
 80044f8:	40020028 	.word	0x40020028
 80044fc:	40020040 	.word	0x40020040
 8004500:	40020058 	.word	0x40020058
 8004504:	40020070 	.word	0x40020070
 8004508:	40020088 	.word	0x40020088
 800450c:	400200a0 	.word	0x400200a0
 8004510:	400200b8 	.word	0x400200b8
 8004514:	40020410 	.word	0x40020410
 8004518:	40020428 	.word	0x40020428
 800451c:	40020440 	.word	0x40020440
 8004520:	40020458 	.word	0x40020458
 8004524:	40020470 	.word	0x40020470
 8004528:	40020488 	.word	0x40020488
 800452c:	400204a0 	.word	0x400204a0
 8004530:	400204b8 	.word	0x400204b8
 8004534:	58025408 	.word	0x58025408
 8004538:	5802541c 	.word	0x5802541c
 800453c:	58025430 	.word	0x58025430
 8004540:	58025444 	.word	0x58025444
 8004544:	58025458 	.word	0x58025458
 8004548:	5802546c 	.word	0x5802546c
 800454c:	58025480 	.word	0x58025480
 8004550:	58025494 	.word	0x58025494
 8004554:	2300      	movs	r3, #0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d028      	beq.n	80045ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004568:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	2201      	movs	r2, #1
 800457a:	409a      	lsls	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004588:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop

080045d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045e4:	4b67      	ldr	r3, [pc, #412]	@ (8004784 <HAL_DMA_IRQHandler+0x1ac>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a67      	ldr	r2, [pc, #412]	@ (8004788 <HAL_DMA_IRQHandler+0x1b0>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	0a9b      	lsrs	r3, r3, #10
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5f      	ldr	r2, [pc, #380]	@ (800478c <HAL_DMA_IRQHandler+0x1b4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d04a      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5d      	ldr	r2, [pc, #372]	@ (8004790 <HAL_DMA_IRQHandler+0x1b8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d045      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a5c      	ldr	r2, [pc, #368]	@ (8004794 <HAL_DMA_IRQHandler+0x1bc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d040      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a5a      	ldr	r2, [pc, #360]	@ (8004798 <HAL_DMA_IRQHandler+0x1c0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d03b      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a59      	ldr	r2, [pc, #356]	@ (800479c <HAL_DMA_IRQHandler+0x1c4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d036      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a57      	ldr	r2, [pc, #348]	@ (80047a0 <HAL_DMA_IRQHandler+0x1c8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d031      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a56      	ldr	r2, [pc, #344]	@ (80047a4 <HAL_DMA_IRQHandler+0x1cc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d02c      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a54      	ldr	r2, [pc, #336]	@ (80047a8 <HAL_DMA_IRQHandler+0x1d0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d027      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a53      	ldr	r2, [pc, #332]	@ (80047ac <HAL_DMA_IRQHandler+0x1d4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a51      	ldr	r2, [pc, #324]	@ (80047b0 <HAL_DMA_IRQHandler+0x1d8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01d      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a50      	ldr	r2, [pc, #320]	@ (80047b4 <HAL_DMA_IRQHandler+0x1dc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a4e      	ldr	r2, [pc, #312]	@ (80047b8 <HAL_DMA_IRQHandler+0x1e0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a4d      	ldr	r2, [pc, #308]	@ (80047bc <HAL_DMA_IRQHandler+0x1e4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a4b      	ldr	r2, [pc, #300]	@ (80047c0 <HAL_DMA_IRQHandler+0x1e8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a4a      	ldr	r2, [pc, #296]	@ (80047c4 <HAL_DMA_IRQHandler+0x1ec>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_IRQHandler+0xd2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a48      	ldr	r2, [pc, #288]	@ (80047c8 <HAL_DMA_IRQHandler+0x1f0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_IRQHandler+0xd6>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_DMA_IRQHandler+0xd8>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 842b 	beq.w	8004f0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2208      	movs	r2, #8
 80046c0:	409a      	lsls	r2, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80a2 	beq.w	8004810 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2e      	ldr	r2, [pc, #184]	@ (800478c <HAL_DMA_IRQHandler+0x1b4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d04a      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2d      	ldr	r2, [pc, #180]	@ (8004790 <HAL_DMA_IRQHandler+0x1b8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d045      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004794 <HAL_DMA_IRQHandler+0x1bc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d040      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004798 <HAL_DMA_IRQHandler+0x1c0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d03b      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a28      	ldr	r2, [pc, #160]	@ (800479c <HAL_DMA_IRQHandler+0x1c4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d036      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a27      	ldr	r2, [pc, #156]	@ (80047a0 <HAL_DMA_IRQHandler+0x1c8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d031      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a25      	ldr	r2, [pc, #148]	@ (80047a4 <HAL_DMA_IRQHandler+0x1cc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d02c      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a24      	ldr	r2, [pc, #144]	@ (80047a8 <HAL_DMA_IRQHandler+0x1d0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d027      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a22      	ldr	r2, [pc, #136]	@ (80047ac <HAL_DMA_IRQHandler+0x1d4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a21      	ldr	r2, [pc, #132]	@ (80047b0 <HAL_DMA_IRQHandler+0x1d8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d01d      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1f      	ldr	r2, [pc, #124]	@ (80047b4 <HAL_DMA_IRQHandler+0x1dc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <HAL_DMA_IRQHandler+0x1e0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1c      	ldr	r2, [pc, #112]	@ (80047bc <HAL_DMA_IRQHandler+0x1e4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <HAL_DMA_IRQHandler+0x1e8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	@ (80047c4 <HAL_DMA_IRQHandler+0x1ec>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_DMA_IRQHandler+0x194>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a18      	ldr	r2, [pc, #96]	@ (80047c8 <HAL_DMA_IRQHandler+0x1f0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d12f      	bne.n	80047cc <HAL_DMA_IRQHandler+0x1f4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e02e      	b.n	80047e0 <HAL_DMA_IRQHandler+0x208>
 8004782:	bf00      	nop
 8004784:	24000000 	.word	0x24000000
 8004788:	1b4e81b5 	.word	0x1b4e81b5
 800478c:	40020010 	.word	0x40020010
 8004790:	40020028 	.word	0x40020028
 8004794:	40020040 	.word	0x40020040
 8004798:	40020058 	.word	0x40020058
 800479c:	40020070 	.word	0x40020070
 80047a0:	40020088 	.word	0x40020088
 80047a4:	400200a0 	.word	0x400200a0
 80047a8:	400200b8 	.word	0x400200b8
 80047ac:	40020410 	.word	0x40020410
 80047b0:	40020428 	.word	0x40020428
 80047b4:	40020440 	.word	0x40020440
 80047b8:	40020458 	.word	0x40020458
 80047bc:	40020470 	.word	0x40020470
 80047c0:	40020488 	.word	0x40020488
 80047c4:	400204a0 	.word	0x400204a0
 80047c8:	400204b8 	.word	0x400204b8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d015      	beq.n	8004810 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0204 	bic.w	r2, r2, #4
 80047f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	2208      	movs	r2, #8
 80047fe:	409a      	lsls	r2, r3
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	fa22 f303 	lsr.w	r3, r2, r3
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d06e      	beq.n	8004904 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a69      	ldr	r2, [pc, #420]	@ (80049d0 <HAL_DMA_IRQHandler+0x3f8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d04a      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a67      	ldr	r2, [pc, #412]	@ (80049d4 <HAL_DMA_IRQHandler+0x3fc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d045      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a66      	ldr	r2, [pc, #408]	@ (80049d8 <HAL_DMA_IRQHandler+0x400>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d040      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a64      	ldr	r2, [pc, #400]	@ (80049dc <HAL_DMA_IRQHandler+0x404>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d03b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a63      	ldr	r2, [pc, #396]	@ (80049e0 <HAL_DMA_IRQHandler+0x408>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d036      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a61      	ldr	r2, [pc, #388]	@ (80049e4 <HAL_DMA_IRQHandler+0x40c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d031      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a60      	ldr	r2, [pc, #384]	@ (80049e8 <HAL_DMA_IRQHandler+0x410>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d02c      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a5e      	ldr	r2, [pc, #376]	@ (80049ec <HAL_DMA_IRQHandler+0x414>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d027      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a5d      	ldr	r2, [pc, #372]	@ (80049f0 <HAL_DMA_IRQHandler+0x418>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a5b      	ldr	r2, [pc, #364]	@ (80049f4 <HAL_DMA_IRQHandler+0x41c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a5a      	ldr	r2, [pc, #360]	@ (80049f8 <HAL_DMA_IRQHandler+0x420>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a58      	ldr	r2, [pc, #352]	@ (80049fc <HAL_DMA_IRQHandler+0x424>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a57      	ldr	r2, [pc, #348]	@ (8004a00 <HAL_DMA_IRQHandler+0x428>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a55      	ldr	r2, [pc, #340]	@ (8004a04 <HAL_DMA_IRQHandler+0x42c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a54      	ldr	r2, [pc, #336]	@ (8004a08 <HAL_DMA_IRQHandler+0x430>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x2ee>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a52      	ldr	r2, [pc, #328]	@ (8004a0c <HAL_DMA_IRQHandler+0x434>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10a      	bne.n	80048dc <HAL_DMA_IRQHandler+0x304>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e003      	b.n	80048e4 <HAL_DMA_IRQHandler+0x30c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2300      	movs	r3, #0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fc:	f043 0202 	orr.w	r2, r3, #2
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2204      	movs	r2, #4
 800490e:	409a      	lsls	r2, r3
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 808f 	beq.w	8004a38 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <HAL_DMA_IRQHandler+0x3f8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d04a      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a2a      	ldr	r2, [pc, #168]	@ (80049d4 <HAL_DMA_IRQHandler+0x3fc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d045      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a29      	ldr	r2, [pc, #164]	@ (80049d8 <HAL_DMA_IRQHandler+0x400>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d040      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a27      	ldr	r2, [pc, #156]	@ (80049dc <HAL_DMA_IRQHandler+0x404>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d03b      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a26      	ldr	r2, [pc, #152]	@ (80049e0 <HAL_DMA_IRQHandler+0x408>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d036      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a24      	ldr	r2, [pc, #144]	@ (80049e4 <HAL_DMA_IRQHandler+0x40c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d031      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a23      	ldr	r2, [pc, #140]	@ (80049e8 <HAL_DMA_IRQHandler+0x410>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d02c      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a21      	ldr	r2, [pc, #132]	@ (80049ec <HAL_DMA_IRQHandler+0x414>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d027      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a20      	ldr	r2, [pc, #128]	@ (80049f0 <HAL_DMA_IRQHandler+0x418>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_DMA_IRQHandler+0x41c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01d      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <HAL_DMA_IRQHandler+0x420>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <HAL_DMA_IRQHandler+0x424>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1a      	ldr	r2, [pc, #104]	@ (8004a00 <HAL_DMA_IRQHandler+0x428>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <HAL_DMA_IRQHandler+0x42c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a17      	ldr	r2, [pc, #92]	@ (8004a08 <HAL_DMA_IRQHandler+0x430>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_DMA_IRQHandler+0x3e2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a15      	ldr	r2, [pc, #84]	@ (8004a0c <HAL_DMA_IRQHandler+0x434>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d12a      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x438>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e023      	b.n	8004a18 <HAL_DMA_IRQHandler+0x440>
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00d      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2204      	movs	r2, #4
 8004a26:	409a      	lsls	r2, r3
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	f043 0204 	orr.w	r2, r3, #4
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2210      	movs	r2, #16
 8004a42:	409a      	lsls	r2, r3
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a6 	beq.w	8004b9a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a85      	ldr	r2, [pc, #532]	@ (8004c68 <HAL_DMA_IRQHandler+0x690>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d04a      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a83      	ldr	r2, [pc, #524]	@ (8004c6c <HAL_DMA_IRQHandler+0x694>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d045      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a82      	ldr	r2, [pc, #520]	@ (8004c70 <HAL_DMA_IRQHandler+0x698>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d040      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a80      	ldr	r2, [pc, #512]	@ (8004c74 <HAL_DMA_IRQHandler+0x69c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d03b      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8004c78 <HAL_DMA_IRQHandler+0x6a0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d036      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a7d      	ldr	r2, [pc, #500]	@ (8004c7c <HAL_DMA_IRQHandler+0x6a4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d031      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c80 <HAL_DMA_IRQHandler+0x6a8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d02c      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7a      	ldr	r2, [pc, #488]	@ (8004c84 <HAL_DMA_IRQHandler+0x6ac>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d027      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a79      	ldr	r2, [pc, #484]	@ (8004c88 <HAL_DMA_IRQHandler+0x6b0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d022      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a77      	ldr	r2, [pc, #476]	@ (8004c8c <HAL_DMA_IRQHandler+0x6b4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01d      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a76      	ldr	r2, [pc, #472]	@ (8004c90 <HAL_DMA_IRQHandler+0x6b8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d018      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a74      	ldr	r2, [pc, #464]	@ (8004c94 <HAL_DMA_IRQHandler+0x6bc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a73      	ldr	r2, [pc, #460]	@ (8004c98 <HAL_DMA_IRQHandler+0x6c0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00e      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a71      	ldr	r2, [pc, #452]	@ (8004c9c <HAL_DMA_IRQHandler+0x6c4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d009      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a70      	ldr	r2, [pc, #448]	@ (8004ca0 <HAL_DMA_IRQHandler+0x6c8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_DMA_IRQHandler+0x516>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca4 <HAL_DMA_IRQHandler+0x6cc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d10a      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x52c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e009      	b.n	8004b18 <HAL_DMA_IRQHandler+0x540>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d03e      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2210      	movs	r2, #16
 8004b26:	409a      	lsls	r2, r3
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d018      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d108      	bne.n	8004b5a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d024      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
 8004b58:	e01f      	b.n	8004b9a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01b      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
 8004b6a:	e016      	b.n	8004b9a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0208 	bic.w	r2, r2, #8
 8004b88:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8110 	beq.w	8004dd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c68 <HAL_DMA_IRQHandler+0x690>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d04a      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8004c6c <HAL_DMA_IRQHandler+0x694>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d045      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a29      	ldr	r2, [pc, #164]	@ (8004c70 <HAL_DMA_IRQHandler+0x698>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d040      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a28      	ldr	r2, [pc, #160]	@ (8004c74 <HAL_DMA_IRQHandler+0x69c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d03b      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	@ (8004c78 <HAL_DMA_IRQHandler+0x6a0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d036      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a25      	ldr	r2, [pc, #148]	@ (8004c7c <HAL_DMA_IRQHandler+0x6a4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d031      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a23      	ldr	r2, [pc, #140]	@ (8004c80 <HAL_DMA_IRQHandler+0x6a8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d02c      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a22      	ldr	r2, [pc, #136]	@ (8004c84 <HAL_DMA_IRQHandler+0x6ac>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d027      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a20      	ldr	r2, [pc, #128]	@ (8004c88 <HAL_DMA_IRQHandler+0x6b0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d022      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c8c <HAL_DMA_IRQHandler+0x6b4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d01d      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	@ (8004c90 <HAL_DMA_IRQHandler+0x6b8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1c      	ldr	r2, [pc, #112]	@ (8004c94 <HAL_DMA_IRQHandler+0x6bc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8004c98 <HAL_DMA_IRQHandler+0x6c0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a19      	ldr	r2, [pc, #100]	@ (8004c9c <HAL_DMA_IRQHandler+0x6c4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <HAL_DMA_IRQHandler+0x6c8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x678>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ca4 <HAL_DMA_IRQHandler+0x6cc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d12b      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x6d0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf14      	ite	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	2300      	moveq	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	e02a      	b.n	8004cbc <HAL_DMA_IRQHandler+0x6e4>
 8004c66:	bf00      	nop
 8004c68:	40020010 	.word	0x40020010
 8004c6c:	40020028 	.word	0x40020028
 8004c70:	40020040 	.word	0x40020040
 8004c74:	40020058 	.word	0x40020058
 8004c78:	40020070 	.word	0x40020070
 8004c7c:	40020088 	.word	0x40020088
 8004c80:	400200a0 	.word	0x400200a0
 8004c84:	400200b8 	.word	0x400200b8
 8004c88:	40020410 	.word	0x40020410
 8004c8c:	40020428 	.word	0x40020428
 8004c90:	40020440 	.word	0x40020440
 8004c94:	40020458 	.word	0x40020458
 8004c98:	40020470 	.word	0x40020470
 8004c9c:	40020488 	.word	0x40020488
 8004ca0:	400204a0 	.word	0x400204a0
 8004ca4:	400204b8 	.word	0x400204b8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8087 	beq.w	8004dd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	2220      	movs	r2, #32
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d139      	bne.n	8004d52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0216 	bic.w	r2, r2, #22
 8004cec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cfc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_DMA_IRQHandler+0x736>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0208 	bic.w	r2, r2, #8
 8004d1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	223f      	movs	r2, #63	@ 0x3f
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 834a 	beq.w	80053dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
          }
          return;
 8004d50:	e344      	b.n	80053dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d018      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d108      	bne.n	8004d80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02c      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
 8004d7e:	e027      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d023      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	4798      	blx	r3
 8004d90:	e01e      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0210 	bic.w	r2, r2, #16
 8004dae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8306 	beq.w	80053e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8088 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2204      	movs	r2, #4
 8004dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7a      	ldr	r2, [pc, #488]	@ (8004fe0 <HAL_DMA_IRQHandler+0xa08>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d04a      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a79      	ldr	r2, [pc, #484]	@ (8004fe4 <HAL_DMA_IRQHandler+0xa0c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d045      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a77      	ldr	r2, [pc, #476]	@ (8004fe8 <HAL_DMA_IRQHandler+0xa10>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d040      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a76      	ldr	r2, [pc, #472]	@ (8004fec <HAL_DMA_IRQHandler+0xa14>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d03b      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a74      	ldr	r2, [pc, #464]	@ (8004ff0 <HAL_DMA_IRQHandler+0xa18>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d036      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a73      	ldr	r2, [pc, #460]	@ (8004ff4 <HAL_DMA_IRQHandler+0xa1c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d031      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a71      	ldr	r2, [pc, #452]	@ (8004ff8 <HAL_DMA_IRQHandler+0xa20>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d02c      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a70      	ldr	r2, [pc, #448]	@ (8004ffc <HAL_DMA_IRQHandler+0xa24>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d027      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6e      	ldr	r2, [pc, #440]	@ (8005000 <HAL_DMA_IRQHandler+0xa28>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d022      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8005004 <HAL_DMA_IRQHandler+0xa2c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d01d      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a6b      	ldr	r2, [pc, #428]	@ (8005008 <HAL_DMA_IRQHandler+0xa30>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d018      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6a      	ldr	r2, [pc, #424]	@ (800500c <HAL_DMA_IRQHandler+0xa34>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a68      	ldr	r2, [pc, #416]	@ (8005010 <HAL_DMA_IRQHandler+0xa38>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00e      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a67      	ldr	r2, [pc, #412]	@ (8005014 <HAL_DMA_IRQHandler+0xa3c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a65      	ldr	r2, [pc, #404]	@ (8005018 <HAL_DMA_IRQHandler+0xa40>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x8b8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a64      	ldr	r2, [pc, #400]	@ (800501c <HAL_DMA_IRQHandler+0xa44>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <HAL_DMA_IRQHandler+0x8ca>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e007      	b.n	8004eb2 <HAL_DMA_IRQHandler+0x8da>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d307      	bcc.n	8004ece <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f2      	bne.n	8004eb2 <HAL_DMA_IRQHandler+0x8da>
 8004ecc:	e000      	b.n	8004ed0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ece:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004ee6:	e003      	b.n	8004ef0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8272 	beq.w	80053e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	e26c      	b.n	80053e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a43      	ldr	r2, [pc, #268]	@ (8005020 <HAL_DMA_IRQHandler+0xa48>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x984>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a42      	ldr	r2, [pc, #264]	@ (8005024 <HAL_DMA_IRQHandler+0xa4c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d01d      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x984>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a40      	ldr	r2, [pc, #256]	@ (8005028 <HAL_DMA_IRQHandler+0xa50>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x984>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800502c <HAL_DMA_IRQHandler+0xa54>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x984>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3d      	ldr	r2, [pc, #244]	@ (8005030 <HAL_DMA_IRQHandler+0xa58>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x984>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a3c      	ldr	r2, [pc, #240]	@ (8005034 <HAL_DMA_IRQHandler+0xa5c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x984>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a3a      	ldr	r2, [pc, #232]	@ (8005038 <HAL_DMA_IRQHandler+0xa60>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x984>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a39      	ldr	r2, [pc, #228]	@ (800503c <HAL_DMA_IRQHandler+0xa64>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x988>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <HAL_DMA_IRQHandler+0x98a>
 8004f60:	2300      	movs	r3, #0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 823f 	beq.w	80053e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2204      	movs	r2, #4
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80cd 	beq.w	8005120 <HAL_DMA_IRQHandler+0xb48>
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80c7 	beq.w	8005120 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d049      	beq.n	8005040 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8210 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fc8:	e20a      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8206 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fdc:	e200      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe08>
 8004fde:	bf00      	nop
 8004fe0:	40020010 	.word	0x40020010
 8004fe4:	40020028 	.word	0x40020028
 8004fe8:	40020040 	.word	0x40020040
 8004fec:	40020058 	.word	0x40020058
 8004ff0:	40020070 	.word	0x40020070
 8004ff4:	40020088 	.word	0x40020088
 8004ff8:	400200a0 	.word	0x400200a0
 8004ffc:	400200b8 	.word	0x400200b8
 8005000:	40020410 	.word	0x40020410
 8005004:	40020428 	.word	0x40020428
 8005008:	40020440 	.word	0x40020440
 800500c:	40020458 	.word	0x40020458
 8005010:	40020470 	.word	0x40020470
 8005014:	40020488 	.word	0x40020488
 8005018:	400204a0 	.word	0x400204a0
 800501c:	400204b8 	.word	0x400204b8
 8005020:	58025408 	.word	0x58025408
 8005024:	5802541c 	.word	0x5802541c
 8005028:	58025430 	.word	0x58025430
 800502c:	58025444 	.word	0x58025444
 8005030:	58025458 	.word	0x58025458
 8005034:	5802546c 	.word	0x5802546c
 8005038:	58025480 	.word	0x58025480
 800503c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d160      	bne.n	800510c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7f      	ldr	r2, [pc, #508]	@ (800524c <HAL_DMA_IRQHandler+0xc74>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d04a      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a7d      	ldr	r2, [pc, #500]	@ (8005250 <HAL_DMA_IRQHandler+0xc78>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d045      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a7c      	ldr	r2, [pc, #496]	@ (8005254 <HAL_DMA_IRQHandler+0xc7c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d040      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a7a      	ldr	r2, [pc, #488]	@ (8005258 <HAL_DMA_IRQHandler+0xc80>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d03b      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a79      	ldr	r2, [pc, #484]	@ (800525c <HAL_DMA_IRQHandler+0xc84>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d036      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a77      	ldr	r2, [pc, #476]	@ (8005260 <HAL_DMA_IRQHandler+0xc88>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d031      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a76      	ldr	r2, [pc, #472]	@ (8005264 <HAL_DMA_IRQHandler+0xc8c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d02c      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a74      	ldr	r2, [pc, #464]	@ (8005268 <HAL_DMA_IRQHandler+0xc90>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d027      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a73      	ldr	r2, [pc, #460]	@ (800526c <HAL_DMA_IRQHandler+0xc94>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a71      	ldr	r2, [pc, #452]	@ (8005270 <HAL_DMA_IRQHandler+0xc98>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01d      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a70      	ldr	r2, [pc, #448]	@ (8005274 <HAL_DMA_IRQHandler+0xc9c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005278 <HAL_DMA_IRQHandler+0xca0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6d      	ldr	r2, [pc, #436]	@ (800527c <HAL_DMA_IRQHandler+0xca4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005280 <HAL_DMA_IRQHandler+0xca8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a6a      	ldr	r2, [pc, #424]	@ (8005284 <HAL_DMA_IRQHandler+0xcac>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_DMA_IRQHandler+0xb12>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a68      	ldr	r2, [pc, #416]	@ (8005288 <HAL_DMA_IRQHandler+0xcb0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <HAL_DMA_IRQHandler+0xb24>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0208 	bic.w	r2, r2, #8
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e007      	b.n	800510c <HAL_DMA_IRQHandler+0xb34>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8165 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800511e:	e15f      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2202      	movs	r2, #2
 800512a:	409a      	lsls	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80c5 	beq.w	80052c0 <HAL_DMA_IRQHandler+0xce8>
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80bf 	beq.w	80052c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2202      	movs	r2, #2
 800514c:	409a      	lsls	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d018      	beq.n	800518e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 813a 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005178:	e134      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8130 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800518c:	e12a      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 8089 	bne.w	80052ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2b      	ldr	r2, [pc, #172]	@ (800524c <HAL_DMA_IRQHandler+0xc74>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d04a      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a29      	ldr	r2, [pc, #164]	@ (8005250 <HAL_DMA_IRQHandler+0xc78>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d045      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a28      	ldr	r2, [pc, #160]	@ (8005254 <HAL_DMA_IRQHandler+0xc7c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d040      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a26      	ldr	r2, [pc, #152]	@ (8005258 <HAL_DMA_IRQHandler+0xc80>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d03b      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a25      	ldr	r2, [pc, #148]	@ (800525c <HAL_DMA_IRQHandler+0xc84>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d036      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <HAL_DMA_IRQHandler+0xc88>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d031      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a22      	ldr	r2, [pc, #136]	@ (8005264 <HAL_DMA_IRQHandler+0xc8c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d02c      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a20      	ldr	r2, [pc, #128]	@ (8005268 <HAL_DMA_IRQHandler+0xc90>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d027      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <HAL_DMA_IRQHandler+0xc94>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <HAL_DMA_IRQHandler+0xc98>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01d      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1c      	ldr	r2, [pc, #112]	@ (8005274 <HAL_DMA_IRQHandler+0xc9c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1a      	ldr	r2, [pc, #104]	@ (8005278 <HAL_DMA_IRQHandler+0xca0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_DMA_IRQHandler+0xca4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <HAL_DMA_IRQHandler+0xca8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <HAL_DMA_IRQHandler+0xcac>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_DMA_IRQHandler+0xc62>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a14      	ldr	r2, [pc, #80]	@ (8005288 <HAL_DMA_IRQHandler+0xcb0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d128      	bne.n	800528c <HAL_DMA_IRQHandler+0xcb4>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0214 	bic.w	r2, r2, #20
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e027      	b.n	800529c <HAL_DMA_IRQHandler+0xcc4>
 800524c:	40020010 	.word	0x40020010
 8005250:	40020028 	.word	0x40020028
 8005254:	40020040 	.word	0x40020040
 8005258:	40020058 	.word	0x40020058
 800525c:	40020070 	.word	0x40020070
 8005260:	40020088 	.word	0x40020088
 8005264:	400200a0 	.word	0x400200a0
 8005268:	400200b8 	.word	0x400200b8
 800526c:	40020410 	.word	0x40020410
 8005270:	40020428 	.word	0x40020428
 8005274:	40020440 	.word	0x40020440
 8005278:	40020458 	.word	0x40020458
 800527c:	40020470 	.word	0x40020470
 8005280:	40020488 	.word	0x40020488
 8005284:	400204a0 	.word	0x400204a0
 8005288:	400204b8 	.word	0x400204b8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 020a 	bic.w	r2, r2, #10
 800529a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8097 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052be:	e091      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2208      	movs	r2, #8
 80052ca:	409a      	lsls	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8088 	beq.w	80053e6 <HAL_DMA_IRQHandler+0xe0e>
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8082 	beq.w	80053e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a41      	ldr	r2, [pc, #260]	@ (80053ec <HAL_DMA_IRQHandler+0xe14>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d04a      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a3f      	ldr	r2, [pc, #252]	@ (80053f0 <HAL_DMA_IRQHandler+0xe18>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d045      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a3e      	ldr	r2, [pc, #248]	@ (80053f4 <HAL_DMA_IRQHandler+0xe1c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d040      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a3c      	ldr	r2, [pc, #240]	@ (80053f8 <HAL_DMA_IRQHandler+0xe20>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d03b      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a3b      	ldr	r2, [pc, #236]	@ (80053fc <HAL_DMA_IRQHandler+0xe24>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d036      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a39      	ldr	r2, [pc, #228]	@ (8005400 <HAL_DMA_IRQHandler+0xe28>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d031      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a38      	ldr	r2, [pc, #224]	@ (8005404 <HAL_DMA_IRQHandler+0xe2c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d02c      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a36      	ldr	r2, [pc, #216]	@ (8005408 <HAL_DMA_IRQHandler+0xe30>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d027      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a35      	ldr	r2, [pc, #212]	@ (800540c <HAL_DMA_IRQHandler+0xe34>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d022      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a33      	ldr	r2, [pc, #204]	@ (8005410 <HAL_DMA_IRQHandler+0xe38>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01d      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a32      	ldr	r2, [pc, #200]	@ (8005414 <HAL_DMA_IRQHandler+0xe3c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d018      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a30      	ldr	r2, [pc, #192]	@ (8005418 <HAL_DMA_IRQHandler+0xe40>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2f      	ldr	r2, [pc, #188]	@ (800541c <HAL_DMA_IRQHandler+0xe44>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00e      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2d      	ldr	r2, [pc, #180]	@ (8005420 <HAL_DMA_IRQHandler+0xe48>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d009      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2c      	ldr	r2, [pc, #176]	@ (8005424 <HAL_DMA_IRQHandler+0xe4c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_DMA_IRQHandler+0xdaa>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2a      	ldr	r2, [pc, #168]	@ (8005428 <HAL_DMA_IRQHandler+0xe50>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d108      	bne.n	8005394 <HAL_DMA_IRQHandler+0xdbc>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 021c 	bic.w	r2, r2, #28
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e007      	b.n	80053a4 <HAL_DMA_IRQHandler+0xdcc>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 020e 	bic.w	r2, r2, #14
 80053a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2201      	movs	r2, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
 80053da:	e004      	b.n	80053e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053dc:	bf00      	nop
 80053de:	e002      	b.n	80053e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053e6:	3728      	adds	r7, #40	@ 0x28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40020010 	.word	0x40020010
 80053f0:	40020028 	.word	0x40020028
 80053f4:	40020040 	.word	0x40020040
 80053f8:	40020058 	.word	0x40020058
 80053fc:	40020070 	.word	0x40020070
 8005400:	40020088 	.word	0x40020088
 8005404:	400200a0 	.word	0x400200a0
 8005408:	400200b8 	.word	0x400200b8
 800540c:	40020410 	.word	0x40020410
 8005410:	40020428 	.word	0x40020428
 8005414:	40020440 	.word	0x40020440
 8005418:	40020458 	.word	0x40020458
 800541c:	40020470 	.word	0x40020470
 8005420:	40020488 	.word	0x40020488
 8005424:	400204a0 	.word	0x400204a0
 8005428:	400204b8 	.word	0x400204b8

0800542c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005456:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a7f      	ldr	r2, [pc, #508]	@ (8005660 <DMA_SetConfig+0x21c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d072      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a7d      	ldr	r2, [pc, #500]	@ (8005664 <DMA_SetConfig+0x220>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d06d      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a7c      	ldr	r2, [pc, #496]	@ (8005668 <DMA_SetConfig+0x224>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d068      	beq.n	800554e <DMA_SetConfig+0x10a>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a7a      	ldr	r2, [pc, #488]	@ (800566c <DMA_SetConfig+0x228>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d063      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a79      	ldr	r2, [pc, #484]	@ (8005670 <DMA_SetConfig+0x22c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d05e      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a77      	ldr	r2, [pc, #476]	@ (8005674 <DMA_SetConfig+0x230>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d059      	beq.n	800554e <DMA_SetConfig+0x10a>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a76      	ldr	r2, [pc, #472]	@ (8005678 <DMA_SetConfig+0x234>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d054      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a74      	ldr	r2, [pc, #464]	@ (800567c <DMA_SetConfig+0x238>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d04f      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a73      	ldr	r2, [pc, #460]	@ (8005680 <DMA_SetConfig+0x23c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d04a      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a71      	ldr	r2, [pc, #452]	@ (8005684 <DMA_SetConfig+0x240>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d045      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a70      	ldr	r2, [pc, #448]	@ (8005688 <DMA_SetConfig+0x244>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d040      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a6e      	ldr	r2, [pc, #440]	@ (800568c <DMA_SetConfig+0x248>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d03b      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6d      	ldr	r2, [pc, #436]	@ (8005690 <DMA_SetConfig+0x24c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d036      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005694 <DMA_SetConfig+0x250>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d031      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005698 <DMA_SetConfig+0x254>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d02c      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a68      	ldr	r2, [pc, #416]	@ (800569c <DMA_SetConfig+0x258>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d027      	beq.n	800554e <DMA_SetConfig+0x10a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a67      	ldr	r2, [pc, #412]	@ (80056a0 <DMA_SetConfig+0x25c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d022      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a65      	ldr	r2, [pc, #404]	@ (80056a4 <DMA_SetConfig+0x260>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d01d      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a64      	ldr	r2, [pc, #400]	@ (80056a8 <DMA_SetConfig+0x264>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d018      	beq.n	800554e <DMA_SetConfig+0x10a>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a62      	ldr	r2, [pc, #392]	@ (80056ac <DMA_SetConfig+0x268>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a61      	ldr	r2, [pc, #388]	@ (80056b0 <DMA_SetConfig+0x26c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00e      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5f      	ldr	r2, [pc, #380]	@ (80056b4 <DMA_SetConfig+0x270>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d009      	beq.n	800554e <DMA_SetConfig+0x10a>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a5e      	ldr	r2, [pc, #376]	@ (80056b8 <DMA_SetConfig+0x274>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d004      	beq.n	800554e <DMA_SetConfig+0x10a>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a5c      	ldr	r2, [pc, #368]	@ (80056bc <DMA_SetConfig+0x278>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d101      	bne.n	8005552 <DMA_SetConfig+0x10e>
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <DMA_SetConfig+0x110>
 8005552:	2300      	movs	r3, #0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005560:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005572:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a39      	ldr	r2, [pc, #228]	@ (8005660 <DMA_SetConfig+0x21c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d04a      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a38      	ldr	r2, [pc, #224]	@ (8005664 <DMA_SetConfig+0x220>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d045      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a36      	ldr	r2, [pc, #216]	@ (8005668 <DMA_SetConfig+0x224>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d040      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a35      	ldr	r2, [pc, #212]	@ (800566c <DMA_SetConfig+0x228>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d03b      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a33      	ldr	r2, [pc, #204]	@ (8005670 <DMA_SetConfig+0x22c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d036      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a32      	ldr	r2, [pc, #200]	@ (8005674 <DMA_SetConfig+0x230>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d031      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a30      	ldr	r2, [pc, #192]	@ (8005678 <DMA_SetConfig+0x234>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d02c      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a2f      	ldr	r2, [pc, #188]	@ (800567c <DMA_SetConfig+0x238>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d027      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005680 <DMA_SetConfig+0x23c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d022      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005684 <DMA_SetConfig+0x240>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d01d      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005688 <DMA_SetConfig+0x244>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d018      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a29      	ldr	r2, [pc, #164]	@ (800568c <DMA_SetConfig+0x248>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a27      	ldr	r2, [pc, #156]	@ (8005690 <DMA_SetConfig+0x24c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a26      	ldr	r2, [pc, #152]	@ (8005694 <DMA_SetConfig+0x250>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d009      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a24      	ldr	r2, [pc, #144]	@ (8005698 <DMA_SetConfig+0x254>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <DMA_SetConfig+0x1d0>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a23      	ldr	r2, [pc, #140]	@ (800569c <DMA_SetConfig+0x258>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d101      	bne.n	8005618 <DMA_SetConfig+0x1d4>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <DMA_SetConfig+0x1d6>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d059      	beq.n	80056d2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	223f      	movs	r2, #63	@ 0x3f
 8005628:	409a      	lsls	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800563c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	d138      	bne.n	80056c0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800565e:	e086      	b.n	800576e <DMA_SetConfig+0x32a>
 8005660:	40020010 	.word	0x40020010
 8005664:	40020028 	.word	0x40020028
 8005668:	40020040 	.word	0x40020040
 800566c:	40020058 	.word	0x40020058
 8005670:	40020070 	.word	0x40020070
 8005674:	40020088 	.word	0x40020088
 8005678:	400200a0 	.word	0x400200a0
 800567c:	400200b8 	.word	0x400200b8
 8005680:	40020410 	.word	0x40020410
 8005684:	40020428 	.word	0x40020428
 8005688:	40020440 	.word	0x40020440
 800568c:	40020458 	.word	0x40020458
 8005690:	40020470 	.word	0x40020470
 8005694:	40020488 	.word	0x40020488
 8005698:	400204a0 	.word	0x400204a0
 800569c:	400204b8 	.word	0x400204b8
 80056a0:	58025408 	.word	0x58025408
 80056a4:	5802541c 	.word	0x5802541c
 80056a8:	58025430 	.word	0x58025430
 80056ac:	58025444 	.word	0x58025444
 80056b0:	58025458 	.word	0x58025458
 80056b4:	5802546c 	.word	0x5802546c
 80056b8:	58025480 	.word	0x58025480
 80056bc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	60da      	str	r2, [r3, #12]
}
 80056d0:	e04d      	b.n	800576e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a29      	ldr	r2, [pc, #164]	@ (800577c <DMA_SetConfig+0x338>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <DMA_SetConfig+0x2de>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <DMA_SetConfig+0x33c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01d      	beq.n	8005722 <DMA_SetConfig+0x2de>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a26      	ldr	r2, [pc, #152]	@ (8005784 <DMA_SetConfig+0x340>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <DMA_SetConfig+0x2de>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <DMA_SetConfig+0x344>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <DMA_SetConfig+0x2de>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a23      	ldr	r2, [pc, #140]	@ (800578c <DMA_SetConfig+0x348>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <DMA_SetConfig+0x2de>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a21      	ldr	r2, [pc, #132]	@ (8005790 <DMA_SetConfig+0x34c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <DMA_SetConfig+0x2de>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a20      	ldr	r2, [pc, #128]	@ (8005794 <DMA_SetConfig+0x350>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <DMA_SetConfig+0x2de>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1e      	ldr	r2, [pc, #120]	@ (8005798 <DMA_SetConfig+0x354>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <DMA_SetConfig+0x2e2>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <DMA_SetConfig+0x2e4>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	2201      	movs	r2, #1
 8005736:	409a      	lsls	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d108      	bne.n	800575e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	60da      	str	r2, [r3, #12]
}
 800575c:	e007      	b.n	800576e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	60da      	str	r2, [r3, #12]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	58025408 	.word	0x58025408
 8005780:	5802541c 	.word	0x5802541c
 8005784:	58025430 	.word	0x58025430
 8005788:	58025444 	.word	0x58025444
 800578c:	58025458 	.word	0x58025458
 8005790:	5802546c 	.word	0x5802546c
 8005794:	58025480 	.word	0x58025480
 8005798:	58025494 	.word	0x58025494

0800579c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a42      	ldr	r2, [pc, #264]	@ (80058b4 <DMA_CalcBaseAndBitshift+0x118>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d04a      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a41      	ldr	r2, [pc, #260]	@ (80058b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d045      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a3f      	ldr	r2, [pc, #252]	@ (80058bc <DMA_CalcBaseAndBitshift+0x120>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d040      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a3e      	ldr	r2, [pc, #248]	@ (80058c0 <DMA_CalcBaseAndBitshift+0x124>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d03b      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a3c      	ldr	r2, [pc, #240]	@ (80058c4 <DMA_CalcBaseAndBitshift+0x128>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d036      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a3b      	ldr	r2, [pc, #236]	@ (80058c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d031      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a39      	ldr	r2, [pc, #228]	@ (80058cc <DMA_CalcBaseAndBitshift+0x130>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d02c      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a38      	ldr	r2, [pc, #224]	@ (80058d0 <DMA_CalcBaseAndBitshift+0x134>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d027      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a36      	ldr	r2, [pc, #216]	@ (80058d4 <DMA_CalcBaseAndBitshift+0x138>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d022      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a35      	ldr	r2, [pc, #212]	@ (80058d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d01d      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a33      	ldr	r2, [pc, #204]	@ (80058dc <DMA_CalcBaseAndBitshift+0x140>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a32      	ldr	r2, [pc, #200]	@ (80058e0 <DMA_CalcBaseAndBitshift+0x144>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a30      	ldr	r2, [pc, #192]	@ (80058e4 <DMA_CalcBaseAndBitshift+0x148>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2f      	ldr	r2, [pc, #188]	@ (80058e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2d      	ldr	r2, [pc, #180]	@ (80058ec <DMA_CalcBaseAndBitshift+0x150>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <DMA_CalcBaseAndBitshift+0xa8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2c      	ldr	r2, [pc, #176]	@ (80058f0 <DMA_CalcBaseAndBitshift+0x154>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <DMA_CalcBaseAndBitshift+0xac>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <DMA_CalcBaseAndBitshift+0xae>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d024      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	3b10      	subs	r3, #16
 8005856:	4a27      	ldr	r2, [pc, #156]	@ (80058f4 <DMA_CalcBaseAndBitshift+0x158>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	4a24      	ldr	r2, [pc, #144]	@ (80058f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005868:	5cd3      	ldrb	r3, [r2, r3]
 800586a:	461a      	mov	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b03      	cmp	r3, #3
 8005874:	d908      	bls.n	8005888 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	4b1f      	ldr	r3, [pc, #124]	@ (80058fc <DMA_CalcBaseAndBitshift+0x160>)
 800587e:	4013      	ands	r3, r2
 8005880:	1d1a      	adds	r2, r3, #4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	659a      	str	r2, [r3, #88]	@ 0x58
 8005886:	e00d      	b.n	80058a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <DMA_CalcBaseAndBitshift+0x160>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6593      	str	r3, [r2, #88]	@ 0x58
 8005896:	e005      	b.n	80058a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40020010 	.word	0x40020010
 80058b8:	40020028 	.word	0x40020028
 80058bc:	40020040 	.word	0x40020040
 80058c0:	40020058 	.word	0x40020058
 80058c4:	40020070 	.word	0x40020070
 80058c8:	40020088 	.word	0x40020088
 80058cc:	400200a0 	.word	0x400200a0
 80058d0:	400200b8 	.word	0x400200b8
 80058d4:	40020410 	.word	0x40020410
 80058d8:	40020428 	.word	0x40020428
 80058dc:	40020440 	.word	0x40020440
 80058e0:	40020458 	.word	0x40020458
 80058e4:	40020470 	.word	0x40020470
 80058e8:	40020488 	.word	0x40020488
 80058ec:	400204a0 	.word	0x400204a0
 80058f0:	400204b8 	.word	0x400204b8
 80058f4:	aaaaaaab 	.word	0xaaaaaaab
 80058f8:	0801b56c 	.word	0x0801b56c
 80058fc:	fffffc00 	.word	0xfffffc00

08005900 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d120      	bne.n	8005956 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	2b03      	cmp	r3, #3
 800591a:	d858      	bhi.n	80059ce <DMA_CheckFifoParam+0xce>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <DMA_CheckFifoParam+0x24>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005935 	.word	0x08005935
 8005928:	08005947 	.word	0x08005947
 800592c:	08005935 	.word	0x08005935
 8005930:	080059cf 	.word	0x080059cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d048      	beq.n	80059d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005944:	e045      	b.n	80059d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800594e:	d142      	bne.n	80059d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005954:	e03f      	b.n	80059d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595e:	d123      	bne.n	80059a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005964:	2b03      	cmp	r3, #3
 8005966:	d838      	bhi.n	80059da <DMA_CheckFifoParam+0xda>
 8005968:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <DMA_CheckFifoParam+0x70>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005981 	.word	0x08005981
 8005974:	08005987 	.word	0x08005987
 8005978:	08005981 	.word	0x08005981
 800597c:	08005999 	.word	0x08005999
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
        break;
 8005984:	e030      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d025      	beq.n	80059de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005996:	e022      	b.n	80059de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059a0:	d11f      	bne.n	80059e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059a6:	e01c      	b.n	80059e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d902      	bls.n	80059b6 <DMA_CheckFifoParam+0xb6>
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d003      	beq.n	80059bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80059b4:	e018      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
        break;
 80059ba:	e015      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00e      	beq.n	80059e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
    break;
 80059cc:	e00b      	b.n	80059e6 <DMA_CheckFifoParam+0xe6>
        break;
 80059ce:	bf00      	nop
 80059d0:	e00a      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
        break;
 80059d2:	bf00      	nop
 80059d4:	e008      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
        break;
 80059d6:	bf00      	nop
 80059d8:	e006      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
        break;
 80059da:	bf00      	nop
 80059dc:	e004      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
        break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
        break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <DMA_CheckFifoParam+0xe8>
    break;
 80059e6:	bf00      	nop
    }
  }

  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop

080059f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a38      	ldr	r2, [pc, #224]	@ (8005aec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d022      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a36      	ldr	r2, [pc, #216]	@ (8005af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01d      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a35      	ldr	r2, [pc, #212]	@ (8005af4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d018      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a33      	ldr	r2, [pc, #204]	@ (8005af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a32      	ldr	r2, [pc, #200]	@ (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00e      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a30      	ldr	r2, [pc, #192]	@ (8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d009      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2f      	ldr	r2, [pc, #188]	@ (8005b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2d      	ldr	r2, [pc, #180]	@ (8005b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01a      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	3b08      	subs	r3, #8
 8005a68:	4a28      	ldr	r2, [pc, #160]	@ (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	091b      	lsrs	r3, r3, #4
 8005a70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4b26      	ldr	r3, [pc, #152]	@ (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a24      	ldr	r2, [pc, #144]	@ (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a94:	e024      	b.n	8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	3b10      	subs	r3, #16
 8005a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8005b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d806      	bhi.n	8005abe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d902      	bls.n	8005abe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3308      	adds	r3, #8
 8005abc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4b18      	ldr	r3, [pc, #96]	@ (8005b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ad0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	2201      	movs	r2, #1
 8005ada:	409a      	lsls	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	58025408 	.word	0x58025408
 8005af0:	5802541c 	.word	0x5802541c
 8005af4:	58025430 	.word	0x58025430
 8005af8:	58025444 	.word	0x58025444
 8005afc:	58025458 	.word	0x58025458
 8005b00:	5802546c 	.word	0x5802546c
 8005b04:	58025480 	.word	0x58025480
 8005b08:	58025494 	.word	0x58025494
 8005b0c:	cccccccd 	.word	0xcccccccd
 8005b10:	16009600 	.word	0x16009600
 8005b14:	58025880 	.word	0x58025880
 8005b18:	aaaaaaab 	.word	0xaaaaaaab
 8005b1c:	400204b8 	.word	0x400204b8
 8005b20:	4002040f 	.word	0x4002040f
 8005b24:	10008200 	.word	0x10008200
 8005b28:	40020880 	.word	0x40020880

08005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04a      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d847      	bhi.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a25      	ldr	r2, [pc, #148]	@ (8005be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d022      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a24      	ldr	r2, [pc, #144]	@ (8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d01d      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a22      	ldr	r2, [pc, #136]	@ (8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d018      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a21      	ldr	r2, [pc, #132]	@ (8005bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00e      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d009      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1c      	ldr	r2, [pc, #112]	@ (8005bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1b      	ldr	r2, [pc, #108]	@ (8005c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4b17      	ldr	r3, [pc, #92]	@ (8005c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	461a      	mov	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005bb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005bb6:	e009      	b.n	8005bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a11      	ldr	r2, [pc, #68]	@ (8005c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005bca:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	58025408 	.word	0x58025408
 8005be8:	5802541c 	.word	0x5802541c
 8005bec:	58025430 	.word	0x58025430
 8005bf0:	58025444 	.word	0x58025444
 8005bf4:	58025458 	.word	0x58025458
 8005bf8:	5802546c 	.word	0x5802546c
 8005bfc:	58025480 	.word	0x58025480
 8005c00:	58025494 	.word	0x58025494
 8005c04:	1600963f 	.word	0x1600963f
 8005c08:	58025940 	.word	0x58025940
 8005c0c:	1000823f 	.word	0x1000823f
 8005c10:	40020940 	.word	0x40020940

08005c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	@ 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c22:	4b89      	ldr	r3, [pc, #548]	@ (8005e48 <HAL_GPIO_Init+0x234>)
 8005c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c26:	e194      	b.n	8005f52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa01 f303 	lsl.w	r3, r1, r3
 8005c34:	4013      	ands	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8186 	beq.w	8005f4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d005      	beq.n	8005c58 <HAL_GPIO_Init+0x44>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d130      	bne.n	8005cba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	2203      	movs	r2, #3
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c8e:	2201      	movs	r2, #1
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	f003 0201 	and.w	r2, r3, #1
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d017      	beq.n	8005cf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d123      	bne.n	8005d4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	08da      	lsrs	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3208      	adds	r2, #8
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	220f      	movs	r2, #15
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	08da      	lsrs	r2, r3, #3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3208      	adds	r2, #8
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2203      	movs	r2, #3
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0203 	and.w	r2, r3, #3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80e0 	beq.w	8005f4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e4c <HAL_GPIO_Init+0x238>)
 8005d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d92:	4a2e      	ldr	r2, [pc, #184]	@ (8005e4c <HAL_GPIO_Init+0x238>)
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e4c <HAL_GPIO_Init+0x238>)
 8005d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005daa:	4a29      	ldr	r2, [pc, #164]	@ (8005e50 <HAL_GPIO_Init+0x23c>)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	3302      	adds	r3, #2
 8005db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	220f      	movs	r2, #15
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a20      	ldr	r2, [pc, #128]	@ (8005e54 <HAL_GPIO_Init+0x240>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d052      	beq.n	8005e7c <HAL_GPIO_Init+0x268>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e58 <HAL_GPIO_Init+0x244>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d031      	beq.n	8005e42 <HAL_GPIO_Init+0x22e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e5c <HAL_GPIO_Init+0x248>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d02b      	beq.n	8005e3e <HAL_GPIO_Init+0x22a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e60 <HAL_GPIO_Init+0x24c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d025      	beq.n	8005e3a <HAL_GPIO_Init+0x226>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e64 <HAL_GPIO_Init+0x250>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01f      	beq.n	8005e36 <HAL_GPIO_Init+0x222>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e68 <HAL_GPIO_Init+0x254>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d019      	beq.n	8005e32 <HAL_GPIO_Init+0x21e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1a      	ldr	r2, [pc, #104]	@ (8005e6c <HAL_GPIO_Init+0x258>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_GPIO_Init+0x21a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a19      	ldr	r2, [pc, #100]	@ (8005e70 <HAL_GPIO_Init+0x25c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00d      	beq.n	8005e2a <HAL_GPIO_Init+0x216>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a18      	ldr	r2, [pc, #96]	@ (8005e74 <HAL_GPIO_Init+0x260>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <HAL_GPIO_Init+0x212>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a17      	ldr	r2, [pc, #92]	@ (8005e78 <HAL_GPIO_Init+0x264>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_GPIO_Init+0x20e>
 8005e1e:	2309      	movs	r3, #9
 8005e20:	e02d      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e22:	230a      	movs	r3, #10
 8005e24:	e02b      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e26:	2308      	movs	r3, #8
 8005e28:	e029      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e2a:	2307      	movs	r3, #7
 8005e2c:	e027      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e2e:	2306      	movs	r3, #6
 8005e30:	e025      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e32:	2305      	movs	r3, #5
 8005e34:	e023      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e36:	2304      	movs	r3, #4
 8005e38:	e021      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e01f      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e01d      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e01b      	b.n	8005e7e <HAL_GPIO_Init+0x26a>
 8005e46:	bf00      	nop
 8005e48:	58000080 	.word	0x58000080
 8005e4c:	58024400 	.word	0x58024400
 8005e50:	58000400 	.word	0x58000400
 8005e54:	58020000 	.word	0x58020000
 8005e58:	58020400 	.word	0x58020400
 8005e5c:	58020800 	.word	0x58020800
 8005e60:	58020c00 	.word	0x58020c00
 8005e64:	58021000 	.word	0x58021000
 8005e68:	58021400 	.word	0x58021400
 8005e6c:	58021800 	.word	0x58021800
 8005e70:	58021c00 	.word	0x58021c00
 8005e74:	58022000 	.word	0x58022000
 8005e78:	58022400 	.word	0x58022400
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	f002 0203 	and.w	r2, r2, #3
 8005e84:	0092      	lsls	r2, r2, #2
 8005e86:	4093      	lsls	r3, r2
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e8e:	4938      	ldr	r1, [pc, #224]	@ (8005f70 <HAL_GPIO_Init+0x35c>)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	3302      	adds	r3, #2
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ec2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ef0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f47f ae63 	bne.w	8005c28 <HAL_GPIO_Init+0x14>
  }
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	3724      	adds	r7, #36	@ 0x24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	58000400 	.word	0x58000400

08005f74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f82:	4b75      	ldr	r3, [pc, #468]	@ (8006158 <HAL_GPIO_DeInit+0x1e4>)
 8005f84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005f86:	e0d9      	b.n	800613c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005f88:	2201      	movs	r2, #1
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	4013      	ands	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80cc 	beq.w	8006136 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f9e:	4a6f      	ldr	r2, [pc, #444]	@ (800615c <HAL_GPIO_DeInit+0x1e8>)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	089b      	lsrs	r3, r3, #2
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005faa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	220f      	movs	r2, #15
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a67      	ldr	r2, [pc, #412]	@ (8006160 <HAL_GPIO_DeInit+0x1ec>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d037      	beq.n	8006038 <HAL_GPIO_DeInit+0xc4>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a66      	ldr	r2, [pc, #408]	@ (8006164 <HAL_GPIO_DeInit+0x1f0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d031      	beq.n	8006034 <HAL_GPIO_DeInit+0xc0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a65      	ldr	r2, [pc, #404]	@ (8006168 <HAL_GPIO_DeInit+0x1f4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d02b      	beq.n	8006030 <HAL_GPIO_DeInit+0xbc>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a64      	ldr	r2, [pc, #400]	@ (800616c <HAL_GPIO_DeInit+0x1f8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d025      	beq.n	800602c <HAL_GPIO_DeInit+0xb8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a63      	ldr	r2, [pc, #396]	@ (8006170 <HAL_GPIO_DeInit+0x1fc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d01f      	beq.n	8006028 <HAL_GPIO_DeInit+0xb4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a62      	ldr	r2, [pc, #392]	@ (8006174 <HAL_GPIO_DeInit+0x200>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d019      	beq.n	8006024 <HAL_GPIO_DeInit+0xb0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a61      	ldr	r2, [pc, #388]	@ (8006178 <HAL_GPIO_DeInit+0x204>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_GPIO_DeInit+0xac>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a60      	ldr	r2, [pc, #384]	@ (800617c <HAL_GPIO_DeInit+0x208>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00d      	beq.n	800601c <HAL_GPIO_DeInit+0xa8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a5f      	ldr	r2, [pc, #380]	@ (8006180 <HAL_GPIO_DeInit+0x20c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <HAL_GPIO_DeInit+0xa4>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a5e      	ldr	r2, [pc, #376]	@ (8006184 <HAL_GPIO_DeInit+0x210>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d101      	bne.n	8006014 <HAL_GPIO_DeInit+0xa0>
 8006010:	2309      	movs	r3, #9
 8006012:	e012      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006014:	230a      	movs	r3, #10
 8006016:	e010      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006018:	2308      	movs	r3, #8
 800601a:	e00e      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 800601c:	2307      	movs	r3, #7
 800601e:	e00c      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006020:	2306      	movs	r3, #6
 8006022:	e00a      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006024:	2305      	movs	r3, #5
 8006026:	e008      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006028:	2304      	movs	r3, #4
 800602a:	e006      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 800602c:	2303      	movs	r3, #3
 800602e:	e004      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006030:	2302      	movs	r3, #2
 8006032:	e002      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_GPIO_DeInit+0xc6>
 8006038:	2300      	movs	r3, #0
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	f002 0203 	and.w	r2, r2, #3
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	4093      	lsls	r3, r2
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	429a      	cmp	r2, r3
 8006048:	d136      	bne.n	80060b8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	43db      	mvns	r3, r3
 8006052:	401a      	ands	r2, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	43db      	mvns	r3, r3
 8006060:	401a      	ands	r2, r3
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	43db      	mvns	r3, r3
 8006070:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006074:	4013      	ands	r3, r2
 8006076:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	43db      	mvns	r3, r3
 8006082:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006086:	4013      	ands	r3, r2
 8006088:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	220f      	movs	r2, #15
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800609a:	4a30      	ldr	r2, [pc, #192]	@ (800615c <HAL_GPIO_DeInit+0x1e8>)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	089b      	lsrs	r3, r3, #2
 80060a0:	3302      	adds	r3, #2
 80060a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	43da      	mvns	r2, r3
 80060aa:	482c      	ldr	r0, [pc, #176]	@ (800615c <HAL_GPIO_DeInit+0x1e8>)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	089b      	lsrs	r3, r3, #2
 80060b0:	400a      	ands	r2, r1
 80060b2:	3302      	adds	r3, #2
 80060b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	2103      	movs	r1, #3
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	08da      	lsrs	r2, r3, #3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3208      	adds	r2, #8
 80060d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	220f      	movs	r2, #15
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	08d2      	lsrs	r2, r2, #3
 80060ec:	4019      	ands	r1, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3208      	adds	r2, #8
 80060f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	2103      	movs	r1, #3
 8006100:	fa01 f303 	lsl.w	r3, r1, r3
 8006104:	43db      	mvns	r3, r3
 8006106:	401a      	ands	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	2101      	movs	r1, #1
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	401a      	ands	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	2103      	movs	r1, #3
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	401a      	ands	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	3301      	adds	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	f47f af1f 	bne.w	8005f88 <HAL_GPIO_DeInit+0x14>
  }
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	58000080 	.word	0x58000080
 800615c:	58000400 	.word	0x58000400
 8006160:	58020000 	.word	0x58020000
 8006164:	58020400 	.word	0x58020400
 8006168:	58020800 	.word	0x58020800
 800616c:	58020c00 	.word	0x58020c00
 8006170:	58021000 	.word	0x58021000
 8006174:	58021400 	.word	0x58021400
 8006178:	58021800 	.word	0x58021800
 800617c:	58021c00 	.word	0x58021c00
 8006180:	58022000 	.word	0x58022000
 8006184:	58022400 	.word	0x58022400

08006188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
 80061a4:	e001      	b.n	80061aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
 80061c4:	4613      	mov	r3, r2
 80061c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061c8:	787b      	ldrb	r3, [r7, #1]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061ce:	887a      	ldrh	r2, [r7, #2]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061d4:	e003      	b.n	80061de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061d6:	887b      	ldrh	r3, [r7, #2]
 80061d8:	041a      	lsls	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	619a      	str	r2, [r3, #24]
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	4603      	mov	r3, r0
 80061f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 f804 	bl	800621e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	4603      	mov	r3, r0
 8006226:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e08b      	b.n	800635e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fa ff0a 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	@ 0x24
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006284:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006294:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d107      	bne.n	80062ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062aa:	609a      	str	r2, [r3, #8]
 80062ac:	e006      	b.n	80062bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80062ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d108      	bne.n	80062d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	e007      	b.n	80062e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006368 <HAL_I2C_Init+0x134>)
 80062f2:	430b      	orrs	r3, r1
 80062f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006304:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1a      	ldr	r2, [r3, #32]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	02008000 	.word	0x02008000

0800636c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
  }
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d138      	bne.n	8006428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e032      	b.n	800642a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	@ 0x24
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b20      	cmp	r3, #32
 800644a:	d139      	bne.n	80064c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006456:	2302      	movs	r3, #2
 8006458:	e033      	b.n	80064c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2224      	movs	r2, #36	@ 0x24
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064d8:	4b19      	ldr	r3, [pc, #100]	@ (8006540 <HAL_PWREx_ConfigSupply+0x70>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d00a      	beq.n	80064fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064e4:	4b16      	ldr	r3, [pc, #88]	@ (8006540 <HAL_PWREx_ConfigSupply+0x70>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d001      	beq.n	80064f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e01f      	b.n	8006536 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e01d      	b.n	8006536 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064fa:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <HAL_PWREx_ConfigSupply+0x70>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f023 0207 	bic.w	r2, r3, #7
 8006502:	490f      	ldr	r1, [pc, #60]	@ (8006540 <HAL_PWREx_ConfigSupply+0x70>)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4313      	orrs	r3, r2
 8006508:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800650a:	f7fc f975 	bl	80027f8 <HAL_GetTick>
 800650e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006510:	e009      	b.n	8006526 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006512:	f7fc f971 	bl	80027f8 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006520:	d901      	bls.n	8006526 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e007      	b.n	8006536 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006526:	4b06      	ldr	r3, [pc, #24]	@ (8006540 <HAL_PWREx_ConfigSupply+0x70>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800652e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006532:	d1ee      	bne.n	8006512 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	58024800 	.word	0x58024800

08006544 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	@ 0x30
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f000 bc48 	b.w	8006de8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8088 	beq.w	8006676 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006566:	4b99      	ldr	r3, [pc, #612]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800656e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006570:	4b96      	ldr	r3, [pc, #600]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006578:	2b10      	cmp	r3, #16
 800657a:	d007      	beq.n	800658c <HAL_RCC_OscConfig+0x48>
 800657c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657e:	2b18      	cmp	r3, #24
 8006580:	d111      	bne.n	80065a6 <HAL_RCC_OscConfig+0x62>
 8006582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d10c      	bne.n	80065a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658c:	4b8f      	ldr	r3, [pc, #572]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d06d      	beq.n	8006674 <HAL_RCC_OscConfig+0x130>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d169      	bne.n	8006674 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f000 bc21 	b.w	8006de8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ae:	d106      	bne.n	80065be <HAL_RCC_OscConfig+0x7a>
 80065b0:	4b86      	ldr	r3, [pc, #536]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a85      	ldr	r2, [pc, #532]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	e02e      	b.n	800661c <HAL_RCC_OscConfig+0xd8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x9c>
 80065c6:	4b81      	ldr	r3, [pc, #516]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a80      	ldr	r2, [pc, #512]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4b7e      	ldr	r3, [pc, #504]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7d      	ldr	r2, [pc, #500]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e01d      	b.n	800661c <HAL_RCC_OscConfig+0xd8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0xc0>
 80065ea:	4b78      	ldr	r3, [pc, #480]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a77      	ldr	r2, [pc, #476]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b75      	ldr	r3, [pc, #468]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a74      	ldr	r2, [pc, #464]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e00b      	b.n	800661c <HAL_RCC_OscConfig+0xd8>
 8006604:	4b71      	ldr	r3, [pc, #452]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a70      	ldr	r2, [pc, #448]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 800660a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b6e      	ldr	r3, [pc, #440]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6d      	ldr	r2, [pc, #436]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc f8e8 	bl	80027f8 <HAL_GetTick>
 8006628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800662c:	f7fc f8e4 	bl	80027f8 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	@ 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e3d4      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800663e:	4b63      	ldr	r3, [pc, #396]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0xe8>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fc f8d4 	bl	80027f8 <HAL_GetTick>
 8006650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fc f8d0 	bl	80027f8 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	@ 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e3c0      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006666:	4b59      	ldr	r3, [pc, #356]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x110>
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80ca 	beq.w	8006818 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006684:	4b51      	ldr	r3, [pc, #324]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800668c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800668e:	4b4f      	ldr	r3, [pc, #316]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006692:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <HAL_RCC_OscConfig+0x166>
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	2b18      	cmp	r3, #24
 800669e:	d156      	bne.n	800674e <HAL_RCC_OscConfig+0x20a>
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d151      	bne.n	800674e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066aa:	4b48      	ldr	r3, [pc, #288]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_RCC_OscConfig+0x17e>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e392      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066c2:	4b42      	ldr	r3, [pc, #264]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f023 0219 	bic.w	r2, r3, #25
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	493f      	ldr	r1, [pc, #252]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fc f890 	bl	80027f8 <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066dc:	f7fc f88c 	bl	80027f8 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e37c      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ee:	4b37      	ldr	r3, [pc, #220]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fa:	f7fc f8ad 	bl	8002858 <HAL_GetREVID>
 80066fe:	4603      	mov	r3, r0
 8006700:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006704:	4293      	cmp	r3, r2
 8006706:	d817      	bhi.n	8006738 <HAL_RCC_OscConfig+0x1f4>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b40      	cmp	r3, #64	@ 0x40
 800670e:	d108      	bne.n	8006722 <HAL_RCC_OscConfig+0x1de>
 8006710:	4b2e      	ldr	r3, [pc, #184]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006718:	4a2c      	ldr	r2, [pc, #176]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800671e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006720:	e07a      	b.n	8006818 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006722:	4b2a      	ldr	r3, [pc, #168]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	031b      	lsls	r3, r3, #12
 8006730:	4926      	ldr	r1, [pc, #152]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006732:	4313      	orrs	r3, r2
 8006734:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006736:	e06f      	b.n	8006818 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006738:	4b24      	ldr	r3, [pc, #144]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	061b      	lsls	r3, r3, #24
 8006746:	4921      	ldr	r1, [pc, #132]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006748:	4313      	orrs	r3, r2
 800674a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800674c:	e064      	b.n	8006818 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d047      	beq.n	80067e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006756:	4b1d      	ldr	r3, [pc, #116]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 0219 	bic.w	r2, r3, #25
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	491a      	ldr	r1, [pc, #104]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006764:	4313      	orrs	r3, r2
 8006766:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006768:	f7fc f846 	bl	80027f8 <HAL_GetTick>
 800676c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006770:	f7fc f842 	bl	80027f8 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e332      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006782:	4b12      	ldr	r3, [pc, #72]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0304 	and.w	r3, r3, #4
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f0      	beq.n	8006770 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800678e:	f7fc f863 	bl	8002858 <HAL_GetREVID>
 8006792:	4603      	mov	r3, r0
 8006794:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006798:	4293      	cmp	r3, r2
 800679a:	d819      	bhi.n	80067d0 <HAL_RCC_OscConfig+0x28c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	d108      	bne.n	80067b6 <HAL_RCC_OscConfig+0x272>
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80067ac:	4a07      	ldr	r2, [pc, #28]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80067ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b2:	6053      	str	r3, [r2, #4]
 80067b4:	e030      	b.n	8006818 <HAL_RCC_OscConfig+0x2d4>
 80067b6:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	031b      	lsls	r3, r3, #12
 80067c4:	4901      	ldr	r1, [pc, #4]	@ (80067cc <HAL_RCC_OscConfig+0x288>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	604b      	str	r3, [r1, #4]
 80067ca:	e025      	b.n	8006818 <HAL_RCC_OscConfig+0x2d4>
 80067cc:	58024400 	.word	0x58024400
 80067d0:	4b9a      	ldr	r3, [pc, #616]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	4997      	ldr	r1, [pc, #604]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
 80067e4:	e018      	b.n	8006818 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e6:	4b95      	ldr	r3, [pc, #596]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a94      	ldr	r2, [pc, #592]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f2:	f7fc f801 	bl	80027f8 <HAL_GetTick>
 80067f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067fa:	f7fb fffd 	bl	80027f8 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e2ed      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800680c:	4b8b      	ldr	r3, [pc, #556]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1f0      	bne.n	80067fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a9 	beq.w	8006978 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006826:	4b85      	ldr	r3, [pc, #532]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800682e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006830:	4b82      	ldr	r3, [pc, #520]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d007      	beq.n	800684c <HAL_RCC_OscConfig+0x308>
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b18      	cmp	r3, #24
 8006840:	d13a      	bne.n	80068b8 <HAL_RCC_OscConfig+0x374>
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d135      	bne.n	80068b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800684c:	4b7b      	ldr	r3, [pc, #492]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_RCC_OscConfig+0x320>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	2b80      	cmp	r3, #128	@ 0x80
 800685e:	d001      	beq.n	8006864 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e2c1      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006864:	f7fb fff8 	bl	8002858 <HAL_GetREVID>
 8006868:	4603      	mov	r3, r0
 800686a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800686e:	4293      	cmp	r3, r2
 8006870:	d817      	bhi.n	80068a2 <HAL_RCC_OscConfig+0x35e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	2b20      	cmp	r3, #32
 8006878:	d108      	bne.n	800688c <HAL_RCC_OscConfig+0x348>
 800687a:	4b70      	ldr	r3, [pc, #448]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006882:	4a6e      	ldr	r2, [pc, #440]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006888:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800688a:	e075      	b.n	8006978 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800688c:	4b6b      	ldr	r3, [pc, #428]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	069b      	lsls	r3, r3, #26
 800689a:	4968      	ldr	r1, [pc, #416]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068a0:	e06a      	b.n	8006978 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068a2:	4b66      	ldr	r3, [pc, #408]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	061b      	lsls	r3, r3, #24
 80068b0:	4962      	ldr	r1, [pc, #392]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068b6:	e05f      	b.n	8006978 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d042      	beq.n	8006946 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068c0:	4b5e      	ldr	r3, [pc, #376]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a5d      	ldr	r2, [pc, #372]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80068c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7fb ff94 	bl	80027f8 <HAL_GetTick>
 80068d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068d4:	f7fb ff90 	bl	80027f8 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e280      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068e6:	4b55      	ldr	r3, [pc, #340]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068f2:	f7fb ffb1 	bl	8002858 <HAL_GetREVID>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d817      	bhi.n	8006930 <HAL_RCC_OscConfig+0x3ec>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	2b20      	cmp	r3, #32
 8006906:	d108      	bne.n	800691a <HAL_RCC_OscConfig+0x3d6>
 8006908:	4b4c      	ldr	r3, [pc, #304]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006910:	4a4a      	ldr	r2, [pc, #296]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006912:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006916:	6053      	str	r3, [r2, #4]
 8006918:	e02e      	b.n	8006978 <HAL_RCC_OscConfig+0x434>
 800691a:	4b48      	ldr	r3, [pc, #288]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	069b      	lsls	r3, r3, #26
 8006928:	4944      	ldr	r1, [pc, #272]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
 800692e:	e023      	b.n	8006978 <HAL_RCC_OscConfig+0x434>
 8006930:	4b42      	ldr	r3, [pc, #264]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	061b      	lsls	r3, r3, #24
 800693e:	493f      	ldr	r1, [pc, #252]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006940:	4313      	orrs	r3, r2
 8006942:	60cb      	str	r3, [r1, #12]
 8006944:	e018      	b.n	8006978 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006946:	4b3d      	ldr	r3, [pc, #244]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3c      	ldr	r2, [pc, #240]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800694c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006952:	f7fb ff51 	bl	80027f8 <HAL_GetTick>
 8006956:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800695a:	f7fb ff4d 	bl	80027f8 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e23d      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800696c:	4b33      	ldr	r3, [pc, #204]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f0      	bne.n	800695a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d036      	beq.n	80069f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d019      	beq.n	80069c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800698c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 800698e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006990:	4a2a      	ldr	r2, [pc, #168]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006998:	f7fb ff2e 	bl	80027f8 <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a0:	f7fb ff2a 	bl	80027f8 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e21a      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069b2:	4b22      	ldr	r3, [pc, #136]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80069b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0x45c>
 80069be:	e018      	b.n	80069f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80069c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069cc:	f7fb ff14 	bl	80027f8 <HAL_GetTick>
 80069d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d4:	f7fb ff10 	bl	80027f8 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e200      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069e6:	4b15      	ldr	r3, [pc, #84]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d039      	beq.n	8006a72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01c      	beq.n	8006a40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a06:	4b0d      	ldr	r3, [pc, #52]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006a0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a12:	f7fb fef1 	bl	80027f8 <HAL_GetTick>
 8006a16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a1a:	f7fb feed 	bl	80027f8 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e1dd      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a2c:	4b03      	ldr	r3, [pc, #12]	@ (8006a3c <HAL_RCC_OscConfig+0x4f8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f0      	beq.n	8006a1a <HAL_RCC_OscConfig+0x4d6>
 8006a38:	e01b      	b.n	8006a72 <HAL_RCC_OscConfig+0x52e>
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a40:	4b9b      	ldr	r3, [pc, #620]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a9a      	ldr	r2, [pc, #616]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006a46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a4c:	f7fb fed4 	bl	80027f8 <HAL_GetTick>
 8006a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a54:	f7fb fed0 	bl	80027f8 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e1c0      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a66:	4b92      	ldr	r3, [pc, #584]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8081 	beq.w	8006b82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a80:	4b8c      	ldr	r3, [pc, #560]	@ (8006cb4 <HAL_RCC_OscConfig+0x770>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a8b      	ldr	r2, [pc, #556]	@ (8006cb4 <HAL_RCC_OscConfig+0x770>)
 8006a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a8c:	f7fb feb4 	bl	80027f8 <HAL_GetTick>
 8006a90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a94:	f7fb feb0 	bl	80027f8 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	@ 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e1a0      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aa6:	4b83      	ldr	r3, [pc, #524]	@ (8006cb4 <HAL_RCC_OscConfig+0x770>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x584>
 8006aba:	4b7d      	ldr	r3, [pc, #500]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abe:	4a7c      	ldr	r2, [pc, #496]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac6:	e02d      	b.n	8006b24 <HAL_RCC_OscConfig+0x5e0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10c      	bne.n	8006aea <HAL_RCC_OscConfig+0x5a6>
 8006ad0:	4b77      	ldr	r3, [pc, #476]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad4:	4a76      	ldr	r2, [pc, #472]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8006adc:	4b74      	ldr	r3, [pc, #464]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae0:	4a73      	ldr	r2, [pc, #460]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006ae2:	f023 0304 	bic.w	r3, r3, #4
 8006ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae8:	e01c      	b.n	8006b24 <HAL_RCC_OscConfig+0x5e0>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x5c8>
 8006af2:	4b6f      	ldr	r3, [pc, #444]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af6:	4a6e      	ldr	r2, [pc, #440]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006af8:	f043 0304 	orr.w	r3, r3, #4
 8006afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006afe:	4b6c      	ldr	r3, [pc, #432]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b02:	4a6b      	ldr	r2, [pc, #428]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0a:	e00b      	b.n	8006b24 <HAL_RCC_OscConfig+0x5e0>
 8006b0c:	4b68      	ldr	r3, [pc, #416]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b10:	4a67      	ldr	r2, [pc, #412]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b18:	4b65      	ldr	r3, [pc, #404]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1c:	4a64      	ldr	r2, [pc, #400]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b1e:	f023 0304 	bic.w	r3, r3, #4
 8006b22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d015      	beq.n	8006b58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fb fe64 	bl	80027f8 <HAL_GetTick>
 8006b30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b32:	e00a      	b.n	8006b4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b34:	f7fb fe60 	bl	80027f8 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e14e      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b4a:	4b59      	ldr	r3, [pc, #356]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0ee      	beq.n	8006b34 <HAL_RCC_OscConfig+0x5f0>
 8006b56:	e014      	b.n	8006b82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b58:	f7fb fe4e 	bl	80027f8 <HAL_GetTick>
 8006b5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b5e:	e00a      	b.n	8006b76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b60:	f7fb fe4a 	bl	80027f8 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e138      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b76:	4b4e      	ldr	r3, [pc, #312]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1ee      	bne.n	8006b60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 812d 	beq.w	8006de6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b8c:	4b48      	ldr	r3, [pc, #288]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b94:	2b18      	cmp	r3, #24
 8006b96:	f000 80bd 	beq.w	8006d14 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	f040 809e 	bne.w	8006ce0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba4:	4b42      	ldr	r3, [pc, #264]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a41      	ldr	r2, [pc, #260]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006baa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fb fe22 	bl	80027f8 <HAL_GetTick>
 8006bb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb8:	f7fb fe1e 	bl	80027f8 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e10e      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bca:	4b39      	ldr	r3, [pc, #228]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bd6:	4b36      	ldr	r3, [pc, #216]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006bd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bda:	4b37      	ldr	r3, [pc, #220]	@ (8006cb8 <HAL_RCC_OscConfig+0x774>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006be6:	0112      	lsls	r2, r2, #4
 8006be8:	430a      	orrs	r2, r1
 8006bea:	4931      	ldr	r1, [pc, #196]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	025b      	lsls	r3, r3, #9
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c20:	4923      	ldr	r1, [pc, #140]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c26:	4b22      	ldr	r3, [pc, #136]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	4a21      	ldr	r2, [pc, #132]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c32:	4b1f      	ldr	r3, [pc, #124]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c36:	4b21      	ldr	r3, [pc, #132]	@ (8006cbc <HAL_RCC_OscConfig+0x778>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c3e:	00d2      	lsls	r2, r2, #3
 8006c40:	491b      	ldr	r1, [pc, #108]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c46:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	f023 020c 	bic.w	r2, r3, #12
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	4917      	ldr	r1, [pc, #92]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c58:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	f023 0202 	bic.w	r2, r3, #2
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c64:	4912      	ldr	r1, [pc, #72]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c6a:	4b11      	ldr	r3, [pc, #68]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	4a10      	ldr	r2, [pc, #64]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c76:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c82:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c8e:	4b08      	ldr	r3, [pc, #32]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	4a07      	ldr	r2, [pc, #28]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9a:	4b05      	ldr	r3, [pc, #20]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a04      	ldr	r2, [pc, #16]	@ (8006cb0 <HAL_RCC_OscConfig+0x76c>)
 8006ca0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca6:	f7fb fda7 	bl	80027f8 <HAL_GetTick>
 8006caa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cac:	e011      	b.n	8006cd2 <HAL_RCC_OscConfig+0x78e>
 8006cae:	bf00      	nop
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	58024800 	.word	0x58024800
 8006cb8:	fffffc0c 	.word	0xfffffc0c
 8006cbc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc0:	f7fb fd9a 	bl	80027f8 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e08a      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cd2:	4b47      	ldr	r3, [pc, #284]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x77c>
 8006cde:	e082      	b.n	8006de6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce0:	4b43      	ldr	r3, [pc, #268]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a42      	ldr	r2, [pc, #264]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cec:	f7fb fd84 	bl	80027f8 <HAL_GetTick>
 8006cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf4:	f7fb fd80 	bl	80027f8 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e070      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d06:	4b3a      	ldr	r3, [pc, #232]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f0      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x7b0>
 8006d12:	e068      	b.n	8006de6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d14:	4b36      	ldr	r3, [pc, #216]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d1a:	4b35      	ldr	r3, [pc, #212]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d031      	beq.n	8006d8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f003 0203 	and.w	r2, r3, #3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d12a      	bne.n	8006d8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	091b      	lsrs	r3, r3, #4
 8006d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d122      	bne.n	8006d8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d11a      	bne.n	8006d8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	0a5b      	lsrs	r3, r3, #9
 8006d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d111      	bne.n	8006d8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d108      	bne.n	8006d8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	0e1b      	lsrs	r3, r3, #24
 8006d7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e02b      	b.n	8006de8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d90:	4b17      	ldr	r3, [pc, #92]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d01f      	beq.n	8006de6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006da6:	4b12      	ldr	r3, [pc, #72]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006daa:	4a11      	ldr	r2, [pc, #68]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006db2:	f7fb fd21 	bl	80027f8 <HAL_GetTick>
 8006db6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006db8:	bf00      	nop
 8006dba:	f7fb fd1d 	bl	80027f8 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d0f9      	beq.n	8006dba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dca:	4b0a      	ldr	r3, [pc, #40]	@ (8006df4 <HAL_RCC_OscConfig+0x8b0>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	4906      	ldr	r1, [pc, #24]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006dda:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dde:	4a04      	ldr	r2, [pc, #16]	@ (8006df0 <HAL_RCC_OscConfig+0x8ac>)
 8006de0:	f043 0301 	orr.w	r3, r3, #1
 8006de4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3730      	adds	r7, #48	@ 0x30
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	58024400 	.word	0x58024400
 8006df4:	ffff0007 	.word	0xffff0007

08006df8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e19c      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e0c:	4b8a      	ldr	r3, [pc, #552]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d910      	bls.n	8006e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1a:	4b87      	ldr	r3, [pc, #540]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 020f 	bic.w	r2, r3, #15
 8006e22:	4985      	ldr	r1, [pc, #532]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2a:	4b83      	ldr	r3, [pc, #524]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d001      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e184      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d010      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d908      	bls.n	8006e6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e58:	4b78      	ldr	r3, [pc, #480]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	4975      	ldr	r1, [pc, #468]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d010      	beq.n	8006e98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	4b70      	ldr	r3, [pc, #448]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d908      	bls.n	8006e98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e86:	4b6d      	ldr	r3, [pc, #436]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	496a      	ldr	r1, [pc, #424]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d010      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699a      	ldr	r2, [r3, #24]
 8006ea8:	4b64      	ldr	r3, [pc, #400]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d908      	bls.n	8006ec6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006eb4:	4b61      	ldr	r3, [pc, #388]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	495e      	ldr	r1, [pc, #376]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	4b59      	ldr	r3, [pc, #356]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d908      	bls.n	8006ef4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ee2:	4b56      	ldr	r3, [pc, #344]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4953      	ldr	r1, [pc, #332]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d010      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	4b4d      	ldr	r3, [pc, #308]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d908      	bls.n	8006f22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f10:	4b4a      	ldr	r3, [pc, #296]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f023 020f 	bic.w	r2, r3, #15
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4947      	ldr	r1, [pc, #284]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d055      	beq.n	8006fda <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f2e:	4b43      	ldr	r3, [pc, #268]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	4940      	ldr	r1, [pc, #256]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d107      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f48:	4b3c      	ldr	r3, [pc, #240]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d121      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0f6      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d107      	bne.n	8006f70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f60:	4b36      	ldr	r3, [pc, #216]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d115      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0ea      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d107      	bne.n	8006f88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f78:	4b30      	ldr	r3, [pc, #192]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0de      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f88:	4b2c      	ldr	r3, [pc, #176]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e0d6      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f98:	4b28      	ldr	r3, [pc, #160]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f023 0207 	bic.w	r2, r3, #7
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	4925      	ldr	r1, [pc, #148]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006faa:	f7fb fc25 	bl	80027f8 <HAL_GetTick>
 8006fae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb0:	e00a      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fb2:	f7fb fc21 	bl	80027f8 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e0be      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d1eb      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d010      	beq.n	8007008 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	4b14      	ldr	r3, [pc, #80]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d208      	bcs.n	8007008 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff6:	4b11      	ldr	r3, [pc, #68]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f023 020f 	bic.w	r2, r3, #15
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	490e      	ldr	r1, [pc, #56]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8007004:	4313      	orrs	r3, r2
 8007006:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007008:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d214      	bcs.n	8007040 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007016:	4b08      	ldr	r3, [pc, #32]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 020f 	bic.w	r2, r3, #15
 800701e:	4906      	ldr	r1, [pc, #24]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	4313      	orrs	r3, r2
 8007024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007026:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e086      	b.n	8007146 <HAL_RCC_ClockConfig+0x34e>
 8007038:	52002000 	.word	0x52002000
 800703c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d010      	beq.n	800706e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	4b3f      	ldr	r3, [pc, #252]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007058:	429a      	cmp	r2, r3
 800705a:	d208      	bcs.n	800706e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800705c:	4b3c      	ldr	r3, [pc, #240]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	4939      	ldr	r1, [pc, #228]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 800706a:	4313      	orrs	r3, r2
 800706c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d010      	beq.n	800709c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	4b34      	ldr	r3, [pc, #208]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007086:	429a      	cmp	r2, r3
 8007088:	d208      	bcs.n	800709c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800708a:	4b31      	ldr	r3, [pc, #196]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	492e      	ldr	r1, [pc, #184]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 8007098:	4313      	orrs	r3, r2
 800709a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d010      	beq.n	80070ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	4b28      	ldr	r3, [pc, #160]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d208      	bcs.n	80070ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	4922      	ldr	r1, [pc, #136]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d010      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69da      	ldr	r2, [r3, #28]
 80070da:	4b1d      	ldr	r3, [pc, #116]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d208      	bcs.n	80070f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	4917      	ldr	r1, [pc, #92]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070f8:	f000 f834 	bl	8007164 <HAL_RCC_GetSysClockFreq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b14      	ldr	r3, [pc, #80]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	4912      	ldr	r1, [pc, #72]	@ (8007154 <HAL_RCC_ClockConfig+0x35c>)
 800710a:	5ccb      	ldrb	r3, [r1, r3]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
 8007114:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007116:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <HAL_RCC_ClockConfig+0x358>)
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	4a0d      	ldr	r2, [pc, #52]	@ (8007154 <HAL_RCC_ClockConfig+0x35c>)
 8007120:	5cd3      	ldrb	r3, [r2, r3]
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	fa22 f303 	lsr.w	r3, r2, r3
 800712c:	4a0a      	ldr	r2, [pc, #40]	@ (8007158 <HAL_RCC_ClockConfig+0x360>)
 800712e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007130:	4a0a      	ldr	r2, [pc, #40]	@ (800715c <HAL_RCC_ClockConfig+0x364>)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007136:	4b0a      	ldr	r3, [pc, #40]	@ (8007160 <HAL_RCC_ClockConfig+0x368>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f7fb fb12 	bl	8002764 <HAL_InitTick>
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	58024400 	.word	0x58024400
 8007154:	0801b4dc 	.word	0x0801b4dc
 8007158:	24000004 	.word	0x24000004
 800715c:	24000000 	.word	0x24000000
 8007160:	24000008 	.word	0x24000008

08007164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007164:	b480      	push	{r7}
 8007166:	b089      	sub	sp, #36	@ 0x24
 8007168:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800716a:	4bb3      	ldr	r3, [pc, #716]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007172:	2b18      	cmp	r3, #24
 8007174:	f200 8155 	bhi.w	8007422 <HAL_RCC_GetSysClockFreq+0x2be>
 8007178:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <HAL_RCC_GetSysClockFreq+0x1c>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	080071e5 	.word	0x080071e5
 8007184:	08007423 	.word	0x08007423
 8007188:	08007423 	.word	0x08007423
 800718c:	08007423 	.word	0x08007423
 8007190:	08007423 	.word	0x08007423
 8007194:	08007423 	.word	0x08007423
 8007198:	08007423 	.word	0x08007423
 800719c:	08007423 	.word	0x08007423
 80071a0:	0800720b 	.word	0x0800720b
 80071a4:	08007423 	.word	0x08007423
 80071a8:	08007423 	.word	0x08007423
 80071ac:	08007423 	.word	0x08007423
 80071b0:	08007423 	.word	0x08007423
 80071b4:	08007423 	.word	0x08007423
 80071b8:	08007423 	.word	0x08007423
 80071bc:	08007423 	.word	0x08007423
 80071c0:	08007211 	.word	0x08007211
 80071c4:	08007423 	.word	0x08007423
 80071c8:	08007423 	.word	0x08007423
 80071cc:	08007423 	.word	0x08007423
 80071d0:	08007423 	.word	0x08007423
 80071d4:	08007423 	.word	0x08007423
 80071d8:	08007423 	.word	0x08007423
 80071dc:	08007423 	.word	0x08007423
 80071e0:	08007217 	.word	0x08007217
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e4:	4b94      	ldr	r3, [pc, #592]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071f0:	4b91      	ldr	r3, [pc, #580]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	08db      	lsrs	r3, r3, #3
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	4a90      	ldr	r2, [pc, #576]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007200:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007202:	e111      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007204:	4b8d      	ldr	r3, [pc, #564]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007206:	61bb      	str	r3, [r7, #24]
      break;
 8007208:	e10e      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800720a:	4b8d      	ldr	r3, [pc, #564]	@ (8007440 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800720c:	61bb      	str	r3, [r7, #24]
      break;
 800720e:	e10b      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007210:	4b8c      	ldr	r3, [pc, #560]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007212:	61bb      	str	r3, [r7, #24]
      break;
 8007214:	e108      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007216:	4b88      	ldr	r3, [pc, #544]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007220:	4b85      	ldr	r3, [pc, #532]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800722a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800722c:	4b82      	ldr	r3, [pc, #520]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007236:	4b80      	ldr	r3, [pc, #512]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723a:	08db      	lsrs	r3, r3, #3
 800723c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80e1 	beq.w	800741c <HAL_RCC_GetSysClockFreq+0x2b8>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f000 8083 	beq.w	8007368 <HAL_RCC_GetSysClockFreq+0x204>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b02      	cmp	r3, #2
 8007266:	f200 80a1 	bhi.w	80073ac <HAL_RCC_GetSysClockFreq+0x248>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_RCC_GetSysClockFreq+0x114>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d056      	beq.n	8007324 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007276:	e099      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007278:	4b6f      	ldr	r3, [pc, #444]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02d      	beq.n	80072e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007284:	4b6c      	ldr	r3, [pc, #432]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	08db      	lsrs	r3, r3, #3
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	4a6b      	ldr	r2, [pc, #428]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007290:	fa22 f303 	lsr.w	r3, r2, r3
 8007294:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	ee07 3a90 	vmov	s15, r3
 800729c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ae:	4b62      	ldr	r3, [pc, #392]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072be:	ed97 6a02 	vldr	s12, [r7, #8]
 80072c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007448 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80072de:	e087      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800744c <HAL_RCC_GetSysClockFreq+0x2e8>
 80072ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f2:	4b51      	ldr	r3, [pc, #324]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007302:	ed97 6a02 	vldr	s12, [r7, #8]
 8007306:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007448 <HAL_RCC_GetSysClockFreq+0x2e4>
 800730a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007322:	e065      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007450 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007336:	4b40      	ldr	r3, [pc, #256]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007346:	ed97 6a02 	vldr	s12, [r7, #8]
 800734a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007448 <HAL_RCC_GetSysClockFreq+0x2e4>
 800734e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800735a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007362:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007366:	e043      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737a:	4b2f      	ldr	r3, [pc, #188]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800737c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738a:	ed97 6a02 	vldr	s12, [r7, #8]
 800738e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007448 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800739e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073aa:	e021      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007450 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073be:	4b1e      	ldr	r3, [pc, #120]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80073d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007448 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80073f0:	4b11      	ldr	r3, [pc, #68]	@ (8007438 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	0a5b      	lsrs	r3, r3, #9
 80073f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073fa:	3301      	adds	r3, #1
 80073fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007408:	edd7 6a07 	vldr	s13, [r7, #28]
 800740c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 3a90 	vmov	r3, s15
 8007418:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800741a:	e005      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	61bb      	str	r3, [r7, #24]
      break;
 8007420:	e002      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007422:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007424:	61bb      	str	r3, [r7, #24]
      break;
 8007426:	bf00      	nop
  }

  return sysclockfreq;
 8007428:	69bb      	ldr	r3, [r7, #24]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3724      	adds	r7, #36	@ 0x24
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	58024400 	.word	0x58024400
 800743c:	03d09000 	.word	0x03d09000
 8007440:	003d0900 	.word	0x003d0900
 8007444:	017d7840 	.word	0x017d7840
 8007448:	46000000 	.word	0x46000000
 800744c:	4c742400 	.word	0x4c742400
 8007450:	4a742400 	.word	0x4a742400
 8007454:	4bbebc20 	.word	0x4bbebc20

08007458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800745e:	f7ff fe81 	bl	8007164 <HAL_RCC_GetSysClockFreq>
 8007462:	4602      	mov	r2, r0
 8007464:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	0a1b      	lsrs	r3, r3, #8
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	490f      	ldr	r1, [pc, #60]	@ (80074ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007470:	5ccb      	ldrb	r3, [r1, r3]
 8007472:	f003 031f 	and.w	r3, r3, #31
 8007476:	fa22 f303 	lsr.w	r3, r2, r3
 800747a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800747c:	4b0a      	ldr	r3, [pc, #40]	@ (80074a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	4a09      	ldr	r2, [pc, #36]	@ (80074ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007486:	5cd3      	ldrb	r3, [r2, r3]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	fa22 f303 	lsr.w	r3, r2, r3
 8007492:	4a07      	ldr	r2, [pc, #28]	@ (80074b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007494:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007496:	4a07      	ldr	r2, [pc, #28]	@ (80074b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800749e:	681b      	ldr	r3, [r3, #0]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	58024400 	.word	0x58024400
 80074ac:	0801b4dc 	.word	0x0801b4dc
 80074b0:	24000004 	.word	0x24000004
 80074b4:	24000000 	.word	0x24000000

080074b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074bc:	f7ff ffcc 	bl	8007458 <HAL_RCC_GetHCLKFreq>
 80074c0:	4602      	mov	r2, r0
 80074c2:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	091b      	lsrs	r3, r3, #4
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	4904      	ldr	r1, [pc, #16]	@ (80074e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074ce:	5ccb      	ldrb	r3, [r1, r3]
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80074d8:	4618      	mov	r0, r3
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	58024400 	.word	0x58024400
 80074e0:	0801b4dc 	.word	0x0801b4dc

080074e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074e8:	f7ff ffb6 	bl	8007458 <HAL_RCC_GetHCLKFreq>
 80074ec:	4602      	mov	r2, r0
 80074ee:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	0a1b      	lsrs	r3, r3, #8
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	4904      	ldr	r1, [pc, #16]	@ (800750c <HAL_RCC_GetPCLK2Freq+0x28>)
 80074fa:	5ccb      	ldrb	r3, [r1, r3]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007504:	4618      	mov	r0, r3
 8007506:	bd80      	pop	{r7, pc}
 8007508:	58024400 	.word	0x58024400
 800750c:	0801b4dc 	.word	0x0801b4dc

08007510 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007514:	b0ca      	sub	sp, #296	@ 0x128
 8007516:	af00      	add	r7, sp, #0
 8007518:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007522:	2300      	movs	r3, #0
 8007524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007534:	2500      	movs	r5, #0
 8007536:	ea54 0305 	orrs.w	r3, r4, r5
 800753a:	d049      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007542:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007546:	d02f      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007548:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800754c:	d828      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800754e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007552:	d01a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007558:	d822      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007562:	d007      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007564:	e01c      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007566:	4bb8      	ldr	r3, [pc, #736]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	4ab7      	ldr	r2, [pc, #732]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800756c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007570:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007572:	e01a      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007578:	3308      	adds	r3, #8
 800757a:	2102      	movs	r1, #2
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fc8f 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007588:	e00f      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	3328      	adds	r3, #40	@ 0x28
 8007590:	2102      	movs	r1, #2
 8007592:	4618      	mov	r0, r3
 8007594:	f001 fd36 	bl	8009004 <RCCEx_PLL3_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800759e:	e004      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80075a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075b2:	4ba5      	ldr	r3, [pc, #660]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075c0:	4aa1      	ldr	r2, [pc, #644]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075c2:	430b      	orrs	r3, r1
 80075c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80075c6:	e003      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	ea58 0309 	orrs.w	r3, r8, r9
 80075e4:	d047      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d82a      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075f0:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800760d 	.word	0x0800760d
 80075fc:	0800761b 	.word	0x0800761b
 8007600:	08007631 	.word	0x08007631
 8007604:	0800764f 	.word	0x0800764f
 8007608:	0800764f 	.word	0x0800764f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800760c:	4b8e      	ldr	r3, [pc, #568]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	4a8d      	ldr	r2, [pc, #564]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007618:	e01a      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761e:	3308      	adds	r3, #8
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f001 fc3c 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800762e:	e00f      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007634:	3328      	adds	r3, #40	@ 0x28
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fce3 	bl	8009004 <RCCEx_PLL3_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007644:	e004      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800764c:	e000      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800764e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007658:	4b7b      	ldr	r3, [pc, #492]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800765a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800765c:	f023 0107 	bic.w	r1, r3, #7
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007666:	4a78      	ldr	r2, [pc, #480]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007668:	430b      	orrs	r3, r1
 800766a:	6513      	str	r3, [r2, #80]	@ 0x50
 800766c:	e003      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007682:	f04f 0b00 	mov.w	fp, #0
 8007686:	ea5a 030b 	orrs.w	r3, sl, fp
 800768a:	d04c      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007696:	d030      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769c:	d829      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800769e:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a0:	d02d      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80076a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a4:	d825      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076a6:	2b80      	cmp	r3, #128	@ 0x80
 80076a8:	d018      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80076aa:	2b80      	cmp	r3, #128	@ 0x80
 80076ac:	d821      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80076b2:	2b40      	cmp	r3, #64	@ 0x40
 80076b4:	d007      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80076b6:	e01c      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b8:	4b63      	ldr	r3, [pc, #396]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	4a62      	ldr	r2, [pc, #392]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076c4:	e01c      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ca:	3308      	adds	r3, #8
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fbe6 	bl	8008ea0 <RCCEx_PLL2_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076da:	e011      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e0:	3328      	adds	r3, #40	@ 0x28
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 fc8d 	bl	8009004 <RCCEx_PLL3_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076f0:	e006      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076f8:	e002      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007708:	4b4f      	ldr	r3, [pc, #316]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007716:	4a4c      	ldr	r2, [pc, #304]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007718:	430b      	orrs	r3, r1
 800771a:	6513      	str	r3, [r2, #80]	@ 0x50
 800771c:	e003      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007732:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800773c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007740:	460b      	mov	r3, r1
 8007742:	4313      	orrs	r3, r2
 8007744:	d053      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800774e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007752:	d035      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007754:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007758:	d82e      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800775a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800775e:	d031      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007760:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007764:	d828      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800776a:	d01a      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800776c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007770:	d822      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800777a:	d007      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800777c:	e01c      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777e:	4b32      	ldr	r3, [pc, #200]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	4a31      	ldr	r2, [pc, #196]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800778a:	e01c      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	3308      	adds	r3, #8
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fb83 	bl	8008ea0 <RCCEx_PLL2_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077a0:	e011      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a6:	3328      	adds	r3, #40	@ 0x28
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fc2a 	bl	8009004 <RCCEx_PLL3_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077b6:	e006      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077be:	e002      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10b      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077de:	4a1a      	ldr	r2, [pc, #104]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80077fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007804:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d056      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007816:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800781a:	d038      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800781c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007820:	d831      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007822:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007826:	d034      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007828:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800782c:	d82b      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800782e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007832:	d01d      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007834:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007838:	d825      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d006      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800783e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007842:	d00a      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007844:	e01f      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007846:	bf00      	nop
 8007848:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800784c:	4ba2      	ldr	r3, [pc, #648]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800784e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007850:	4aa1      	ldr	r2, [pc, #644]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007858:	e01c      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785e:	3308      	adds	r3, #8
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fb1c 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	3328      	adds	r3, #40	@ 0x28
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fbc3 	bl	8009004 <RCCEx_PLL3_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007884:	e006      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800788c:	e002      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800788e:	bf00      	nop
 8007890:	e000      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800789c:	4b8e      	ldr	r3, [pc, #568]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800789e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078ac:	4a8a      	ldr	r2, [pc, #552]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ae:	430b      	orrs	r3, r1
 80078b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80078b2:	e003      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d03a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e2:	2b30      	cmp	r3, #48	@ 0x30
 80078e4:	d01f      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80078e6:	2b30      	cmp	r3, #48	@ 0x30
 80078e8:	d819      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d00c      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d815      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d019      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d111      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fa:	4b77      	ldr	r3, [pc, #476]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	4a76      	ldr	r2, [pc, #472]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007906:	e011      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790c:	3308      	adds	r3, #8
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fac5 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800791c:	e006      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007924:	e002      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800792a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007934:	4b68      	ldr	r3, [pc, #416]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007938:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007942:	4a65      	ldr	r2, [pc, #404]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007944:	430b      	orrs	r3, r1
 8007946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007948:	e003      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800795e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007962:	2300      	movs	r3, #0
 8007964:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007968:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800796c:	460b      	mov	r3, r1
 800796e:	4313      	orrs	r3, r2
 8007970:	d051      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800797c:	d035      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800797e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007982:	d82e      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007984:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007988:	d031      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800798a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800798e:	d828      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007994:	d01a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800799a:	d822      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a4:	d007      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80079a6:	e01c      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a8:	4b4b      	ldr	r3, [pc, #300]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	4a4a      	ldr	r2, [pc, #296]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079b4:	e01c      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	3308      	adds	r3, #8
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 fa6e 	bl	8008ea0 <RCCEx_PLL2_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079ca:	e011      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	3328      	adds	r3, #40	@ 0x28
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fb15 	bl	8009004 <RCCEx_PLL3_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079e0:	e006      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079e8:	e002      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079ea:	bf00      	nop
 80079ec:	e000      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079f8:	4b37      	ldr	r3, [pc, #220]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a06:	4a34      	ldr	r2, [pc, #208]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a0c:	e003      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a30:	460b      	mov	r3, r1
 8007a32:	4313      	orrs	r3, r2
 8007a34:	d056      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a40:	d033      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a46:	d82c      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a4c:	d02f      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007a4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a52:	d826      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a58:	d02b      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a5e:	d820      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a64:	d012      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a6a:	d81a      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d022      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a74:	d115      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f001 fa0e 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a8a:	e015      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a90:	3328      	adds	r3, #40	@ 0x28
 8007a92:	2101      	movs	r1, #1
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 fab5 	bl	8009004 <RCCEx_PLL3_Config>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007aa0:	e00a      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aa8:	e006      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aaa:	bf00      	nop
 8007aac:	e004      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10d      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ac0:	4b05      	ldr	r3, [pc, #20]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ace:	4a02      	ldr	r2, [pc, #8]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ad4:	e006      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ad6:	bf00      	nop
 8007ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007afa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4313      	orrs	r3, r2
 8007b02:	d055      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b10:	d033      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b16:	d82c      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1c:	d02f      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b22:	d826      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b28:	d02b      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007b2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b2e:	d820      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b34:	d012      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b3a:	d81a      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d022      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b44:	d115      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 f9a6 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b5a:	e015      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b60:	3328      	adds	r3, #40	@ 0x28
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 fa4d 	bl	8009004 <RCCEx_PLL3_Config>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b70:	e00a      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b78:	e006      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b7a:	bf00      	nop
 8007b7c:	e004      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b7e:	bf00      	nop
 8007b80:	e002      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b82:	bf00      	nop
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b90:	4ba3      	ldr	r3, [pc, #652]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ba0:	4a9f      	ldr	r2, [pc, #636]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ba6:	e003      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	d037      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bda:	d00e      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007be0:	d816      	bhi.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d018      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bea:	d111      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bec:	4b8c      	ldr	r3, [pc, #560]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf0:	4a8b      	ldr	r2, [pc, #556]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bf8:	e00f      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	3308      	adds	r3, #8
 8007c00:	2101      	movs	r1, #1
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 f94c 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c0e:	e004      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c16:	e000      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c22:	4b7f      	ldr	r3, [pc, #508]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c30:	4a7b      	ldr	r2, [pc, #492]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c32:	430b      	orrs	r3, r1
 8007c34:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c36:	e003      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	d039      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d81c      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007cad 	.word	0x08007cad
 8007c74:	08007c81 	.word	0x08007c81
 8007c78:	08007c8f 	.word	0x08007c8f
 8007c7c:	08007cad 	.word	0x08007cad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c80:	4b67      	ldr	r3, [pc, #412]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	4a66      	ldr	r2, [pc, #408]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c8c:	e00f      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	3308      	adds	r3, #8
 8007c94:	2102      	movs	r1, #2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f001 f902 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ca2:	e004      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007caa:	e000      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cba:	f023 0103 	bic.w	r1, r3, #3
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc4:	4a56      	ldr	r2, [pc, #344]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cca:	e003      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f000 809f 	beq.w	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d02:	f7fa fd79 	bl	80027f8 <HAL_GetTick>
 8007d06:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0a:	e00b      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d0c:	f7fa fd74 	bl	80027f8 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b64      	cmp	r3, #100	@ 0x64
 8007d1a:	d903      	bls.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d22:	e005      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d24:	4b3f      	ldr	r3, [pc, #252]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0ed      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d179      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d38:	4b39      	ldr	r3, [pc, #228]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d44:	4053      	eors	r3, r2
 8007d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d015      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d4e:	4b34      	ldr	r3, [pc, #208]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d5a:	4b31      	ldr	r3, [pc, #196]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5e:	4a30      	ldr	r2, [pc, #192]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d66:	4b2e      	ldr	r3, [pc, #184]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d72:	4a2b      	ldr	r2, [pc, #172]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d86:	d118      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d88:	f7fa fd36 	bl	80027f8 <HAL_GetTick>
 8007d8c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d90:	e00d      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d92:	f7fa fd31 	bl	80027f8 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d9c:	1ad2      	subs	r2, r2, r3
 8007d9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d903      	bls.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007dac:	e005      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dae:	4b1c      	ldr	r3, [pc, #112]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0eb      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d129      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dd2:	d10e      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007dd4:	4b12      	ldr	r3, [pc, #72]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007de4:	091a      	lsrs	r2, r3, #4
 8007de6:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	4a0d      	ldr	r2, [pc, #52]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6113      	str	r3, [r2, #16]
 8007df0:	e005      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007df2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	4a0a      	ldr	r2, [pc, #40]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007dfc:	6113      	str	r3, [r2, #16]
 8007dfe:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e0e:	4a04      	ldr	r2, [pc, #16]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e14:	e00e      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007e1e:	e009      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e20:	58024400 	.word	0x58024400
 8007e24:	58024800 	.word	0x58024800
 8007e28:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f002 0301 	and.w	r3, r2, #1
 8007e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f000 8089 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e5c:	2b28      	cmp	r3, #40	@ 0x28
 8007e5e:	d86b      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e60:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007f41 	.word	0x08007f41
 8007e6c:	08007f39 	.word	0x08007f39
 8007e70:	08007f39 	.word	0x08007f39
 8007e74:	08007f39 	.word	0x08007f39
 8007e78:	08007f39 	.word	0x08007f39
 8007e7c:	08007f39 	.word	0x08007f39
 8007e80:	08007f39 	.word	0x08007f39
 8007e84:	08007f39 	.word	0x08007f39
 8007e88:	08007f0d 	.word	0x08007f0d
 8007e8c:	08007f39 	.word	0x08007f39
 8007e90:	08007f39 	.word	0x08007f39
 8007e94:	08007f39 	.word	0x08007f39
 8007e98:	08007f39 	.word	0x08007f39
 8007e9c:	08007f39 	.word	0x08007f39
 8007ea0:	08007f39 	.word	0x08007f39
 8007ea4:	08007f39 	.word	0x08007f39
 8007ea8:	08007f23 	.word	0x08007f23
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f39 	.word	0x08007f39
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	08007f39 	.word	0x08007f39
 8007ebc:	08007f39 	.word	0x08007f39
 8007ec0:	08007f39 	.word	0x08007f39
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007f39 	.word	0x08007f39
 8007ed8:	08007f39 	.word	0x08007f39
 8007edc:	08007f39 	.word	0x08007f39
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f39 	.word	0x08007f39
 8007ef0:	08007f39 	.word	0x08007f39
 8007ef4:	08007f39 	.word	0x08007f39
 8007ef8:	08007f39 	.word	0x08007f39
 8007efc:	08007f39 	.word	0x08007f39
 8007f00:	08007f39 	.word	0x08007f39
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	08007f41 	.word	0x08007f41
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f10:	3308      	adds	r3, #8
 8007f12:	2101      	movs	r1, #1
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ffc3 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f20:	e00f      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	3328      	adds	r3, #40	@ 0x28
 8007f28:	2101      	movs	r1, #1
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f86a 	bl	8009004 <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f36:	e004      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f3e:	e000      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f4a:	4bbf      	ldr	r3, [pc, #764]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f58:	4abb      	ldr	r2, [pc, #748]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f5e:	e003      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f002 0302 	and.w	r3, r2, #2
 8007f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d041      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d824      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f92:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fe5 	.word	0x08007fe5
 8007f9c:	08007fb1 	.word	0x08007fb1
 8007fa0:	08007fc7 	.word	0x08007fc7
 8007fa4:	08007fe5 	.word	0x08007fe5
 8007fa8:	08007fe5 	.word	0x08007fe5
 8007fac:	08007fe5 	.word	0x08007fe5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 ff71 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fc4:	e00f      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	3328      	adds	r3, #40	@ 0x28
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 f818 	bl	8009004 <RCCEx_PLL3_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fda:	e004      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fe2:	e000      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fee:	4b96      	ldr	r3, [pc, #600]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff2:	f023 0107 	bic.w	r1, r3, #7
 8007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ffc:	4a92      	ldr	r2, [pc, #584]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ffe:	430b      	orrs	r3, r1
 8008000:	6553      	str	r3, [r2, #84]	@ 0x54
 8008002:	e003      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 0304 	and.w	r3, r2, #4
 8008018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800801c:	2300      	movs	r3, #0
 800801e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008022:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008026:	460b      	mov	r3, r1
 8008028:	4313      	orrs	r3, r2
 800802a:	d044      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008034:	2b05      	cmp	r3, #5
 8008036:	d825      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008038:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	0800808d 	.word	0x0800808d
 8008044:	08008059 	.word	0x08008059
 8008048:	0800806f 	.word	0x0800806f
 800804c:	0800808d 	.word	0x0800808d
 8008050:	0800808d 	.word	0x0800808d
 8008054:	0800808d 	.word	0x0800808d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805c:	3308      	adds	r3, #8
 800805e:	2101      	movs	r1, #1
 8008060:	4618      	mov	r0, r3
 8008062:	f000 ff1d 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800806c:	e00f      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	3328      	adds	r3, #40	@ 0x28
 8008074:	2101      	movs	r1, #1
 8008076:	4618      	mov	r0, r3
 8008078:	f000 ffc4 	bl	8009004 <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008082:	e004      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800808a:	e000      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800808c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800808e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008096:	4b6c      	ldr	r3, [pc, #432]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809a:	f023 0107 	bic.w	r1, r3, #7
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080a6:	4a68      	ldr	r2, [pc, #416]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ac:	e003      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f002 0320 	and.w	r3, r2, #32
 80080c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d055      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080e2:	d033      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80080e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080e8:	d82c      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ee:	d02f      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80080f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f4:	d826      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080fa:	d02b      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80080fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008100:	d820      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008106:	d012      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800810c:	d81a      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d022      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008116:	d115      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811c:	3308      	adds	r3, #8
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f000 febd 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800812c:	e015      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	3328      	adds	r3, #40	@ 0x28
 8008134:	2102      	movs	r1, #2
 8008136:	4618      	mov	r0, r3
 8008138:	f000 ff64 	bl	8009004 <RCCEx_PLL3_Config>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008142:	e00a      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800814a:	e006      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800814c:	bf00      	nop
 800814e:	e004      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008150:	bf00      	nop
 8008152:	e002      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008154:	bf00      	nop
 8008156:	e000      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800815a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10b      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008162:	4b39      	ldr	r3, [pc, #228]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008166:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008172:	4a35      	ldr	r2, [pc, #212]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008174:	430b      	orrs	r3, r1
 8008176:	6553      	str	r3, [r2, #84]	@ 0x54
 8008178:	e003      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800817e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800818e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008192:	2300      	movs	r3, #0
 8008194:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008198:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800819c:	460b      	mov	r3, r1
 800819e:	4313      	orrs	r3, r2
 80081a0:	d058      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081ae:	d033      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80081b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081b4:	d82c      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ba:	d02f      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80081bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c0:	d826      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081c6:	d02b      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80081c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081cc:	d820      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081d2:	d012      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081d8:	d81a      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d022      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e2:	d115      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e8:	3308      	adds	r3, #8
 80081ea:	2100      	movs	r1, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 fe57 	bl	8008ea0 <RCCEx_PLL2_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081f8:	e015      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fe:	3328      	adds	r3, #40	@ 0x28
 8008200:	2102      	movs	r1, #2
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fefe 	bl	8009004 <RCCEx_PLL3_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800820e:	e00a      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008216:	e006      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008218:	bf00      	nop
 800821a:	e004      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800821c:	bf00      	nop
 800821e:	e002      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008220:	bf00      	nop
 8008222:	e000      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10e      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800822e:	4b06      	ldr	r3, [pc, #24]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008232:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800823e:	4a02      	ldr	r2, [pc, #8]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008240:	430b      	orrs	r3, r1
 8008242:	6593      	str	r3, [r2, #88]	@ 0x58
 8008244:	e006      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008246:	bf00      	nop
 8008248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008264:	2300      	movs	r3, #0
 8008266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800826a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800826e:	460b      	mov	r3, r1
 8008270:	4313      	orrs	r3, r2
 8008272:	d055      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008278:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800827c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008280:	d033      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008282:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008286:	d82c      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800828c:	d02f      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008292:	d826      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008294:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008298:	d02b      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800829a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800829e:	d820      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082a4:	d012      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80082a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082aa:	d81a      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d022      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80082b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b4:	d115      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ba:	3308      	adds	r3, #8
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fdee 	bl	8008ea0 <RCCEx_PLL2_Config>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082ca:	e015      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d0:	3328      	adds	r3, #40	@ 0x28
 80082d2:	2102      	movs	r1, #2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fe95 	bl	8009004 <RCCEx_PLL3_Config>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082e0:	e00a      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082e8:	e006      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082ea:	bf00      	nop
 80082ec:	e004      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082ee:	bf00      	nop
 80082f0:	e002      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10b      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008300:	4ba1      	ldr	r3, [pc, #644]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008304:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008310:	4a9d      	ldr	r2, [pc, #628]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008312:	430b      	orrs	r3, r1
 8008314:	6593      	str	r3, [r2, #88]	@ 0x58
 8008316:	e003      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f002 0308 	and.w	r3, r2, #8
 800832c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008330:	2300      	movs	r3, #0
 8008332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008336:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800833a:	460b      	mov	r3, r1
 800833c:	4313      	orrs	r3, r2
 800833e:	d01e      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834c:	d10c      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008352:	3328      	adds	r3, #40	@ 0x28
 8008354:	2102      	movs	r1, #2
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fe54 	bl	8009004 <RCCEx_PLL3_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008368:	4b87      	ldr	r3, [pc, #540]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008378:	4a83      	ldr	r2, [pc, #524]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800837a:	430b      	orrs	r3, r1
 800837c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f002 0310 	and.w	r3, r2, #16
 800838a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800838e:	2300      	movs	r3, #0
 8008390:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008394:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008398:	460b      	mov	r3, r1
 800839a:	4313      	orrs	r3, r2
 800839c:	d01e      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083aa:	d10c      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b0:	3328      	adds	r3, #40	@ 0x28
 80083b2:	2102      	movs	r1, #2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fe25 	bl	8009004 <RCCEx_PLL3_Config>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083c6:	4b70      	ldr	r3, [pc, #448]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083d6:	4a6c      	ldr	r2, [pc, #432]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083d8:	430b      	orrs	r3, r1
 80083da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80083f6:	460b      	mov	r3, r1
 80083f8:	4313      	orrs	r3, r2
 80083fa:	d03e      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008408:	d022      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800840a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840e:	d81b      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008418:	d00b      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800841a:	e015      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	3308      	adds	r3, #8
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fd3b 	bl	8008ea0 <RCCEx_PLL2_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008430:	e00f      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	3328      	adds	r3, #40	@ 0x28
 8008438:	2102      	movs	r1, #2
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fde2 	bl	8009004 <RCCEx_PLL3_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008446:	e004      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800844e:	e000      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800845a:	4b4b      	ldr	r3, [pc, #300]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800845c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800846a:	4a47      	ldr	r2, [pc, #284]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800846c:	430b      	orrs	r3, r1
 800846e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008470:	e003      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008486:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008488:	2300      	movs	r3, #0
 800848a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800848c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008490:	460b      	mov	r3, r1
 8008492:	4313      	orrs	r3, r2
 8008494:	d03b      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084a2:	d01f      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80084a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084a8:	d818      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80084aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ae:	d003      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80084b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084b4:	d007      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80084b6:	e011      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b8:	4b33      	ldr	r3, [pc, #204]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	4a32      	ldr	r2, [pc, #200]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084c4:	e00f      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ca:	3328      	adds	r3, #40	@ 0x28
 80084cc:	2101      	movs	r1, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fd98 	bl	8009004 <RCCEx_PLL3_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80084da:	e004      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084e2:	e000      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80084e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10b      	bne.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084ee:	4b26      	ldr	r3, [pc, #152]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084fe:	4a22      	ldr	r2, [pc, #136]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008500:	430b      	orrs	r3, r1
 8008502:	6553      	str	r3, [r2, #84]	@ 0x54
 8008504:	e003      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800851a:	673b      	str	r3, [r7, #112]	@ 0x70
 800851c:	2300      	movs	r3, #0
 800851e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008520:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008524:	460b      	mov	r3, r1
 8008526:	4313      	orrs	r3, r2
 8008528:	d034      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800852a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008538:	d007      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800853a:	e011      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800853c:	4b12      	ldr	r3, [pc, #72]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800853e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008540:	4a11      	ldr	r2, [pc, #68]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008548:	e00e      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	3308      	adds	r3, #8
 8008550:	2102      	movs	r1, #2
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fca4 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800855e:	e003      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10d      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008574:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800857e:	4a02      	ldr	r2, [pc, #8]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008580:	430b      	orrs	r3, r1
 8008582:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008584:	e006      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80085a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085a2:	2300      	movs	r3, #0
 80085a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085aa:	460b      	mov	r3, r1
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d00c      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	3328      	adds	r3, #40	@ 0x28
 80085b6:	2102      	movs	r1, #2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fd23 	bl	8009004 <RCCEx_PLL3_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80085d8:	2300      	movs	r3, #0
 80085da:	667b      	str	r3, [r7, #100]	@ 0x64
 80085dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	d038      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f2:	d018      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80085f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f8:	d811      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085fe:	d014      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008604:	d80b      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d011      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800860a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800860e:	d106      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008610:	4bc3      	ldr	r3, [pc, #780]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008614:	4ac2      	ldr	r2, [pc, #776]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800861c:	e008      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008624:	e004      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008626:	bf00      	nop
 8008628:	e002      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800862a:	bf00      	nop
 800862c:	e000      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800862e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10b      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008638:	4bb9      	ldr	r3, [pc, #740]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800863a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008648:	4ab5      	ldr	r2, [pc, #724]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800864a:	430b      	orrs	r3, r1
 800864c:	6553      	str	r3, [r2, #84]	@ 0x54
 800864e:	e003      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008666:	2300      	movs	r3, #0
 8008668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800866a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800866e:	460b      	mov	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008674:	4baa      	ldr	r3, [pc, #680]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008682:	4aa7      	ldr	r2, [pc, #668]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008684:	430b      	orrs	r3, r1
 8008686:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008694:	653b      	str	r3, [r7, #80]	@ 0x50
 8008696:	2300      	movs	r3, #0
 8008698:	657b      	str	r3, [r7, #84]	@ 0x54
 800869a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800869e:	460b      	mov	r3, r1
 80086a0:	4313      	orrs	r3, r2
 80086a2:	d00a      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086a4:	4b9e      	ldr	r3, [pc, #632]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086b4:	4a9a      	ldr	r2, [pc, #616]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086b6:	430b      	orrs	r3, r1
 80086b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086c8:	2300      	movs	r3, #0
 80086ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086d0:	460b      	mov	r3, r1
 80086d2:	4313      	orrs	r3, r2
 80086d4:	d009      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086d6:	4b92      	ldr	r3, [pc, #584]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086e6:	430b      	orrs	r3, r1
 80086e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80086f8:	2300      	movs	r3, #0
 80086fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80086fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008700:	460b      	mov	r3, r1
 8008702:	4313      	orrs	r3, r2
 8008704:	d00e      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008706:	4b86      	ldr	r3, [pc, #536]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	4a85      	ldr	r2, [pc, #532]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800870c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008710:	6113      	str	r3, [r2, #16]
 8008712:	4b83      	ldr	r3, [pc, #524]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008714:	6919      	ldr	r1, [r3, #16]
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800871e:	4a80      	ldr	r2, [pc, #512]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008720:	430b      	orrs	r3, r1
 8008722:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008730:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008732:	2300      	movs	r3, #0
 8008734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008736:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800873a:	460b      	mov	r3, r1
 800873c:	4313      	orrs	r3, r2
 800873e:	d009      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008740:	4b77      	ldr	r3, [pc, #476]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008744:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874e:	4a74      	ldr	r2, [pc, #464]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008750:	430b      	orrs	r3, r1
 8008752:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008760:	633b      	str	r3, [r7, #48]	@ 0x30
 8008762:	2300      	movs	r3, #0
 8008764:	637b      	str	r3, [r7, #52]	@ 0x34
 8008766:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d00a      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008770:	4b6b      	ldr	r3, [pc, #428]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008774:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008780:	4a67      	ldr	r2, [pc, #412]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008782:	430b      	orrs	r3, r1
 8008784:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	2100      	movs	r1, #0
 8008790:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008798:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800879c:	460b      	mov	r3, r1
 800879e:	4313      	orrs	r3, r2
 80087a0:	d011      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a6:	3308      	adds	r3, #8
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fb78 	bl	8008ea0 <RCCEx_PLL2_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	2100      	movs	r1, #0
 80087d0:	6239      	str	r1, [r7, #32]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80087d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087dc:	460b      	mov	r3, r1
 80087de:	4313      	orrs	r3, r2
 80087e0:	d011      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e6:	3308      	adds	r3, #8
 80087e8:	2101      	movs	r1, #1
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fb58 	bl	8008ea0 <RCCEx_PLL2_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	2100      	movs	r1, #0
 8008810:	61b9      	str	r1, [r7, #24]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800881c:	460b      	mov	r3, r1
 800881e:	4313      	orrs	r3, r2
 8008820:	d011      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008826:	3308      	adds	r3, #8
 8008828:	2102      	movs	r1, #2
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fb38 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	2100      	movs	r1, #0
 8008850:	6139      	str	r1, [r7, #16]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800885c:	460b      	mov	r3, r1
 800885e:	4313      	orrs	r3, r2
 8008860:	d011      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3328      	adds	r3, #40	@ 0x28
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fbca 	bl	8009004 <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	2100      	movs	r1, #0
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	f003 0310 	and.w	r3, r3, #16
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800889c:	460b      	mov	r3, r1
 800889e:	4313      	orrs	r3, r2
 80088a0:	d011      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a6:	3328      	adds	r3, #40	@ 0x28
 80088a8:	2101      	movs	r1, #1
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fbaa 	bl	8009004 <RCCEx_PLL3_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	2100      	movs	r1, #0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088dc:	460b      	mov	r3, r1
 80088de:	4313      	orrs	r3, r2
 80088e0:	d011      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e6:	3328      	adds	r3, #40	@ 0x28
 80088e8:	2102      	movs	r1, #2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fb8a 	bl	8009004 <RCCEx_PLL3_Config>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008906:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	e000      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
}
 8008914:	4618      	mov	r0, r3
 8008916:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800891a:	46bd      	mov	sp, r7
 800891c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008920:	58024400 	.word	0x58024400

08008924 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008928:	f7fe fd96 	bl	8007458 <HAL_RCC_GetHCLKFreq>
 800892c:	4602      	mov	r2, r0
 800892e:	4b06      	ldr	r3, [pc, #24]	@ (8008948 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	4904      	ldr	r1, [pc, #16]	@ (800894c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800893a:	5ccb      	ldrb	r3, [r1, r3]
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008944:	4618      	mov	r0, r3
 8008946:	bd80      	pop	{r7, pc}
 8008948:	58024400 	.word	0x58024400
 800894c:	0801b4dc 	.word	0x0801b4dc

08008950 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008950:	b480      	push	{r7}
 8008952:	b089      	sub	sp, #36	@ 0x24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008958:	4ba1      	ldr	r3, [pc, #644]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008962:	4b9f      	ldr	r3, [pc, #636]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008966:	0b1b      	lsrs	r3, r3, #12
 8008968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800896c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800896e:	4b9c      	ldr	r3, [pc, #624]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800897a:	4b99      	ldr	r3, [pc, #612]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897e:	08db      	lsrs	r3, r3, #3
 8008980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8111 	beq.w	8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	f000 8083 	beq.w	8008aac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	f200 80a1 	bhi.w	8008af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d056      	beq.n	8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089ba:	e099      	b.n	8008af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089bc:	4b88      	ldr	r3, [pc, #544]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02d      	beq.n	8008a24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089c8:	4b85      	ldr	r3, [pc, #532]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	4a84      	ldr	r2, [pc, #528]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089d4:	fa22 f303 	lsr.w	r3, r2, r3
 80089d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f2:	4b7b      	ldr	r3, [pc, #492]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a22:	e087      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a36:	4b6a      	ldr	r3, [pc, #424]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a66:	e065      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a7a:	4b59      	ldr	r3, [pc, #356]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aaa:	e043      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008abe:	4b48      	ldr	r3, [pc, #288]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aee:	e021      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b02:	4b37      	ldr	r3, [pc, #220]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b34:	4b2a      	ldr	r3, [pc, #168]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b38:	0a5b      	lsrs	r3, r3, #9
 8008b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b5a:	ee17 2a90 	vmov	r2, s15
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b62:	4b1f      	ldr	r3, [pc, #124]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b6c:	ee07 3a90 	vmov	s15, r3
 8008b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b88:	ee17 2a90 	vmov	r2, s15
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b90:	4b13      	ldr	r3, [pc, #76]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b94:	0e1b      	lsrs	r3, r3, #24
 8008b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb6:	ee17 2a90 	vmov	r2, s15
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	609a      	str	r2, [r3, #8]
}
 8008bd2:	bf00      	nop
 8008bd4:	3724      	adds	r7, #36	@ 0x24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	58024400 	.word	0x58024400
 8008be4:	03d09000 	.word	0x03d09000
 8008be8:	46000000 	.word	0x46000000
 8008bec:	4c742400 	.word	0x4c742400
 8008bf0:	4a742400 	.word	0x4a742400
 8008bf4:	4bbebc20 	.word	0x4bbebc20

08008bf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b089      	sub	sp, #36	@ 0x24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c00:	4ba1      	ldr	r3, [pc, #644]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c0a:	4b9f      	ldr	r3, [pc, #636]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0e:	0d1b      	lsrs	r3, r3, #20
 8008c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c16:	4b9c      	ldr	r3, [pc, #624]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c22:	4b99      	ldr	r3, [pc, #612]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c26:	08db      	lsrs	r3, r3, #3
 8008c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	fb02 f303 	mul.w	r3, r2, r3
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 8111 	beq.w	8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	f000 8083 	beq.w	8008d54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	f200 80a1 	bhi.w	8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d056      	beq.n	8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c62:	e099      	b.n	8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c64:	4b88      	ldr	r3, [pc, #544]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d02d      	beq.n	8008ccc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c70:	4b85      	ldr	r3, [pc, #532]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	08db      	lsrs	r3, r3, #3
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	4a84      	ldr	r2, [pc, #528]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	ee07 3a90 	vmov	s15, r3
 8008c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cca:	e087      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cde:	4b6a      	ldr	r3, [pc, #424]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d0e:	e065      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d22:	4b59      	ldr	r3, [pc, #356]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d52:	e043      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d66:	4b48      	ldr	r3, [pc, #288]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d96:	e021      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008daa:	4b37      	ldr	r3, [pc, #220]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de0:	0a5b      	lsrs	r3, r3, #9
 8008de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e02:	ee17 2a90 	vmov	r2, s15
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e14:	ee07 3a90 	vmov	s15, r3
 8008e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e30:	ee17 2a90 	vmov	r2, s15
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e38:	4b13      	ldr	r3, [pc, #76]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3c:	0e1b      	lsrs	r3, r3, #24
 8008e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e5e:	ee17 2a90 	vmov	r2, s15
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e66:	e008      	b.n	8008e7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	609a      	str	r2, [r3, #8]
}
 8008e7a:	bf00      	nop
 8008e7c:	3724      	adds	r7, #36	@ 0x24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	58024400 	.word	0x58024400
 8008e8c:	03d09000 	.word	0x03d09000
 8008e90:	46000000 	.word	0x46000000
 8008e94:	4c742400 	.word	0x4c742400
 8008e98:	4a742400 	.word	0x4a742400
 8008e9c:	4bbebc20 	.word	0x4bbebc20

08008ea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eae:	4b53      	ldr	r3, [pc, #332]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d101      	bne.n	8008ebe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e099      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eca:	f7f9 fc95 	bl	80027f8 <HAL_GetTick>
 8008ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ed0:	e008      	b.n	8008ee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ed2:	f7f9 fc91 	bl	80027f8 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d901      	bls.n	8008ee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e086      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ee4:	4b45      	ldr	r3, [pc, #276]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f0      	bne.n	8008ed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ef0:	4b42      	ldr	r3, [pc, #264]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	031b      	lsls	r3, r3, #12
 8008efe:	493f      	ldr	r1, [pc, #252]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	025b      	lsls	r3, r3, #9
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	041b      	lsls	r3, r3, #16
 8008f22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	061b      	lsls	r3, r3, #24
 8008f30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f34:	4931      	ldr	r1, [pc, #196]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f3a:	4b30      	ldr	r3, [pc, #192]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	492d      	ldr	r1, [pc, #180]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	f023 0220 	bic.w	r2, r3, #32
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	4928      	ldr	r1, [pc, #160]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f5e:	4b27      	ldr	r3, [pc, #156]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	4a26      	ldr	r2, [pc, #152]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f64:	f023 0310 	bic.w	r3, r3, #16
 8008f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f6a:	4b24      	ldr	r3, [pc, #144]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f6e:	4b24      	ldr	r3, [pc, #144]	@ (8009000 <RCCEx_PLL2_Config+0x160>)
 8008f70:	4013      	ands	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	69d2      	ldr	r2, [r2, #28]
 8008f76:	00d2      	lsls	r2, r2, #3
 8008f78:	4920      	ldr	r1, [pc, #128]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f82:	4a1e      	ldr	r2, [pc, #120]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f84:	f043 0310 	orr.w	r3, r3, #16
 8008f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f90:	4b1a      	ldr	r3, [pc, #104]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	4a19      	ldr	r2, [pc, #100]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f9c:	e00f      	b.n	8008fbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d106      	bne.n	8008fb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fa4:	4b15      	ldr	r3, [pc, #84]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	4a14      	ldr	r2, [pc, #80]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fb0:	e005      	b.n	8008fbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fb2:	4b12      	ldr	r3, [pc, #72]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb6:	4a11      	ldr	r2, [pc, #68]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fca:	f7f9 fc15 	bl	80027f8 <HAL_GetTick>
 8008fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fd0:	e008      	b.n	8008fe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fd2:	f7f9 fc11 	bl	80027f8 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d901      	bls.n	8008fe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e006      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	58024400 	.word	0x58024400
 8009000:	ffff0007 	.word	0xffff0007

08009004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009012:	4b53      	ldr	r3, [pc, #332]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d101      	bne.n	8009022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e099      	b.n	8009156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009022:	4b4f      	ldr	r3, [pc, #316]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a4e      	ldr	r2, [pc, #312]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800902c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800902e:	f7f9 fbe3 	bl	80027f8 <HAL_GetTick>
 8009032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009034:	e008      	b.n	8009048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009036:	f7f9 fbdf 	bl	80027f8 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e086      	b.n	8009156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009048:	4b45      	ldr	r3, [pc, #276]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f0      	bne.n	8009036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009054:	4b42      	ldr	r3, [pc, #264]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009058:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	051b      	lsls	r3, r3, #20
 8009062:	493f      	ldr	r1, [pc, #252]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009064:	4313      	orrs	r3, r2
 8009066:	628b      	str	r3, [r1, #40]	@ 0x28
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	3b01      	subs	r3, #1
 800906e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	025b      	lsls	r3, r3, #9
 800907a:	b29b      	uxth	r3, r3
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	3b01      	subs	r3, #1
 8009084:	041b      	lsls	r3, r3, #16
 8009086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	3b01      	subs	r3, #1
 8009092:	061b      	lsls	r3, r3, #24
 8009094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009098:	4931      	ldr	r1, [pc, #196]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800909e:	4b30      	ldr	r3, [pc, #192]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	492d      	ldr	r1, [pc, #180]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090b0:	4b2b      	ldr	r3, [pc, #172]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	4928      	ldr	r1, [pc, #160]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090c2:	4b27      	ldr	r3, [pc, #156]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c6:	4a26      	ldr	r2, [pc, #152]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090ce:	4b24      	ldr	r3, [pc, #144]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090d2:	4b24      	ldr	r3, [pc, #144]	@ (8009164 <RCCEx_PLL3_Config+0x160>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	69d2      	ldr	r2, [r2, #28]
 80090da:	00d2      	lsls	r2, r2, #3
 80090dc:	4920      	ldr	r1, [pc, #128]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	4a19      	ldr	r2, [pc, #100]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80090fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009100:	e00f      	b.n	8009122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d106      	bne.n	8009116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009108:	4b15      	ldr	r3, [pc, #84]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	4a14      	ldr	r2, [pc, #80]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800910e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009112:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009114:	e005      	b.n	8009122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009116:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911a:	4a11      	ldr	r2, [pc, #68]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800911c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009120:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009122:	4b0f      	ldr	r3, [pc, #60]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a0e      	ldr	r2, [pc, #56]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800912c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800912e:	f7f9 fb63 	bl	80027f8 <HAL_GetTick>
 8009132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009134:	e008      	b.n	8009148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009136:	f7f9 fb5f 	bl	80027f8 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e006      	b.n	8009156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	58024400 	.word	0x58024400
 8009164:	ffff0007 	.word	0xffff0007

08009168 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d071      	beq.n	800925e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7f8 f946 	bl	8001420 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f003 0310 	and.w	r3, r3, #16
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	d050      	beq.n	800924c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	22ca      	movs	r2, #202	@ 0xca
 80091b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2253      	movs	r2, #83	@ 0x53
 80091b8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 face 	bl	800975c <RTC_EnterInitMode>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d124      	bne.n	8009214 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6899      	ldr	r1, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	4b24      	ldr	r3, [pc, #144]	@ (8009268 <HAL_RTC_Init+0x100>)
 80091d6:	400b      	ands	r3, r1
 80091d8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6899      	ldr	r1, [r3, #8]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	0419      	lsls	r1, r3, #16
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fada 	bl	80097c4 <RTC_ExitInitMode>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d113      	bne.n	8009242 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0203 	bic.w	r2, r2, #3
 8009228:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	22ff      	movs	r2, #255	@ 0xff
 8009248:	625a      	str	r2, [r3, #36]	@ 0x24
 800924a:	e001      	b.n	8009250 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	ff8fffbf 	.word	0xff8fffbf

0800926c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800926c:	b590      	push	{r4, r7, lr}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_RTC_SetTime+0x1a>
 8009282:	2302      	movs	r3, #2
 8009284:	e089      	b.n	800939a <HAL_RTC_SetTime+0x12e>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2202      	movs	r2, #2
 8009292:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	22ca      	movs	r2, #202	@ 0xca
 800929c:	625a      	str	r2, [r3, #36]	@ 0x24
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2253      	movs	r2, #83	@ 0x53
 80092a4:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 fa58 	bl	800975c <RTC_EnterInitMode>
 80092ac:	4603      	mov	r3, r0
 80092ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80092b0:	7cfb      	ldrb	r3, [r7, #19]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d161      	bne.n	800937a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d126      	bne.n	800930a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fab3 	bl	8009840 <RTC_ByteToBcd2>
 80092da:	4603      	mov	r3, r0
 80092dc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 faac 	bl	8009840 <RTC_ByteToBcd2>
 80092e8:	4603      	mov	r3, r0
 80092ea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092ec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	789b      	ldrb	r3, [r3, #2]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 faa4 	bl	8009840 <RTC_ByteToBcd2>
 80092f8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092fa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	78db      	ldrb	r3, [r3, #3]
 8009302:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009304:	4313      	orrs	r3, r2
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	e018      	b.n	800933c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2200      	movs	r2, #0
 800931c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800932a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009330:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	78db      	ldrb	r3, [r3, #3]
 8009336:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	6979      	ldr	r1, [r7, #20]
 8009342:	4b18      	ldr	r3, [pc, #96]	@ (80093a4 <HAL_RTC_SetTime+0x138>)
 8009344:	400b      	ands	r3, r1
 8009346:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009356:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6899      	ldr	r1, [r3, #8]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	68da      	ldr	r2, [r3, #12]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	431a      	orrs	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fa27 	bl	80097c4 <RTC_ExitInitMode>
 8009376:	4603      	mov	r3, r0
 8009378:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	22ff      	movs	r2, #255	@ 0xff
 8009380:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009382:	7cfb      	ldrb	r3, [r7, #19]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009398:	7cfb      	ldrb	r3, [r7, #19]
}
 800939a:	4618      	mov	r0, r3
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd90      	pop	{r4, r7, pc}
 80093a2:	bf00      	nop
 80093a4:	007f7f7f 	.word	0x007f7f7f

080093a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_RTC_SetDate+0x1a>
 80093be:	2302      	movs	r3, #2
 80093c0:	e073      	b.n	80094aa <HAL_RTC_SetDate+0x102>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2202      	movs	r2, #2
 80093ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10e      	bne.n	80093f6 <HAL_RTC_SetDate+0x4e>
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	f003 0310 	and.w	r3, r3, #16
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d008      	beq.n	80093f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	f023 0310 	bic.w	r3, r3, #16
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	330a      	adds	r3, #10
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d11c      	bne.n	8009436 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	78db      	ldrb	r3, [r3, #3]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fa1d 	bl	8009840 <RTC_ByteToBcd2>
 8009406:	4603      	mov	r3, r0
 8009408:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fa16 	bl	8009840 <RTC_ByteToBcd2>
 8009414:	4603      	mov	r3, r0
 8009416:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009418:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	789b      	ldrb	r3, [r3, #2]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fa0e 	bl	8009840 <RTC_ByteToBcd2>
 8009424:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009426:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009430:	4313      	orrs	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	e00e      	b.n	8009454 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	78db      	ldrb	r3, [r3, #3]
 800943a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009442:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009448:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009450:	4313      	orrs	r3, r2
 8009452:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	22ca      	movs	r2, #202	@ 0xca
 800945a:	625a      	str	r2, [r3, #36]	@ 0x24
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2253      	movs	r2, #83	@ 0x53
 8009462:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 f979 	bl	800975c <RTC_EnterInitMode>
 800946a:	4603      	mov	r3, r0
 800946c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800946e:	7cfb      	ldrb	r3, [r7, #19]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	6979      	ldr	r1, [r7, #20]
 800947a:	4b0e      	ldr	r3, [pc, #56]	@ (80094b4 <HAL_RTC_SetDate+0x10c>)
 800947c:	400b      	ands	r3, r1
 800947e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f99f 	bl	80097c4 <RTC_ExitInitMode>
 8009486:	4603      	mov	r3, r0
 8009488:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	22ff      	movs	r2, #255	@ 0xff
 8009490:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009492:	7cfb      	ldrb	r3, [r7, #19]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80094a8:	7cfb      	ldrb	r3, [r7, #19]


}
 80094aa:	4618      	mov	r0, r3
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd90      	pop	{r4, r7, pc}
 80094b2:	bf00      	nop
 80094b4:	00ffff3f 	.word	0x00ffff3f

080094b8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b089      	sub	sp, #36	@ 0x24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_RTC_SetAlarm+0x1a>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e11b      	b.n	800970a <HAL_RTC_SetAlarm+0x252>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2202      	movs	r2, #2
 80094de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d137      	bne.n	8009558 <HAL_RTC_SetAlarm+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d102      	bne.n	80094fc <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2200      	movs	r2, #0
 80094fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f99d 	bl	8009840 <RTC_ByteToBcd2>
 8009506:	4603      	mov	r3, r0
 8009508:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f996 	bl	8009840 <RTC_ByteToBcd2>
 8009514:	4603      	mov	r3, r0
 8009516:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009518:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	789b      	ldrb	r3, [r3, #2]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f98e 	bl	8009840 <RTC_ByteToBcd2>
 8009524:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009526:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	78db      	ldrb	r3, [r3, #3]
 800952e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8009530:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f980 	bl	8009840 <RTC_ByteToBcd2>
 8009540:	4603      	mov	r3, r0
 8009542:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8009544:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800954c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009552:	4313      	orrs	r3, r2
 8009554:	61fb      	str	r3, [r7, #28]
 8009556:	e023      	b.n	80095a0 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2200      	movs	r2, #0
 800956a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	785b      	ldrb	r3, [r3, #1]
 8009576:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8009578:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 800957e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	78db      	ldrb	r3, [r3, #3]
 8009584:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8009586:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800958e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8009590:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8009596:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 800959c:	4313      	orrs	r3, r2
 800959e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	22ca      	movs	r2, #202	@ 0xca
 80095b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2253      	movs	r2, #83	@ 0x53
 80095ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095c4:	d14a      	bne.n	800965c <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095d4:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80095e6:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095f6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80095f8:	f7f9 f8fe 	bl	80027f8 <HAL_GetTick>
 80095fc:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80095fe:	e015      	b.n	800962c <HAL_RTC_SetAlarm+0x174>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009600:	f7f9 f8fa 	bl	80027f8 <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800960e:	d90d      	bls.n	800962c <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	22ff      	movs	r2, #255	@ 0xff
 8009616:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2203      	movs	r2, #3
 800961c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e06e      	b.n	800970a <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0e2      	beq.n	8009600 <HAL_RTC_SetAlarm+0x148>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009658:	609a      	str	r2, [r3, #8]
 800965a:	e049      	b.n	80096f0 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800966a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	b2da      	uxtb	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800967c:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800968c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800968e:	f7f9 f8b3 	bl	80027f8 <HAL_GetTick>
 8009692:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009694:	e015      	b.n	80096c2 <HAL_RTC_SetAlarm+0x20a>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009696:	f7f9 f8af 	bl	80027f8 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096a4:	d90d      	bls.n	80096c2 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	22ff      	movs	r2, #255	@ 0xff
 80096ac:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2203      	movs	r2, #3
 80096b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e023      	b.n	800970a <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d0e2      	beq.n	8009696 <HAL_RTC_SetAlarm+0x1de>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096ee:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	22ff      	movs	r2, #255	@ 0xff
 80096f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3724      	adds	r7, #36	@ 0x24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd90      	pop	{r4, r7, pc}
	...

08009714 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a0d      	ldr	r2, [pc, #52]	@ (8009758 <HAL_RTC_WaitForSynchro+0x44>)
 8009722:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009724:	f7f9 f868 	bl	80027f8 <HAL_GetTick>
 8009728:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800972a:	e009      	b.n	8009740 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800972c:	f7f9 f864 	bl	80027f8 <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800973a:	d901      	bls.n	8009740 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e007      	b.n	8009750 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0ee      	beq.n	800972c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	0003ff5f 	.word	0x0003ff5f

0800975c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	d120      	bne.n	80097b8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009780:	f7f9 f83a 	bl	80027f8 <HAL_GetTick>
 8009784:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009786:	e00d      	b.n	80097a4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009788:	f7f9 f836 	bl	80027f8 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009796:	d905      	bls.n	80097a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2203      	movs	r2, #3
 80097a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <RTC_EnterInitMode+0x5c>
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d1e7      	bne.n	8009788 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80097d0:	4b1a      	ldr	r3, [pc, #104]	@ (800983c <RTC_ExitInitMode+0x78>)
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	4a19      	ldr	r2, [pc, #100]	@ (800983c <RTC_ExitInitMode+0x78>)
 80097d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097da:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80097dc:	4b17      	ldr	r3, [pc, #92]	@ (800983c <RTC_ExitInitMode+0x78>)
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10c      	bne.n	8009802 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff ff93 	bl	8009714 <HAL_RTC_WaitForSynchro>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01e      	beq.n	8009832 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2203      	movs	r2, #3
 80097f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	73fb      	strb	r3, [r7, #15]
 8009800:	e017      	b.n	8009832 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009802:	4b0e      	ldr	r3, [pc, #56]	@ (800983c <RTC_ExitInitMode+0x78>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	4a0d      	ldr	r2, [pc, #52]	@ (800983c <RTC_ExitInitMode+0x78>)
 8009808:	f023 0320 	bic.w	r3, r3, #32
 800980c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff ff80 	bl	8009714 <HAL_RTC_WaitForSynchro>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2203      	movs	r2, #3
 800981e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009826:	4b05      	ldr	r3, [pc, #20]	@ (800983c <RTC_ExitInitMode+0x78>)
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	4a04      	ldr	r2, [pc, #16]	@ (800983c <RTC_ExitInitMode+0x78>)
 800982c:	f043 0320 	orr.w	r3, r3, #32
 8009830:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	58004000 	.word	0x58004000

08009840 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	4603      	mov	r3, r0
 8009848:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009852:	e005      	b.n	8009860 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800985a:	7afb      	ldrb	r3, [r7, #11]
 800985c:	3b0a      	subs	r3, #10
 800985e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	2b09      	cmp	r3, #9
 8009864:	d8f6      	bhi.n	8009854 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	b2da      	uxtb	r2, r3
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	4313      	orrs	r3, r2
 8009872:	b2db      	uxtb	r3, r3
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d101      	bne.n	800989a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8009896:	2302      	movs	r3, #2
 8009898:	e065      	b.n	8009966 <HAL_RTCEx_SetWakeUpTimer+0xe6>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2202      	movs	r2, #2
 80098a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	22ca      	movs	r2, #202	@ 0xca
 80098b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2253      	movs	r2, #83	@ 0x53
 80098b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80098ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009970 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	4a2c      	ldr	r2, [pc, #176]	@ (8009970 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80098c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098c4:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 80098c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009970 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d120      	bne.n	8009914 <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 80098d2:	f7f8 ff91 	bl	80027f8 <HAL_GetTick>
 80098d6:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80098d8:	e015      	b.n	8009906 <HAL_RTCEx_SetWakeUpTimer+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098da:	f7f8 ff8d 	bl	80027f8 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098e8:	d90d      	bls.n	8009906 <HAL_RTCEx_SetWakeUpTimer+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	22ff      	movs	r2, #255	@ 0xff
 80098f0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2203      	movs	r2, #3
 80098f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e02f      	b.n	8009966 <HAL_RTCEx_SetWakeUpTimer+0xe6>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0e2      	beq.n	80098da <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  uint32_t CR_tmp = hrtc->Instance->CR;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	613b      	str	r3, [r7, #16]
  CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f023 0307 	bic.w	r3, r3, #7
 8009922:	613b      	str	r3, [r7, #16]
  CR_tmp |= (uint32_t)WakeUpClock;
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4313      	orrs	r3, r2
 800992a:	613b      	str	r3, [r7, #16]
  hrtc->Instance->CR = CR_tmp;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800994a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	22ff      	movs	r2, #255	@ 0xff
 8009952:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	58004000 	.word	0x58004000

08009974 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800998a:	2302      	movs	r3, #2
 800998c:	e07b      	b.n	8009a86 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2202      	movs	r2, #2
 800999a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	22ca      	movs	r2, #202	@ 0xca
 80099a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2253      	movs	r2, #83	@ 0x53
 80099ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80099ae:	4b38      	ldr	r3, [pc, #224]	@ (8009a90 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	4a37      	ldr	r2, [pc, #220]	@ (8009a90 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 80099b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099b8:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 80099ba:	4b35      	ldr	r3, [pc, #212]	@ (8009a90 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d120      	bne.n	8009a08 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 80099c6:	f7f8 ff17 	bl	80027f8 <HAL_GetTick>
 80099ca:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80099cc:	e015      	b.n	80099fa <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099ce:	f7f8 ff13 	bl	80027f8 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099dc:	d90d      	bls.n	80099fa <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	22ff      	movs	r2, #255	@ 0xff
 80099e4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2203      	movs	r2, #3
 80099ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e045      	b.n	8009a86 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0e2      	beq.n	80099ce <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	613b      	str	r3, [r7, #16]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f023 0307 	bic.w	r3, r3, #7
 8009a1e:	613b      	str	r3, [r7, #16]
    CR_tmp |= (uint32_t)WakeUpClock;
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	613b      	str	r3, [r7, #16]
    hrtc->Instance->CR = CR_tmp;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_ENABLE_IT();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009a30:	4b18      	ldr	r3, [pc, #96]	@ (8009a94 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a17      	ldr	r2, [pc, #92]	@ (8009a94 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8009a36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009a46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a4a:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a5a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	689a      	ldr	r2, [r3, #8]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009a6a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	22ff      	movs	r2, #255	@ 0xff
 8009a72:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	58004000 	.word	0x58004000
 8009a94:	58000080 	.word	0x58000080

08009a98 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d101      	bne.n	8009aae <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e04d      	b.n	8009b4a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	22ca      	movs	r2, #202	@ 0xca
 8009ac4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2253      	movs	r2, #83	@ 0x53
 8009acc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009adc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009aec:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8009aee:	f7f8 fe83 	bl	80027f8 <HAL_GetTick>
 8009af2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
#if defined(TAMP)
  while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009af4:	e015      	b.n	8009b22 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
#endif /* TAMP */
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009af6:	f7f8 fe7f 	bl	80027f8 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b04:	d90d      	bls.n	8009b22 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	22ff      	movs	r2, #255	@ 0xff
 8009b0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2203      	movs	r2, #3
 8009b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e013      	b.n	8009b4a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0e2      	beq.n	8009af6 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	22ff      	movs	r2, #255	@ 0xff
 8009b36:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e10f      	b.n	8009d86 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a87      	ldr	r2, [pc, #540]	@ (8009d90 <HAL_SPI_Init+0x23c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00f      	beq.n	8009b96 <HAL_SPI_Init+0x42>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a86      	ldr	r2, [pc, #536]	@ (8009d94 <HAL_SPI_Init+0x240>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00a      	beq.n	8009b96 <HAL_SPI_Init+0x42>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a84      	ldr	r2, [pc, #528]	@ (8009d98 <HAL_SPI_Init+0x244>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d005      	beq.n	8009b96 <HAL_SPI_Init+0x42>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	2b0f      	cmp	r3, #15
 8009b90:	d901      	bls.n	8009b96 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e0f7      	b.n	8009d86 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 ff22 	bl	800a9e0 <SPI_GetPacketSize>
 8009b9c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a7b      	ldr	r2, [pc, #492]	@ (8009d90 <HAL_SPI_Init+0x23c>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d00c      	beq.n	8009bc2 <HAL_SPI_Init+0x6e>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a79      	ldr	r2, [pc, #484]	@ (8009d94 <HAL_SPI_Init+0x240>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d007      	beq.n	8009bc2 <HAL_SPI_Init+0x6e>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a78      	ldr	r2, [pc, #480]	@ (8009d98 <HAL_SPI_Init+0x244>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d002      	beq.n	8009bc2 <HAL_SPI_Init+0x6e>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b08      	cmp	r3, #8
 8009bc0:	d811      	bhi.n	8009be6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009bc6:	4a72      	ldr	r2, [pc, #456]	@ (8009d90 <HAL_SPI_Init+0x23c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d009      	beq.n	8009be0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a70      	ldr	r2, [pc, #448]	@ (8009d94 <HAL_SPI_Init+0x240>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d004      	beq.n	8009be0 <HAL_SPI_Init+0x8c>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a6f      	ldr	r2, [pc, #444]	@ (8009d98 <HAL_SPI_Init+0x244>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d104      	bne.n	8009bea <HAL_SPI_Init+0x96>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b10      	cmp	r3, #16
 8009be4:	d901      	bls.n	8009bea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e0cd      	b.n	8009d86 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7f7 fc96 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0201 	bic.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009c26:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c30:	d119      	bne.n	8009c66 <HAL_SPI_Init+0x112>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c3a:	d103      	bne.n	8009c44 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d008      	beq.n	8009c56 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10c      	bne.n	8009c66 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c54:	d107      	bne.n	8009c66 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00f      	beq.n	8009c92 <HAL_SPI_Init+0x13e>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	2b06      	cmp	r3, #6
 8009c78:	d90b      	bls.n	8009c92 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	e007      	b.n	8009ca2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ca0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69da      	ldr	r2, [r3, #28]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009caa:	431a      	orrs	r2, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cb4:	ea42 0103 	orr.w	r1, r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	431a      	orrs	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d02:	ea42 0103 	orr.w	r1, r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d113      	bne.n	8009d42 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d2c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d40:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f022 0201 	bic.w	r2, r2, #1
 8009d50:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	40013000 	.word	0x40013000
 8009d94:	40003800 	.word	0x40003800
 8009d98:	40003c00 	.word	0x40003c00

08009d9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08e      	sub	sp, #56	@ 0x38
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3320      	adds	r3, #32
 8009db0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3330      	adds	r3, #48	@ 0x30
 8009db8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009dc6:	f7f8 fd17 	bl	80027f8 <HAL_GetTick>
 8009dca:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8009dcc:	887b      	ldrh	r3, [r7, #2]
 8009dce:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8009dd0:	887b      	ldrh	r3, [r7, #2]
 8009dd2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d001      	beq.n	8009de4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8009de0:	2302      	movs	r3, #2
 8009de2:	e310      	b.n	800a406 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <HAL_SPI_TransmitReceive+0x5a>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <HAL_SPI_TransmitReceive+0x5a>
 8009df0:	887b      	ldrh	r3, [r7, #2]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e305      	b.n	800a406 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_SPI_TransmitReceive+0x6c>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e2fe      	b.n	800a406 <HAL_SPI_TransmitReceive+0x66a>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2205      	movs	r2, #5
 8009e14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	887a      	ldrh	r2, [r7, #2]
 8009e2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	887a      	ldrh	r2, [r7, #2]
 8009e32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	887a      	ldrh	r2, [r7, #2]
 8009e40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	887a      	ldrh	r2, [r7, #2]
 8009e48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009e66:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a70      	ldr	r2, [pc, #448]	@ (800a030 <HAL_SPI_TransmitReceive+0x294>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d009      	beq.n	8009e86 <HAL_SPI_TransmitReceive+0xea>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a6f      	ldr	r2, [pc, #444]	@ (800a034 <HAL_SPI_TransmitReceive+0x298>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d004      	beq.n	8009e86 <HAL_SPI_TransmitReceive+0xea>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a6d      	ldr	r2, [pc, #436]	@ (800a038 <HAL_SPI_TransmitReceive+0x29c>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d102      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8009e86:	2310      	movs	r3, #16
 8009e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e8a:	e001      	b.n	8009e90 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	4b69      	ldr	r3, [pc, #420]	@ (800a03c <HAL_SPI_TransmitReceive+0x2a0>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	8879      	ldrh	r1, [r7, #2]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ebc:	d107      	bne.n	8009ece <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ecc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	2b0f      	cmp	r3, #15
 8009ed4:	f240 80a2 	bls.w	800a01c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eda:	089b      	lsrs	r3, r3, #2
 8009edc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009ede:	e094      	b.n	800a00a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d120      	bne.n	8009f30 <HAL_SPI_TransmitReceive+0x194>
 8009eee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01d      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009ef4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009ef6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d217      	bcs.n	8009f30 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6812      	ldr	r2, [r2, #0]
 8009f0a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f10:	1d1a      	adds	r2, r3, #4
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009f38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d065      	beq.n	800a00a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d118      	bne.n	8009f7e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009f56:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f5c:	1d1a      	adds	r2, r3, #4
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f7a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009f7c:	e045      	b.n	800a00a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009f7e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009f80:	8bfb      	ldrh	r3, [r7, #30]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d21d      	bcs.n	8009fc2 <HAL_SPI_TransmitReceive+0x226>
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d018      	beq.n	8009fc2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009f9a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fa0:	1d1a      	adds	r2, r3, #4
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009fc0:	e023      	b.n	800a00a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fc2:	f7f8 fc19 	bl	80027f8 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d803      	bhi.n	8009fda <HAL_SPI_TransmitReceive+0x23e>
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd8:	d102      	bne.n	8009fe0 <HAL_SPI_TransmitReceive+0x244>
 8009fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d114      	bne.n	800a00a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fc2f 	bl	800a844 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e1fd      	b.n	800a406 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a00a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f47f af67 	bne.w	8009ee0 <HAL_SPI_TransmitReceive+0x144>
 800a012:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a014:	2b00      	cmp	r3, #0
 800a016:	f47f af63 	bne.w	8009ee0 <HAL_SPI_TransmitReceive+0x144>
 800a01a:	e1ce      	b.n	800a3ba <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b07      	cmp	r3, #7
 800a022:	f240 81c2 	bls.w	800a3aa <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a028:	085b      	lsrs	r3, r3, #1
 800a02a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a02c:	e0c9      	b.n	800a1c2 <HAL_SPI_TransmitReceive+0x426>
 800a02e:	bf00      	nop
 800a030:	40013000 	.word	0x40013000
 800a034:	40003800 	.word	0x40003800
 800a038:	40003c00 	.word	0x40003c00
 800a03c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d11f      	bne.n	800a08e <HAL_SPI_TransmitReceive+0x2f2>
 800a04e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a050:	2b00      	cmp	r3, #0
 800a052:	d01c      	beq.n	800a08e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a054:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a056:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d216      	bcs.n	800a08e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a064:	881a      	ldrh	r2, [r3, #0]
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a06e:	1c9a      	adds	r2, r3, #2
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a08c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a096:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 8092 	beq.w	800a1c2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d118      	bne.n	800a0de <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0b0:	6a3a      	ldr	r2, [r7, #32]
 800a0b2:	8812      	ldrh	r2, [r2, #0]
 800a0b4:	b292      	uxth	r2, r2
 800a0b6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0bc:	1c9a      	adds	r2, r3, #2
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0da:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a0dc:	e071      	b.n	800a1c2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a0de:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a0e0:	8bfb      	ldrh	r3, [r7, #30]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d228      	bcs.n	800a138 <HAL_SPI_TransmitReceive+0x39c>
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d023      	beq.n	800a138 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0f4:	6a3a      	ldr	r2, [r7, #32]
 800a0f6:	8812      	ldrh	r2, [r2, #0]
 800a0f8:	b292      	uxth	r2, r2
 800a0fa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a100:	1c9a      	adds	r2, r3, #2
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10a:	6a3a      	ldr	r2, [r7, #32]
 800a10c:	8812      	ldrh	r2, [r2, #0]
 800a10e:	b292      	uxth	r2, r2
 800a110:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a116:	1c9a      	adds	r2, r3, #2
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a122:	b29b      	uxth	r3, r3
 800a124:	3b02      	subs	r3, #2
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a134:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a136:	e044      	b.n	800a1c2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a138:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d11d      	bne.n	800a17a <HAL_SPI_TransmitReceive+0x3de>
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d018      	beq.n	800a17a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a14c:	6a3a      	ldr	r2, [r7, #32]
 800a14e:	8812      	ldrh	r2, [r2, #0]
 800a150:	b292      	uxth	r2, r2
 800a152:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a158:	1c9a      	adds	r2, r3, #2
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a164:	b29b      	uxth	r3, r3
 800a166:	3b01      	subs	r3, #1
 800a168:	b29a      	uxth	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a176:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a178:	e023      	b.n	800a1c2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a17a:	f7f8 fb3d 	bl	80027f8 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a186:	429a      	cmp	r2, r3
 800a188:	d803      	bhi.n	800a192 <HAL_SPI_TransmitReceive+0x3f6>
 800a18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d102      	bne.n	800a198 <HAL_SPI_TransmitReceive+0x3fc>
 800a192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a194:	2b00      	cmp	r3, #0
 800a196:	d114      	bne.n	800a1c2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 fb53 	bl	800a844 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e121      	b.n	800a406 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a1c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f47f af3b 	bne.w	800a040 <HAL_SPI_TransmitReceive+0x2a4>
 800a1ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f47f af37 	bne.w	800a040 <HAL_SPI_TransmitReceive+0x2a4>
 800a1d2:	e0f2      	b.n	800a3ba <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d121      	bne.n	800a226 <HAL_SPI_TransmitReceive+0x48a>
 800a1e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01e      	beq.n	800a226 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a1e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a1ea:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ee:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d218      	bcs.n	800a226 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3320      	adds	r3, #32
 800a1fe:	7812      	ldrb	r2, [r2, #0]
 800a200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a224:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a22e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80ba 	beq.w	800a3aa <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b01      	cmp	r3, #1
 800a242:	d11b      	bne.n	800a27c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a250:	7812      	ldrb	r2, [r2, #0]
 800a252:	b2d2      	uxtb	r2, r2
 800a254:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a266:	b29b      	uxth	r3, r3
 800a268:	3b01      	subs	r3, #1
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a278:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a27a:	e096      	b.n	800a3aa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a27c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a27e:	8bfb      	ldrh	r3, [r7, #30]
 800a280:	429a      	cmp	r2, r3
 800a282:	d24a      	bcs.n	800a31a <HAL_SPI_TransmitReceive+0x57e>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d045      	beq.n	800a31a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a29a:	7812      	ldrb	r2, [r2, #0]
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	b2d2      	uxtb	r2, r2
 800a2ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2d2:	7812      	ldrb	r2, [r2, #0]
 800a2d4:	b2d2      	uxtb	r2, r2
 800a2d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ee:	7812      	ldrb	r2, [r2, #0]
 800a2f0:	b2d2      	uxtb	r2, r2
 800a2f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b04      	subs	r3, #4
 800a308:	b29a      	uxth	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a316:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a318:	e047      	b.n	800a3aa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a31a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a31c:	2b03      	cmp	r3, #3
 800a31e:	d820      	bhi.n	800a362 <HAL_SPI_TransmitReceive+0x5c6>
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d01b      	beq.n	800a362 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a336:	7812      	ldrb	r2, [r2, #0]
 800a338:	b2d2      	uxtb	r2, r2
 800a33a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	3b01      	subs	r3, #1
 800a350:	b29a      	uxth	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a35e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a360:	e023      	b.n	800a3aa <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a362:	f7f8 fa49 	bl	80027f8 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a36e:	429a      	cmp	r2, r3
 800a370:	d803      	bhi.n	800a37a <HAL_SPI_TransmitReceive+0x5de>
 800a372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d102      	bne.n	800a380 <HAL_SPI_TransmitReceive+0x5e4>
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d114      	bne.n	800a3aa <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fa5f 	bl	800a844 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a38c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e02d      	b.n	800a406 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a3aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f47f af11 	bne.w	800a1d4 <HAL_SPI_TransmitReceive+0x438>
 800a3b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f47f af0d 	bne.w	800a1d4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2108      	movs	r1, #8
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 fadd 	bl	800a984 <SPI_WaitOnFlagUntilTimeout>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d007      	beq.n	800a3e0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3d6:	f043 0220 	orr.w	r2, r3, #32
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 fa2f 	bl	800a844 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800a404:	2300      	movs	r3, #0
  }
}
 800a406:	4618      	mov	r0, r3
 800a408:	3730      	adds	r7, #48	@ 0x30
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop

0800a410 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08a      	sub	sp, #40	@ 0x28
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a428:	6a3a      	ldr	r2, [r7, #32]
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	4013      	ands	r3, r2
 800a42e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a438:	2300      	movs	r3, #0
 800a43a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a442:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3330      	adds	r3, #48	@ 0x30
 800a44a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a452:	2b00      	cmp	r3, #0
 800a454:	d010      	beq.n	800a478 <HAL_SPI_IRQHandler+0x68>
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	699a      	ldr	r2, [r3, #24]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a46e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f9c3 	bl	800a7fc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a476:	e192      	b.n	800a79e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d113      	bne.n	800a4aa <HAL_SPI_IRQHandler+0x9a>
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	f003 0320 	and.w	r3, r3, #32
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10e      	bne.n	800a4aa <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a492:	2b00      	cmp	r3, #0
 800a494:	d009      	beq.n	800a4aa <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	4798      	blx	r3
    handled = 1UL;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10f      	bne.n	800a4d4 <HAL_SPI_IRQHandler+0xc4>
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d105      	bne.n	800a4d4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	4798      	blx	r3
    handled = 1UL;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f003 0320 	and.w	r3, r3, #32
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10f      	bne.n	800a4fe <HAL_SPI_IRQHandler+0xee>
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00a      	beq.n	800a4fe <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d105      	bne.n	800a4fe <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	4798      	blx	r3
    handled = 1UL;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	2b00      	cmp	r3, #0
 800a502:	f040 8147 	bne.w	800a794 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 808b 	beq.w	800a628 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	699a      	ldr	r2, [r3, #24]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0208 	orr.w	r2, r2, #8
 800a520:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	699a      	ldr	r2, [r3, #24]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f042 0210 	orr.w	r2, r2, #16
 800a530:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	699a      	ldr	r2, [r3, #24]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a540:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691a      	ldr	r2, [r3, #16]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0208 	bic.w	r2, r2, #8
 800a550:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d13d      	bne.n	800a5dc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a560:	e036      	b.n	800a5d0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	2b0f      	cmp	r3, #15
 800a568:	d90b      	bls.n	800a582 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a572:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a574:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	665a      	str	r2, [r3, #100]	@ 0x64
 800a580:	e01d      	b.n	800a5be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	2b07      	cmp	r3, #7
 800a588:	d90b      	bls.n	800a5a2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	8812      	ldrh	r2, [r2, #0]
 800a592:	b292      	uxth	r2, r2
 800a594:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a59a:	1c9a      	adds	r2, r3, #2
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	665a      	str	r2, [r3, #100]	@ 0x64
 800a5a0:	e00d      	b.n	800a5be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5ae:	7812      	ldrb	r2, [r2, #0]
 800a5b0:	b2d2      	uxtb	r2, r2
 800a5b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1c2      	bne.n	800a562 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f931 	bl	800a844 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f8f7 	bl	800a7e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a5fa:	e0d0      	b.n	800a79e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a5fc:	7cfb      	ldrb	r3, [r7, #19]
 800a5fe:	2b05      	cmp	r3, #5
 800a600:	d103      	bne.n	800a60a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f8e6 	bl	800a7d4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a608:	e0c6      	b.n	800a798 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a60a:	7cfb      	ldrb	r3, [r7, #19]
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d103      	bne.n	800a618 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f8d5 	bl	800a7c0 <HAL_SPI_RxCpltCallback>
    return;
 800a616:	e0bf      	b.n	800a798 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a618:	7cfb      	ldrb	r3, [r7, #19]
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	f040 80bc 	bne.w	800a798 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f8c3 	bl	800a7ac <HAL_SPI_TxCpltCallback>
    return;
 800a626:	e0b7      	b.n	800a798 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f000 80b5 	beq.w	800a79e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00f      	beq.n	800a65e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a644:	f043 0204 	orr.w	r2, r3, #4
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	699a      	ldr	r2, [r3, #24]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a65c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00f      	beq.n	800a688 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a66e:	f043 0201 	orr.w	r2, r3, #1
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699a      	ldr	r2, [r3, #24]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a686:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00f      	beq.n	800a6b2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a698:	f043 0208 	orr.w	r2, r3, #8
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	699a      	ldr	r2, [r3, #24]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00f      	beq.n	800a6dc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	699a      	ldr	r2, [r3, #24]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0220 	orr.w	r2, r2, #32
 800a6da:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d05a      	beq.n	800a79c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 0201 	bic.w	r2, r2, #1
 800a6f4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6919      	ldr	r1, [r3, #16]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	4b28      	ldr	r3, [pc, #160]	@ (800a7a4 <HAL_SPI_IRQHandler+0x394>)
 800a702:	400b      	ands	r3, r1
 800a704:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a70c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a710:	d138      	bne.n	800a784 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a720:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d013      	beq.n	800a752 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a72e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7a8 <HAL_SPI_IRQHandler+0x398>)
 800a730:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a736:	4618      	mov	r0, r3
 800a738:	f7f9 fd08 	bl	800414c <HAL_DMA_Abort_IT>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d007      	beq.n	800a752 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a748:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a756:	2b00      	cmp	r3, #0
 800a758:	d020      	beq.n	800a79c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a75e:	4a12      	ldr	r2, [pc, #72]	@ (800a7a8 <HAL_SPI_IRQHandler+0x398>)
 800a760:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a766:	4618      	mov	r0, r3
 800a768:	f7f9 fcf0 	bl	800414c <HAL_DMA_Abort_IT>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d014      	beq.n	800a79c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a778:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a782:	e00b      	b.n	800a79c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f82b 	bl	800a7e8 <HAL_SPI_ErrorCallback>
    return;
 800a792:	e003      	b.n	800a79c <HAL_SPI_IRQHandler+0x38c>
    return;
 800a794:	bf00      	nop
 800a796:	e002      	b.n	800a79e <HAL_SPI_IRQHandler+0x38e>
    return;
 800a798:	bf00      	nop
 800a79a:	e000      	b.n	800a79e <HAL_SPI_IRQHandler+0x38e>
    return;
 800a79c:	bf00      	nop
  }
}
 800a79e:	3728      	adds	r7, #40	@ 0x28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	fffffc94 	.word	0xfffffc94
 800a7a8:	0800a811 	.word	0x0800a811

0800a7ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7ff ffd6 	bl	800a7e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a83c:	bf00      	nop
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	699a      	ldr	r2, [r3, #24]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f042 0208 	orr.w	r2, r2, #8
 800a862:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f042 0210 	orr.w	r2, r2, #16
 800a872:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 0201 	bic.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6919      	ldr	r1, [r3, #16]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4b3c      	ldr	r3, [pc, #240]	@ (800a980 <SPI_CloseTransfer+0x13c>)
 800a890:	400b      	ands	r3, r1
 800a892:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a8a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d014      	beq.n	800a8da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00f      	beq.n	800a8da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f042 0220 	orr.w	r2, r2, #32
 800a8d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d014      	beq.n	800a910 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00f      	beq.n	800a910 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8f6:	f043 0204 	orr.w	r2, r3, #4
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a90e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00f      	beq.n	800a93a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a920:	f043 0201 	orr.w	r2, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	699a      	ldr	r2, [r3, #24]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a938:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00f      	beq.n	800a964 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a94a:	f043 0208 	orr.w	r2, r3, #8
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	699a      	ldr	r2, [r3, #24]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a962:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	fffffc90 	.word	0xfffffc90

0800a984 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a994:	e010      	b.n	800a9b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a996:	f7f7 ff2f 	bl	80027f8 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d803      	bhi.n	800a9ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d102      	bne.n	800a9b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e00f      	b.n	800a9d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695a      	ldr	r2, [r3, #20]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	bf0c      	ite	eq
 800a9c8:	2301      	moveq	r3, #1
 800a9ca:	2300      	movne	r3, #0
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d0df      	beq.n	800a996 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ec:	095b      	lsrs	r3, r3, #5
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3307      	adds	r3, #7
 800a9fe:	08db      	lsrs	r3, r3, #3
 800aa00:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b082      	sub	sp, #8
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e042      	b.n	800aaae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7f7 f8e2 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2224      	movs	r2, #36	@ 0x24
 800aa44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0201 	bic.w	r2, r2, #1
 800aa56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 fbc3 	bl	800c1ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fe58 	bl	800b71c <UART_SetConfig>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d101      	bne.n	800aa76 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e01b      	b.n	800aaae <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f042 0201 	orr.w	r2, r2, #1
 800aaa4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 fc42 	bl	800c330 <UART_CheckIdleState>
 800aaac:	4603      	mov	r3, r0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e031      	b.n	800ab2c <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2224      	movs	r2, #36	@ 0x24
 800aacc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f022 0201 	bic.w	r2, r2, #1
 800aade:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2200      	movs	r2, #0
 800aaee:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7f7 f9cd 	bl	8001e98 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08a      	sub	sp, #40	@ 0x28
 800ab38:	af02      	add	r7, sp, #8
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	4613      	mov	r3, r2
 800ab42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab4a:	2b20      	cmp	r3, #32
 800ab4c:	d17b      	bne.n	800ac46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <HAL_UART_Transmit+0x26>
 800ab54:	88fb      	ldrh	r3, [r7, #6]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e074      	b.n	800ac48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2221      	movs	r2, #33	@ 0x21
 800ab6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab6e:	f7f7 fe43 	bl	80027f8 <HAL_GetTick>
 800ab72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	88fa      	ldrh	r2, [r7, #6]
 800ab78:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	88fa      	ldrh	r2, [r7, #6]
 800ab80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab8c:	d108      	bne.n	800aba0 <HAL_UART_Transmit+0x6c>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d104      	bne.n	800aba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	61bb      	str	r3, [r7, #24]
 800ab9e:	e003      	b.n	800aba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aba8:	e030      	b.n	800ac0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2200      	movs	r2, #0
 800abb2:	2180      	movs	r1, #128	@ 0x80
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f001 fc65 	bl	800c484 <UART_WaitOnFlagUntilTimeout>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2220      	movs	r2, #32
 800abc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800abc8:	2303      	movs	r3, #3
 800abca:	e03d      	b.n	800ac48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10b      	bne.n	800abea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abe0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	3302      	adds	r3, #2
 800abe6:	61bb      	str	r3, [r7, #24]
 800abe8:	e007      	b.n	800abfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	781a      	ldrb	r2, [r3, #0]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	3301      	adds	r3, #1
 800abf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1c8      	bne.n	800abaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2140      	movs	r1, #64	@ 0x40
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f001 fc2e 	bl	800c484 <UART_WaitOnFlagUntilTimeout>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d005      	beq.n	800ac3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2220      	movs	r2, #32
 800ac32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e006      	b.n	800ac48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e000      	b.n	800ac48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ac46:	2302      	movs	r3, #2
  }
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3720      	adds	r7, #32
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08a      	sub	sp, #40	@ 0x28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac64:	2b20      	cmp	r3, #32
 800ac66:	d167      	bne.n	800ad38 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <HAL_UART_Transmit_DMA+0x24>
 800ac6e:	88fb      	ldrh	r3, [r7, #6]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e060      	b.n	800ad3a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	88fa      	ldrh	r2, [r7, #6]
 800ac82:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	88fa      	ldrh	r2, [r7, #6]
 800ac8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2221      	movs	r2, #33	@ 0x21
 800ac9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d028      	beq.n	800acf8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acaa:	4a26      	ldr	r2, [pc, #152]	@ (800ad44 <HAL_UART_Transmit_DMA+0xf4>)
 800acac:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acb2:	4a25      	ldr	r2, [pc, #148]	@ (800ad48 <HAL_UART_Transmit_DMA+0xf8>)
 800acb4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acba:	4a24      	ldr	r2, [pc, #144]	@ (800ad4c <HAL_UART_Transmit_DMA+0xfc>)
 800acbc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acc2:	2200      	movs	r2, #0
 800acc4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acce:	4619      	mov	r1, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3328      	adds	r3, #40	@ 0x28
 800acd6:	461a      	mov	r2, r3
 800acd8:	88fb      	ldrh	r3, [r7, #6]
 800acda:	f7f8 fcaf 	bl	800363c <HAL_DMA_Start_IT>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2210      	movs	r2, #16
 800ace8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2220      	movs	r2, #32
 800acf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e020      	b.n	800ad3a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2240      	movs	r2, #64	@ 0x40
 800acfe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3308      	adds	r3, #8
 800ad06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad16:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad20:	623a      	str	r2, [r7, #32]
 800ad22:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	69f9      	ldr	r1, [r7, #28]
 800ad26:	6a3a      	ldr	r2, [r7, #32]
 800ad28:	e841 2300 	strex	r3, r2, [r1]
 800ad2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e5      	bne.n	800ad00 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	e000      	b.n	800ad3a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ad38:	2302      	movs	r3, #2
  }
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3728      	adds	r7, #40	@ 0x28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	0800c7fd 	.word	0x0800c7fd
 800ad48:	0800c893 	.word	0x0800c893
 800ad4c:	0800ca15 	.word	0x0800ca15

0800ad50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08a      	sub	sp, #40	@ 0x28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad64:	2b20      	cmp	r3, #32
 800ad66:	d137      	bne.n	800add8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <HAL_UART_Receive_DMA+0x24>
 800ad6e:	88fb      	ldrh	r3, [r7, #6]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e030      	b.n	800adda <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a18      	ldr	r2, [pc, #96]	@ (800ade4 <HAL_UART_Receive_DMA+0x94>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d01f      	beq.n	800adc8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d018      	beq.n	800adc8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	613b      	str	r3, [r7, #16]
   return(result);
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800adaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	461a      	mov	r2, r3
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb4:	623b      	str	r3, [r7, #32]
 800adb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb8:	69f9      	ldr	r1, [r7, #28]
 800adba:	6a3a      	ldr	r2, [r7, #32]
 800adbc:	e841 2300 	strex	r3, r2, [r1]
 800adc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1e6      	bne.n	800ad96 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800adc8:	88fb      	ldrh	r3, [r7, #6]
 800adca:	461a      	mov	r2, r3
 800adcc:	68b9      	ldr	r1, [r7, #8]
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f001 fbc6 	bl	800c560 <UART_Start_Receive_DMA>
 800add4:	4603      	mov	r3, r0
 800add6:	e000      	b.n	800adda <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800add8:	2302      	movs	r3, #2
  }
}
 800adda:	4618      	mov	r0, r3
 800addc:	3728      	adds	r7, #40	@ 0x28
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	58000c00 	.word	0x58000c00

0800ade8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b09a      	sub	sp, #104	@ 0x68
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adf8:	e853 3f00 	ldrex	r3, [r3]
 800adfc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800adfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae04:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae16:	e841 2300 	strex	r3, r2, [r1]
 800ae1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ae1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e6      	bne.n	800adf0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3308      	adds	r3, #8
 800ae28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae34:	4b46      	ldr	r3, [pc, #280]	@ (800af50 <HAL_UART_AbortReceive+0x168>)
 800ae36:	4013      	ands	r3, r2
 800ae38:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3308      	adds	r3, #8
 800ae40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae42:	643a      	str	r2, [r7, #64]	@ 0x40
 800ae44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e5      	bne.n	800ae22 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d118      	bne.n	800ae90 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	e853 3f00 	ldrex	r3, [r3]
 800ae6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	f023 0310 	bic.w	r3, r3, #16
 800ae72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae7e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae84:	e841 2300 	strex	r3, r2, [r1]
 800ae88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e6      	bne.n	800ae5e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae9a:	2b40      	cmp	r3, #64	@ 0x40
 800ae9c:	d13b      	bne.n	800af16 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3308      	adds	r3, #8
 800aea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aebe:	61ba      	str	r2, [r7, #24]
 800aec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	6979      	ldr	r1, [r7, #20]
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	613b      	str	r3, [r7, #16]
   return(result);
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1e5      	bne.n	800ae9e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01c      	beq.n	800af16 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aee2:	2200      	movs	r2, #0
 800aee4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f8 fe0f 	bl	8003b10 <HAL_DMA_Abort>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00e      	beq.n	800af16 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fa fa94 	bl	800542c <HAL_DMA_GetError>
 800af04:	4603      	mov	r3, r0
 800af06:	2b20      	cmp	r3, #32
 800af08:	d105      	bne.n	800af16 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2210      	movs	r2, #16
 800af0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e017      	b.n	800af46 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	220f      	movs	r2, #15
 800af24:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	699a      	ldr	r2, [r3, #24]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f042 0208 	orr.w	r2, r2, #8
 800af34:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2220      	movs	r2, #32
 800af3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3768      	adds	r7, #104	@ 0x68
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	effffffe 	.word	0xeffffffe

0800af54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b0ba      	sub	sp, #232	@ 0xe8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800af7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af82:	4013      	ands	r3, r2
 800af84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800af88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d11b      	bne.n	800afc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af94:	f003 0320 	and.w	r3, r3, #32
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d015      	beq.n	800afc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afa0:	f003 0320 	and.w	r3, r3, #32
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d105      	bne.n	800afb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800afa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d009      	beq.n	800afc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 8377 	beq.w	800b6ac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
      }
      return;
 800afc6:	e371      	b.n	800b6ac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800afc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 8123 	beq.w	800b218 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800afd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800afd6:	4b8d      	ldr	r3, [pc, #564]	@ (800b20c <HAL_UART_IRQHandler+0x2b8>)
 800afd8:	4013      	ands	r3, r2
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d106      	bne.n	800afec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800afde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800afe2:	4b8b      	ldr	r3, [pc, #556]	@ (800b210 <HAL_UART_IRQHandler+0x2bc>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 8116 	beq.w	800b218 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d011      	beq.n	800b01c <HAL_UART_IRQHandler+0xc8>
 800aff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800affc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2201      	movs	r2, #1
 800b00a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b012:	f043 0201 	orr.w	r2, r3, #1
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d011      	beq.n	800b04c <HAL_UART_IRQHandler+0xf8>
 800b028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2202      	movs	r2, #2
 800b03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b042:	f043 0204 	orr.w	r2, r3, #4
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d011      	beq.n	800b07c <HAL_UART_IRQHandler+0x128>
 800b058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2204      	movs	r2, #4
 800b06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b072:	f043 0202 	orr.w	r2, r3, #2
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b080:	f003 0308 	and.w	r3, r3, #8
 800b084:	2b00      	cmp	r3, #0
 800b086:	d017      	beq.n	800b0b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b08c:	f003 0320 	and.w	r3, r3, #32
 800b090:	2b00      	cmp	r3, #0
 800b092:	d105      	bne.n	800b0a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b094:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b098:	4b5c      	ldr	r3, [pc, #368]	@ (800b20c <HAL_UART_IRQHandler+0x2b8>)
 800b09a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00b      	beq.n	800b0b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2208      	movs	r2, #8
 800b0a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ae:	f043 0208 	orr.w	r2, r3, #8
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d012      	beq.n	800b0ea <HAL_UART_IRQHandler+0x196>
 800b0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00c      	beq.n	800b0ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e0:	f043 0220 	orr.w	r2, r3, #32
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 82dd 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d013      	beq.n	800b12a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b106:	f003 0320 	and.w	r3, r3, #32
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d105      	bne.n	800b11a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b10e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b116:	2b00      	cmp	r3, #0
 800b118:	d007      	beq.n	800b12a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b130:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13e:	2b40      	cmp	r3, #64	@ 0x40
 800b140:	d005      	beq.n	800b14e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b146:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d054      	beq.n	800b1f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f001 faee 	bl	800c730 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b15e:	2b40      	cmp	r3, #64	@ 0x40
 800b160:	d146      	bne.n	800b1f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3308      	adds	r3, #8
 800b168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b17c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3308      	adds	r3, #8
 800b18a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b18e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b19a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b1a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1d9      	bne.n	800b162 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d017      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1be:	4a15      	ldr	r2, [pc, #84]	@ (800b214 <HAL_UART_IRQHandler+0x2c0>)
 800b1c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f8 ffbf 	bl	800414c <HAL_DMA_Abort_IT>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d019      	beq.n	800b208 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e6:	e00f      	b.n	800b208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7f6 ffcf 	bl	800218c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ee:	e00b      	b.n	800b208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7f6 ffcb 	bl	800218c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1f6:	e007      	b.n	800b208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7f6 ffc7 	bl	800218c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b206:	e253      	b.n	800b6b0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b208:	bf00      	nop
    return;
 800b20a:	e251      	b.n	800b6b0 <HAL_UART_IRQHandler+0x75c>
 800b20c:	10000001 	.word	0x10000001
 800b210:	04000120 	.word	0x04000120
 800b214:	0800ca95 	.word	0x0800ca95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	f040 81e7 	bne.w	800b5f0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b226:	f003 0310 	and.w	r3, r3, #16
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 81e0 	beq.w	800b5f0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b234:	f003 0310 	and.w	r3, r3, #16
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 81d9 	beq.w	800b5f0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2210      	movs	r2, #16
 800b244:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b250:	2b40      	cmp	r3, #64	@ 0x40
 800b252:	f040 8151 	bne.w	800b4f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a96      	ldr	r2, [pc, #600]	@ (800b4b8 <HAL_UART_IRQHandler+0x564>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d068      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a93      	ldr	r2, [pc, #588]	@ (800b4bc <HAL_UART_IRQHandler+0x568>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d061      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a91      	ldr	r2, [pc, #580]	@ (800b4c0 <HAL_UART_IRQHandler+0x56c>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d05a      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a8e      	ldr	r2, [pc, #568]	@ (800b4c4 <HAL_UART_IRQHandler+0x570>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d053      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a8c      	ldr	r2, [pc, #560]	@ (800b4c8 <HAL_UART_IRQHandler+0x574>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d04c      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a89      	ldr	r2, [pc, #548]	@ (800b4cc <HAL_UART_IRQHandler+0x578>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d045      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a87      	ldr	r2, [pc, #540]	@ (800b4d0 <HAL_UART_IRQHandler+0x57c>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d03e      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a84      	ldr	r2, [pc, #528]	@ (800b4d4 <HAL_UART_IRQHandler+0x580>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d037      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a82      	ldr	r2, [pc, #520]	@ (800b4d8 <HAL_UART_IRQHandler+0x584>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d030      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a7f      	ldr	r2, [pc, #508]	@ (800b4dc <HAL_UART_IRQHandler+0x588>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d029      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a7d      	ldr	r2, [pc, #500]	@ (800b4e0 <HAL_UART_IRQHandler+0x58c>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d022      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a7a      	ldr	r2, [pc, #488]	@ (800b4e4 <HAL_UART_IRQHandler+0x590>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d01b      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a78      	ldr	r2, [pc, #480]	@ (800b4e8 <HAL_UART_IRQHandler+0x594>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d014      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a75      	ldr	r2, [pc, #468]	@ (800b4ec <HAL_UART_IRQHandler+0x598>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d00d      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a73      	ldr	r2, [pc, #460]	@ (800b4f0 <HAL_UART_IRQHandler+0x59c>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d006      	beq.n	800b336 <HAL_UART_IRQHandler+0x3e2>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a70      	ldr	r2, [pc, #448]	@ (800b4f4 <HAL_UART_IRQHandler+0x5a0>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d106      	bne.n	800b344 <HAL_UART_IRQHandler+0x3f0>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	b29b      	uxth	r3, r3
 800b342:	e005      	b.n	800b350 <HAL_UART_IRQHandler+0x3fc>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 81ab 	beq.w	800b6b4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b368:	429a      	cmp	r2, r3
 800b36a:	f080 81a3 	bcs.w	800b6b4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b374:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b37e:	69db      	ldr	r3, [r3, #28]
 800b380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b384:	f000 8087 	beq.w	800b496 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b39c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b3a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b3be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b3ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1da      	bne.n	800b388 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3e4:	f023 0301 	bic.w	r3, r3, #1
 800b3e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e1      	bne.n	800b3d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3308      	adds	r3, #8
 800b414:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b418:	e853 3f00 	ldrex	r3, [r3]
 800b41c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b41e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b424:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3308      	adds	r3, #8
 800b42e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b432:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b434:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b438:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e3      	bne.n	800b40e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2220      	movs	r2, #32
 800b44a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b45c:	e853 3f00 	ldrex	r3, [r3]
 800b460:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b464:	f023 0310 	bic.w	r3, r3, #16
 800b468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	461a      	mov	r2, r3
 800b472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b476:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b478:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b47c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b47e:	e841 2300 	strex	r3, r2, [r1]
 800b482:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1e4      	bne.n	800b454 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b490:	4618      	mov	r0, r3
 800b492:	f7f8 fb3d 	bl	8003b10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2202      	movs	r2, #2
 800b49a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f927 	bl	800b704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4b6:	e0fd      	b.n	800b6b4 <HAL_UART_IRQHandler+0x760>
 800b4b8:	40020010 	.word	0x40020010
 800b4bc:	40020028 	.word	0x40020028
 800b4c0:	40020040 	.word	0x40020040
 800b4c4:	40020058 	.word	0x40020058
 800b4c8:	40020070 	.word	0x40020070
 800b4cc:	40020088 	.word	0x40020088
 800b4d0:	400200a0 	.word	0x400200a0
 800b4d4:	400200b8 	.word	0x400200b8
 800b4d8:	40020410 	.word	0x40020410
 800b4dc:	40020428 	.word	0x40020428
 800b4e0:	40020440 	.word	0x40020440
 800b4e4:	40020458 	.word	0x40020458
 800b4e8:	40020470 	.word	0x40020470
 800b4ec:	40020488 	.word	0x40020488
 800b4f0:	400204a0 	.word	0x400204a0
 800b4f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b504:	b29b      	uxth	r3, r3
 800b506:	1ad3      	subs	r3, r2, r3
 800b508:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b512:	b29b      	uxth	r3, r3
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80cf 	beq.w	800b6b8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b51a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 80ca 	beq.w	800b6b8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b546:	647b      	str	r3, [r7, #68]	@ 0x44
 800b548:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b54c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e4      	bne.n	800b524 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	3308      	adds	r3, #8
 800b560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	623b      	str	r3, [r7, #32]
   return(result);
 800b56a:	6a3a      	ldr	r2, [r7, #32]
 800b56c:	4b55      	ldr	r3, [pc, #340]	@ (800b6c4 <HAL_UART_IRQHandler+0x770>)
 800b56e:	4013      	ands	r3, r2
 800b570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3308      	adds	r3, #8
 800b57a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b57e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b580:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e3      	bne.n	800b55a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2220      	movs	r2, #32
 800b596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0310 	bic.w	r3, r3, #16
 800b5ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b5c8:	61fb      	str	r3, [r7, #28]
 800b5ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5cc:	69b9      	ldr	r1, [r7, #24]
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	e841 2300 	strex	r3, r2, [r1]
 800b5d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e4      	bne.n	800b5a6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2202      	movs	r2, #2
 800b5e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f88b 	bl	800b704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5ee:	e063      	b.n	800b6b8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00e      	beq.n	800b61a <HAL_UART_IRQHandler+0x6c6>
 800b5fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b600:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d008      	beq.n	800b61a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 fa7f 	bl	800cb16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b618:	e051      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b61e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b622:	2b00      	cmp	r3, #0
 800b624:	d014      	beq.n	800b650 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d105      	bne.n	800b63e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d008      	beq.n	800b650 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b642:	2b00      	cmp	r3, #0
 800b644:	d03a      	beq.n	800b6bc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
    }
    return;
 800b64e:	e035      	b.n	800b6bc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d009      	beq.n	800b670 <HAL_UART_IRQHandler+0x71c>
 800b65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 fa29 	bl	800cac0 <UART_EndTransmit_IT>
    return;
 800b66e:	e026      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d009      	beq.n	800b690 <HAL_UART_IRQHandler+0x73c>
 800b67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b680:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f001 fa58 	bl	800cb3e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b68e:	e016      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d010      	beq.n	800b6be <HAL_UART_IRQHandler+0x76a>
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	da0c      	bge.n	800b6be <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 fa40 	bl	800cb2a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6aa:	e008      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
      return;
 800b6ac:	bf00      	nop
 800b6ae:	e006      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
    return;
 800b6b0:	bf00      	nop
 800b6b2:	e004      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
      return;
 800b6b4:	bf00      	nop
 800b6b6:	e002      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
      return;
 800b6b8:	bf00      	nop
 800b6ba:	e000      	b.n	800b6be <HAL_UART_IRQHandler+0x76a>
    return;
 800b6bc:	bf00      	nop
  }
}
 800b6be:	37e8      	adds	r7, #232	@ 0xe8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	effffffe 	.word	0xeffffffe

0800b6c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b720:	b092      	sub	sp, #72	@ 0x48
 800b722:	af00      	add	r7, sp, #0
 800b724:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	431a      	orrs	r2, r3
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	431a      	orrs	r2, r3
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	4313      	orrs	r3, r2
 800b742:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	4bbe      	ldr	r3, [pc, #760]	@ (800ba44 <UART_SetConfig+0x328>)
 800b74c:	4013      	ands	r3, r2
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	6812      	ldr	r2, [r2, #0]
 800b752:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b754:	430b      	orrs	r3, r1
 800b756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	68da      	ldr	r2, [r3, #12]
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	430a      	orrs	r2, r1
 800b76c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4ab3      	ldr	r2, [pc, #716]	@ (800ba48 <UART_SetConfig+0x32c>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d004      	beq.n	800b788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b784:	4313      	orrs	r3, r2
 800b786:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689a      	ldr	r2, [r3, #8]
 800b78e:	4baf      	ldr	r3, [pc, #700]	@ (800ba4c <UART_SetConfig+0x330>)
 800b790:	4013      	ands	r3, r2
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	6812      	ldr	r2, [r2, #0]
 800b796:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b798:	430b      	orrs	r3, r1
 800b79a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a2:	f023 010f 	bic.w	r1, r3, #15
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4aa6      	ldr	r2, [pc, #664]	@ (800ba50 <UART_SetConfig+0x334>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d177      	bne.n	800b8ac <UART_SetConfig+0x190>
 800b7bc:	4ba5      	ldr	r3, [pc, #660]	@ (800ba54 <UART_SetConfig+0x338>)
 800b7be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7c4:	2b28      	cmp	r3, #40	@ 0x28
 800b7c6:	d86d      	bhi.n	800b8a4 <UART_SetConfig+0x188>
 800b7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d0 <UART_SetConfig+0xb4>)
 800b7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ce:	bf00      	nop
 800b7d0:	0800b875 	.word	0x0800b875
 800b7d4:	0800b8a5 	.word	0x0800b8a5
 800b7d8:	0800b8a5 	.word	0x0800b8a5
 800b7dc:	0800b8a5 	.word	0x0800b8a5
 800b7e0:	0800b8a5 	.word	0x0800b8a5
 800b7e4:	0800b8a5 	.word	0x0800b8a5
 800b7e8:	0800b8a5 	.word	0x0800b8a5
 800b7ec:	0800b8a5 	.word	0x0800b8a5
 800b7f0:	0800b87d 	.word	0x0800b87d
 800b7f4:	0800b8a5 	.word	0x0800b8a5
 800b7f8:	0800b8a5 	.word	0x0800b8a5
 800b7fc:	0800b8a5 	.word	0x0800b8a5
 800b800:	0800b8a5 	.word	0x0800b8a5
 800b804:	0800b8a5 	.word	0x0800b8a5
 800b808:	0800b8a5 	.word	0x0800b8a5
 800b80c:	0800b8a5 	.word	0x0800b8a5
 800b810:	0800b885 	.word	0x0800b885
 800b814:	0800b8a5 	.word	0x0800b8a5
 800b818:	0800b8a5 	.word	0x0800b8a5
 800b81c:	0800b8a5 	.word	0x0800b8a5
 800b820:	0800b8a5 	.word	0x0800b8a5
 800b824:	0800b8a5 	.word	0x0800b8a5
 800b828:	0800b8a5 	.word	0x0800b8a5
 800b82c:	0800b8a5 	.word	0x0800b8a5
 800b830:	0800b88d 	.word	0x0800b88d
 800b834:	0800b8a5 	.word	0x0800b8a5
 800b838:	0800b8a5 	.word	0x0800b8a5
 800b83c:	0800b8a5 	.word	0x0800b8a5
 800b840:	0800b8a5 	.word	0x0800b8a5
 800b844:	0800b8a5 	.word	0x0800b8a5
 800b848:	0800b8a5 	.word	0x0800b8a5
 800b84c:	0800b8a5 	.word	0x0800b8a5
 800b850:	0800b895 	.word	0x0800b895
 800b854:	0800b8a5 	.word	0x0800b8a5
 800b858:	0800b8a5 	.word	0x0800b8a5
 800b85c:	0800b8a5 	.word	0x0800b8a5
 800b860:	0800b8a5 	.word	0x0800b8a5
 800b864:	0800b8a5 	.word	0x0800b8a5
 800b868:	0800b8a5 	.word	0x0800b8a5
 800b86c:	0800b8a5 	.word	0x0800b8a5
 800b870:	0800b89d 	.word	0x0800b89d
 800b874:	2301      	movs	r3, #1
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87a:	e222      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b87c:	2304      	movs	r3, #4
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b882:	e21e      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b884:	2308      	movs	r3, #8
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88a:	e21a      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b88c:	2310      	movs	r3, #16
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b892:	e216      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b894:	2320      	movs	r3, #32
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89a:	e212      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b89c:	2340      	movs	r3, #64	@ 0x40
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a2:	e20e      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b8a4:	2380      	movs	r3, #128	@ 0x80
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8aa:	e20a      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a69      	ldr	r2, [pc, #420]	@ (800ba58 <UART_SetConfig+0x33c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d130      	bne.n	800b918 <UART_SetConfig+0x1fc>
 800b8b6:	4b67      	ldr	r3, [pc, #412]	@ (800ba54 <UART_SetConfig+0x338>)
 800b8b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ba:	f003 0307 	and.w	r3, r3, #7
 800b8be:	2b05      	cmp	r3, #5
 800b8c0:	d826      	bhi.n	800b910 <UART_SetConfig+0x1f4>
 800b8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c8 <UART_SetConfig+0x1ac>)
 800b8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c8:	0800b8e1 	.word	0x0800b8e1
 800b8cc:	0800b8e9 	.word	0x0800b8e9
 800b8d0:	0800b8f1 	.word	0x0800b8f1
 800b8d4:	0800b8f9 	.word	0x0800b8f9
 800b8d8:	0800b901 	.word	0x0800b901
 800b8dc:	0800b909 	.word	0x0800b909
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e6:	e1ec      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b8e8:	2304      	movs	r3, #4
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ee:	e1e8      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b8f0:	2308      	movs	r3, #8
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f6:	e1e4      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b8f8:	2310      	movs	r3, #16
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fe:	e1e0      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b900:	2320      	movs	r3, #32
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b906:	e1dc      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b908:	2340      	movs	r3, #64	@ 0x40
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90e:	e1d8      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b910:	2380      	movs	r3, #128	@ 0x80
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b916:	e1d4      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a4f      	ldr	r2, [pc, #316]	@ (800ba5c <UART_SetConfig+0x340>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d130      	bne.n	800b984 <UART_SetConfig+0x268>
 800b922:	4b4c      	ldr	r3, [pc, #304]	@ (800ba54 <UART_SetConfig+0x338>)
 800b924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b926:	f003 0307 	and.w	r3, r3, #7
 800b92a:	2b05      	cmp	r3, #5
 800b92c:	d826      	bhi.n	800b97c <UART_SetConfig+0x260>
 800b92e:	a201      	add	r2, pc, #4	@ (adr r2, 800b934 <UART_SetConfig+0x218>)
 800b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b934:	0800b94d 	.word	0x0800b94d
 800b938:	0800b955 	.word	0x0800b955
 800b93c:	0800b95d 	.word	0x0800b95d
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b96d 	.word	0x0800b96d
 800b948:	0800b975 	.word	0x0800b975
 800b94c:	2300      	movs	r3, #0
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b952:	e1b6      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b954:	2304      	movs	r3, #4
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95a:	e1b2      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b95c:	2308      	movs	r3, #8
 800b95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b962:	e1ae      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b964:	2310      	movs	r3, #16
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96a:	e1aa      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b96c:	2320      	movs	r3, #32
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b972:	e1a6      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b974:	2340      	movs	r3, #64	@ 0x40
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97a:	e1a2      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b97c:	2380      	movs	r3, #128	@ 0x80
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b982:	e19e      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a35      	ldr	r2, [pc, #212]	@ (800ba60 <UART_SetConfig+0x344>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d130      	bne.n	800b9f0 <UART_SetConfig+0x2d4>
 800b98e:	4b31      	ldr	r3, [pc, #196]	@ (800ba54 <UART_SetConfig+0x338>)
 800b990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b992:	f003 0307 	and.w	r3, r3, #7
 800b996:	2b05      	cmp	r3, #5
 800b998:	d826      	bhi.n	800b9e8 <UART_SetConfig+0x2cc>
 800b99a:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a0 <UART_SetConfig+0x284>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9b9 	.word	0x0800b9b9
 800b9a4:	0800b9c1 	.word	0x0800b9c1
 800b9a8:	0800b9c9 	.word	0x0800b9c9
 800b9ac:	0800b9d1 	.word	0x0800b9d1
 800b9b0:	0800b9d9 	.word	0x0800b9d9
 800b9b4:	0800b9e1 	.word	0x0800b9e1
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9be:	e180      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b9c0:	2304      	movs	r3, #4
 800b9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9c6:	e17c      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b9c8:	2308      	movs	r3, #8
 800b9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ce:	e178      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b9d0:	2310      	movs	r3, #16
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d6:	e174      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b9d8:	2320      	movs	r3, #32
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9de:	e170      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b9e0:	2340      	movs	r3, #64	@ 0x40
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e6:	e16c      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b9e8:	2380      	movs	r3, #128	@ 0x80
 800b9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ee:	e168      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a1b      	ldr	r2, [pc, #108]	@ (800ba64 <UART_SetConfig+0x348>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d142      	bne.n	800ba80 <UART_SetConfig+0x364>
 800b9fa:	4b16      	ldr	r3, [pc, #88]	@ (800ba54 <UART_SetConfig+0x338>)
 800b9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9fe:	f003 0307 	and.w	r3, r3, #7
 800ba02:	2b05      	cmp	r3, #5
 800ba04:	d838      	bhi.n	800ba78 <UART_SetConfig+0x35c>
 800ba06:	a201      	add	r2, pc, #4	@ (adr r2, 800ba0c <UART_SetConfig+0x2f0>)
 800ba08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0c:	0800ba25 	.word	0x0800ba25
 800ba10:	0800ba2d 	.word	0x0800ba2d
 800ba14:	0800ba35 	.word	0x0800ba35
 800ba18:	0800ba3d 	.word	0x0800ba3d
 800ba1c:	0800ba69 	.word	0x0800ba69
 800ba20:	0800ba71 	.word	0x0800ba71
 800ba24:	2300      	movs	r3, #0
 800ba26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba2a:	e14a      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800ba2c:	2304      	movs	r3, #4
 800ba2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba32:	e146      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800ba34:	2308      	movs	r3, #8
 800ba36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba3a:	e142      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800ba3c:	2310      	movs	r3, #16
 800ba3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba42:	e13e      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800ba44:	cfff69f3 	.word	0xcfff69f3
 800ba48:	58000c00 	.word	0x58000c00
 800ba4c:	11fff4ff 	.word	0x11fff4ff
 800ba50:	40011000 	.word	0x40011000
 800ba54:	58024400 	.word	0x58024400
 800ba58:	40004400 	.word	0x40004400
 800ba5c:	40004800 	.word	0x40004800
 800ba60:	40004c00 	.word	0x40004c00
 800ba64:	40005000 	.word	0x40005000
 800ba68:	2320      	movs	r3, #32
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e128      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800ba70:	2340      	movs	r3, #64	@ 0x40
 800ba72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba76:	e124      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800ba78:	2380      	movs	r3, #128	@ 0x80
 800ba7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba7e:	e120      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4acb      	ldr	r2, [pc, #812]	@ (800bdb4 <UART_SetConfig+0x698>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d176      	bne.n	800bb78 <UART_SetConfig+0x45c>
 800ba8a:	4bcb      	ldr	r3, [pc, #812]	@ (800bdb8 <UART_SetConfig+0x69c>)
 800ba8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba92:	2b28      	cmp	r3, #40	@ 0x28
 800ba94:	d86c      	bhi.n	800bb70 <UART_SetConfig+0x454>
 800ba96:	a201      	add	r2, pc, #4	@ (adr r2, 800ba9c <UART_SetConfig+0x380>)
 800ba98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9c:	0800bb41 	.word	0x0800bb41
 800baa0:	0800bb71 	.word	0x0800bb71
 800baa4:	0800bb71 	.word	0x0800bb71
 800baa8:	0800bb71 	.word	0x0800bb71
 800baac:	0800bb71 	.word	0x0800bb71
 800bab0:	0800bb71 	.word	0x0800bb71
 800bab4:	0800bb71 	.word	0x0800bb71
 800bab8:	0800bb71 	.word	0x0800bb71
 800babc:	0800bb49 	.word	0x0800bb49
 800bac0:	0800bb71 	.word	0x0800bb71
 800bac4:	0800bb71 	.word	0x0800bb71
 800bac8:	0800bb71 	.word	0x0800bb71
 800bacc:	0800bb71 	.word	0x0800bb71
 800bad0:	0800bb71 	.word	0x0800bb71
 800bad4:	0800bb71 	.word	0x0800bb71
 800bad8:	0800bb71 	.word	0x0800bb71
 800badc:	0800bb51 	.word	0x0800bb51
 800bae0:	0800bb71 	.word	0x0800bb71
 800bae4:	0800bb71 	.word	0x0800bb71
 800bae8:	0800bb71 	.word	0x0800bb71
 800baec:	0800bb71 	.word	0x0800bb71
 800baf0:	0800bb71 	.word	0x0800bb71
 800baf4:	0800bb71 	.word	0x0800bb71
 800baf8:	0800bb71 	.word	0x0800bb71
 800bafc:	0800bb59 	.word	0x0800bb59
 800bb00:	0800bb71 	.word	0x0800bb71
 800bb04:	0800bb71 	.word	0x0800bb71
 800bb08:	0800bb71 	.word	0x0800bb71
 800bb0c:	0800bb71 	.word	0x0800bb71
 800bb10:	0800bb71 	.word	0x0800bb71
 800bb14:	0800bb71 	.word	0x0800bb71
 800bb18:	0800bb71 	.word	0x0800bb71
 800bb1c:	0800bb61 	.word	0x0800bb61
 800bb20:	0800bb71 	.word	0x0800bb71
 800bb24:	0800bb71 	.word	0x0800bb71
 800bb28:	0800bb71 	.word	0x0800bb71
 800bb2c:	0800bb71 	.word	0x0800bb71
 800bb30:	0800bb71 	.word	0x0800bb71
 800bb34:	0800bb71 	.word	0x0800bb71
 800bb38:	0800bb71 	.word	0x0800bb71
 800bb3c:	0800bb69 	.word	0x0800bb69
 800bb40:	2301      	movs	r3, #1
 800bb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb46:	e0bc      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bb48:	2304      	movs	r3, #4
 800bb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4e:	e0b8      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bb50:	2308      	movs	r3, #8
 800bb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb56:	e0b4      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bb58:	2310      	movs	r3, #16
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5e:	e0b0      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bb60:	2320      	movs	r3, #32
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb66:	e0ac      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bb68:	2340      	movs	r3, #64	@ 0x40
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6e:	e0a8      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bb70:	2380      	movs	r3, #128	@ 0x80
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb76:	e0a4      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a8f      	ldr	r2, [pc, #572]	@ (800bdbc <UART_SetConfig+0x6a0>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d130      	bne.n	800bbe4 <UART_SetConfig+0x4c8>
 800bb82:	4b8d      	ldr	r3, [pc, #564]	@ (800bdb8 <UART_SetConfig+0x69c>)
 800bb84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb86:	f003 0307 	and.w	r3, r3, #7
 800bb8a:	2b05      	cmp	r3, #5
 800bb8c:	d826      	bhi.n	800bbdc <UART_SetConfig+0x4c0>
 800bb8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb94 <UART_SetConfig+0x478>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bbad 	.word	0x0800bbad
 800bb98:	0800bbb5 	.word	0x0800bbb5
 800bb9c:	0800bbbd 	.word	0x0800bbbd
 800bba0:	0800bbc5 	.word	0x0800bbc5
 800bba4:	0800bbcd 	.word	0x0800bbcd
 800bba8:	0800bbd5 	.word	0x0800bbd5
 800bbac:	2300      	movs	r3, #0
 800bbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbb2:	e086      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bbb4:	2304      	movs	r3, #4
 800bbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbba:	e082      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bbbc:	2308      	movs	r3, #8
 800bbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc2:	e07e      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bbc4:	2310      	movs	r3, #16
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbca:	e07a      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bbcc:	2320      	movs	r3, #32
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd2:	e076      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bbd4:	2340      	movs	r3, #64	@ 0x40
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbda:	e072      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bbdc:	2380      	movs	r3, #128	@ 0x80
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe2:	e06e      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a75      	ldr	r2, [pc, #468]	@ (800bdc0 <UART_SetConfig+0x6a4>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d130      	bne.n	800bc50 <UART_SetConfig+0x534>
 800bbee:	4b72      	ldr	r3, [pc, #456]	@ (800bdb8 <UART_SetConfig+0x69c>)
 800bbf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbf2:	f003 0307 	and.w	r3, r3, #7
 800bbf6:	2b05      	cmp	r3, #5
 800bbf8:	d826      	bhi.n	800bc48 <UART_SetConfig+0x52c>
 800bbfa:	a201      	add	r2, pc, #4	@ (adr r2, 800bc00 <UART_SetConfig+0x4e4>)
 800bbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc00:	0800bc19 	.word	0x0800bc19
 800bc04:	0800bc21 	.word	0x0800bc21
 800bc08:	0800bc29 	.word	0x0800bc29
 800bc0c:	0800bc31 	.word	0x0800bc31
 800bc10:	0800bc39 	.word	0x0800bc39
 800bc14:	0800bc41 	.word	0x0800bc41
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc1e:	e050      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc20:	2304      	movs	r3, #4
 800bc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc26:	e04c      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc28:	2308      	movs	r3, #8
 800bc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc2e:	e048      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc30:	2310      	movs	r3, #16
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc36:	e044      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc38:	2320      	movs	r3, #32
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3e:	e040      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc40:	2340      	movs	r3, #64	@ 0x40
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc46:	e03c      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc48:	2380      	movs	r3, #128	@ 0x80
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4e:	e038      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a5b      	ldr	r2, [pc, #364]	@ (800bdc4 <UART_SetConfig+0x6a8>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d130      	bne.n	800bcbc <UART_SetConfig+0x5a0>
 800bc5a:	4b57      	ldr	r3, [pc, #348]	@ (800bdb8 <UART_SetConfig+0x69c>)
 800bc5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc5e:	f003 0307 	and.w	r3, r3, #7
 800bc62:	2b05      	cmp	r3, #5
 800bc64:	d826      	bhi.n	800bcb4 <UART_SetConfig+0x598>
 800bc66:	a201      	add	r2, pc, #4	@ (adr r2, 800bc6c <UART_SetConfig+0x550>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc85 	.word	0x0800bc85
 800bc70:	0800bc8d 	.word	0x0800bc8d
 800bc74:	0800bc95 	.word	0x0800bc95
 800bc78:	0800bc9d 	.word	0x0800bc9d
 800bc7c:	0800bca5 	.word	0x0800bca5
 800bc80:	0800bcad 	.word	0x0800bcad
 800bc84:	2302      	movs	r3, #2
 800bc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc8a:	e01a      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc8c:	2304      	movs	r3, #4
 800bc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc92:	e016      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc94:	2308      	movs	r3, #8
 800bc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc9a:	e012      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bc9c:	2310      	movs	r3, #16
 800bc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bca2:	e00e      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bca4:	2320      	movs	r3, #32
 800bca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcaa:	e00a      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bcac:	2340      	movs	r3, #64	@ 0x40
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb2:	e006      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bcb4:	2380      	movs	r3, #128	@ 0x80
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcba:	e002      	b.n	800bcc2 <UART_SetConfig+0x5a6>
 800bcbc:	2380      	movs	r3, #128	@ 0x80
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a3f      	ldr	r2, [pc, #252]	@ (800bdc4 <UART_SetConfig+0x6a8>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	f040 80f8 	bne.w	800bebe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bcce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	dc46      	bgt.n	800bd64 <UART_SetConfig+0x648>
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	f2c0 8082 	blt.w	800bde0 <UART_SetConfig+0x6c4>
 800bcdc:	3b02      	subs	r3, #2
 800bcde:	2b1e      	cmp	r3, #30
 800bce0:	d87e      	bhi.n	800bde0 <UART_SetConfig+0x6c4>
 800bce2:	a201      	add	r2, pc, #4	@ (adr r2, 800bce8 <UART_SetConfig+0x5cc>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd6b 	.word	0x0800bd6b
 800bcec:	0800bde1 	.word	0x0800bde1
 800bcf0:	0800bd73 	.word	0x0800bd73
 800bcf4:	0800bde1 	.word	0x0800bde1
 800bcf8:	0800bde1 	.word	0x0800bde1
 800bcfc:	0800bde1 	.word	0x0800bde1
 800bd00:	0800bd83 	.word	0x0800bd83
 800bd04:	0800bde1 	.word	0x0800bde1
 800bd08:	0800bde1 	.word	0x0800bde1
 800bd0c:	0800bde1 	.word	0x0800bde1
 800bd10:	0800bde1 	.word	0x0800bde1
 800bd14:	0800bde1 	.word	0x0800bde1
 800bd18:	0800bde1 	.word	0x0800bde1
 800bd1c:	0800bde1 	.word	0x0800bde1
 800bd20:	0800bd93 	.word	0x0800bd93
 800bd24:	0800bde1 	.word	0x0800bde1
 800bd28:	0800bde1 	.word	0x0800bde1
 800bd2c:	0800bde1 	.word	0x0800bde1
 800bd30:	0800bde1 	.word	0x0800bde1
 800bd34:	0800bde1 	.word	0x0800bde1
 800bd38:	0800bde1 	.word	0x0800bde1
 800bd3c:	0800bde1 	.word	0x0800bde1
 800bd40:	0800bde1 	.word	0x0800bde1
 800bd44:	0800bde1 	.word	0x0800bde1
 800bd48:	0800bde1 	.word	0x0800bde1
 800bd4c:	0800bde1 	.word	0x0800bde1
 800bd50:	0800bde1 	.word	0x0800bde1
 800bd54:	0800bde1 	.word	0x0800bde1
 800bd58:	0800bde1 	.word	0x0800bde1
 800bd5c:	0800bde1 	.word	0x0800bde1
 800bd60:	0800bdd3 	.word	0x0800bdd3
 800bd64:	2b40      	cmp	r3, #64	@ 0x40
 800bd66:	d037      	beq.n	800bdd8 <UART_SetConfig+0x6bc>
 800bd68:	e03a      	b.n	800bde0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd6a:	f7fc fddb 	bl	8008924 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd70:	e03c      	b.n	800bdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fc fdea 	bl	8008950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd80:	e034      	b.n	800bdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd82:	f107 0318 	add.w	r3, r7, #24
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fc ff36 	bl	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd90:	e02c      	b.n	800bdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd92:	4b09      	ldr	r3, [pc, #36]	@ (800bdb8 <UART_SetConfig+0x69c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0320 	and.w	r3, r3, #32
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d016      	beq.n	800bdcc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd9e:	4b06      	ldr	r3, [pc, #24]	@ (800bdb8 <UART_SetConfig+0x69c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	08db      	lsrs	r3, r3, #3
 800bda4:	f003 0303 	and.w	r3, r3, #3
 800bda8:	4a07      	ldr	r2, [pc, #28]	@ (800bdc8 <UART_SetConfig+0x6ac>)
 800bdaa:	fa22 f303 	lsr.w	r3, r2, r3
 800bdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdb0:	e01c      	b.n	800bdec <UART_SetConfig+0x6d0>
 800bdb2:	bf00      	nop
 800bdb4:	40011400 	.word	0x40011400
 800bdb8:	58024400 	.word	0x58024400
 800bdbc:	40007800 	.word	0x40007800
 800bdc0:	40007c00 	.word	0x40007c00
 800bdc4:	58000c00 	.word	0x58000c00
 800bdc8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bdcc:	4b9d      	ldr	r3, [pc, #628]	@ (800c044 <UART_SetConfig+0x928>)
 800bdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd0:	e00c      	b.n	800bdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdd2:	4b9d      	ldr	r3, [pc, #628]	@ (800c048 <UART_SetConfig+0x92c>)
 800bdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd6:	e009      	b.n	800bdec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdde:	e005      	b.n	800bdec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bdea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bdec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f000 81de 	beq.w	800c1b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf8:	4a94      	ldr	r2, [pc, #592]	@ (800c04c <UART_SetConfig+0x930>)
 800bdfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdfe:	461a      	mov	r2, r3
 800be00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be02:	fbb3 f3f2 	udiv	r3, r3, r2
 800be06:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	685a      	ldr	r2, [r3, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	4413      	add	r3, r2
 800be12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be14:	429a      	cmp	r2, r3
 800be16:	d305      	bcc.n	800be24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be20:	429a      	cmp	r2, r3
 800be22:	d903      	bls.n	800be2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800be2a:	e1c1      	b.n	800c1b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2e:	2200      	movs	r2, #0
 800be30:	60bb      	str	r3, [r7, #8]
 800be32:	60fa      	str	r2, [r7, #12]
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be38:	4a84      	ldr	r2, [pc, #528]	@ (800c04c <UART_SetConfig+0x930>)
 800be3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be3e:	b29b      	uxth	r3, r3
 800be40:	2200      	movs	r2, #0
 800be42:	603b      	str	r3, [r7, #0]
 800be44:	607a      	str	r2, [r7, #4]
 800be46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be4e:	f7f4 fd81 	bl	8000954 <__aeabi_uldivmod>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	4610      	mov	r0, r2
 800be58:	4619      	mov	r1, r3
 800be5a:	f04f 0200 	mov.w	r2, #0
 800be5e:	f04f 0300 	mov.w	r3, #0
 800be62:	020b      	lsls	r3, r1, #8
 800be64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be68:	0202      	lsls	r2, r0, #8
 800be6a:	6979      	ldr	r1, [r7, #20]
 800be6c:	6849      	ldr	r1, [r1, #4]
 800be6e:	0849      	lsrs	r1, r1, #1
 800be70:	2000      	movs	r0, #0
 800be72:	460c      	mov	r4, r1
 800be74:	4605      	mov	r5, r0
 800be76:	eb12 0804 	adds.w	r8, r2, r4
 800be7a:	eb43 0905 	adc.w	r9, r3, r5
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	469a      	mov	sl, r3
 800be86:	4693      	mov	fp, r2
 800be88:	4652      	mov	r2, sl
 800be8a:	465b      	mov	r3, fp
 800be8c:	4640      	mov	r0, r8
 800be8e:	4649      	mov	r1, r9
 800be90:	f7f4 fd60 	bl	8000954 <__aeabi_uldivmod>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	4613      	mov	r3, r2
 800be9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bea2:	d308      	bcc.n	800beb6 <UART_SetConfig+0x79a>
 800bea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800beaa:	d204      	bcs.n	800beb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800beb2:	60da      	str	r2, [r3, #12]
 800beb4:	e17c      	b.n	800c1b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bebc:	e178      	b.n	800c1b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bec6:	f040 80c5 	bne.w	800c054 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800beca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bece:	2b20      	cmp	r3, #32
 800bed0:	dc48      	bgt.n	800bf64 <UART_SetConfig+0x848>
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	db7b      	blt.n	800bfce <UART_SetConfig+0x8b2>
 800bed6:	2b20      	cmp	r3, #32
 800bed8:	d879      	bhi.n	800bfce <UART_SetConfig+0x8b2>
 800beda:	a201      	add	r2, pc, #4	@ (adr r2, 800bee0 <UART_SetConfig+0x7c4>)
 800bedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee0:	0800bf6b 	.word	0x0800bf6b
 800bee4:	0800bf73 	.word	0x0800bf73
 800bee8:	0800bfcf 	.word	0x0800bfcf
 800beec:	0800bfcf 	.word	0x0800bfcf
 800bef0:	0800bf7b 	.word	0x0800bf7b
 800bef4:	0800bfcf 	.word	0x0800bfcf
 800bef8:	0800bfcf 	.word	0x0800bfcf
 800befc:	0800bfcf 	.word	0x0800bfcf
 800bf00:	0800bf8b 	.word	0x0800bf8b
 800bf04:	0800bfcf 	.word	0x0800bfcf
 800bf08:	0800bfcf 	.word	0x0800bfcf
 800bf0c:	0800bfcf 	.word	0x0800bfcf
 800bf10:	0800bfcf 	.word	0x0800bfcf
 800bf14:	0800bfcf 	.word	0x0800bfcf
 800bf18:	0800bfcf 	.word	0x0800bfcf
 800bf1c:	0800bfcf 	.word	0x0800bfcf
 800bf20:	0800bf9b 	.word	0x0800bf9b
 800bf24:	0800bfcf 	.word	0x0800bfcf
 800bf28:	0800bfcf 	.word	0x0800bfcf
 800bf2c:	0800bfcf 	.word	0x0800bfcf
 800bf30:	0800bfcf 	.word	0x0800bfcf
 800bf34:	0800bfcf 	.word	0x0800bfcf
 800bf38:	0800bfcf 	.word	0x0800bfcf
 800bf3c:	0800bfcf 	.word	0x0800bfcf
 800bf40:	0800bfcf 	.word	0x0800bfcf
 800bf44:	0800bfcf 	.word	0x0800bfcf
 800bf48:	0800bfcf 	.word	0x0800bfcf
 800bf4c:	0800bfcf 	.word	0x0800bfcf
 800bf50:	0800bfcf 	.word	0x0800bfcf
 800bf54:	0800bfcf 	.word	0x0800bfcf
 800bf58:	0800bfcf 	.word	0x0800bfcf
 800bf5c:	0800bfcf 	.word	0x0800bfcf
 800bf60:	0800bfc1 	.word	0x0800bfc1
 800bf64:	2b40      	cmp	r3, #64	@ 0x40
 800bf66:	d02e      	beq.n	800bfc6 <UART_SetConfig+0x8aa>
 800bf68:	e031      	b.n	800bfce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf6a:	f7fb faa5 	bl	80074b8 <HAL_RCC_GetPCLK1Freq>
 800bf6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf70:	e033      	b.n	800bfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf72:	f7fb fab7 	bl	80074e4 <HAL_RCC_GetPCLK2Freq>
 800bf76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf78:	e02f      	b.n	800bfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fc fce6 	bl	8008950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf88:	e027      	b.n	800bfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf8a:	f107 0318 	add.w	r3, r7, #24
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fc fe32 	bl	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf98:	e01f      	b.n	800bfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf9a:	4b2d      	ldr	r3, [pc, #180]	@ (800c050 <UART_SetConfig+0x934>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0320 	and.w	r3, r3, #32
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d009      	beq.n	800bfba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfa6:	4b2a      	ldr	r3, [pc, #168]	@ (800c050 <UART_SetConfig+0x934>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	08db      	lsrs	r3, r3, #3
 800bfac:	f003 0303 	and.w	r3, r3, #3
 800bfb0:	4a24      	ldr	r2, [pc, #144]	@ (800c044 <UART_SetConfig+0x928>)
 800bfb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfb8:	e00f      	b.n	800bfda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bfba:	4b22      	ldr	r3, [pc, #136]	@ (800c044 <UART_SetConfig+0x928>)
 800bfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfbe:	e00c      	b.n	800bfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bfc0:	4b21      	ldr	r3, [pc, #132]	@ (800c048 <UART_SetConfig+0x92c>)
 800bfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfc4:	e009      	b.n	800bfda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfcc:	e005      	b.n	800bfda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bfd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80e7 	beq.w	800c1b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe6:	4a19      	ldr	r2, [pc, #100]	@ (800c04c <UART_SetConfig+0x930>)
 800bfe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfec:	461a      	mov	r2, r3
 800bfee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bff0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bff4:	005a      	lsls	r2, r3, #1
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	085b      	lsrs	r3, r3, #1
 800bffc:	441a      	add	r2, r3
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	fbb2 f3f3 	udiv	r3, r2, r3
 800c006:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00a:	2b0f      	cmp	r3, #15
 800c00c:	d916      	bls.n	800c03c <UART_SetConfig+0x920>
 800c00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c014:	d212      	bcs.n	800c03c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c018:	b29b      	uxth	r3, r3
 800c01a:	f023 030f 	bic.w	r3, r3, #15
 800c01e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c022:	085b      	lsrs	r3, r3, #1
 800c024:	b29b      	uxth	r3, r3
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c02e:	4313      	orrs	r3, r2
 800c030:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c038:	60da      	str	r2, [r3, #12]
 800c03a:	e0b9      	b.n	800c1b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c042:	e0b5      	b.n	800c1b0 <UART_SetConfig+0xa94>
 800c044:	03d09000 	.word	0x03d09000
 800c048:	003d0900 	.word	0x003d0900
 800c04c:	0801b574 	.word	0x0801b574
 800c050:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c054:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c058:	2b20      	cmp	r3, #32
 800c05a:	dc49      	bgt.n	800c0f0 <UART_SetConfig+0x9d4>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	db7c      	blt.n	800c15a <UART_SetConfig+0xa3e>
 800c060:	2b20      	cmp	r3, #32
 800c062:	d87a      	bhi.n	800c15a <UART_SetConfig+0xa3e>
 800c064:	a201      	add	r2, pc, #4	@ (adr r2, 800c06c <UART_SetConfig+0x950>)
 800c066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06a:	bf00      	nop
 800c06c:	0800c0f7 	.word	0x0800c0f7
 800c070:	0800c0ff 	.word	0x0800c0ff
 800c074:	0800c15b 	.word	0x0800c15b
 800c078:	0800c15b 	.word	0x0800c15b
 800c07c:	0800c107 	.word	0x0800c107
 800c080:	0800c15b 	.word	0x0800c15b
 800c084:	0800c15b 	.word	0x0800c15b
 800c088:	0800c15b 	.word	0x0800c15b
 800c08c:	0800c117 	.word	0x0800c117
 800c090:	0800c15b 	.word	0x0800c15b
 800c094:	0800c15b 	.word	0x0800c15b
 800c098:	0800c15b 	.word	0x0800c15b
 800c09c:	0800c15b 	.word	0x0800c15b
 800c0a0:	0800c15b 	.word	0x0800c15b
 800c0a4:	0800c15b 	.word	0x0800c15b
 800c0a8:	0800c15b 	.word	0x0800c15b
 800c0ac:	0800c127 	.word	0x0800c127
 800c0b0:	0800c15b 	.word	0x0800c15b
 800c0b4:	0800c15b 	.word	0x0800c15b
 800c0b8:	0800c15b 	.word	0x0800c15b
 800c0bc:	0800c15b 	.word	0x0800c15b
 800c0c0:	0800c15b 	.word	0x0800c15b
 800c0c4:	0800c15b 	.word	0x0800c15b
 800c0c8:	0800c15b 	.word	0x0800c15b
 800c0cc:	0800c15b 	.word	0x0800c15b
 800c0d0:	0800c15b 	.word	0x0800c15b
 800c0d4:	0800c15b 	.word	0x0800c15b
 800c0d8:	0800c15b 	.word	0x0800c15b
 800c0dc:	0800c15b 	.word	0x0800c15b
 800c0e0:	0800c15b 	.word	0x0800c15b
 800c0e4:	0800c15b 	.word	0x0800c15b
 800c0e8:	0800c15b 	.word	0x0800c15b
 800c0ec:	0800c14d 	.word	0x0800c14d
 800c0f0:	2b40      	cmp	r3, #64	@ 0x40
 800c0f2:	d02e      	beq.n	800c152 <UART_SetConfig+0xa36>
 800c0f4:	e031      	b.n	800c15a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0f6:	f7fb f9df 	bl	80074b8 <HAL_RCC_GetPCLK1Freq>
 800c0fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c0fc:	e033      	b.n	800c166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0fe:	f7fb f9f1 	bl	80074e4 <HAL_RCC_GetPCLK2Freq>
 800c102:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c104:	e02f      	b.n	800c166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fc fc20 	bl	8008950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c114:	e027      	b.n	800c166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c116:	f107 0318 	add.w	r3, r7, #24
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fc fd6c 	bl	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c124:	e01f      	b.n	800c166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c126:	4b2d      	ldr	r3, [pc, #180]	@ (800c1dc <UART_SetConfig+0xac0>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 0320 	and.w	r3, r3, #32
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d009      	beq.n	800c146 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c132:	4b2a      	ldr	r3, [pc, #168]	@ (800c1dc <UART_SetConfig+0xac0>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	08db      	lsrs	r3, r3, #3
 800c138:	f003 0303 	and.w	r3, r3, #3
 800c13c:	4a28      	ldr	r2, [pc, #160]	@ (800c1e0 <UART_SetConfig+0xac4>)
 800c13e:	fa22 f303 	lsr.w	r3, r2, r3
 800c142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c144:	e00f      	b.n	800c166 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c146:	4b26      	ldr	r3, [pc, #152]	@ (800c1e0 <UART_SetConfig+0xac4>)
 800c148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c14a:	e00c      	b.n	800c166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c14c:	4b25      	ldr	r3, [pc, #148]	@ (800c1e4 <UART_SetConfig+0xac8>)
 800c14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c150:	e009      	b.n	800c166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c158:	e005      	b.n	800c166 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c15a:	2300      	movs	r3, #0
 800c15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c164:	bf00      	nop
    }

    if (pclk != 0U)
 800c166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d021      	beq.n	800c1b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c170:	4a1d      	ldr	r2, [pc, #116]	@ (800c1e8 <UART_SetConfig+0xacc>)
 800c172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c176:	461a      	mov	r2, r3
 800c178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c17a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	085b      	lsrs	r3, r3, #1
 800c184:	441a      	add	r2, r3
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c18e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	2b0f      	cmp	r3, #15
 800c194:	d909      	bls.n	800c1aa <UART_SetConfig+0xa8e>
 800c196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c19c:	d205      	bcs.n	800c1aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	60da      	str	r2, [r3, #12]
 800c1a8:	e002      	b.n	800c1b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c1cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3748      	adds	r7, #72	@ 0x48
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1da:	bf00      	nop
 800c1dc:	58024400 	.word	0x58024400
 800c1e0:	03d09000 	.word	0x03d09000
 800c1e4:	003d0900 	.word	0x003d0900
 800c1e8:	0801b574 	.word	0x0801b574

0800c1ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f8:	f003 0308 	and.w	r3, r3, #8
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00a      	beq.n	800c216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c21a:	f003 0301 	and.w	r3, r3, #1
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00a      	beq.n	800c238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	430a      	orrs	r2, r1
 800c236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23c:	f003 0302 	and.w	r3, r3, #2
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00a      	beq.n	800c25a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25e:	f003 0304 	and.w	r3, r3, #4
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00a      	beq.n	800c27c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	430a      	orrs	r2, r1
 800c27a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c280:	f003 0310 	and.w	r3, r3, #16
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00a      	beq.n	800c29e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	430a      	orrs	r2, r1
 800c29c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a2:	f003 0320 	and.w	r3, r3, #32
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00a      	beq.n	800c2c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	430a      	orrs	r2, r1
 800c2be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d01a      	beq.n	800c302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2ea:	d10a      	bne.n	800c302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00a      	beq.n	800c324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	430a      	orrs	r2, r1
 800c322:	605a      	str	r2, [r3, #4]
  }
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b098      	sub	sp, #96	@ 0x60
 800c334:	af02      	add	r7, sp, #8
 800c336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c340:	f7f6 fa5a 	bl	80027f8 <HAL_GetTick>
 800c344:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0308 	and.w	r3, r3, #8
 800c350:	2b08      	cmp	r3, #8
 800c352:	d12f      	bne.n	800c3b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c354:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c35c:	2200      	movs	r2, #0
 800c35e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f88e 	bl	800c484 <UART_WaitOnFlagUntilTimeout>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d022      	beq.n	800c3b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c376:	e853 3f00 	ldrex	r3, [r3]
 800c37a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c37e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c382:	653b      	str	r3, [r7, #80]	@ 0x50
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
 800c38a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c38c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c38e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c390:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c392:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c394:	e841 2300 	strex	r3, r2, [r1]
 800c398:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e6      	bne.n	800c36e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2220      	movs	r2, #32
 800c3a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e063      	b.n	800c47c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	d149      	bne.n	800c456 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f857 	bl	800c484 <UART_WaitOnFlagUntilTimeout>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d03c      	beq.n	800c456 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e4:	e853 3f00 	ldrex	r3, [r3]
 800c3e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e6      	bne.n	800c3dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3308      	adds	r3, #8
 800c414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	e853 3f00 	ldrex	r3, [r3]
 800c41c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f023 0301 	bic.w	r3, r3, #1
 800c424:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c42e:	61fa      	str	r2, [r7, #28]
 800c430:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c432:	69b9      	ldr	r1, [r7, #24]
 800c434:	69fa      	ldr	r2, [r7, #28]
 800c436:	e841 2300 	strex	r3, r2, [r1]
 800c43a:	617b      	str	r3, [r7, #20]
   return(result);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e5      	bne.n	800c40e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2220      	movs	r2, #32
 800c446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c452:	2303      	movs	r3, #3
 800c454:	e012      	b.n	800c47c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2220      	movs	r2, #32
 800c45a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2220      	movs	r2, #32
 800c462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3758      	adds	r7, #88	@ 0x58
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	4613      	mov	r3, r2
 800c492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c494:	e04f      	b.n	800c536 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d04b      	beq.n	800c536 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c49e:	f7f6 f9ab 	bl	80027f8 <HAL_GetTick>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	69ba      	ldr	r2, [r7, #24]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d302      	bcc.n	800c4b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e04e      	b.n	800c556 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0304 	and.w	r3, r3, #4
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d037      	beq.n	800c536 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b80      	cmp	r3, #128	@ 0x80
 800c4ca:	d034      	beq.n	800c536 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b40      	cmp	r3, #64	@ 0x40
 800c4d0:	d031      	beq.n	800c536 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	f003 0308 	and.w	r3, r3, #8
 800c4dc:	2b08      	cmp	r3, #8
 800c4de:	d110      	bne.n	800c502 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 f921 	bl	800c730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e029      	b.n	800c556 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69db      	ldr	r3, [r3, #28]
 800c508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c50c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c510:	d111      	bne.n	800c536 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c51a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f000 f907 	bl	800c730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2220      	movs	r2, #32
 800c526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c532:	2303      	movs	r3, #3
 800c534:	e00f      	b.n	800c556 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69da      	ldr	r2, [r3, #28]
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	4013      	ands	r3, r2
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	429a      	cmp	r2, r3
 800c544:	bf0c      	ite	eq
 800c546:	2301      	moveq	r3, #1
 800c548:	2300      	movne	r3, #0
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	461a      	mov	r2, r3
 800c54e:	79fb      	ldrb	r3, [r7, #7]
 800c550:	429a      	cmp	r2, r3
 800c552:	d0a0      	beq.n	800c496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
	...

0800c560 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b096      	sub	sp, #88	@ 0x58
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	4613      	mov	r3, r2
 800c56c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	88fa      	ldrh	r2, [r7, #6]
 800c578:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2222      	movs	r2, #34	@ 0x22
 800c588:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c592:	2b00      	cmp	r3, #0
 800c594:	d02d      	beq.n	800c5f2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c59c:	4a40      	ldr	r2, [pc, #256]	@ (800c6a0 <UART_Start_Receive_DMA+0x140>)
 800c59e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5a6:	4a3f      	ldr	r2, [pc, #252]	@ (800c6a4 <UART_Start_Receive_DMA+0x144>)
 800c5a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5b0:	4a3d      	ldr	r2, [pc, #244]	@ (800c6a8 <UART_Start_Receive_DMA+0x148>)
 800c5b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3324      	adds	r3, #36	@ 0x24
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	88fb      	ldrh	r3, [r7, #6]
 800c5d4:	f7f7 f832 	bl	800363c <HAL_DMA_Start_IT>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d009      	beq.n	800c5f2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2210      	movs	r2, #16
 800c5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e051      	b.n	800c696 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d018      	beq.n	800c62c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c602:	e853 3f00 	ldrex	r3, [r3]
 800c606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c60e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	461a      	mov	r2, r3
 800c616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c61a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c61e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c620:	e841 2300 	strex	r3, r2, [r1]
 800c624:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1e6      	bne.n	800c5fa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3308      	adds	r3, #8
 800c632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c636:	e853 3f00 	ldrex	r3, [r3]
 800c63a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	f043 0301 	orr.w	r3, r3, #1
 800c642:	653b      	str	r3, [r7, #80]	@ 0x50
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	3308      	adds	r3, #8
 800c64a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c64c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c64e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c650:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c654:	e841 2300 	strex	r3, r2, [r1]
 800c658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1e5      	bne.n	800c62c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3308      	adds	r3, #8
 800c666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	e853 3f00 	ldrex	r3, [r3]
 800c66e:	613b      	str	r3, [r7, #16]
   return(result);
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3308      	adds	r3, #8
 800c67e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c680:	623a      	str	r2, [r7, #32]
 800c682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c684:	69f9      	ldr	r1, [r7, #28]
 800c686:	6a3a      	ldr	r2, [r7, #32]
 800c688:	e841 2300 	strex	r3, r2, [r1]
 800c68c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1e5      	bne.n	800c660 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3758      	adds	r7, #88	@ 0x58
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	0800c8af 	.word	0x0800c8af
 800c6a4:	0800c9d7 	.word	0x0800c9d7
 800c6a8:	0800ca15 	.word	0x0800ca15

0800c6ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b08f      	sub	sp, #60	@ 0x3c
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6da:	e841 2300 	strex	r3, r2, [r1]
 800c6de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1e6      	bne.n	800c6b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	e853 3f00 	ldrex	r3, [r3]
 800c6f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c6fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3308      	adds	r3, #8
 800c704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c706:	61ba      	str	r2, [r7, #24]
 800c708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70a:	6979      	ldr	r1, [r7, #20]
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	e841 2300 	strex	r3, r2, [r1]
 800c712:	613b      	str	r3, [r7, #16]
   return(result);
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1e5      	bne.n	800c6e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2220      	movs	r2, #32
 800c71e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c722:	bf00      	nop
 800c724:	373c      	adds	r7, #60	@ 0x3c
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
	...

0800c730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c730:	b480      	push	{r7}
 800c732:	b095      	sub	sp, #84	@ 0x54
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c740:	e853 3f00 	ldrex	r3, [r3]
 800c744:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c74c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c756:	643b      	str	r3, [r7, #64]	@ 0x40
 800c758:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c75c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c75e:	e841 2300 	strex	r3, r2, [r1]
 800c762:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1e6      	bne.n	800c738 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3308      	adds	r3, #8
 800c770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	e853 3f00 	ldrex	r3, [r3]
 800c778:	61fb      	str	r3, [r7, #28]
   return(result);
 800c77a:	69fa      	ldr	r2, [r7, #28]
 800c77c:	4b1e      	ldr	r3, [pc, #120]	@ (800c7f8 <UART_EndRxTransfer+0xc8>)
 800c77e:	4013      	ands	r3, r2
 800c780:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3308      	adds	r3, #8
 800c788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c78a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c78c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c792:	e841 2300 	strex	r3, r2, [r1]
 800c796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1e5      	bne.n	800c76a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d118      	bne.n	800c7d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	e853 3f00 	ldrex	r3, [r3]
 800c7b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f023 0310 	bic.w	r3, r3, #16
 800c7ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7c4:	61bb      	str	r3, [r7, #24]
 800c7c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c8:	6979      	ldr	r1, [r7, #20]
 800c7ca:	69ba      	ldr	r2, [r7, #24]
 800c7cc:	e841 2300 	strex	r3, r2, [r1]
 800c7d0:	613b      	str	r3, [r7, #16]
   return(result);
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1e6      	bne.n	800c7a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c7ec:	bf00      	nop
 800c7ee:	3754      	adds	r7, #84	@ 0x54
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	effffffe 	.word	0xeffffffe

0800c7fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b090      	sub	sp, #64	@ 0x40
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c808:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c812:	d037      	beq.n	800c884 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c816:	2200      	movs	r2, #0
 800c818:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c81c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3308      	adds	r3, #8
 800c822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	623b      	str	r3, [r7, #32]
   return(result);
 800c82c:	6a3b      	ldr	r3, [r7, #32]
 800c82e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c832:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3308      	adds	r3, #8
 800c83a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c83c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e5      	bne.n	800c81c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	e853 3f00 	ldrex	r3, [r3]
 800c85c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c864:	637b      	str	r3, [r7, #52]	@ 0x34
 800c866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	461a      	mov	r2, r3
 800c86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86e:	61fb      	str	r3, [r7, #28]
 800c870:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c872:	69b9      	ldr	r1, [r7, #24]
 800c874:	69fa      	ldr	r2, [r7, #28]
 800c876:	e841 2300 	strex	r3, r2, [r1]
 800c87a:	617b      	str	r3, [r7, #20]
   return(result);
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1e6      	bne.n	800c850 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c882:	e002      	b.n	800c88a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c884:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c886:	f7f5 fc99 	bl	80021bc <HAL_UART_TxCpltCallback>
}
 800c88a:	bf00      	nop
 800c88c:	3740      	adds	r7, #64	@ 0x40
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c89e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f7fe ff11 	bl	800b6c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8a6:	bf00      	nop
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b09c      	sub	sp, #112	@ 0x70
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	69db      	ldr	r3, [r3, #28]
 800c8c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8c4:	d071      	beq.n	800c9aa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c8c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8d6:	e853 3f00 	ldrex	r3, [r3]
 800c8da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c8dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c8e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c8ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c8f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8f4:	e841 2300 	strex	r3, r2, [r1]
 800c8f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c8fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1e6      	bne.n	800c8ce <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3308      	adds	r3, #8
 800c906:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c912:	f023 0301 	bic.w	r3, r3, #1
 800c916:	667b      	str	r3, [r7, #100]	@ 0x64
 800c918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	3308      	adds	r3, #8
 800c91e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c920:	647a      	str	r2, [r7, #68]	@ 0x44
 800c922:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c928:	e841 2300 	strex	r3, r2, [r1]
 800c92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e5      	bne.n	800c900 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3308      	adds	r3, #8
 800c93a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	623b      	str	r3, [r7, #32]
   return(result);
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c94a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c94c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3308      	adds	r3, #8
 800c952:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c954:	633a      	str	r2, [r7, #48]	@ 0x30
 800c956:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e5      	bne.n	800c934 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c96a:	2220      	movs	r2, #32
 800c96c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c974:	2b01      	cmp	r3, #1
 800c976:	d118      	bne.n	800c9aa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	60fb      	str	r3, [r7, #12]
   return(result);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f023 0310 	bic.w	r3, r3, #16
 800c98c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c98e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c996:	61fb      	str	r3, [r7, #28]
 800c998:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99a:	69b9      	ldr	r1, [r7, #24]
 800c99c:	69fa      	ldr	r2, [r7, #28]
 800c99e:	e841 2300 	strex	r3, r2, [r1]
 800c9a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1e6      	bne.n	800c978 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d107      	bne.n	800c9c8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9c2:	f7fe fe9f 	bl	800b704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9c6:	e002      	b.n	800c9ce <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c9c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9ca:	f7fe fe87 	bl	800b6dc <HAL_UART_RxCpltCallback>
}
 800c9ce:	bf00      	nop
 800c9d0:	3770      	adds	r7, #112	@ 0x70
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d109      	bne.n	800ca06 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9f8:	085b      	lsrs	r3, r3, #1
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7fe fe80 	bl	800b704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca04:	e002      	b.n	800ca0c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f7fe fe72 	bl	800b6f0 <HAL_UART_RxHalfCpltCallback>
}
 800ca0c:	bf00      	nop
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca20:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca28:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca30:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca3c:	2b80      	cmp	r3, #128	@ 0x80
 800ca3e:	d109      	bne.n	800ca54 <UART_DMAError+0x40>
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	2b21      	cmp	r3, #33	@ 0x21
 800ca44:	d106      	bne.n	800ca54 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ca4e:	6978      	ldr	r0, [r7, #20]
 800ca50:	f7ff fe2c 	bl	800c6ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca5e:	2b40      	cmp	r3, #64	@ 0x40
 800ca60:	d109      	bne.n	800ca76 <UART_DMAError+0x62>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2b22      	cmp	r3, #34	@ 0x22
 800ca66:	d106      	bne.n	800ca76 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ca70:	6978      	ldr	r0, [r7, #20]
 800ca72:	f7ff fe5d 	bl	800c730 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca7c:	f043 0210 	orr.w	r2, r3, #16
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca86:	6978      	ldr	r0, [r7, #20]
 800ca88:	f7f5 fb80 	bl	800218c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca8c:	bf00      	nop
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f7f5 fb6a 	bl	800218c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cab8:	bf00      	nop
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cadc:	61fb      	str	r3, [r7, #28]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	61bb      	str	r3, [r7, #24]
 800cae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6979      	ldr	r1, [r7, #20]
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	613b      	str	r3, [r7, #16]
   return(result);
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e6      	bne.n	800cac8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2220      	movs	r2, #32
 800cafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7f5 fb57 	bl	80021bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb0e:	bf00      	nop
 800cb10:	3720      	adds	r7, #32
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb1e:	bf00      	nop
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb32:	bf00      	nop
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b083      	sub	sp, #12
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb46:	bf00      	nop
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d101      	bne.n	800cb68 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb64:	2302      	movs	r3, #2
 800cb66:	e027      	b.n	800cbb8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2224      	movs	r2, #36	@ 0x24
 800cb74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 0201 	bic.w	r2, r2, #1
 800cb8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cb96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2220      	movs	r2, #32
 800cbaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d101      	bne.n	800cbdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e02d      	b.n	800cc38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2224      	movs	r2, #36	@ 0x24
 800cbe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f022 0201 	bic.w	r2, r2, #1
 800cc02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	430a      	orrs	r2, r1
 800cc16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f84f 	bl	800ccbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d101      	bne.n	800cc58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc54:	2302      	movs	r3, #2
 800cc56:	e02d      	b.n	800ccb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2224      	movs	r2, #36	@ 0x24
 800cc64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f022 0201 	bic.w	r2, r2, #1
 800cc7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	430a      	orrs	r2, r1
 800cc92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f811 	bl	800ccbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2220      	movs	r2, #32
 800cca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d108      	bne.n	800ccde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ccdc:	e031      	b.n	800cd42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccde:	2310      	movs	r3, #16
 800cce0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cce2:	2310      	movs	r3, #16
 800cce4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	0e5b      	lsrs	r3, r3, #25
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	f003 0307 	and.w	r3, r3, #7
 800ccf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	0f5b      	lsrs	r3, r3, #29
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	f003 0307 	and.w	r3, r3, #7
 800cd04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd06:	7bbb      	ldrb	r3, [r7, #14]
 800cd08:	7b3a      	ldrb	r2, [r7, #12]
 800cd0a:	4911      	ldr	r1, [pc, #68]	@ (800cd50 <UARTEx_SetNbDataToProcess+0x94>)
 800cd0c:	5c8a      	ldrb	r2, [r1, r2]
 800cd0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd12:	7b3a      	ldrb	r2, [r7, #12]
 800cd14:	490f      	ldr	r1, [pc, #60]	@ (800cd54 <UARTEx_SetNbDataToProcess+0x98>)
 800cd16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd18:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
 800cd26:	7b7a      	ldrb	r2, [r7, #13]
 800cd28:	4909      	ldr	r1, [pc, #36]	@ (800cd50 <UARTEx_SetNbDataToProcess+0x94>)
 800cd2a:	5c8a      	ldrb	r2, [r1, r2]
 800cd2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd30:	7b7a      	ldrb	r2, [r7, #13]
 800cd32:	4908      	ldr	r1, [pc, #32]	@ (800cd54 <UARTEx_SetNbDataToProcess+0x98>)
 800cd34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd36:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cd42:	bf00      	nop
 800cd44:	3714      	adds	r7, #20
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	0801b58c 	.word	0x0801b58c
 800cd54:	0801b594 	.word	0x0801b594

0800cd58 <acc_rss_hal_register>:
 800cd58:	b108      	cbz	r0, 800cd5e <acc_rss_hal_register+0x6>
 800cd5a:	f002 ba55 	b.w	800f208 <acc_rss_integration_register_a121>
 800cd5e:	4770      	bx	lr

0800cd60 <acc_rss_get_buffer_size>:
 800cd60:	b510      	push	{r4, lr}
 800cd62:	460c      	mov	r4, r1
 800cd64:	f000 fa8a 	bl	800d27c <acc_config_get_settings>
 800cd68:	1e02      	subs	r2, r0, #0
 800cd6a:	bf18      	it	ne
 800cd6c:	2201      	movne	r2, #1
 800cd6e:	2c00      	cmp	r4, #0
 800cd70:	bf18      	it	ne
 800cd72:	2200      	movne	r2, #0
 800cd74:	b13a      	cbz	r2, 800cd86 <acc_rss_get_buffer_size+0x26>
 800cd76:	4b07      	ldr	r3, [pc, #28]	@ (800cd94 <acc_rss_get_buffer_size+0x34>)
 800cd78:	2000      	movs	r0, #0
 800cd7a:	4a07      	ldr	r2, [pc, #28]	@ (800cd98 <acc_rss_get_buffer_size+0x38>)
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	4907      	ldr	r1, [pc, #28]	@ (800cd9c <acc_rss_get_buffer_size+0x3c>)
 800cd80:	4798      	blx	r3
 800cd82:	2000      	movs	r0, #0
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d0fb      	beq.n	800cd82 <acc_rss_get_buffer_size+0x22>
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd90:	f002 bb24 	b.w	800f3dc <acc_pipeline_get_buffer_size>
 800cd94:	24003210 	.word	0x24003210
 800cd98:	0801b59c 	.word	0x0801b59c
 800cd9c:	0801b5b8 	.word	0x0801b5b8

0800cda0 <acc_rss_set_log_level>:
 800cda0:	f002 baf6 	b.w	800f390 <acc_rss_integration_set_log_level>

0800cda4 <acc_config_subsweep_validate.part.0>:
 800cda4:	b508      	push	{r3, lr}
 800cda6:	4b04      	ldr	r3, [pc, #16]	@ (800cdb8 <acc_config_subsweep_validate.part.0+0x14>)
 800cda8:	2000      	movs	r0, #0
 800cdaa:	4a04      	ldr	r2, [pc, #16]	@ (800cdbc <acc_config_subsweep_validate.part.0+0x18>)
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	4904      	ldr	r1, [pc, #16]	@ (800cdc0 <acc_config_subsweep_validate.part.0+0x1c>)
 800cdb0:	4798      	blx	r3
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	bd08      	pop	{r3, pc}
 800cdb6:	bf00      	nop
 800cdb8:	24003210 	.word	0x24003210
 800cdbc:	0801b5c4 	.word	0x0801b5c4
 800cdc0:	08021270 	.word	0x08021270

0800cdc4 <acc_config_create>:
 800cdc4:	b510      	push	{r4, lr}
 800cdc6:	2356      	movs	r3, #86	@ 0x56
 800cdc8:	4a07      	ldr	r2, [pc, #28]	@ (800cde8 <acc_config_create+0x24>)
 800cdca:	215c      	movs	r1, #92	@ 0x5c
 800cdcc:	2001      	movs	r0, #1
 800cdce:	f002 faa9 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	b130      	cbz	r0, 800cde4 <acc_config_create+0x20>
 800cdd6:	4b05      	ldr	r3, [pc, #20]	@ (800cdec <acc_config_create+0x28>)
 800cdd8:	2258      	movs	r2, #88	@ 0x58
 800cdda:	4905      	ldr	r1, [pc, #20]	@ (800cdf0 <acc_config_create+0x2c>)
 800cddc:	f840 3b04 	str.w	r3, [r0], #4
 800cde0:	f00b fe39 	bl	8018a56 <memcpy>
 800cde4:	4620      	mov	r0, r4
 800cde6:	bd10      	pop	{r4, pc}
 800cde8:	08021270 	.word	0x08021270
 800cdec:	1337b00f 	.word	0x1337b00f
 800cdf0:	0801b7e4 	.word	0x0801b7e4

0800cdf4 <acc_config_destroy>:
 800cdf4:	b118      	cbz	r0, 800cdfe <acc_config_destroy+0xa>
 800cdf6:	4a07      	ldr	r2, [pc, #28]	@ (800ce14 <acc_config_destroy+0x20>)
 800cdf8:	6801      	ldr	r1, [r0, #0]
 800cdfa:	4291      	cmp	r1, r2
 800cdfc:	d005      	beq.n	800ce0a <acc_config_destroy+0x16>
 800cdfe:	4b06      	ldr	r3, [pc, #24]	@ (800ce18 <acc_config_destroy+0x24>)
 800ce00:	2000      	movs	r0, #0
 800ce02:	4a06      	ldr	r2, [pc, #24]	@ (800ce1c <acc_config_destroy+0x28>)
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	4906      	ldr	r1, [pc, #24]	@ (800ce20 <acc_config_destroy+0x2c>)
 800ce08:	4718      	bx	r3
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	6002      	str	r2, [r0, #0]
 800ce0e:	f002 baa5 	b.w	800f35c <acc_rss_integration_mem_free>
 800ce12:	bf00      	nop
 800ce14:	1337b00f 	.word	0x1337b00f
 800ce18:	24003210 	.word	0x24003210
 800ce1c:	0801b5dc 	.word	0x0801b5dc
 800ce20:	08021270 	.word	0x08021270

0800ce24 <acc_config_num_subsweeps_set>:
 800ce24:	b118      	cbz	r0, 800ce2e <acc_config_num_subsweeps_set+0xa>
 800ce26:	4b06      	ldr	r3, [pc, #24]	@ (800ce40 <acc_config_num_subsweeps_set+0x1c>)
 800ce28:	6802      	ldr	r2, [r0, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d005      	beq.n	800ce3a <acc_config_num_subsweeps_set+0x16>
 800ce2e:	4b05      	ldr	r3, [pc, #20]	@ (800ce44 <acc_config_num_subsweeps_set+0x20>)
 800ce30:	2000      	movs	r0, #0
 800ce32:	4a05      	ldr	r2, [pc, #20]	@ (800ce48 <acc_config_num_subsweeps_set+0x24>)
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	4905      	ldr	r1, [pc, #20]	@ (800ce4c <acc_config_num_subsweeps_set+0x28>)
 800ce38:	4718      	bx	r3
 800ce3a:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 800ce3e:	4770      	bx	lr
 800ce40:	1337b00f 	.word	0x1337b00f
 800ce44:	24003210 	.word	0x24003210
 800ce48:	0801b5dc 	.word	0x0801b5dc
 800ce4c:	08021270 	.word	0x08021270

0800ce50 <acc_config_num_subsweeps_get>:
 800ce50:	b508      	push	{r3, lr}
 800ce52:	b118      	cbz	r0, 800ce5c <acc_config_num_subsweeps_get+0xc>
 800ce54:	4b07      	ldr	r3, [pc, #28]	@ (800ce74 <acc_config_num_subsweeps_get+0x24>)
 800ce56:	6802      	ldr	r2, [r0, #0]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d007      	beq.n	800ce6c <acc_config_num_subsweeps_get+0x1c>
 800ce5c:	4b06      	ldr	r3, [pc, #24]	@ (800ce78 <acc_config_num_subsweeps_get+0x28>)
 800ce5e:	2000      	movs	r0, #0
 800ce60:	4a06      	ldr	r2, [pc, #24]	@ (800ce7c <acc_config_num_subsweeps_get+0x2c>)
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	4906      	ldr	r1, [pc, #24]	@ (800ce80 <acc_config_num_subsweeps_get+0x30>)
 800ce66:	4798      	blx	r3
 800ce68:	2001      	movs	r0, #1
 800ce6a:	bd08      	pop	{r3, pc}
 800ce6c:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
 800ce70:	bd08      	pop	{r3, pc}
 800ce72:	bf00      	nop
 800ce74:	1337b00f 	.word	0x1337b00f
 800ce78:	24003210 	.word	0x24003210
 800ce7c:	0801b5dc 	.word	0x0801b5dc
 800ce80:	08021270 	.word	0x08021270

0800ce84 <acc_config_subsweep_start_point_set>:
 800ce84:	b570      	push	{r4, r5, r6, lr}
 800ce86:	b120      	cbz	r0, 800ce92 <acc_config_subsweep_start_point_set+0xe>
 800ce88:	4604      	mov	r4, r0
 800ce8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ceb8 <acc_config_subsweep_start_point_set+0x34>)
 800ce8c:	6800      	ldr	r0, [r0, #0]
 800ce8e:	4298      	cmp	r0, r3
 800ce90:	d007      	beq.n	800cea2 <acc_config_subsweep_start_point_set+0x1e>
 800ce92:	4b0a      	ldr	r3, [pc, #40]	@ (800cebc <acc_config_subsweep_start_point_set+0x38>)
 800ce94:	2000      	movs	r0, #0
 800ce96:	4a0a      	ldr	r2, [pc, #40]	@ (800cec0 <acc_config_subsweep_start_point_set+0x3c>)
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	490a      	ldr	r1, [pc, #40]	@ (800cec4 <acc_config_subsweep_start_point_set+0x40>)
 800ce9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cea0:	4718      	bx	r3
 800cea2:	2a03      	cmp	r2, #3
 800cea4:	460d      	mov	r5, r1
 800cea6:	4616      	mov	r6, r2
 800cea8:	d902      	bls.n	800ceb0 <acc_config_subsweep_start_point_set+0x2c>
 800ceaa:	f7ff ff7b 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800ceae:	b110      	cbz	r0, 800ceb6 <acc_config_subsweep_start_point_set+0x32>
 800ceb0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800ceb4:	6065      	str	r5, [r4, #4]
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	1337b00f 	.word	0x1337b00f
 800cebc:	24003210 	.word	0x24003210
 800cec0:	0801b5dc 	.word	0x0801b5dc
 800cec4:	08021270 	.word	0x08021270

0800cec8 <acc_config_subsweep_num_points_set>:
 800cec8:	b570      	push	{r4, r5, r6, lr}
 800ceca:	b120      	cbz	r0, 800ced6 <acc_config_subsweep_num_points_set+0xe>
 800cecc:	4604      	mov	r4, r0
 800cece:	4b0b      	ldr	r3, [pc, #44]	@ (800cefc <acc_config_subsweep_num_points_set+0x34>)
 800ced0:	6800      	ldr	r0, [r0, #0]
 800ced2:	4298      	cmp	r0, r3
 800ced4:	d007      	beq.n	800cee6 <acc_config_subsweep_num_points_set+0x1e>
 800ced6:	4b0a      	ldr	r3, [pc, #40]	@ (800cf00 <acc_config_subsweep_num_points_set+0x38>)
 800ced8:	2000      	movs	r0, #0
 800ceda:	4a0a      	ldr	r2, [pc, #40]	@ (800cf04 <acc_config_subsweep_num_points_set+0x3c>)
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	490a      	ldr	r1, [pc, #40]	@ (800cf08 <acc_config_subsweep_num_points_set+0x40>)
 800cee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cee4:	4718      	bx	r3
 800cee6:	2a03      	cmp	r2, #3
 800cee8:	460d      	mov	r5, r1
 800ceea:	4616      	mov	r6, r2
 800ceec:	d902      	bls.n	800cef4 <acc_config_subsweep_num_points_set+0x2c>
 800ceee:	f7ff ff59 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800cef2:	b110      	cbz	r0, 800cefa <acc_config_subsweep_num_points_set+0x32>
 800cef4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800cef8:	8125      	strh	r5, [r4, #8]
 800cefa:	bd70      	pop	{r4, r5, r6, pc}
 800cefc:	1337b00f 	.word	0x1337b00f
 800cf00:	24003210 	.word	0x24003210
 800cf04:	0801b5dc 	.word	0x0801b5dc
 800cf08:	08021270 	.word	0x08021270

0800cf0c <acc_config_subsweep_step_length_set>:
 800cf0c:	b570      	push	{r4, r5, r6, lr}
 800cf0e:	b120      	cbz	r0, 800cf1a <acc_config_subsweep_step_length_set+0xe>
 800cf10:	4604      	mov	r4, r0
 800cf12:	4b0b      	ldr	r3, [pc, #44]	@ (800cf40 <acc_config_subsweep_step_length_set+0x34>)
 800cf14:	6800      	ldr	r0, [r0, #0]
 800cf16:	4298      	cmp	r0, r3
 800cf18:	d007      	beq.n	800cf2a <acc_config_subsweep_step_length_set+0x1e>
 800cf1a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf44 <acc_config_subsweep_step_length_set+0x38>)
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	4a0a      	ldr	r2, [pc, #40]	@ (800cf48 <acc_config_subsweep_step_length_set+0x3c>)
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	490a      	ldr	r1, [pc, #40]	@ (800cf4c <acc_config_subsweep_step_length_set+0x40>)
 800cf24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf28:	4718      	bx	r3
 800cf2a:	2a03      	cmp	r2, #3
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	4616      	mov	r6, r2
 800cf30:	d902      	bls.n	800cf38 <acc_config_subsweep_step_length_set+0x2c>
 800cf32:	f7ff ff37 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800cf36:	b110      	cbz	r0, 800cf3e <acc_config_subsweep_step_length_set+0x32>
 800cf38:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800cf3c:	8165      	strh	r5, [r4, #10]
 800cf3e:	bd70      	pop	{r4, r5, r6, pc}
 800cf40:	1337b00f 	.word	0x1337b00f
 800cf44:	24003210 	.word	0x24003210
 800cf48:	0801b5dc 	.word	0x0801b5dc
 800cf4c:	08021270 	.word	0x08021270

0800cf50 <acc_config_subsweep_profile_set>:
 800cf50:	b570      	push	{r4, r5, r6, lr}
 800cf52:	b120      	cbz	r0, 800cf5e <acc_config_subsweep_profile_set+0xe>
 800cf54:	4604      	mov	r4, r0
 800cf56:	4b0b      	ldr	r3, [pc, #44]	@ (800cf84 <acc_config_subsweep_profile_set+0x34>)
 800cf58:	6800      	ldr	r0, [r0, #0]
 800cf5a:	4298      	cmp	r0, r3
 800cf5c:	d007      	beq.n	800cf6e <acc_config_subsweep_profile_set+0x1e>
 800cf5e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf88 <acc_config_subsweep_profile_set+0x38>)
 800cf60:	2000      	movs	r0, #0
 800cf62:	4a0a      	ldr	r2, [pc, #40]	@ (800cf8c <acc_config_subsweep_profile_set+0x3c>)
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	490a      	ldr	r1, [pc, #40]	@ (800cf90 <acc_config_subsweep_profile_set+0x40>)
 800cf68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf6c:	4718      	bx	r3
 800cf6e:	2a03      	cmp	r2, #3
 800cf70:	460d      	mov	r5, r1
 800cf72:	4616      	mov	r6, r2
 800cf74:	d902      	bls.n	800cf7c <acc_config_subsweep_profile_set+0x2c>
 800cf76:	f7ff ff15 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800cf7a:	b110      	cbz	r0, 800cf82 <acc_config_subsweep_profile_set+0x32>
 800cf7c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800cf80:	74e5      	strb	r5, [r4, #19]
 800cf82:	bd70      	pop	{r4, r5, r6, pc}
 800cf84:	1337b00f 	.word	0x1337b00f
 800cf88:	24003210 	.word	0x24003210
 800cf8c:	0801b5dc 	.word	0x0801b5dc
 800cf90:	08021270 	.word	0x08021270

0800cf94 <acc_config_subsweep_hwaas_set>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	b120      	cbz	r0, 800cfa2 <acc_config_subsweep_hwaas_set+0xe>
 800cf98:	4604      	mov	r4, r0
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <acc_config_subsweep_hwaas_set+0x34>)
 800cf9c:	6800      	ldr	r0, [r0, #0]
 800cf9e:	4298      	cmp	r0, r3
 800cfa0:	d007      	beq.n	800cfb2 <acc_config_subsweep_hwaas_set+0x1e>
 800cfa2:	4b0a      	ldr	r3, [pc, #40]	@ (800cfcc <acc_config_subsweep_hwaas_set+0x38>)
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	4a0a      	ldr	r2, [pc, #40]	@ (800cfd0 <acc_config_subsweep_hwaas_set+0x3c>)
 800cfa8:	691b      	ldr	r3, [r3, #16]
 800cfaa:	490a      	ldr	r1, [pc, #40]	@ (800cfd4 <acc_config_subsweep_hwaas_set+0x40>)
 800cfac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfb0:	4718      	bx	r3
 800cfb2:	2a03      	cmp	r2, #3
 800cfb4:	460d      	mov	r5, r1
 800cfb6:	4616      	mov	r6, r2
 800cfb8:	d902      	bls.n	800cfc0 <acc_config_subsweep_hwaas_set+0x2c>
 800cfba:	f7ff fef3 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800cfbe:	b110      	cbz	r0, 800cfc6 <acc_config_subsweep_hwaas_set+0x32>
 800cfc0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800cfc4:	81a5      	strh	r5, [r4, #12]
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	1337b00f 	.word	0x1337b00f
 800cfcc:	24003210 	.word	0x24003210
 800cfd0:	0801b5dc 	.word	0x0801b5dc
 800cfd4:	08021270 	.word	0x08021270

0800cfd8 <acc_config_subsweep_receiver_gain_set>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	b120      	cbz	r0, 800cfe6 <acc_config_subsweep_receiver_gain_set+0xe>
 800cfdc:	4604      	mov	r4, r0
 800cfde:	4b0b      	ldr	r3, [pc, #44]	@ (800d00c <acc_config_subsweep_receiver_gain_set+0x34>)
 800cfe0:	6800      	ldr	r0, [r0, #0]
 800cfe2:	4298      	cmp	r0, r3
 800cfe4:	d007      	beq.n	800cff6 <acc_config_subsweep_receiver_gain_set+0x1e>
 800cfe6:	4b0a      	ldr	r3, [pc, #40]	@ (800d010 <acc_config_subsweep_receiver_gain_set+0x38>)
 800cfe8:	2000      	movs	r0, #0
 800cfea:	4a0a      	ldr	r2, [pc, #40]	@ (800d014 <acc_config_subsweep_receiver_gain_set+0x3c>)
 800cfec:	691b      	ldr	r3, [r3, #16]
 800cfee:	490a      	ldr	r1, [pc, #40]	@ (800d018 <acc_config_subsweep_receiver_gain_set+0x40>)
 800cff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cff4:	4718      	bx	r3
 800cff6:	2a03      	cmp	r2, #3
 800cff8:	460d      	mov	r5, r1
 800cffa:	4616      	mov	r6, r2
 800cffc:	d902      	bls.n	800d004 <acc_config_subsweep_receiver_gain_set+0x2c>
 800cffe:	f7ff fed1 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800d002:	b110      	cbz	r0, 800d00a <acc_config_subsweep_receiver_gain_set+0x32>
 800d004:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800d008:	73a5      	strb	r5, [r4, #14]
 800d00a:	bd70      	pop	{r4, r5, r6, pc}
 800d00c:	1337b00f 	.word	0x1337b00f
 800d010:	24003210 	.word	0x24003210
 800d014:	0801b5dc 	.word	0x0801b5dc
 800d018:	08021270 	.word	0x08021270

0800d01c <acc_config_subsweep_enable_tx_set>:
 800d01c:	b570      	push	{r4, r5, r6, lr}
 800d01e:	b120      	cbz	r0, 800d02a <acc_config_subsweep_enable_tx_set+0xe>
 800d020:	4604      	mov	r4, r0
 800d022:	4b0b      	ldr	r3, [pc, #44]	@ (800d050 <acc_config_subsweep_enable_tx_set+0x34>)
 800d024:	6800      	ldr	r0, [r0, #0]
 800d026:	4298      	cmp	r0, r3
 800d028:	d007      	beq.n	800d03a <acc_config_subsweep_enable_tx_set+0x1e>
 800d02a:	4b0a      	ldr	r3, [pc, #40]	@ (800d054 <acc_config_subsweep_enable_tx_set+0x38>)
 800d02c:	2000      	movs	r0, #0
 800d02e:	4a0a      	ldr	r2, [pc, #40]	@ (800d058 <acc_config_subsweep_enable_tx_set+0x3c>)
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	490a      	ldr	r1, [pc, #40]	@ (800d05c <acc_config_subsweep_enable_tx_set+0x40>)
 800d034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d038:	4718      	bx	r3
 800d03a:	2a03      	cmp	r2, #3
 800d03c:	460d      	mov	r5, r1
 800d03e:	4616      	mov	r6, r2
 800d040:	d902      	bls.n	800d048 <acc_config_subsweep_enable_tx_set+0x2c>
 800d042:	f7ff feaf 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800d046:	b110      	cbz	r0, 800d04e <acc_config_subsweep_enable_tx_set+0x32>
 800d048:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800d04c:	73e5      	strb	r5, [r4, #15]
 800d04e:	bd70      	pop	{r4, r5, r6, pc}
 800d050:	1337b00f 	.word	0x1337b00f
 800d054:	24003210 	.word	0x24003210
 800d058:	0801b5dc 	.word	0x0801b5dc
 800d05c:	08021270 	.word	0x08021270

0800d060 <acc_config_subsweep_phase_enhancement_set>:
 800d060:	b570      	push	{r4, r5, r6, lr}
 800d062:	b120      	cbz	r0, 800d06e <acc_config_subsweep_phase_enhancement_set+0xe>
 800d064:	4604      	mov	r4, r0
 800d066:	4b0b      	ldr	r3, [pc, #44]	@ (800d094 <acc_config_subsweep_phase_enhancement_set+0x34>)
 800d068:	6800      	ldr	r0, [r0, #0]
 800d06a:	4298      	cmp	r0, r3
 800d06c:	d007      	beq.n	800d07e <acc_config_subsweep_phase_enhancement_set+0x1e>
 800d06e:	4b0a      	ldr	r3, [pc, #40]	@ (800d098 <acc_config_subsweep_phase_enhancement_set+0x38>)
 800d070:	2000      	movs	r0, #0
 800d072:	4a0a      	ldr	r2, [pc, #40]	@ (800d09c <acc_config_subsweep_phase_enhancement_set+0x3c>)
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	490a      	ldr	r1, [pc, #40]	@ (800d0a0 <acc_config_subsweep_phase_enhancement_set+0x40>)
 800d078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d07c:	4718      	bx	r3
 800d07e:	2a03      	cmp	r2, #3
 800d080:	460d      	mov	r5, r1
 800d082:	4616      	mov	r6, r2
 800d084:	d902      	bls.n	800d08c <acc_config_subsweep_phase_enhancement_set+0x2c>
 800d086:	f7ff fe8d 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800d08a:	b110      	cbz	r0, 800d092 <acc_config_subsweep_phase_enhancement_set+0x32>
 800d08c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800d090:	7425      	strb	r5, [r4, #16]
 800d092:	bd70      	pop	{r4, r5, r6, pc}
 800d094:	1337b00f 	.word	0x1337b00f
 800d098:	24003210 	.word	0x24003210
 800d09c:	0801b5dc 	.word	0x0801b5dc
 800d0a0:	08021270 	.word	0x08021270

0800d0a4 <acc_config_sweeps_per_frame_set>:
 800d0a4:	b118      	cbz	r0, 800d0ae <acc_config_sweeps_per_frame_set+0xa>
 800d0a6:	4b06      	ldr	r3, [pc, #24]	@ (800d0c0 <acc_config_sweeps_per_frame_set+0x1c>)
 800d0a8:	6802      	ldr	r2, [r0, #0]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d005      	beq.n	800d0ba <acc_config_sweeps_per_frame_set+0x16>
 800d0ae:	4b05      	ldr	r3, [pc, #20]	@ (800d0c4 <acc_config_sweeps_per_frame_set+0x20>)
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	4a05      	ldr	r2, [pc, #20]	@ (800d0c8 <acc_config_sweeps_per_frame_set+0x24>)
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	4905      	ldr	r1, [pc, #20]	@ (800d0cc <acc_config_sweeps_per_frame_set+0x28>)
 800d0b8:	4718      	bx	r3
 800d0ba:	f8a0 104c 	strh.w	r1, [r0, #76]	@ 0x4c
 800d0be:	4770      	bx	lr
 800d0c0:	1337b00f 	.word	0x1337b00f
 800d0c4:	24003210 	.word	0x24003210
 800d0c8:	0801b5dc 	.word	0x0801b5dc
 800d0cc:	08021270 	.word	0x08021270

0800d0d0 <acc_config_sweeps_per_frame_get>:
 800d0d0:	b508      	push	{r3, lr}
 800d0d2:	b118      	cbz	r0, 800d0dc <acc_config_sweeps_per_frame_get+0xc>
 800d0d4:	4b07      	ldr	r3, [pc, #28]	@ (800d0f4 <acc_config_sweeps_per_frame_get+0x24>)
 800d0d6:	6802      	ldr	r2, [r0, #0]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d007      	beq.n	800d0ec <acc_config_sweeps_per_frame_get+0x1c>
 800d0dc:	4b06      	ldr	r3, [pc, #24]	@ (800d0f8 <acc_config_sweeps_per_frame_get+0x28>)
 800d0de:	2000      	movs	r0, #0
 800d0e0:	4a06      	ldr	r2, [pc, #24]	@ (800d0fc <acc_config_sweeps_per_frame_get+0x2c>)
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	4906      	ldr	r1, [pc, #24]	@ (800d100 <acc_config_sweeps_per_frame_get+0x30>)
 800d0e6:	4798      	blx	r3
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	bd08      	pop	{r3, pc}
 800d0ec:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
 800d0f0:	bd08      	pop	{r3, pc}
 800d0f2:	bf00      	nop
 800d0f4:	1337b00f 	.word	0x1337b00f
 800d0f8:	24003210 	.word	0x24003210
 800d0fc:	0801b5dc 	.word	0x0801b5dc
 800d100:	08021270 	.word	0x08021270

0800d104 <acc_config_sweep_rate_set>:
 800d104:	b118      	cbz	r0, 800d10e <acc_config_sweep_rate_set+0xa>
 800d106:	4b06      	ldr	r3, [pc, #24]	@ (800d120 <acc_config_sweep_rate_set+0x1c>)
 800d108:	6802      	ldr	r2, [r0, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d005      	beq.n	800d11a <acc_config_sweep_rate_set+0x16>
 800d10e:	4b05      	ldr	r3, [pc, #20]	@ (800d124 <acc_config_sweep_rate_set+0x20>)
 800d110:	2000      	movs	r0, #0
 800d112:	4a05      	ldr	r2, [pc, #20]	@ (800d128 <acc_config_sweep_rate_set+0x24>)
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	4905      	ldr	r1, [pc, #20]	@ (800d12c <acc_config_sweep_rate_set+0x28>)
 800d118:	4718      	bx	r3
 800d11a:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 800d11e:	4770      	bx	lr
 800d120:	1337b00f 	.word	0x1337b00f
 800d124:	24003210 	.word	0x24003210
 800d128:	0801b5dc 	.word	0x0801b5dc
 800d12c:	08021270 	.word	0x08021270

0800d130 <acc_config_sweep_rate_get>:
 800d130:	b508      	push	{r3, lr}
 800d132:	b118      	cbz	r0, 800d13c <acc_config_sweep_rate_get+0xc>
 800d134:	4b07      	ldr	r3, [pc, #28]	@ (800d154 <acc_config_sweep_rate_get+0x24>)
 800d136:	6802      	ldr	r2, [r0, #0]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d008      	beq.n	800d14e <acc_config_sweep_rate_get+0x1e>
 800d13c:	4b06      	ldr	r3, [pc, #24]	@ (800d158 <acc_config_sweep_rate_get+0x28>)
 800d13e:	2000      	movs	r0, #0
 800d140:	4a06      	ldr	r2, [pc, #24]	@ (800d15c <acc_config_sweep_rate_get+0x2c>)
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	4906      	ldr	r1, [pc, #24]	@ (800d160 <acc_config_sweep_rate_get+0x30>)
 800d146:	4798      	blx	r3
 800d148:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800d164 <acc_config_sweep_rate_get+0x34>
 800d14c:	bd08      	pop	{r3, pc}
 800d14e:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 800d152:	bd08      	pop	{r3, pc}
 800d154:	1337b00f 	.word	0x1337b00f
 800d158:	24003210 	.word	0x24003210
 800d15c:	0801b5dc 	.word	0x0801b5dc
 800d160:	08021270 	.word	0x08021270
 800d164:	00000000 	.word	0x00000000

0800d168 <acc_config_continuous_sweep_mode_set>:
 800d168:	b118      	cbz	r0, 800d172 <acc_config_continuous_sweep_mode_set+0xa>
 800d16a:	4b06      	ldr	r3, [pc, #24]	@ (800d184 <acc_config_continuous_sweep_mode_set+0x1c>)
 800d16c:	6802      	ldr	r2, [r0, #0]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d005      	beq.n	800d17e <acc_config_continuous_sweep_mode_set+0x16>
 800d172:	4b05      	ldr	r3, [pc, #20]	@ (800d188 <acc_config_continuous_sweep_mode_set+0x20>)
 800d174:	2000      	movs	r0, #0
 800d176:	4a05      	ldr	r2, [pc, #20]	@ (800d18c <acc_config_continuous_sweep_mode_set+0x24>)
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	4905      	ldr	r1, [pc, #20]	@ (800d190 <acc_config_continuous_sweep_mode_set+0x28>)
 800d17c:	4718      	bx	r3
 800d17e:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
 800d182:	4770      	bx	lr
 800d184:	1337b00f 	.word	0x1337b00f
 800d188:	24003210 	.word	0x24003210
 800d18c:	0801b5dc 	.word	0x0801b5dc
 800d190:	08021270 	.word	0x08021270

0800d194 <acc_config_frame_rate_set>:
 800d194:	b118      	cbz	r0, 800d19e <acc_config_frame_rate_set+0xa>
 800d196:	4b06      	ldr	r3, [pc, #24]	@ (800d1b0 <acc_config_frame_rate_set+0x1c>)
 800d198:	6802      	ldr	r2, [r0, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d005      	beq.n	800d1aa <acc_config_frame_rate_set+0x16>
 800d19e:	4b05      	ldr	r3, [pc, #20]	@ (800d1b4 <acc_config_frame_rate_set+0x20>)
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	4a05      	ldr	r2, [pc, #20]	@ (800d1b8 <acc_config_frame_rate_set+0x24>)
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	4905      	ldr	r1, [pc, #20]	@ (800d1bc <acc_config_frame_rate_set+0x28>)
 800d1a8:	4718      	bx	r3
 800d1aa:	ed80 0a12 	vstr	s0, [r0, #72]	@ 0x48
 800d1ae:	4770      	bx	lr
 800d1b0:	1337b00f 	.word	0x1337b00f
 800d1b4:	24003210 	.word	0x24003210
 800d1b8:	0801b5dc 	.word	0x0801b5dc
 800d1bc:	08021270 	.word	0x08021270

0800d1c0 <acc_config_frame_rate_get>:
 800d1c0:	b508      	push	{r3, lr}
 800d1c2:	b118      	cbz	r0, 800d1cc <acc_config_frame_rate_get+0xc>
 800d1c4:	4b07      	ldr	r3, [pc, #28]	@ (800d1e4 <acc_config_frame_rate_get+0x24>)
 800d1c6:	6802      	ldr	r2, [r0, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d008      	beq.n	800d1de <acc_config_frame_rate_get+0x1e>
 800d1cc:	4b06      	ldr	r3, [pc, #24]	@ (800d1e8 <acc_config_frame_rate_get+0x28>)
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	4a06      	ldr	r2, [pc, #24]	@ (800d1ec <acc_config_frame_rate_get+0x2c>)
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	4906      	ldr	r1, [pc, #24]	@ (800d1f0 <acc_config_frame_rate_get+0x30>)
 800d1d6:	4798      	blx	r3
 800d1d8:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800d1f4 <acc_config_frame_rate_get+0x34>
 800d1dc:	bd08      	pop	{r3, pc}
 800d1de:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 800d1e2:	bd08      	pop	{r3, pc}
 800d1e4:	1337b00f 	.word	0x1337b00f
 800d1e8:	24003210 	.word	0x24003210
 800d1ec:	0801b5dc 	.word	0x0801b5dc
 800d1f0:	08021270 	.word	0x08021270
 800d1f4:	00000000 	.word	0x00000000

0800d1f8 <acc_config_inter_frame_idle_state_set>:
 800d1f8:	b118      	cbz	r0, 800d202 <acc_config_inter_frame_idle_state_set+0xa>
 800d1fa:	4b06      	ldr	r3, [pc, #24]	@ (800d214 <acc_config_inter_frame_idle_state_set+0x1c>)
 800d1fc:	6802      	ldr	r2, [r0, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d005      	beq.n	800d20e <acc_config_inter_frame_idle_state_set+0x16>
 800d202:	4b05      	ldr	r3, [pc, #20]	@ (800d218 <acc_config_inter_frame_idle_state_set+0x20>)
 800d204:	2000      	movs	r0, #0
 800d206:	4a05      	ldr	r2, [pc, #20]	@ (800d21c <acc_config_inter_frame_idle_state_set+0x24>)
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	4905      	ldr	r1, [pc, #20]	@ (800d220 <acc_config_inter_frame_idle_state_set+0x28>)
 800d20c:	4718      	bx	r3
 800d20e:	f880 1053 	strb.w	r1, [r0, #83]	@ 0x53
 800d212:	4770      	bx	lr
 800d214:	1337b00f 	.word	0x1337b00f
 800d218:	24003210 	.word	0x24003210
 800d21c:	0801b5dc 	.word	0x0801b5dc
 800d220:	08021270 	.word	0x08021270

0800d224 <acc_config_inter_sweep_idle_state_set>:
 800d224:	b118      	cbz	r0, 800d22e <acc_config_inter_sweep_idle_state_set+0xa>
 800d226:	4b06      	ldr	r3, [pc, #24]	@ (800d240 <acc_config_inter_sweep_idle_state_set+0x1c>)
 800d228:	6802      	ldr	r2, [r0, #0]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d005      	beq.n	800d23a <acc_config_inter_sweep_idle_state_set+0x16>
 800d22e:	4b05      	ldr	r3, [pc, #20]	@ (800d244 <acc_config_inter_sweep_idle_state_set+0x20>)
 800d230:	2000      	movs	r0, #0
 800d232:	4a05      	ldr	r2, [pc, #20]	@ (800d248 <acc_config_inter_sweep_idle_state_set+0x24>)
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	4905      	ldr	r1, [pc, #20]	@ (800d24c <acc_config_inter_sweep_idle_state_set+0x28>)
 800d238:	4718      	bx	r3
 800d23a:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800d23e:	4770      	bx	lr
 800d240:	1337b00f 	.word	0x1337b00f
 800d244:	24003210 	.word	0x24003210
 800d248:	0801b5dc 	.word	0x0801b5dc
 800d24c:	08021270 	.word	0x08021270

0800d250 <acc_config_double_buffering_set>:
 800d250:	b118      	cbz	r0, 800d25a <acc_config_double_buffering_set+0xa>
 800d252:	4b06      	ldr	r3, [pc, #24]	@ (800d26c <acc_config_double_buffering_set+0x1c>)
 800d254:	6802      	ldr	r2, [r0, #0]
 800d256:	429a      	cmp	r2, r3
 800d258:	d005      	beq.n	800d266 <acc_config_double_buffering_set+0x16>
 800d25a:	4b05      	ldr	r3, [pc, #20]	@ (800d270 <acc_config_double_buffering_set+0x20>)
 800d25c:	2000      	movs	r0, #0
 800d25e:	4a05      	ldr	r2, [pc, #20]	@ (800d274 <acc_config_double_buffering_set+0x24>)
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	4905      	ldr	r1, [pc, #20]	@ (800d278 <acc_config_double_buffering_set+0x28>)
 800d264:	4718      	bx	r3
 800d266:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 800d26a:	4770      	bx	lr
 800d26c:	1337b00f 	.word	0x1337b00f
 800d270:	24003210 	.word	0x24003210
 800d274:	0801b5dc 	.word	0x0801b5dc
 800d278:	08021270 	.word	0x08021270

0800d27c <acc_config_get_settings>:
 800d27c:	b508      	push	{r3, lr}
 800d27e:	b118      	cbz	r0, 800d288 <acc_config_get_settings+0xc>
 800d280:	4b06      	ldr	r3, [pc, #24]	@ (800d29c <acc_config_get_settings+0x20>)
 800d282:	6802      	ldr	r2, [r0, #0]
 800d284:	429a      	cmp	r2, r3
 800d286:	d007      	beq.n	800d298 <acc_config_get_settings+0x1c>
 800d288:	4b05      	ldr	r3, [pc, #20]	@ (800d2a0 <acc_config_get_settings+0x24>)
 800d28a:	2000      	movs	r0, #0
 800d28c:	4a05      	ldr	r2, [pc, #20]	@ (800d2a4 <acc_config_get_settings+0x28>)
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	4905      	ldr	r1, [pc, #20]	@ (800d2a8 <acc_config_get_settings+0x2c>)
 800d292:	4798      	blx	r3
 800d294:	2000      	movs	r0, #0
 800d296:	bd08      	pop	{r3, pc}
 800d298:	3004      	adds	r0, #4
 800d29a:	bd08      	pop	{r3, pc}
 800d29c:	1337b00f 	.word	0x1337b00f
 800d2a0:	24003210 	.word	0x24003210
 800d2a4:	0801b5dc 	.word	0x0801b5dc
 800d2a8:	08021270 	.word	0x08021270

0800d2ac <acc_config_subsweep_enable_loopback_set>:
 800d2ac:	b570      	push	{r4, r5, r6, lr}
 800d2ae:	b120      	cbz	r0, 800d2ba <acc_config_subsweep_enable_loopback_set+0xe>
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d2e0 <acc_config_subsweep_enable_loopback_set+0x34>)
 800d2b4:	6800      	ldr	r0, [r0, #0]
 800d2b6:	4298      	cmp	r0, r3
 800d2b8:	d007      	beq.n	800d2ca <acc_config_subsweep_enable_loopback_set+0x1e>
 800d2ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d2e4 <acc_config_subsweep_enable_loopback_set+0x38>)
 800d2bc:	2000      	movs	r0, #0
 800d2be:	4a0a      	ldr	r2, [pc, #40]	@ (800d2e8 <acc_config_subsweep_enable_loopback_set+0x3c>)
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	490a      	ldr	r1, [pc, #40]	@ (800d2ec <acc_config_subsweep_enable_loopback_set+0x40>)
 800d2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2c8:	4718      	bx	r3
 800d2ca:	2a03      	cmp	r2, #3
 800d2cc:	460d      	mov	r5, r1
 800d2ce:	4616      	mov	r6, r2
 800d2d0:	d902      	bls.n	800d2d8 <acc_config_subsweep_enable_loopback_set+0x2c>
 800d2d2:	f7ff fd67 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800d2d6:	b110      	cbz	r0, 800d2de <acc_config_subsweep_enable_loopback_set+0x32>
 800d2d8:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800d2dc:	7465      	strb	r5, [r4, #17]
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	1337b00f 	.word	0x1337b00f
 800d2e4:	24003210 	.word	0x24003210
 800d2e8:	0801b5dc 	.word	0x0801b5dc
 800d2ec:	08021270 	.word	0x08021270

0800d2f0 <acc_config_subsweep_prf_set>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	b120      	cbz	r0, 800d2fe <acc_config_subsweep_prf_set+0xe>
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d324 <acc_config_subsweep_prf_set+0x34>)
 800d2f8:	6800      	ldr	r0, [r0, #0]
 800d2fa:	4298      	cmp	r0, r3
 800d2fc:	d007      	beq.n	800d30e <acc_config_subsweep_prf_set+0x1e>
 800d2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d328 <acc_config_subsweep_prf_set+0x38>)
 800d300:	2000      	movs	r0, #0
 800d302:	4a0a      	ldr	r2, [pc, #40]	@ (800d32c <acc_config_subsweep_prf_set+0x3c>)
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	490a      	ldr	r1, [pc, #40]	@ (800d330 <acc_config_subsweep_prf_set+0x40>)
 800d308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d30c:	4718      	bx	r3
 800d30e:	2a03      	cmp	r2, #3
 800d310:	460d      	mov	r5, r1
 800d312:	4616      	mov	r6, r2
 800d314:	d902      	bls.n	800d31c <acc_config_subsweep_prf_set+0x2c>
 800d316:	f7ff fd45 	bl	800cda4 <acc_config_subsweep_validate.part.0>
 800d31a:	b110      	cbz	r0, 800d322 <acc_config_subsweep_prf_set+0x32>
 800d31c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800d320:	74a5      	strb	r5, [r4, #18]
 800d322:	bd70      	pop	{r4, r5, r6, pc}
 800d324:	1337b00f 	.word	0x1337b00f
 800d328:	24003210 	.word	0x24003210
 800d32c:	0801b5dc 	.word	0x0801b5dc
 800d330:	08021270 	.word	0x08021270

0800d334 <acc_config_subtract_in_buffer_set>:
 800d334:	b118      	cbz	r0, 800d33e <acc_config_subtract_in_buffer_set+0xa>
 800d336:	4b06      	ldr	r3, [pc, #24]	@ (800d350 <acc_config_subtract_in_buffer_set+0x1c>)
 800d338:	6802      	ldr	r2, [r0, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d005      	beq.n	800d34a <acc_config_subtract_in_buffer_set+0x16>
 800d33e:	4b05      	ldr	r3, [pc, #20]	@ (800d354 <acc_config_subtract_in_buffer_set+0x20>)
 800d340:	2000      	movs	r0, #0
 800d342:	4a05      	ldr	r2, [pc, #20]	@ (800d358 <acc_config_subtract_in_buffer_set+0x24>)
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	4905      	ldr	r1, [pc, #20]	@ (800d35c <acc_config_subtract_in_buffer_set+0x28>)
 800d348:	4718      	bx	r3
 800d34a:	f880 1050 	strb.w	r1, [r0, #80]	@ 0x50
 800d34e:	4770      	bx	lr
 800d350:	1337b00f 	.word	0x1337b00f
 800d354:	24003210 	.word	0x24003210
 800d358:	0801b5dc 	.word	0x0801b5dc
 800d35c:	08021270 	.word	0x08021270

0800d360 <data_callback>:
 800d360:	6893      	ldr	r3, [r2, #8]
 800d362:	888a      	ldrh	r2, [r1, #4]
 800d364:	3a00      	subs	r2, #0
 800d366:	b430      	push	{r4, r5}
 800d368:	bf18      	it	ne
 800d36a:	2201      	movne	r2, #1
 800d36c:	890d      	ldrh	r5, [r1, #8]
 800d36e:	798c      	ldrb	r4, [r1, #6]
 800d370:	79c9      	ldrb	r1, [r1, #7]
 800d372:	809d      	strh	r5, [r3, #4]
 800d374:	705c      	strb	r4, [r3, #1]
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	7099      	strb	r1, [r3, #2]
 800d37a:	6098      	str	r0, [r3, #8]
 800d37c:	bc30      	pop	{r4, r5}
 800d37e:	4770      	bx	lr

0800d380 <acc_processing_execute>:
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	4615      	mov	r5, r2
 800d384:	460e      	mov	r6, r1
 800d386:	b120      	cbz	r0, 800d392 <acc_processing_execute+0x12>
 800d388:	4b15      	ldr	r3, [pc, #84]	@ (800d3e0 <acc_processing_execute+0x60>)
 800d38a:	4604      	mov	r4, r0
 800d38c:	6802      	ldr	r2, [r0, #0]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d008      	beq.n	800d3a4 <acc_processing_execute+0x24>
 800d392:	4c14      	ldr	r4, [pc, #80]	@ (800d3e4 <acc_processing_execute+0x64>)
 800d394:	2000      	movs	r0, #0
 800d396:	4a14      	ldr	r2, [pc, #80]	@ (800d3e8 <acc_processing_execute+0x68>)
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	4914      	ldr	r1, [pc, #80]	@ (800d3ec <acc_processing_execute+0x6c>)
 800d39c:	4798      	blx	r3
 800d39e:	b176      	cbz	r6, 800d3be <acc_processing_execute+0x3e>
 800d3a0:	b1a5      	cbz	r5, 800d3cc <acc_processing_execute+0x4c>
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
 800d3a4:	b151      	cbz	r1, 800d3bc <acc_processing_execute+0x3c>
 800d3a6:	b1c5      	cbz	r5, 800d3da <acc_processing_execute+0x5a>
 800d3a8:	6085      	str	r5, [r0, #8]
 800d3aa:	6840      	ldr	r0, [r0, #4]
 800d3ac:	f002 f984 	bl	800f6b8 <acc_pipeline_a121_prepare_memory>
 800d3b0:	6863      	ldr	r3, [r4, #4]
 800d3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3b6:	e9d3 0200 	ldrd	r0, r2, [r3]
 800d3ba:	4710      	bx	r2
 800d3bc:	4c09      	ldr	r4, [pc, #36]	@ (800d3e4 <acc_processing_execute+0x64>)
 800d3be:	6923      	ldr	r3, [r4, #16]
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	4a0b      	ldr	r2, [pc, #44]	@ (800d3f0 <acc_processing_execute+0x70>)
 800d3c4:	4909      	ldr	r1, [pc, #36]	@ (800d3ec <acc_processing_execute+0x6c>)
 800d3c6:	4798      	blx	r3
 800d3c8:	2d00      	cmp	r5, #0
 800d3ca:	d1ea      	bne.n	800d3a2 <acc_processing_execute+0x22>
 800d3cc:	6923      	ldr	r3, [r4, #16]
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	4a08      	ldr	r2, [pc, #32]	@ (800d3f4 <acc_processing_execute+0x74>)
 800d3d2:	4906      	ldr	r1, [pc, #24]	@ (800d3ec <acc_processing_execute+0x6c>)
 800d3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3d8:	4718      	bx	r3
 800d3da:	4c02      	ldr	r4, [pc, #8]	@ (800d3e4 <acc_processing_execute+0x64>)
 800d3dc:	e7f6      	b.n	800d3cc <acc_processing_execute+0x4c>
 800d3de:	bf00      	nop
 800d3e0:	1337b00d 	.word	0x1337b00d
 800d3e4:	24003210 	.word	0x24003210
 800d3e8:	0801b860 	.word	0x0801b860
 800d3ec:	0801b854 	.word	0x0801b854
 800d3f0:	0801b87c 	.word	0x0801b87c
 800d3f4:	0801b83c 	.word	0x0801b83c

0800d3f8 <acc_processing_destroy>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	b120      	cbz	r0, 800d406 <acc_processing_destroy+0xe>
 800d3fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d430 <acc_processing_destroy+0x38>)
 800d3fe:	4604      	mov	r4, r0
 800d400:	6802      	ldr	r2, [r0, #0]
 800d402:	429a      	cmp	r2, r3
 800d404:	d007      	beq.n	800d416 <acc_processing_destroy+0x1e>
 800d406:	4b0b      	ldr	r3, [pc, #44]	@ (800d434 <acc_processing_destroy+0x3c>)
 800d408:	2000      	movs	r0, #0
 800d40a:	4a0b      	ldr	r2, [pc, #44]	@ (800d438 <acc_processing_destroy+0x40>)
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	490b      	ldr	r1, [pc, #44]	@ (800d43c <acc_processing_destroy+0x44>)
 800d410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d414:	4718      	bx	r3
 800d416:	6840      	ldr	r0, [r0, #4]
 800d418:	b118      	cbz	r0, 800d422 <acc_processing_destroy+0x2a>
 800d41a:	68c3      	ldr	r3, [r0, #12]
 800d41c:	4798      	blx	r3
 800d41e:	2300      	movs	r3, #0
 800d420:	6063      	str	r3, [r4, #4]
 800d422:	2300      	movs	r3, #0
 800d424:	4620      	mov	r0, r4
 800d426:	6023      	str	r3, [r4, #0]
 800d428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d42c:	f001 bf96 	b.w	800f35c <acc_rss_integration_mem_free>
 800d430:	1337b00d 	.word	0x1337b00d
 800d434:	24003210 	.word	0x24003210
 800d438:	0801b860 	.word	0x0801b860
 800d43c:	0801b854 	.word	0x0801b854

0800d440 <acc_processing_create>:
 800d440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d444:	460c      	mov	r4, r1
 800d446:	b088      	sub	sp, #32
 800d448:	f7ff ff18 	bl	800d27c <acc_config_get_settings>
 800d44c:	4606      	mov	r6, r0
 800d44e:	b984      	cbnz	r4, 800d472 <acc_processing_create+0x32>
 800d450:	b150      	cbz	r0, 800d468 <acc_processing_create+0x28>
 800d452:	4b2e      	ldr	r3, [pc, #184]	@ (800d50c <acc_processing_create+0xcc>)
 800d454:	2000      	movs	r0, #0
 800d456:	4a2e      	ldr	r2, [pc, #184]	@ (800d510 <acc_processing_create+0xd0>)
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	4607      	mov	r7, r0
 800d45c:	492d      	ldr	r1, [pc, #180]	@ (800d514 <acc_processing_create+0xd4>)
 800d45e:	4798      	blx	r3
 800d460:	4638      	mov	r0, r7
 800d462:	b008      	add	sp, #32
 800d464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d468:	2700      	movs	r7, #0
 800d46a:	4638      	mov	r0, r7
 800d46c:	b008      	add	sp, #32
 800d46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d472:	2800      	cmp	r0, #0
 800d474:	d0f8      	beq.n	800d468 <acc_processing_create+0x28>
 800d476:	2367      	movs	r3, #103	@ 0x67
 800d478:	4a26      	ldr	r2, [pc, #152]	@ (800d514 <acc_processing_create+0xd4>)
 800d47a:	2110      	movs	r1, #16
 800d47c:	2001      	movs	r0, #1
 800d47e:	f001 ff51 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800d482:	4607      	mov	r7, r0
 800d484:	2800      	cmp	r0, #0
 800d486:	d0ef      	beq.n	800d468 <acc_processing_create+0x28>
 800d488:	4a23      	ldr	r2, [pc, #140]	@ (800d518 <acc_processing_create+0xd8>)
 800d48a:	f10d 080c 	add.w	r8, sp, #12
 800d48e:	4b23      	ldr	r3, [pc, #140]	@ (800d51c <acc_processing_create+0xdc>)
 800d490:	4668      	mov	r0, sp
 800d492:	603a      	str	r2, [r7, #0]
 800d494:	4641      	mov	r1, r8
 800d496:	9600      	str	r6, [sp, #0]
 800d498:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d49c:	f001 ffaa 	bl	800f3f4 <acc_pipeline_a121_assemble>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	b368      	cbz	r0, 800d502 <acc_processing_create+0xc2>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	1d25      	adds	r5, r4, #4
 800d4aa:	8062      	strh	r2, [r4, #2]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 800d4b2:	4694      	mov	ip, r2
 800d4b4:	b2d8      	uxtb	r0, r3
 800d4b6:	4281      	cmp	r1, r0
 800d4b8:	d91e      	bls.n	800d4f8 <acc_processing_create+0xb8>
 800d4ba:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 800d4be:	802a      	strh	r2, [r5, #0]
 800d4c0:	4402      	add	r2, r0
 800d4c2:	b292      	uxth	r2, r2
 800d4c4:	8062      	strh	r2, [r4, #2]
 800d4c6:	8128      	strh	r0, [r5, #8]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	3502      	adds	r5, #2
 800d4cc:	2b04      	cmp	r3, #4
 800d4ce:	d1f1      	bne.n	800d4b4 <acc_processing_create+0x74>
 800d4d0:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 800d4d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d4d8:	fb13 f202 	smulbb	r2, r3, r2
 800d4dc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800d4e0:	7620      	strb	r0, [r4, #24]
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d4e8:	9d05      	ldr	r5, [sp, #20]
 800d4ea:	8022      	strh	r2, [r4, #0]
 800d4ec:	6165      	str	r5, [r4, #20]
 800d4ee:	81b9      	strh	r1, [r7, #12]
 800d4f0:	81fb      	strh	r3, [r7, #14]
 800d4f2:	b008      	add	sp, #32
 800d4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f8:	f8a5 c000 	strh.w	ip, [r5]
 800d4fc:	f8a5 c008 	strh.w	ip, [r5, #8]
 800d500:	e7e2      	b.n	800d4c8 <acc_processing_create+0x88>
 800d502:	4638      	mov	r0, r7
 800d504:	461f      	mov	r7, r3
 800d506:	f7ff ff77 	bl	800d3f8 <acc_processing_destroy>
 800d50a:	e7a9      	b.n	800d460 <acc_processing_create+0x20>
 800d50c:	24003210 	.word	0x24003210
 800d510:	0801b894 	.word	0x0801b894
 800d514:	0801b854 	.word	0x0801b854
 800d518:	1337b00d 	.word	0x1337b00d
 800d51c:	0800d361 	.word	0x0800d361

0800d520 <acc_processing_points_to_meter>:
 800d520:	f002 bb72 	b.w	800fc08 <acc_radar_engine_a121_points_to_meter>

0800d524 <acc_sensor_destroy>:
 800d524:	b510      	push	{r4, lr}
 800d526:	b120      	cbz	r0, 800d532 <acc_sensor_destroy+0xe>
 800d528:	4b0b      	ldr	r3, [pc, #44]	@ (800d558 <acc_sensor_destroy+0x34>)
 800d52a:	4604      	mov	r4, r0
 800d52c:	6802      	ldr	r2, [r0, #0]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d007      	beq.n	800d542 <acc_sensor_destroy+0x1e>
 800d532:	4b0a      	ldr	r3, [pc, #40]	@ (800d55c <acc_sensor_destroy+0x38>)
 800d534:	2000      	movs	r0, #0
 800d536:	4a0a      	ldr	r2, [pc, #40]	@ (800d560 <acc_sensor_destroy+0x3c>)
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	490a      	ldr	r1, [pc, #40]	@ (800d564 <acc_sensor_destroy+0x40>)
 800d53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d540:	4718      	bx	r3
 800d542:	2300      	movs	r3, #0
 800d544:	6900      	ldr	r0, [r0, #16]
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	f002 f8ee 	bl	800f728 <acc_radar_engine_a121_context_destroy>
 800d54c:	4620      	mov	r0, r4
 800d54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d552:	f001 bf03 	b.w	800f35c <acc_rss_integration_mem_free>
 800d556:	bf00      	nop
 800d558:	1337b00e 	.word	0x1337b00e
 800d55c:	24003210 	.word	0x24003210
 800d560:	0801b8ac 	.word	0x0801b8ac
 800d564:	0801b8c4 	.word	0x0801b8c4

0800d568 <acc_sensor_create>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	233b      	movs	r3, #59	@ 0x3b
 800d56c:	4605      	mov	r5, r0
 800d56e:	4a1f      	ldr	r2, [pc, #124]	@ (800d5ec <acc_sensor_create+0x84>)
 800d570:	2114      	movs	r1, #20
 800d572:	2001      	movs	r0, #1
 800d574:	f001 fed6 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800d578:	b378      	cbz	r0, 800d5da <acc_sensor_create+0x72>
 800d57a:	4604      	mov	r4, r0
 800d57c:	f002 f8c2 	bl	800f704 <acc_radar_engine_a121_context_create>
 800d580:	4603      	mov	r3, r0
 800d582:	6120      	str	r0, [r4, #16]
 800d584:	b360      	cbz	r0, 800d5e0 <acc_sensor_create+0x78>
 800d586:	2100      	movs	r1, #0
 800d588:	4b19      	ldr	r3, [pc, #100]	@ (800d5f0 <acc_sensor_create+0x88>)
 800d58a:	4628      	mov	r0, r5
 800d58c:	60a5      	str	r5, [r4, #8]
 800d58e:	7361      	strb	r1, [r4, #13]
 800d590:	e9c4 3100 	strd	r3, r1, [r4]
 800d594:	f002 f978 	bl	800f888 <acc_radar_engine_a121_check_asic_id>
 800d598:	4606      	mov	r6, r0
 800d59a:	b168      	cbz	r0, 800d5b8 <acc_sensor_create+0x50>
 800d59c:	4628      	mov	r0, r5
 800d59e:	f002 f975 	bl	800f88c <acc_radar_engine_a121_is_sensor_running>
 800d5a2:	4605      	mov	r5, r0
 800d5a4:	b980      	cbnz	r0, 800d5c8 <acc_sensor_create+0x60>
 800d5a6:	68a0      	ldr	r0, [r4, #8]
 800d5a8:	f002 fb30 	bl	800fc0c <acc_radar_engine_a121_init_interrupts>
 800d5ac:	68a0      	ldr	r0, [r4, #8]
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	f002 fb2e 	bl	800fc10 <acc_radar_engine_a121_hibernate_off>
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f7ff ffb3 	bl	800d524 <acc_sensor_destroy>
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f002 f964 	bl	800f88c <acc_radar_engine_a121_is_sensor_running>
 800d5c4:	b148      	cbz	r0, 800d5da <acc_sensor_create+0x72>
 800d5c6:	4634      	mov	r4, r6
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f4 <acc_sensor_create+0x8c>)
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d5f8 <acc_sensor_create+0x90>)
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	4906      	ldr	r1, [pc, #24]	@ (800d5ec <acc_sensor_create+0x84>)
 800d5d2:	4798      	blx	r3
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f7ff ffa5 	bl	800d524 <acc_sensor_destroy>
 800d5da:	2400      	movs	r4, #0
 800d5dc:	4620      	mov	r0, r4
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	461c      	mov	r4, r3
 800d5e4:	f001 feba 	bl	800f35c <acc_rss_integration_mem_free>
 800d5e8:	e7f8      	b.n	800d5dc <acc_sensor_create+0x74>
 800d5ea:	bf00      	nop
 800d5ec:	0801b8c4 	.word	0x0801b8c4
 800d5f0:	1337b00e 	.word	0x1337b00e
 800d5f4:	24003210 	.word	0x24003210
 800d5f8:	0801b8cc 	.word	0x0801b8cc

0800d5fc <acc_sensor_calibrate>:
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	b128      	cbz	r0, 800d60e <acc_sensor_calibrate+0x12>
 800d602:	460d      	mov	r5, r1
 800d604:	4604      	mov	r4, r0
 800d606:	4914      	ldr	r1, [pc, #80]	@ (800d658 <acc_sensor_calibrate+0x5c>)
 800d608:	6800      	ldr	r0, [r0, #0]
 800d60a:	4288      	cmp	r0, r1
 800d60c:	d008      	beq.n	800d620 <acc_sensor_calibrate+0x24>
 800d60e:	4b13      	ldr	r3, [pc, #76]	@ (800d65c <acc_sensor_calibrate+0x60>)
 800d610:	2000      	movs	r0, #0
 800d612:	4a13      	ldr	r2, [pc, #76]	@ (800d660 <acc_sensor_calibrate+0x64>)
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	4913      	ldr	r1, [pc, #76]	@ (800d664 <acc_sensor_calibrate+0x68>)
 800d618:	4798      	blx	r3
 800d61a:	2000      	movs	r0, #0
 800d61c:	b002      	add	sp, #8
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
 800d620:	2b00      	cmp	r3, #0
 800d622:	bf18      	it	ne
 800d624:	2a00      	cmpne	r2, #0
 800d626:	d0f8      	beq.n	800d61a <acc_sensor_calibrate+0x1e>
 800d628:	fab5 f685 	clz	r6, r5
 800d62c:	0976      	lsrs	r6, r6, #5
 800d62e:	2d00      	cmp	r5, #0
 800d630:	d0f3      	beq.n	800d61a <acc_sensor_calibrate+0x1e>
 800d632:	9200      	str	r2, [sp, #0]
 800d634:	4619      	mov	r1, r3
 800d636:	9a06      	ldr	r2, [sp, #24]
 800d638:	f104 030d 	add.w	r3, r4, #13
 800d63c:	68a0      	ldr	r0, [r4, #8]
 800d63e:	f000 f909 	bl	800d854 <acc_calibration_a121_calibrate>
 800d642:	2800      	cmp	r0, #0
 800d644:	d0e9      	beq.n	800d61a <acc_sensor_calibrate+0x1e>
 800d646:	7b63      	ldrb	r3, [r4, #13]
 800d648:	2b0a      	cmp	r3, #10
 800d64a:	d001      	beq.n	800d650 <acc_sensor_calibrate+0x54>
 800d64c:	702e      	strb	r6, [r5, #0]
 800d64e:	e7e5      	b.n	800d61c <acc_sensor_calibrate+0x20>
 800d650:	2301      	movs	r3, #1
 800d652:	702b      	strb	r3, [r5, #0]
 800d654:	e7e2      	b.n	800d61c <acc_sensor_calibrate+0x20>
 800d656:	bf00      	nop
 800d658:	1337b00e 	.word	0x1337b00e
 800d65c:	24003210 	.word	0x24003210
 800d660:	0801b8ac 	.word	0x0801b8ac
 800d664:	0801b8c4 	.word	0x0801b8c4

0800d668 <acc_sensor_get_cal_info>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	b158      	cbz	r0, 800d684 <acc_sensor_get_cal_info+0x1c>
 800d66c:	460e      	mov	r6, r1
 800d66e:	4604      	mov	r4, r0
 800d670:	f000 fca4 	bl	800dfbc <acc_calibration_a121_validate_calibration>
 800d674:	4605      	mov	r5, r0
 800d676:	b128      	cbz	r0, 800d684 <acc_sensor_get_cal_info+0x1c>
 800d678:	8820      	ldrh	r0, [r4, #0]
 800d67a:	f004 fec5 	bl	8012408 <acc_alg_temp>
 800d67e:	8030      	strh	r0, [r6, #0]
 800d680:	4628      	mov	r0, r5
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	2000      	movs	r0, #0
 800d686:	4b04      	ldr	r3, [pc, #16]	@ (800d698 <acc_sensor_get_cal_info+0x30>)
 800d688:	4a04      	ldr	r2, [pc, #16]	@ (800d69c <acc_sensor_get_cal_info+0x34>)
 800d68a:	4605      	mov	r5, r0
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	4904      	ldr	r1, [pc, #16]	@ (800d6a0 <acc_sensor_get_cal_info+0x38>)
 800d690:	4798      	blx	r3
 800d692:	4628      	mov	r0, r5
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	bf00      	nop
 800d698:	24003210 	.word	0x24003210
 800d69c:	0801b8e8 	.word	0x0801b8e8
 800d6a0:	0801b8c4 	.word	0x0801b8c4

0800d6a4 <acc_sensor_prepare>:
 800d6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	b130      	cbz	r0, 800d6b8 <acc_sensor_prepare+0x14>
 800d6aa:	4616      	mov	r6, r2
 800d6ac:	461f      	mov	r7, r3
 800d6ae:	6802      	ldr	r2, [r0, #0]
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	4b26      	ldr	r3, [pc, #152]	@ (800d74c <acc_sensor_prepare+0xa8>)
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d008      	beq.n	800d6ca <acc_sensor_prepare+0x26>
 800d6b8:	4b25      	ldr	r3, [pc, #148]	@ (800d750 <acc_sensor_prepare+0xac>)
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	4a25      	ldr	r2, [pc, #148]	@ (800d754 <acc_sensor_prepare+0xb0>)
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	4925      	ldr	r1, [pc, #148]	@ (800d758 <acc_sensor_prepare+0xb4>)
 800d6c2:	4798      	blx	r3
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	b005      	add	sp, #20
 800d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ca:	b1fe      	cbz	r6, 800d70c <acc_sensor_prepare+0x68>
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	460d      	mov	r5, r1
 800d6d0:	f000 fc74 	bl	800dfbc <acc_calibration_a121_validate_calibration>
 800d6d4:	b1d0      	cbz	r0, 800d70c <acc_sensor_prepare+0x68>
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	f7ff fdd0 	bl	800d27c <acc_config_get_settings>
 800d6dc:	4605      	mov	r5, r0
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d0f1      	beq.n	800d6c6 <acc_sensor_prepare+0x22>
 800d6e2:	68a0      	ldr	r0, [r4, #8]
 800d6e4:	f002 f8d2 	bl	800f88c <acc_radar_engine_a121_is_sensor_running>
 800d6e8:	7320      	strb	r0, [r4, #12]
 800d6ea:	b1c0      	cbz	r0, 800d71e <acc_sensor_prepare+0x7a>
 800d6ec:	1da3      	adds	r3, r4, #6
 800d6ee:	9700      	str	r7, [sp, #0]
 800d6f0:	f104 0c04 	add.w	ip, r4, #4
 800d6f4:	6920      	ldr	r0, [r4, #16]
 800d6f6:	4632      	mov	r2, r6
 800d6f8:	9303      	str	r3, [sp, #12]
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6fe:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 800d702:	68a0      	ldr	r0, [r4, #8]
 800d704:	f002 f9ba 	bl	800fa7c <acc_radar_engine_a121_reconfigure>
 800d708:	b005      	add	sp, #20
 800d70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d70c:	4b10      	ldr	r3, [pc, #64]	@ (800d750 <acc_sensor_prepare+0xac>)
 800d70e:	2000      	movs	r0, #0
 800d710:	4a12      	ldr	r2, [pc, #72]	@ (800d75c <acc_sensor_prepare+0xb8>)
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	4910      	ldr	r1, [pc, #64]	@ (800d758 <acc_sensor_prepare+0xb4>)
 800d716:	4798      	blx	r3
 800d718:	2000      	movs	r0, #0
 800d71a:	b005      	add	sp, #20
 800d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71e:	68a0      	ldr	r0, [r4, #8]
 800d720:	f002 fa78 	bl	800fc14 <acc_radar_engine_a121_is_hibernate>
 800d724:	7b23      	ldrb	r3, [r4, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d1e0      	bne.n	800d6ec <acc_sensor_prepare+0x48>
 800d72a:	2800      	cmp	r0, #0
 800d72c:	d1de      	bne.n	800d6ec <acc_sensor_prepare+0x48>
 800d72e:	1da3      	adds	r3, r4, #6
 800d730:	9700      	str	r7, [sp, #0]
 800d732:	f104 0c04 	add.w	ip, r4, #4
 800d736:	6920      	ldr	r0, [r4, #16]
 800d738:	4632      	mov	r2, r6
 800d73a:	9303      	str	r3, [sp, #12]
 800d73c:	4629      	mov	r1, r5
 800d73e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d740:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 800d744:	68a0      	ldr	r0, [r4, #8]
 800d746:	f002 f8f3 	bl	800f930 <acc_radar_engine_a121_prepare>
 800d74a:	e7bc      	b.n	800d6c6 <acc_sensor_prepare+0x22>
 800d74c:	1337b00e 	.word	0x1337b00e
 800d750:	24003210 	.word	0x24003210
 800d754:	0801b8ac 	.word	0x0801b8ac
 800d758:	0801b8c4 	.word	0x0801b8c4
 800d75c:	0801b904 	.word	0x0801b904

0800d760 <acc_sensor_measure>:
 800d760:	b510      	push	{r4, lr}
 800d762:	b120      	cbz	r0, 800d76e <acc_sensor_measure+0xe>
 800d764:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a0 <acc_sensor_measure+0x40>)
 800d766:	4604      	mov	r4, r0
 800d768:	6802      	ldr	r2, [r0, #0]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d007      	beq.n	800d77e <acc_sensor_measure+0x1e>
 800d76e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7a4 <acc_sensor_measure+0x44>)
 800d770:	2000      	movs	r0, #0
 800d772:	4a0d      	ldr	r2, [pc, #52]	@ (800d7a8 <acc_sensor_measure+0x48>)
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	490d      	ldr	r1, [pc, #52]	@ (800d7ac <acc_sensor_measure+0x4c>)
 800d778:	4798      	blx	r3
 800d77a:	2000      	movs	r0, #0
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	7b03      	ldrb	r3, [r0, #12]
 800d780:	b93b      	cbnz	r3, 800d792 <acc_sensor_measure+0x32>
 800d782:	6880      	ldr	r0, [r0, #8]
 800d784:	f001 ffd4 	bl	800f730 <acc_radar_engine_a121_run_program>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d0f7      	beq.n	800d77c <acc_sensor_measure+0x1c>
 800d78c:	2301      	movs	r3, #1
 800d78e:	7323      	strb	r3, [r4, #12]
 800d790:	bd10      	pop	{r4, pc}
 800d792:	6901      	ldr	r1, [r0, #16]
 800d794:	6880      	ldr	r0, [r0, #8]
 800d796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d79a:	f001 bfcb 	b.w	800f734 <acc_radar_engine_a121_measure>
 800d79e:	bf00      	nop
 800d7a0:	1337b00e 	.word	0x1337b00e
 800d7a4:	24003210 	.word	0x24003210
 800d7a8:	0801b8ac 	.word	0x0801b8ac
 800d7ac:	0801b8c4 	.word	0x0801b8c4

0800d7b0 <acc_sensor_read>:
 800d7b0:	b530      	push	{r4, r5, lr}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	b128      	cbz	r0, 800d7c2 <acc_sensor_read+0x12>
 800d7b6:	460d      	mov	r5, r1
 800d7b8:	4b1b      	ldr	r3, [pc, #108]	@ (800d828 <acc_sensor_read+0x78>)
 800d7ba:	6801      	ldr	r1, [r0, #0]
 800d7bc:	4604      	mov	r4, r0
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	d008      	beq.n	800d7d4 <acc_sensor_read+0x24>
 800d7c2:	4b1a      	ldr	r3, [pc, #104]	@ (800d82c <acc_sensor_read+0x7c>)
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	4a1a      	ldr	r2, [pc, #104]	@ (800d830 <acc_sensor_read+0x80>)
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	491a      	ldr	r1, [pc, #104]	@ (800d834 <acc_sensor_read+0x84>)
 800d7cc:	4798      	blx	r3
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	b005      	add	sp, #20
 800d7d2:	bd30      	pop	{r4, r5, pc}
 800d7d4:	8883      	ldrh	r3, [r0, #4]
 800d7d6:	88c1      	ldrh	r1, [r0, #6]
 800d7d8:	440b      	add	r3, r1
 800d7da:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d7de:	d319      	bcc.n	800d814 <acc_sensor_read+0x64>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	6901      	ldr	r1, [r0, #16]
 800d7e4:	f10d 020f 	add.w	r2, sp, #15
 800d7e8:	6880      	ldr	r0, [r0, #8]
 800d7ea:	f88d 300f 	strb.w	r3, [sp, #15]
 800d7ee:	f001 ffdb 	bl	800f7a8 <acc_radar_engine_a121_verify_radar_data_ready>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d0ec      	beq.n	800d7d0 <acc_sensor_read+0x20>
 800d7f6:	462a      	mov	r2, r5
 800d7f8:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800d7fc:	6920      	ldr	r0, [r4, #16]
 800d7fe:	f002 f815 	bl	800f82c <acc_radar_engine_a121_update_buffer_header>
 800d802:	9500      	str	r5, [sp, #0]
 800d804:	88e3      	ldrh	r3, [r4, #6]
 800d806:	88a2      	ldrh	r2, [r4, #4]
 800d808:	6921      	ldr	r1, [r4, #16]
 800d80a:	68a0      	ldr	r0, [r4, #8]
 800d80c:	f001 ffaa 	bl	800f764 <acc_radar_engine_a121_transfer_data>
 800d810:	b005      	add	sp, #20
 800d812:	bd30      	pop	{r4, r5, pc}
 800d814:	4b05      	ldr	r3, [pc, #20]	@ (800d82c <acc_sensor_read+0x7c>)
 800d816:	2000      	movs	r0, #0
 800d818:	4a07      	ldr	r2, [pc, #28]	@ (800d838 <acc_sensor_read+0x88>)
 800d81a:	691b      	ldr	r3, [r3, #16]
 800d81c:	4905      	ldr	r1, [pc, #20]	@ (800d834 <acc_sensor_read+0x84>)
 800d81e:	4798      	blx	r3
 800d820:	2000      	movs	r0, #0
 800d822:	b005      	add	sp, #20
 800d824:	bd30      	pop	{r4, r5, pc}
 800d826:	bf00      	nop
 800d828:	1337b00e 	.word	0x1337b00e
 800d82c:	24003210 	.word	0x24003210
 800d830:	0801b8ac 	.word	0x0801b8ac
 800d834:	0801b8c4 	.word	0x0801b8c4
 800d838:	0801b918 	.word	0x0801b918

0800d83c <acc_sensor_connected>:
 800d83c:	2101      	movs	r1, #1
 800d83e:	f002 b823 	b.w	800f888 <acc_radar_engine_a121_check_asic_id>
 800d842:	bf00      	nop

0800d844 <acc_sensor_status>:
 800d844:	6880      	ldr	r0, [r0, #8]
 800d846:	f002 be47 	b.w	80104d8 <acc_sensor_status_a121>
 800d84a:	bf00      	nop

0800d84c <acc_sensor_validate_calibration>:
 800d84c:	b108      	cbz	r0, 800d852 <acc_sensor_validate_calibration+0x6>
 800d84e:	f000 bbb5 	b.w	800dfbc <acc_calibration_a121_validate_calibration>
 800d852:	4770      	bx	lr

0800d854 <acc_calibration_a121_calibrate>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	461c      	mov	r4, r3
 800d85a:	b091      	sub	sp, #68	@ 0x44
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	4605      	mov	r5, r0
 800d860:	460f      	mov	r7, r1
 800d862:	4616      	mov	r6, r2
 800d864:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d868:	2b0a      	cmp	r3, #10
 800d86a:	d859      	bhi.n	800d920 <acc_calibration_a121_calibrate+0xcc>
 800d86c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d870:	009d0065 	.word	0x009d0065
 800d874:	016200f5 	.word	0x016200f5
 800d878:	01da000b 	.word	0x01da000b
 800d87c:	02700210 	.word	0x02700210
 800d880:	02dc02a6 	.word	0x02dc02a6
 800d884:	0065      	.short	0x0065
 800d886:	f001 fc3b 	bl	800f100 <acc_a121_cal_session_ack_program>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	f000 808b 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800d890:	aa08      	add	r2, sp, #32
 800d892:	4639      	mov	r1, r7
 800d894:	4628      	mov	r0, r5
 800d896:	f108 0a0a 	add.w	sl, r8, #10
 800d89a:	f001 fc83 	bl	800f1a4 <acc_a121_cal_session_get_4_bba_vga_program_data>
 800d89e:	4629      	mov	r1, r5
 800d8a0:	48bf      	ldr	r0, [pc, #764]	@ (800dba0 <acc_calibration_a121_calibrate+0x34c>)
 800d8a2:	f04f 0900 	mov.w	r9, #0
 800d8a6:	f005 f837 	bl	8012918 <acc_diagnostic_log_scalar>
 800d8aa:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800dbac <acc_calibration_a121_calibrate+0x358>
 800d8ae:	49bd      	ldr	r1, [pc, #756]	@ (800dba4 <acc_calibration_a121_calibrate+0x350>)
 800d8b0:	48bd      	ldr	r0, [pc, #756]	@ (800dba8 <acc_calibration_a121_calibrate+0x354>)
 800d8b2:	f005 f829 	bl	8012908 <acc_diagnostic_log_array>
 800d8b6:	2150      	movs	r1, #80	@ 0x50
 800d8b8:	9808      	ldr	r0, [sp, #32]
 800d8ba:	f005 f83d 	bl	8012938 <acc_diagnostic_log_data_i16>
 800d8be:	9808      	ldr	r0, [sp, #32]
 800d8c0:	a905      	add	r1, sp, #20
 800d8c2:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800d8c6:	f000 fcdd 	bl	800e284 <acc_cal_algorithms_bba_cal_ctrl>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 800d8d0:	48b6      	ldr	r0, [pc, #728]	@ (800dbac <acc_calibration_a121_calibrate+0x358>)
 800d8d2:	f109 0901 	add.w	r9, r9, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d065      	beq.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800d8da:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800d8de:	f88b 200d 	strb.w	r2, [fp, #13]
 800d8e2:	f005 f819 	bl	8012918 <acc_diagnostic_log_scalar>
 800d8e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d8ea:	f1b9 0f0a 	cmp.w	r9, #10
 800d8ee:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800d8f2:	d1e4      	bne.n	800d8be <acc_calibration_a121_calibrate+0x6a>
 800d8f4:	48ae      	ldr	r0, [pc, #696]	@ (800dbb0 <acc_calibration_a121_calibrate+0x35c>)
 800d8f6:	f004 ffff 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800d8fa:	2060      	movs	r0, #96	@ 0x60
 800d8fc:	4bad      	ldr	r3, [pc, #692]	@ (800dbb4 <acc_calibration_a121_calibrate+0x360>)
 800d8fe:	4632      	mov	r2, r6
 800d900:	4639      	mov	r1, r7
 800d902:	e9cd 3000 	strd	r3, r0, [sp]
 800d906:	2300      	movs	r3, #0
 800d908:	4628      	mov	r0, r5
 800d90a:	f002 fb35 	bl	800ff78 <acc_sensor_protocol_a121_load_lut>
 800d90e:	2800      	cmp	r0, #0
 800d910:	f040 830d 	bne.w	800df2e <acc_calibration_a121_calibrate+0x6da>
 800d914:	4ba8      	ldr	r3, [pc, #672]	@ (800dbb8 <acc_calibration_a121_calibrate+0x364>)
 800d916:	4aa9      	ldr	r2, [pc, #676]	@ (800dbbc <acc_calibration_a121_calibrate+0x368>)
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	49a9      	ldr	r1, [pc, #676]	@ (800dbc0 <acc_calibration_a121_calibrate+0x36c>)
 800d91c:	4798      	blx	r3
 800d91e:	7823      	ldrb	r3, [r4, #0]
 800d920:	49a5      	ldr	r1, [pc, #660]	@ (800dbb8 <acc_calibration_a121_calibrate+0x364>)
 800d922:	2500      	movs	r5, #0
 800d924:	4aa7      	ldr	r2, [pc, #668]	@ (800dbc4 <acc_calibration_a121_calibrate+0x370>)
 800d926:	690e      	ldr	r6, [r1, #16]
 800d928:	4628      	mov	r0, r5
 800d92a:	49a5      	ldr	r1, [pc, #660]	@ (800dbc0 <acc_calibration_a121_calibrate+0x36c>)
 800d92c:	47b0      	blx	r6
 800d92e:	462b      	mov	r3, r5
 800d930:	4628      	mov	r0, r5
 800d932:	7023      	strb	r3, [r4, #0]
 800d934:	b011      	add	sp, #68	@ 0x44
 800d936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93a:	228c      	movs	r2, #140	@ 0x8c
 800d93c:	2100      	movs	r1, #0
 800d93e:	4640      	mov	r0, r8
 800d940:	f108 0a80 	add.w	sl, r8, #128	@ 0x80
 800d944:	f00a ffd0 	bl	80188e8 <memset>
 800d948:	f001 fc96 	bl	800f278 <acc_rss_integration_get_sensor_reference_frequency>
 800d94c:	ee07 0a90 	vmov	s15, r0
 800d950:	4651      	mov	r1, sl
 800d952:	a808      	add	r0, sp, #32
 800d954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d958:	edcd 7a08 	vstr	s15, [sp, #32]
 800d95c:	f004 fc06 	bl	801216c <acc_cpd_pll_divisors_calculate>
 800d960:	4681      	mov	r9, r0
 800d962:	4899      	ldr	r0, [pc, #612]	@ (800dbc8 <acc_calibration_a121_calibrate+0x374>)
 800d964:	f004 ffc8 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800d968:	4629      	mov	r1, r5
 800d96a:	488d      	ldr	r0, [pc, #564]	@ (800dba0 <acc_calibration_a121_calibrate+0x34c>)
 800d96c:	f004 ffd4 	bl	8012918 <acc_diagnostic_log_scalar>
 800d970:	f8b8 1082 	ldrh.w	r1, [r8, #130]	@ 0x82
 800d974:	4895      	ldr	r0, [pc, #596]	@ (800dbcc <acc_calibration_a121_calibrate+0x378>)
 800d976:	f004 ffcf 	bl	8012918 <acc_diagnostic_log_scalar>
 800d97a:	f8b8 1084 	ldrh.w	r1, [r8, #132]	@ 0x84
 800d97e:	4894      	ldr	r0, [pc, #592]	@ (800dbd0 <acc_calibration_a121_calibrate+0x37c>)
 800d980:	f004 ffca 	bl	8012918 <acc_diagnostic_log_scalar>
 800d984:	f8b8 1086 	ldrh.w	r1, [r8, #134]	@ 0x86
 800d988:	4892      	ldr	r0, [pc, #584]	@ (800dbd4 <acc_calibration_a121_calibrate+0x380>)
 800d98a:	f004 ffc5 	bl	8012918 <acc_diagnostic_log_scalar>
 800d98e:	4892      	ldr	r0, [pc, #584]	@ (800dbd8 <acc_calibration_a121_calibrate+0x384>)
 800d990:	f8b8 1080 	ldrh.w	r1, [r8, #128]	@ 0x80
 800d994:	f004 ffc0 	bl	8012918 <acc_diagnostic_log_scalar>
 800d998:	4890      	ldr	r0, [pc, #576]	@ (800dbdc <acc_calibration_a121_calibrate+0x388>)
 800d99a:	f004 ffad 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800d99e:	f1b9 0f00 	cmp.w	r9, #0
 800d9a2:	f040 82b8 	bne.w	800df16 <acc_calibration_a121_calibrate+0x6c2>
 800d9a6:	7823      	ldrb	r3, [r4, #0]
 800d9a8:	e7ba      	b.n	800d920 <acc_calibration_a121_calibrate+0xcc>
 800d9aa:	f001 fba9 	bl	800f100 <acc_a121_cal_session_ack_program>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d0f9      	beq.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800d9b2:	aa08      	add	r2, sp, #32
 800d9b4:	a805      	add	r0, sp, #20
 800d9b6:	ab03      	add	r3, sp, #12
 800d9b8:	4639      	mov	r1, r7
 800d9ba:	9201      	str	r2, [sp, #4]
 800d9bc:	f10d 020e 	add.w	r2, sp, #14
 800d9c0:	9000      	str	r0, [sp, #0]
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	f001 fbbe 	bl	800f144 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4875      	ldr	r0, [pc, #468]	@ (800dba0 <acc_calibration_a121_calibrate+0x34c>)
 800d9cc:	f004 ffa4 	bl	8012918 <acc_diagnostic_log_scalar>
 800d9d0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800d9d4:	4882      	ldr	r0, [pc, #520]	@ (800dbe0 <acc_calibration_a121_calibrate+0x38c>)
 800d9d6:	f004 ff9f 	bl	8012918 <acc_diagnostic_log_scalar>
 800d9da:	4972      	ldr	r1, [pc, #456]	@ (800dba4 <acc_calibration_a121_calibrate+0x350>)
 800d9dc:	4881      	ldr	r0, [pc, #516]	@ (800dbe4 <acc_calibration_a121_calibrate+0x390>)
 800d9de:	f004 ff93 	bl	8012908 <acc_diagnostic_log_array>
 800d9e2:	2110      	movs	r1, #16
 800d9e4:	9808      	ldr	r0, [sp, #32]
 800d9e6:	f004 ff9f 	bl	8012928 <acc_diagnostic_log_data_u16>
 800d9ea:	ab04      	add	r3, sp, #16
 800d9ec:	9a08      	ldr	r2, [sp, #32]
 800d9ee:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800d9f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d9f6:	f000 faed 	bl	800dfd4 <acc_cal_algorithms_pll_cbank>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d0d3      	beq.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800d9fe:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800da02:	f000 fe77 	bl	800e6f4 <acc_cal_algorithms_wavelet_duration_p1>
 800da06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da0a:	4606      	mov	r6, r0
 800da0c:	4876      	ldr	r0, [pc, #472]	@ (800dbe8 <acc_calibration_a121_calibrate+0x394>)
 800da0e:	f004 ff83 	bl	8012918 <acc_diagnostic_log_scalar>
 800da12:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800da16:	4875      	ldr	r0, [pc, #468]	@ (800dbec <acc_calibration_a121_calibrate+0x398>)
 800da18:	f004 ff7e 	bl	8012918 <acc_diagnostic_log_scalar>
 800da1c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800da20:	4873      	ldr	r0, [pc, #460]	@ (800dbf0 <acc_calibration_a121_calibrate+0x39c>)
 800da22:	f004 ff79 	bl	8012918 <acc_diagnostic_log_scalar>
 800da26:	4631      	mov	r1, r6
 800da28:	4872      	ldr	r0, [pc, #456]	@ (800dbf4 <acc_calibration_a121_calibrate+0x3a0>)
 800da2a:	f004 ff75 	bl	8012918 <acc_diagnostic_log_scalar>
 800da2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800da32:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800da36:	4628      	mov	r0, r5
 800da38:	f8a8 3000 	strh.w	r3, [r8]
 800da3c:	f8a8 6024 	strh.w	r6, [r8, #36]	@ 0x24
 800da40:	f8a8 1002 	strh.w	r1, [r8, #2]
 800da44:	f001 f9c6 	bl	800edd4 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 800da48:	4605      	mov	r5, r0
 800da4a:	2302      	movs	r3, #2
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	d0aa      	beq.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800da50:	4628      	mov	r0, r5
 800da52:	7023      	strb	r3, [r4, #0]
 800da54:	b011      	add	sp, #68	@ 0x44
 800da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5a:	f001 fb51 	bl	800f100 <acc_a121_cal_session_ack_program>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d0a1      	beq.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800da62:	a808      	add	r0, sp, #32
 800da64:	ab04      	add	r3, sp, #16
 800da66:	aa05      	add	r2, sp, #20
 800da68:	4639      	mov	r1, r7
 800da6a:	9000      	str	r0, [sp, #0]
 800da6c:	4628      	mov	r0, r5
 800da6e:	f001 fb81 	bl	800f174 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 800da72:	494c      	ldr	r1, [pc, #304]	@ (800dba4 <acc_calibration_a121_calibrate+0x350>)
 800da74:	4860      	ldr	r0, [pc, #384]	@ (800dbf8 <acc_calibration_a121_calibrate+0x3a4>)
 800da76:	f004 ff47 	bl	8012908 <acc_diagnostic_log_array>
 800da7a:	2110      	movs	r1, #16
 800da7c:	9805      	ldr	r0, [sp, #20]
 800da7e:	f004 ff5b 	bl	8012938 <acc_diagnostic_log_data_i16>
 800da82:	a903      	add	r1, sp, #12
 800da84:	9805      	ldr	r0, [sp, #20]
 800da86:	f000 fadf 	bl	800e048 <acc_cal_algorithms_pll_ibias>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d08b      	beq.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800da8e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da92:	485a      	ldr	r0, [pc, #360]	@ (800dbfc <acc_calibration_a121_calibrate+0x3a8>)
 800da94:	f004 ff40 	bl	8012918 <acc_diagnostic_log_scalar>
 800da98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800da9c:	4858      	ldr	r0, [pc, #352]	@ (800dc00 <acc_calibration_a121_calibrate+0x3ac>)
 800da9e:	f8a8 3004 	strh.w	r3, [r8, #4]
 800daa2:	f004 ff29 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800daa6:	4629      	mov	r1, r5
 800daa8:	483d      	ldr	r0, [pc, #244]	@ (800dba0 <acc_calibration_a121_calibrate+0x34c>)
 800daaa:	f004 ff35 	bl	8012918 <acc_diagnostic_log_scalar>
 800daae:	493d      	ldr	r1, [pc, #244]	@ (800dba4 <acc_calibration_a121_calibrate+0x350>)
 800dab0:	4854      	ldr	r0, [pc, #336]	@ (800dc04 <acc_calibration_a121_calibrate+0x3b0>)
 800dab2:	f004 ff29 	bl	8012908 <acc_diagnostic_log_array>
 800dab6:	2130      	movs	r1, #48	@ 0x30
 800dab8:	9808      	ldr	r0, [sp, #32]
 800daba:	f004 ff35 	bl	8012928 <acc_diagnostic_log_data_u16>
 800dabe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800dac2:	4851      	ldr	r0, [pc, #324]	@ (800dc08 <acc_calibration_a121_calibrate+0x3b4>)
 800dac4:	f004 ff28 	bl	8012918 <acc_diagnostic_log_scalar>
 800dac8:	f10d 020e 	add.w	r2, sp, #14
 800dacc:	9908      	ldr	r1, [sp, #32]
 800dace:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800dad2:	f000 fb05 	bl	800e0e0 <acc_cal_algorithms_vfast2_ldo>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	f43f af65 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dadc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800dae0:	484a      	ldr	r0, [pc, #296]	@ (800dc0c <acc_calibration_a121_calibrate+0x3b8>)
 800dae2:	f004 ff19 	bl	8012918 <acc_diagnostic_log_scalar>
 800dae6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800daea:	4849      	ldr	r0, [pc, #292]	@ (800dc10 <acc_calibration_a121_calibrate+0x3bc>)
 800daec:	f8a8 300a 	strh.w	r3, [r8, #10]
 800daf0:	f004 ff02 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800daf4:	2301      	movs	r3, #1
 800daf6:	a802      	add	r0, sp, #8
 800daf8:	f44f 5c7e 	mov.w	ip, #16256	@ 0x3f80
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	4632      	mov	r2, r6
 800db00:	9000      	str	r0, [sp, #0]
 800db02:	4639      	mov	r1, r7
 800db04:	2300      	movs	r3, #0
 800db06:	4628      	mov	r0, r5
 800db08:	f8ad c008 	strh.w	ip, [sp, #8]
 800db0c:	f002 fa34 	bl	800ff78 <acc_sensor_protocol_a121_load_lut>
 800db10:	b920      	cbnz	r0, 800db1c <acc_calibration_a121_calibrate+0x2c8>
 800db12:	4b29      	ldr	r3, [pc, #164]	@ (800dbb8 <acc_calibration_a121_calibrate+0x364>)
 800db14:	4a3f      	ldr	r2, [pc, #252]	@ (800dc14 <acc_calibration_a121_calibrate+0x3c0>)
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	4929      	ldr	r1, [pc, #164]	@ (800dbc0 <acc_calibration_a121_calibrate+0x36c>)
 800db1a:	4798      	blx	r3
 800db1c:	4628      	mov	r0, r5
 800db1e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800db22:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800db26:	f001 f973 	bl	800ee10 <acc_a121_cal_session_start_3_delay_cbank_program>
 800db2a:	4605      	mov	r5, r0
 800db2c:	2303      	movs	r3, #3
 800db2e:	2d00      	cmp	r5, #0
 800db30:	d18e      	bne.n	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800db32:	e738      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800db34:	2300      	movs	r3, #0
 800db36:	f8ad 3014 	strh.w	r3, [sp, #20]
 800db3a:	f001 fae1 	bl	800f100 <acc_a121_cal_session_ack_program>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f43f af31 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800db44:	aa08      	add	r2, sp, #32
 800db46:	4639      	mov	r1, r7
 800db48:	4628      	mov	r0, r5
 800db4a:	f001 fb23 	bl	800f194 <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800db4e:	4629      	mov	r1, r5
 800db50:	4813      	ldr	r0, [pc, #76]	@ (800dba0 <acc_calibration_a121_calibrate+0x34c>)
 800db52:	f004 fee1 	bl	8012918 <acc_diagnostic_log_scalar>
 800db56:	4913      	ldr	r1, [pc, #76]	@ (800dba4 <acc_calibration_a121_calibrate+0x350>)
 800db58:	482f      	ldr	r0, [pc, #188]	@ (800dc18 <acc_calibration_a121_calibrate+0x3c4>)
 800db5a:	f004 fed5 	bl	8012908 <acc_diagnostic_log_array>
 800db5e:	2120      	movs	r1, #32
 800db60:	9808      	ldr	r0, [sp, #32]
 800db62:	f004 fee9 	bl	8012938 <acc_diagnostic_log_data_i16>
 800db66:	a905      	add	r1, sp, #20
 800db68:	9808      	ldr	r0, [sp, #32]
 800db6a:	f000 fb05 	bl	800e178 <acc_cal_algorithms_delay_cbank>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f43f af19 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800db74:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800db78:	4828      	ldr	r0, [pc, #160]	@ (800dc1c <acc_calibration_a121_calibrate+0x3c8>)
 800db7a:	f004 fecd 	bl	8012918 <acc_diagnostic_log_scalar>
 800db7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800db82:	4827      	ldr	r0, [pc, #156]	@ (800dc20 <acc_calibration_a121_calibrate+0x3cc>)
 800db84:	f8a8 3006 	strh.w	r3, [r8, #6]
 800db88:	f004 feb6 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800db8c:	4628      	mov	r0, r5
 800db8e:	f001 f96f 	bl	800ee70 <acc_a121_cal_session_start_4_bba_vga_program>
 800db92:	4605      	mov	r5, r0
 800db94:	2304      	movs	r3, #4
 800db96:	2d00      	cmp	r5, #0
 800db98:	f47f af5a 	bne.w	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800db9c:	e703      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800db9e:	bf00      	nop
 800dba0:	0801b930 	.word	0x0801b930
 800dba4:	080208d4 	.word	0x080208d4
 800dba8:	0801badc 	.word	0x0801badc
 800dbac:	24000010 	.word	0x24000010
 800dbb0:	0801baf4 	.word	0x0801baf4
 800dbb4:	0801e364 	.word	0x0801e364
 800dbb8:	24003210 	.word	0x24003210
 800dbbc:	0801bb0c 	.word	0x0801bb0c
 800dbc0:	0801ba84 	.word	0x0801ba84
 800dbc4:	0801bdac 	.word	0x0801bdac
 800dbc8:	0801c9b4 	.word	0x0801c9b4
 800dbcc:	0801b93c 	.word	0x0801b93c
 800dbd0:	0801b94c 	.word	0x0801b94c
 800dbd4:	0801b958 	.word	0x0801b958
 800dbd8:	0801b964 	.word	0x0801b964
 800dbdc:	0801b974 	.word	0x0801b974
 800dbe0:	0801b984 	.word	0x0801b984
 800dbe4:	0801b990 	.word	0x0801b990
 800dbe8:	0801b9ac 	.word	0x0801b9ac
 800dbec:	0801b9b8 	.word	0x0801b9b8
 800dbf0:	0801b9c0 	.word	0x0801b9c0
 800dbf4:	0801b9cc 	.word	0x0801b9cc
 800dbf8:	0801b9d8 	.word	0x0801b9d8
 800dbfc:	0801b9f8 	.word	0x0801b9f8
 800dc00:	0801ba04 	.word	0x0801ba04
 800dc04:	0801ba1c 	.word	0x0801ba1c
 800dc08:	0801ba30 	.word	0x0801ba30
 800dc0c:	0801ba3c 	.word	0x0801ba3c
 800dc10:	0801ba48 	.word	0x0801ba48
 800dc14:	0801ba60 	.word	0x0801ba60
 800dc18:	0801ba98 	.word	0x0801ba98
 800dc1c:	0801babc 	.word	0x0801babc
 800dc20:	0801bac8 	.word	0x0801bac8
 800dc24:	f001 fa6c 	bl	800f100 <acc_a121_cal_session_ack_program>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	f43f aebc 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dc2e:	aa08      	add	r2, sp, #32
 800dc30:	4639      	mov	r1, r7
 800dc32:	4628      	mov	r0, r5
 800dc34:	f001 fabe 	bl	800f1b4 <acc_a121_cal_session_get_5_area_index_program_data>
 800dc38:	49c3      	ldr	r1, [pc, #780]	@ (800df48 <acc_calibration_a121_calibrate+0x6f4>)
 800dc3a:	48c4      	ldr	r0, [pc, #784]	@ (800df4c <acc_calibration_a121_calibrate+0x6f8>)
 800dc3c:	f004 fe64 	bl	8012908 <acc_diagnostic_log_array>
 800dc40:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800dc44:	9808      	ldr	r0, [sp, #32]
 800dc46:	f004 fe77 	bl	8012938 <acc_diagnostic_log_data_i16>
 800dc4a:	a905      	add	r1, sp, #20
 800dc4c:	9808      	ldr	r0, [sp, #32]
 800dc4e:	f000 fb95 	bl	800e37c <acc_cal_algorithms_area_index>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	f43f aea7 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dc58:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800dc5c:	48bc      	ldr	r0, [pc, #752]	@ (800df50 <acc_calibration_a121_calibrate+0x6fc>)
 800dc5e:	f004 fe5b 	bl	8012918 <acc_diagnostic_log_scalar>
 800dc62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800dc66:	48bb      	ldr	r0, [pc, #748]	@ (800df54 <acc_calibration_a121_calibrate+0x700>)
 800dc68:	f8a8 3008 	strh.w	r3, [r8, #8]
 800dc6c:	f004 fe44 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800dc70:	aa08      	add	r2, sp, #32
 800dc72:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 800dc76:	2160      	movs	r1, #96	@ 0x60
 800dc78:	f004 fb66 	bl	8012348 <acc_dll_calculate_area_settings>
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	a908      	add	r1, sp, #32
 800dc80:	f001 f94a 	bl	800ef18 <acc_a121_cal_session_start_6_tx_freq_program>
 800dc84:	4605      	mov	r5, r0
 800dc86:	2306      	movs	r3, #6
 800dc88:	2d00      	cmp	r5, #0
 800dc8a:	f47f aee1 	bne.w	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800dc8e:	e68a      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dc90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc94:	f8ad 3010 	strh.w	r3, [sp, #16]
 800dc98:	f001 fa32 	bl	800f100 <acc_a121_cal_session_ack_program>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	f43f ae82 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dca2:	f001 fae9 	bl	800f278 <acc_rss_integration_get_sensor_reference_frequency>
 800dca6:	f8df c310 	ldr.w	ip, [pc, #784]	@ 800dfb8 <acc_calibration_a121_calibrate+0x764>
 800dcaa:	4606      	mov	r6, r0
 800dcac:	4639      	mov	r1, r7
 800dcae:	f8b8 3080 	ldrh.w	r3, [r8, #128]	@ 0x80
 800dcb2:	aa05      	add	r2, sp, #20
 800dcb4:	fbac 7606 	umull	r7, r6, ip, r6
 800dcb8:	4628      	mov	r0, r5
 800dcba:	4fa7      	ldr	r7, [pc, #668]	@ (800df58 <acc_calibration_a121_calibrate+0x704>)
 800dcbc:	f10d 0b1c 	add.w	fp, sp, #28
 800dcc0:	09b6      	lsrs	r6, r6, #6
 800dcc2:	46b9      	mov	r9, r7
 800dcc4:	fb06 f603 	mul.w	r6, r6, r3
 800dcc8:	f001 fa7e 	bl	800f1c8 <acc_a121_cal_session_get_6_tx_freq_program_data>
 800dccc:	499e      	ldr	r1, [pc, #632]	@ (800df48 <acc_calibration_a121_calibrate+0x6f4>)
 800dcce:	48a3      	ldr	r0, [pc, #652]	@ (800df5c <acc_calibration_a121_calibrate+0x708>)
 800dcd0:	f004 fe1a 	bl	8012908 <acc_diagnostic_log_array>
 800dcd4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800dcd8:	9805      	ldr	r0, [sp, #20]
 800dcda:	f004 fe2d 	bl	8012938 <acc_diagnostic_log_data_i16>
 800dcde:	aa04      	add	r2, sp, #16
 800dce0:	4630      	mov	r0, r6
 800dce2:	ab08      	add	r3, sp, #32
 800dce4:	9200      	str	r2, [sp, #0]
 800dce6:	2630      	movs	r6, #48	@ 0x30
 800dce8:	4a9d      	ldr	r2, [pc, #628]	@ (800df60 <acc_calibration_a121_calibrate+0x70c>)
 800dcea:	9905      	ldr	r1, [sp, #20]
 800dcec:	f000 fd42 	bl	800e774 <acc_cal_algorithms_tx_freq_ctrl>
 800dcf0:	4682      	mov	sl, r0
 800dcf2:	733e      	strb	r6, [r7, #12]
 800dcf4:	3601      	adds	r6, #1
 800dcf6:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 800dcfa:	4648      	mov	r0, r9
 800dcfc:	b2f6      	uxtb	r6, r6
 800dcfe:	f004 fe0b 	bl	8012918 <acc_diagnostic_log_scalar>
 800dd02:	2e38      	cmp	r6, #56	@ 0x38
 800dd04:	d1f5      	bne.n	800dcf2 <acc_calibration_a121_calibrate+0x49e>
 800dd06:	f1ba 0f00 	cmp.w	sl, #0
 800dd0a:	f43f ae4c 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dd0e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800dd12:	4894      	ldr	r0, [pc, #592]	@ (800df64 <acc_calibration_a121_calibrate+0x710>)
 800dd14:	f004 fe00 	bl	8012918 <acc_diagnostic_log_scalar>
 800dd18:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800dd1c:	4892      	ldr	r0, [pc, #584]	@ (800df68 <acc_calibration_a121_calibrate+0x714>)
 800dd1e:	f8a8 3022 	strh.w	r3, [r8, #34]	@ 0x22
 800dd22:	f004 fde9 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800dd26:	4628      	mov	r0, r5
 800dd28:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800dd2c:	f001 f984 	bl	800f038 <acc_a121_cal_session_start_7_rx_freq_program>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	f43f ae38 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dd36:	f108 0358 	add.w	r3, r8, #88	@ 0x58
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	9805      	ldr	r0, [sp, #20]
 800dd40:	f000 fbe8 	bl	800e514 <acc_cal_algorithms_iq_imbalance>
 800dd44:	4605      	mov	r5, r0
 800dd46:	2307      	movs	r3, #7
 800dd48:	2d00      	cmp	r5, #0
 800dd4a:	f47f ae81 	bne.w	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800dd4e:	e62a      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dd50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd54:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dd58:	f001 f9d2 	bl	800f100 <acc_a121_cal_session_ack_program>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	f43f ae22 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dd62:	aa08      	add	r2, sp, #32
 800dd64:	4639      	mov	r1, r7
 800dd66:	4628      	mov	r0, r5
 800dd68:	f001 fa30 	bl	800f1cc <acc_a121_cal_session_get_7_rx_freq_program_data>
 800dd6c:	4976      	ldr	r1, [pc, #472]	@ (800df48 <acc_calibration_a121_calibrate+0x6f4>)
 800dd6e:	487f      	ldr	r0, [pc, #508]	@ (800df6c <acc_calibration_a121_calibrate+0x718>)
 800dd70:	f004 fdca 	bl	8012908 <acc_diagnostic_log_array>
 800dd74:	2110      	movs	r1, #16
 800dd76:	9808      	ldr	r0, [sp, #32]
 800dd78:	f004 fdde 	bl	8012938 <acc_diagnostic_log_data_i16>
 800dd7c:	aa05      	add	r2, sp, #20
 800dd7e:	f108 0158 	add.w	r1, r8, #88	@ 0x58
 800dd82:	9808      	ldr	r0, [sp, #32]
 800dd84:	f000 fc70 	bl	800e668 <acc_cal_algorithms_rx_freq_ctrl>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f43f ae0c 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800dd8e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800dd92:	4877      	ldr	r0, [pc, #476]	@ (800df70 <acc_calibration_a121_calibrate+0x71c>)
 800dd94:	f004 fdc0 	bl	8012918 <acc_diagnostic_log_scalar>
 800dd98:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800dd9c:	4875      	ldr	r0, [pc, #468]	@ (800df74 <acc_calibration_a121_calibrate+0x720>)
 800dd9e:	f8a8 3020 	strh.w	r3, [r8, #32]
 800dda2:	f004 fda9 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800dda6:	4628      	mov	r0, r5
 800dda8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ddac:	f001 f962 	bl	800f074 <acc_a121_cal_session_start_8_phase_enhancement_program>
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	2308      	movs	r3, #8
 800ddb4:	2d00      	cmp	r5, #0
 800ddb6:	f47f ae4b 	bne.w	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800ddba:	e5f4      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800ddbc:	f001 f9a0 	bl	800f100 <acc_a121_cal_session_ack_program>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	f43f adf0 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800ddc6:	aa08      	add	r2, sp, #32
 800ddc8:	4639      	mov	r1, r7
 800ddca:	4628      	mov	r0, r5
 800ddcc:	f108 0626 	add.w	r6, r8, #38	@ 0x26
 800ddd0:	f001 fa04 	bl	800f1dc <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 800ddd4:	495c      	ldr	r1, [pc, #368]	@ (800df48 <acc_calibration_a121_calibrate+0x6f4>)
 800ddd6:	4868      	ldr	r0, [pc, #416]	@ (800df78 <acc_calibration_a121_calibrate+0x724>)
 800ddd8:	f004 fd96 	bl	8012908 <acc_diagnostic_log_array>
 800dddc:	2160      	movs	r1, #96	@ 0x60
 800ddde:	9808      	ldr	r0, [sp, #32]
 800dde0:	f004 fdaa 	bl	8012938 <acc_diagnostic_log_data_i16>
 800dde4:	4631      	mov	r1, r6
 800dde6:	f108 0256 	add.w	r2, r8, #86	@ 0x56
 800ddea:	9808      	ldr	r0, [sp, #32]
 800ddec:	f000 fd50 	bl	800e890 <acc_cal_algorithms_phase_enhancement>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f43f add8 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800ddf6:	4954      	ldr	r1, [pc, #336]	@ (800df48 <acc_calibration_a121_calibrate+0x6f4>)
 800ddf8:	4860      	ldr	r0, [pc, #384]	@ (800df7c <acc_calibration_a121_calibrate+0x728>)
 800ddfa:	f004 fd85 	bl	8012908 <acc_diagnostic_log_array>
 800ddfe:	4630      	mov	r0, r6
 800de00:	2118      	movs	r1, #24
 800de02:	f004 fd99 	bl	8012938 <acc_diagnostic_log_data_i16>
 800de06:	f9b8 1056 	ldrsh.w	r1, [r8, #86]	@ 0x56
 800de0a:	485d      	ldr	r0, [pc, #372]	@ (800df80 <acc_calibration_a121_calibrate+0x72c>)
 800de0c:	f004 fd84 	bl	8012918 <acc_diagnostic_log_scalar>
 800de10:	485c      	ldr	r0, [pc, #368]	@ (800df84 <acc_calibration_a121_calibrate+0x730>)
 800de12:	f004 fd71 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800de16:	4628      	mov	r0, r5
 800de18:	f001 f96e 	bl	800f0f8 <acc_a121_cal_session_start_9_pulseshaper_program>
 800de1c:	4605      	mov	r5, r0
 800de1e:	2309      	movs	r3, #9
 800de20:	2d00      	cmp	r5, #0
 800de22:	f47f ae15 	bne.w	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800de26:	e5be      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800de28:	f001 f96a 	bl	800f100 <acc_a121_cal_session_ack_program>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f43f adba 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800de32:	ab04      	add	r3, sp, #16
 800de34:	aa08      	add	r2, sp, #32
 800de36:	4639      	mov	r1, r7
 800de38:	4628      	mov	r0, r5
 800de3a:	f001 f9d7 	bl	800f1ec <acc_a121_cal_session_get_9_pulseshaper_program_data>
 800de3e:	4942      	ldr	r1, [pc, #264]	@ (800df48 <acc_calibration_a121_calibrate+0x6f4>)
 800de40:	4851      	ldr	r0, [pc, #324]	@ (800df88 <acc_calibration_a121_calibrate+0x734>)
 800de42:	f004 fd61 	bl	8012908 <acc_diagnostic_log_array>
 800de46:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800de4a:	9808      	ldr	r0, [sp, #32]
 800de4c:	f004 fd6c 	bl	8012928 <acc_diagnostic_log_data_u16>
 800de50:	a905      	add	r1, sp, #20
 800de52:	9808      	ldr	r0, [sp, #32]
 800de54:	f000 fe78 	bl	800eb48 <acc_cal_algorithms_pulseshaper_wavelet>
 800de58:	2800      	cmp	r0, #0
 800de5a:	f43f ada4 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800de5e:	9b07      	ldr	r3, [sp, #28]
 800de60:	484a      	ldr	r0, [pc, #296]	@ (800df8c <acc_calibration_a121_calibrate+0x738>)
 800de62:	f8c8 3064 	str.w	r3, [r8, #100]	@ 0x64
 800de66:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800de6a:	e9c8 2117 	strd	r2, r1, [r8, #92]	@ 0x5c
 800de6e:	f004 fd53 	bl	8012918 <acc_diagnostic_log_scalar>
 800de72:	f8d8 105c 	ldr.w	r1, [r8, #92]	@ 0x5c
 800de76:	4846      	ldr	r0, [pc, #280]	@ (800df90 <acc_calibration_a121_calibrate+0x73c>)
 800de78:	f004 fd4e 	bl	8012918 <acc_diagnostic_log_scalar>
 800de7c:	f8d8 1064 	ldr.w	r1, [r8, #100]	@ 0x64
 800de80:	4844      	ldr	r0, [pc, #272]	@ (800df94 <acc_calibration_a121_calibrate+0x740>)
 800de82:	f004 fd49 	bl	8012918 <acc_diagnostic_log_scalar>
 800de86:	4844      	ldr	r0, [pc, #272]	@ (800df98 <acc_calibration_a121_calibrate+0x744>)
 800de88:	f004 fd36 	bl	80128f8 <acc_diagnostic_log_set_scope>
 800de8c:	492e      	ldr	r1, [pc, #184]	@ (800df48 <acc_calibration_a121_calibrate+0x6f4>)
 800de8e:	4843      	ldr	r0, [pc, #268]	@ (800df9c <acc_calibration_a121_calibrate+0x748>)
 800de90:	f004 fd3a 	bl	8012908 <acc_diagnostic_log_array>
 800de94:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800de98:	9804      	ldr	r0, [sp, #16]
 800de9a:	f004 fd45 	bl	8012928 <acc_diagnostic_log_data_u16>
 800de9e:	a908      	add	r1, sp, #32
 800dea0:	9804      	ldr	r0, [sp, #16]
 800dea2:	f000 fe99 	bl	800ebd8 <acc_cal_algorithms_pulseshaper_supply>
 800dea6:	4605      	mov	r5, r0
 800dea8:	2800      	cmp	r0, #0
 800deaa:	f43f ad7c 	beq.w	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800deae:	9a08      	ldr	r2, [sp, #32]
 800deb0:	218c      	movs	r1, #140	@ 0x8c
 800deb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb4:	4640      	mov	r0, r8
 800deb6:	f8c8 2068 	str.w	r2, [r8, #104]	@ 0x68
 800deba:	f8c8 306c 	str.w	r3, [r8, #108]	@ 0x6c
 800debe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800dec2:	e9c8 231c 	strd	r2, r3, [r8, #112]	@ 0x70
 800dec6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800deca:	e9c8 231e 	strd	r2, r3, [r8, #120]	@ 0x78
 800dece:	f003 fe05 	bl	8011adc <acc_alg_basic_util_crc32>
 800ded2:	f8d8 1068 	ldr.w	r1, [r8, #104]	@ 0x68
 800ded6:	f8c8 008c 	str.w	r0, [r8, #140]	@ 0x8c
 800deda:	4831      	ldr	r0, [pc, #196]	@ (800dfa0 <acc_calibration_a121_calibrate+0x74c>)
 800dedc:	f004 fd1c 	bl	8012918 <acc_diagnostic_log_scalar>
 800dee0:	f8d8 106c 	ldr.w	r1, [r8, #108]	@ 0x6c
 800dee4:	482f      	ldr	r0, [pc, #188]	@ (800dfa4 <acc_calibration_a121_calibrate+0x750>)
 800dee6:	f004 fd17 	bl	8012918 <acc_diagnostic_log_scalar>
 800deea:	f8d8 1070 	ldr.w	r1, [r8, #112]	@ 0x70
 800deee:	482e      	ldr	r0, [pc, #184]	@ (800dfa8 <acc_calibration_a121_calibrate+0x754>)
 800def0:	f004 fd12 	bl	8012918 <acc_diagnostic_log_scalar>
 800def4:	f8d8 1074 	ldr.w	r1, [r8, #116]	@ 0x74
 800def8:	482c      	ldr	r0, [pc, #176]	@ (800dfac <acc_calibration_a121_calibrate+0x758>)
 800defa:	f004 fd0d 	bl	8012918 <acc_diagnostic_log_scalar>
 800defe:	f8d8 1078 	ldr.w	r1, [r8, #120]	@ 0x78
 800df02:	482b      	ldr	r0, [pc, #172]	@ (800dfb0 <acc_calibration_a121_calibrate+0x75c>)
 800df04:	f004 fd08 	bl	8012918 <acc_diagnostic_log_scalar>
 800df08:	f8d8 107c 	ldr.w	r1, [r8, #124]	@ 0x7c
 800df0c:	4829      	ldr	r0, [pc, #164]	@ (800dfb4 <acc_calibration_a121_calibrate+0x760>)
 800df0e:	f004 fd03 	bl	8012918 <acc_diagnostic_log_scalar>
 800df12:	230a      	movs	r3, #10
 800df14:	e50c      	b.n	800d930 <acc_calibration_a121_calibrate+0xdc>
 800df16:	4653      	mov	r3, sl
 800df18:	4628      	mov	r0, r5
 800df1a:	4632      	mov	r2, r6
 800df1c:	4639      	mov	r1, r7
 800df1e:	f000 fee1 	bl	800ece4 <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 800df22:	4605      	mov	r5, r0
 800df24:	2301      	movs	r3, #1
 800df26:	2d00      	cmp	r5, #0
 800df28:	f47f ad92 	bne.w	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800df2c:	e53b      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800df2e:	4628      	mov	r0, r5
 800df30:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800df34:	f108 010c 	add.w	r1, r8, #12
 800df38:	f000 ff9e 	bl	800ee78 <acc_a121_cal_session_start_5_area_index_program>
 800df3c:	4605      	mov	r5, r0
 800df3e:	2305      	movs	r3, #5
 800df40:	2d00      	cmp	r5, #0
 800df42:	f47f ad85 	bne.w	800da50 <acc_calibration_a121_calibrate+0x1fc>
 800df46:	e52e      	b.n	800d9a6 <acc_calibration_a121_calibrate+0x152>
 800df48:	080208d4 	.word	0x080208d4
 800df4c:	0801bb38 	.word	0x0801bb38
 800df50:	0801bb5c 	.word	0x0801bb5c
 800df54:	0801bb68 	.word	0x0801bb68
 800df58:	24000020 	.word	0x24000020
 800df5c:	0801bb84 	.word	0x0801bb84
 800df60:	039b2820 	.word	0x039b2820
 800df64:	0801bba8 	.word	0x0801bba8
 800df68:	0801bbb8 	.word	0x0801bbb8
 800df6c:	0801bbd4 	.word	0x0801bbd4
 800df70:	0801bbf8 	.word	0x0801bbf8
 800df74:	0801bc08 	.word	0x0801bc08
 800df78:	0801bc28 	.word	0x0801bc28
 800df7c:	0801bc54 	.word	0x0801bc54
 800df80:	0801bc80 	.word	0x0801bc80
 800df84:	0801bc9c 	.word	0x0801bc9c
 800df88:	0801bcb4 	.word	0x0801bcb4
 800df8c:	0801bcc8 	.word	0x0801bcc8
 800df90:	0801bcdc 	.word	0x0801bcdc
 800df94:	0801bcf0 	.word	0x0801bcf0
 800df98:	0801bd00 	.word	0x0801bd00
 800df9c:	0801bd18 	.word	0x0801bd18
 800dfa0:	0801bd2c 	.word	0x0801bd2c
 800dfa4:	0801bd40 	.word	0x0801bd40
 800dfa8:	0801bd54 	.word	0x0801bd54
 800dfac:	0801bd68 	.word	0x0801bd68
 800dfb0:	0801bd7c 	.word	0x0801bd7c
 800dfb4:	0801bd94 	.word	0x0801bd94
 800dfb8:	10624dd3 	.word	0x10624dd3

0800dfbc <acc_calibration_a121_validate_calibration>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	218c      	movs	r1, #140	@ 0x8c
 800dfc2:	f003 fd8b 	bl	8011adc <acc_alg_basic_util_crc32>
 800dfc6:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800dfca:	1a18      	subs	r0, r3, r0
 800dfcc:	fab0 f080 	clz	r0, r0
 800dfd0:	0940      	lsrs	r0, r0, #5
 800dfd2:	bd10      	pop	{r4, pc}

0800dfd4 <acc_cal_algorithms_pll_cbank>:
 800dfd4:	b4f0      	push	{r4, r5, r6, r7}
 800dfd6:	2400      	movs	r4, #0
 800dfd8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800dfdc:	46a4      	mov	ip, r4
 800dfde:	fa40 f504 	asr.w	r5, r0, r4
 800dfe2:	b2a6      	uxth	r6, r4
 800dfe4:	07ed      	lsls	r5, r5, #31
 800dfe6:	d50a      	bpl.n	800dffe <acc_cal_algorithms_pll_cbank+0x2a>
 800dfe8:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 800dfec:	1a6d      	subs	r5, r5, r1
 800dfee:	2d00      	cmp	r5, #0
 800dff0:	bfb8      	it	lt
 800dff2:	426d      	neglt	r5, r5
 800dff4:	b2ad      	uxth	r5, r5
 800dff6:	42bd      	cmp	r5, r7
 800dff8:	d201      	bcs.n	800dffe <acc_cal_algorithms_pll_cbank+0x2a>
 800dffa:	462f      	mov	r7, r5
 800dffc:	46b4      	mov	ip, r6
 800dffe:	3401      	adds	r4, #1
 800e000:	2c10      	cmp	r4, #16
 800e002:	d1ec      	bne.n	800dfde <acc_cal_algorithms_pll_cbank+0xa>
 800e004:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e008:	290d      	cmp	r1, #13
 800e00a:	d80c      	bhi.n	800e026 <acc_cal_algorithms_pll_cbank+0x52>
 800e00c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e010:	f241 3487 	movw	r4, #4999	@ 0x1387
 800e014:	4461      	add	r1, ip
 800e016:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 800e01a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e01e:	8869      	ldrh	r1, [r5, #2]
 800e020:	1a52      	subs	r2, r2, r1
 800e022:	42a2      	cmp	r2, r4
 800e024:	dc02      	bgt.n	800e02c <acc_cal_algorithms_pll_cbank+0x58>
 800e026:	2000      	movs	r0, #0
 800e028:	bcf0      	pop	{r4, r5, r6, r7}
 800e02a:	4770      	bx	lr
 800e02c:	88aa      	ldrh	r2, [r5, #4]
 800e02e:	1a89      	subs	r1, r1, r2
 800e030:	42a1      	cmp	r1, r4
 800e032:	ddf8      	ble.n	800e026 <acc_cal_algorithms_pll_cbank+0x52>
 800e034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e038:	4290      	cmp	r0, r2
 800e03a:	d0f4      	beq.n	800e026 <acc_cal_algorithms_pll_cbank+0x52>
 800e03c:	2001      	movs	r0, #1
 800e03e:	f8a3 c000 	strh.w	ip, [r3]
 800e042:	bcf0      	pop	{r4, r5, r6, r7}
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop

0800e048 <acc_cal_algorithms_pll_ibias>:
 800e048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e04c:	2400      	movs	r4, #0
 800e04e:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800e052:	f1a0 0e02 	sub.w	lr, r0, #2
 800e056:	4625      	mov	r5, r4
 800e058:	46a4      	mov	ip, r4
 800e05a:	e023      	b.n	800e0a4 <acc_cal_algorithms_pll_ibias+0x5c>
 800e05c:	fb03 f303 	mul.w	r3, r3, r3
 800e060:	f930 8014 	ldrsh.w	r8, [r0, r4, lsl #1]
 800e064:	f93e 9014 	ldrsh.w	r9, [lr, r4, lsl #1]
 800e068:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e06c:	f508 727a 	add.w	r2, r8, #1000	@ 0x3e8
 800e070:	eba8 0809 	sub.w	r8, r8, r9
 800e074:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800e078:	3bc8      	subs	r3, #200	@ 0xc8
 800e07a:	4598      	cmp	r8, r3
 800e07c:	f509 7916 	add.w	r9, r9, #600	@ 0x258
 800e080:	db28      	blt.n	800e0d4 <acc_cal_algorithms_pll_ibias+0x8c>
 800e082:	45c8      	cmp	r8, r9
 800e084:	dc26      	bgt.n	800e0d4 <acc_cal_algorithms_pll_ibias+0x8c>
 800e086:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800e08a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800e08e:	b29b      	uxth	r3, r3
 800e090:	42bb      	cmp	r3, r7
 800e092:	d204      	bcs.n	800e09e <acc_cal_algorithms_pll_ibias+0x56>
 800e094:	00b5      	lsls	r5, r6, #2
 800e096:	461f      	mov	r7, r3
 800e098:	f04f 0c01 	mov.w	ip, #1
 800e09c:	b2ad      	uxth	r5, r5
 800e09e:	2e0f      	cmp	r6, #15
 800e0a0:	d00f      	beq.n	800e0c2 <acc_cal_algorithms_pll_ibias+0x7a>
 800e0a2:	3401      	adds	r4, #1
 800e0a4:	1e63      	subs	r3, r4, #1
 800e0a6:	b2a6      	uxth	r6, r4
 800e0a8:	2c00      	cmp	r4, #0
 800e0aa:	d1d7      	bne.n	800e05c <acc_cal_algorithms_pll_ibias+0x14>
 800e0ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e0b0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bfb8      	it	lt
 800e0b8:	425b      	neglt	r3, r3
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	42bb      	cmp	r3, r7
 800e0be:	d3e9      	bcc.n	800e094 <acc_cal_algorithms_pll_ibias+0x4c>
 800e0c0:	e7ef      	b.n	800e0a2 <acc_cal_algorithms_pll_ibias+0x5a>
 800e0c2:	f1bc 0f00 	cmp.w	ip, #0
 800e0c6:	d002      	beq.n	800e0ce <acc_cal_algorithms_pll_ibias+0x86>
 800e0c8:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 800e0cc:	800d      	strh	r5, [r1, #0]
 800e0ce:	4660      	mov	r0, ip
 800e0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0d4:	f04f 0c00 	mov.w	ip, #0
 800e0d8:	4660      	mov	r0, ip
 800e0da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0de:	bf00      	nop

0800e0e0 <acc_cal_algorithms_vfast2_ldo>:
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	880c      	ldrh	r4, [r1, #0]
 800e0ec:	9201      	str	r2, [sp, #4]
 800e0ee:	1b1b      	subs	r3, r3, r4
 800e0f0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800e0f4:	db39      	blt.n	800e16a <acc_cal_algorithms_vfast2_ldo+0x8a>
 800e0f6:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800e0fa:	4b1e      	ldr	r3, [pc, #120]	@ (800e174 <acc_cal_algorithms_vfast2_ldo+0x94>)
 800e0fc:	2500      	movs	r5, #0
 800e0fe:	4681      	mov	r9, r0
 800e100:	fba3 3808 	umull	r3, r8, r3, r8
 800e104:	460e      	mov	r6, r1
 800e106:	46a2      	mov	sl, r4
 800e108:	46ab      	mov	fp, r5
 800e10a:	2210      	movs	r2, #16
 800e10c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e110:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800e114:	2001      	movs	r0, #1
 800e116:	e009      	b.n	800e12c <acc_cal_algorithms_vfast2_ldo+0x4c>
 800e118:	3201      	adds	r2, #1
 800e11a:	458e      	cmp	lr, r1
 800e11c:	bf38      	it	cc
 800e11e:	2000      	movcc	r0, #0
 800e120:	4445      	add	r5, r8
 800e122:	b292      	uxth	r2, r2
 800e124:	2a40      	cmp	r2, #64	@ 0x40
 800e126:	d019      	beq.n	800e15c <acc_cal_algorithms_vfast2_ldo+0x7c>
 800e128:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800e12c:	eba4 0309 	sub.w	r3, r4, r9
 800e130:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 800e134:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 800e13e:	bfb8      	it	lt
 800e140:	425b      	neglt	r3, r3
 800e142:	b29b      	uxth	r3, r3
 800e144:	4563      	cmp	r3, ip
 800e146:	d201      	bcs.n	800e14c <acc_cal_algorithms_vfast2_ldo+0x6c>
 800e148:	469c      	mov	ip, r3
 800e14a:	4693      	mov	fp, r2
 800e14c:	42bc      	cmp	r4, r7
 800e14e:	d9e3      	bls.n	800e118 <acc_cal_algorithms_vfast2_ldo+0x38>
 800e150:	3201      	adds	r2, #1
 800e152:	2000      	movs	r0, #0
 800e154:	4445      	add	r5, r8
 800e156:	b292      	uxth	r2, r2
 800e158:	2a40      	cmp	r2, #64	@ 0x40
 800e15a:	d1e5      	bne.n	800e128 <acc_cal_algorithms_vfast2_ldo+0x48>
 800e15c:	b130      	cbz	r0, 800e16c <acc_cal_algorithms_vfast2_ldo+0x8c>
 800e15e:	9b01      	ldr	r3, [sp, #4]
 800e160:	f8a3 b000 	strh.w	fp, [r3]
 800e164:	b003      	add	sp, #12
 800e166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16a:	2000      	movs	r0, #0
 800e16c:	b003      	add	sp, #12
 800e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e172:	bf00      	nop
 800e174:	aaaaaaab 	.word	0xaaaaaaab

0800e178 <acc_cal_algorithms_delay_cbank>:
 800e178:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e17e:	460e      	mov	r6, r1
 800e180:	b0b1      	sub	sp, #196	@ 0xc4
 800e182:	2401      	movs	r4, #1
 800e184:	2700      	movs	r7, #0
 800e186:	4605      	mov	r5, r0
 800e188:	4611      	mov	r1, r2
 800e18a:	e006      	b.n	800e19a <acc_cal_algorithms_delay_cbank+0x22>
 800e18c:	428a      	cmp	r2, r1
 800e18e:	db01      	blt.n	800e194 <acc_cal_algorithms_delay_cbank+0x1c>
 800e190:	4627      	mov	r7, r4
 800e192:	4611      	mov	r1, r2
 800e194:	3401      	adds	r4, #1
 800e196:	2c20      	cmp	r4, #32
 800e198:	d00c      	beq.n	800e1b4 <acc_cal_algorithms_delay_cbank+0x3c>
 800e19a:	4613      	mov	r3, r2
 800e19c:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800e1a0:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 800e1a4:	4413      	add	r3, r2
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e1ac:	d9ee      	bls.n	800e18c <acc_cal_algorithms_delay_cbank+0x14>
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	b031      	add	sp, #196	@ 0xc4
 800e1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b4:	2f07      	cmp	r7, #7
 800e1b6:	d85e      	bhi.n	800e276 <acc_cal_algorithms_delay_cbank+0xfe>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f107 0208 	add.w	r2, r7, #8
 800e1be:	1ad2      	subs	r2, r2, r3
 800e1c0:	af03      	add	r7, sp, #12
 800e1c2:	b302      	cbz	r2, 800e206 <acc_cal_algorithms_delay_cbank+0x8e>
 800e1c4:	18d5      	adds	r5, r2, r3
 800e1c6:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e1d0:	f934 0b02 	ldrsh.w	r0, [r4], #2
 800e1d4:	ee06 3a90 	vmov	s13, r3
 800e1d8:	310c      	adds	r1, #12
 800e1da:	ee07 0a10 	vmov	s14, r0
 800e1de:	fb03 f003 	mul.w	r0, r3, r3
 800e1e2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800e1e6:	42a5      	cmp	r5, r4
 800e1e8:	ee07 0a90 	vmov	s15, r0
 800e1ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1f0:	f103 0301 	add.w	r3, r3, #1
 800e1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1f8:	ed41 6a01 	vstr	s13, [r1, #-4]
 800e1fc:	ed01 7a03 	vstr	s14, [r1, #-12]
 800e200:	ed41 7a02 	vstr	s15, [r1, #-8]
 800e204:	d1e4      	bne.n	800e1d0 <acc_cal_algorithms_delay_cbank+0x58>
 800e206:	4638      	mov	r0, r7
 800e208:	4669      	mov	r1, sp
 800e20a:	f003 fc83 	bl	8011b14 <acc_alg_least_square_fit>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d0cd      	beq.n	800e1ae <acc_cal_algorithms_delay_cbank+0x36>
 800e212:	ed9d 6a00 	vldr	s12, [sp]
 800e216:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e21e:	d0c6      	beq.n	800e1ae <acc_cal_algorithms_delay_cbank+0x36>
 800e220:	eddd 6a01 	vldr	s13, [sp, #4]
 800e224:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22c:	d0bf      	beq.n	800e1ae <acc_cal_algorithms_delay_cbank+0x36>
 800e22e:	eddd 7a02 	vldr	s15, [sp, #8]
 800e232:	eef1 7a67 	vneg.f32	s15, s15
 800e236:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e23a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e242:	dbb4      	blt.n	800e1ae <acc_cal_algorithms_delay_cbank+0x36>
 800e244:	eef1 6a66 	vneg.f32	s13, s13
 800e248:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800e24c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e254:	d5ab      	bpl.n	800e1ae <acc_cal_algorithms_delay_cbank+0x36>
 800e256:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e25a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e262:	ee17 3a90 	vmov	r3, s15
 800e266:	b29b      	uxth	r3, r3
 800e268:	2b3f      	cmp	r3, #63	@ 0x3f
 800e26a:	d8a0      	bhi.n	800e1ae <acc_cal_algorithms_delay_cbank+0x36>
 800e26c:	085b      	lsrs	r3, r3, #1
 800e26e:	f083 0310 	eor.w	r3, r3, #16
 800e272:	8033      	strh	r3, [r6, #0]
 800e274:	e79c      	b.n	800e1b0 <acc_cal_algorithms_delay_cbank+0x38>
 800e276:	2f17      	cmp	r7, #23
 800e278:	f1a7 0307 	sub.w	r3, r7, #7
 800e27c:	d99d      	bls.n	800e1ba <acc_cal_algorithms_delay_cbank+0x42>
 800e27e:	f1c3 0220 	rsb	r2, r3, #32
 800e282:	e79d      	b.n	800e1c0 <acc_cal_algorithms_delay_cbank+0x48>

0800e284 <acc_cal_algorithms_bba_cal_ctrl>:
 800e284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e288:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 800e378 <acc_cal_algorithms_bba_cal_ctrl+0xf4>
 800e28c:	b082      	sub	sp, #8
 800e28e:	f04f 0e00 	mov.w	lr, #0
 800e292:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800e296:	4605      	mov	r5, r0
 800e298:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e29c:	9001      	str	r0, [sp, #4]
 800e29e:	46f0      	mov	r8, lr
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	4666      	mov	r6, ip
 800e2a4:	f06f 041b 	mvn.w	r4, #27
 800e2a8:	e014      	b.n	800e2d4 <acc_cal_algorithms_bba_cal_ctrl+0x50>
 800e2aa:	4297      	cmp	r7, r2
 800e2ac:	dd01      	ble.n	800e2b2 <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 800e2ae:	4617      	mov	r7, r2
 800e2b0:	46a6      	mov	lr, r4
 800e2b2:	f104 0308 	add.w	r3, r4, #8
 800e2b6:	2c1c      	cmp	r4, #28
 800e2b8:	462a      	mov	r2, r5
 800e2ba:	b21c      	sxth	r4, r3
 800e2bc:	d016      	beq.n	800e2ec <acc_cal_algorithms_bba_cal_ctrl+0x68>
 800e2be:	8813      	ldrh	r3, [r2, #0]
 800e2c0:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	b21b      	sxth	r3, r3
 800e2c8:	4298      	cmp	r0, r3
 800e2ca:	bfa8      	it	ge
 800e2cc:	4618      	movge	r0, r3
 800e2ce:	429e      	cmp	r6, r3
 800e2d0:	bfb8      	it	lt
 800e2d2:	461e      	movlt	r6, r3
 800e2d4:	2a00      	cmp	r2, #0
 800e2d6:	dae8      	bge.n	800e2aa <acc_cal_algorithms_bba_cal_ctrl+0x26>
 800e2d8:	4594      	cmp	ip, r2
 800e2da:	daea      	bge.n	800e2b2 <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 800e2dc:	f104 0308 	add.w	r3, r4, #8
 800e2e0:	2c1c      	cmp	r4, #28
 800e2e2:	4694      	mov	ip, r2
 800e2e4:	46a0      	mov	r8, r4
 800e2e6:	462a      	mov	r2, r5
 800e2e8:	b21c      	sxth	r4, r3
 800e2ea:	d1e8      	bne.n	800e2be <acc_cal_algorithms_bba_cal_ctrl+0x3a>
 800e2ec:	4b21      	ldr	r3, [pc, #132]	@ (800e374 <acc_cal_algorithms_bba_cal_ctrl+0xf0>)
 800e2ee:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800e2f2:	4433      	add	r3, r6
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	bf98      	it	ls
 800e2fa:	2800      	cmpls	r0, #0
 800e2fc:	bf14      	ite	ne
 800e2fe:	2001      	movne	r0, #1
 800e300:	2000      	moveq	r0, #0
 800e302:	d003      	beq.n	800e30c <acc_cal_algorithms_bba_cal_ctrl+0x88>
 800e304:	2000      	movs	r0, #0
 800e306:	b002      	add	sp, #8
 800e308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30c:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 800e310:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800e314:	d011      	beq.n	800e33a <acc_cal_algorithms_bba_cal_ctrl+0xb6>
 800e316:	429f      	cmp	r7, r3
 800e318:	d02a      	beq.n	800e370 <acc_cal_algorithms_bba_cal_ctrl+0xec>
 800e31a:	ebae 0e08 	sub.w	lr, lr, r8
 800e31e:	f1be 0f08 	cmp.w	lr, #8
 800e322:	d1f0      	bne.n	800e306 <acc_cal_algorithms_bba_cal_ctrl+0x82>
 800e324:	eba7 070c 	sub.w	r7, r7, ip
 800e328:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800e32c:	fb9c f7f7 	sdiv	r7, ip, r7
 800e330:	eba8 0e07 	sub.w	lr, r8, r7
 800e334:	fa0f fe8e 	sxth.w	lr, lr
 800e338:	e001      	b.n	800e33e <acc_cal_algorithms_bba_cal_ctrl+0xba>
 800e33a:	429f      	cmp	r7, r3
 800e33c:	d0e3      	beq.n	800e306 <acc_cal_algorithms_bba_cal_ctrl+0x82>
 800e33e:	f1be 0f00 	cmp.w	lr, #0
 800e342:	db08      	blt.n	800e356 <acc_cal_algorithms_bba_cal_ctrl+0xd2>
 800e344:	f1be 0f1f 	cmp.w	lr, #31
 800e348:	dcdd      	bgt.n	800e306 <acc_cal_algorithms_bba_cal_ctrl+0x82>
 800e34a:	2001      	movs	r0, #1
 800e34c:	f8a1 e000 	strh.w	lr, [r1]
 800e350:	b002      	add	sp, #8
 800e352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e356:	f1ce 0e00 	rsb	lr, lr, #0
 800e35a:	fa1f fe8e 	uxth.w	lr, lr
 800e35e:	f1be 0f1f 	cmp.w	lr, #31
 800e362:	d8d0      	bhi.n	800e306 <acc_cal_algorithms_bba_cal_ctrl+0x82>
 800e364:	f04e 0e20 	orr.w	lr, lr, #32
 800e368:	2001      	movs	r0, #1
 800e36a:	f8a1 e000 	strh.w	lr, [r1]
 800e36e:	e7ca      	b.n	800e306 <acc_cal_algorithms_bba_cal_ctrl+0x82>
 800e370:	46c6      	mov	lr, r8
 800e372:	e7e4      	b.n	800e33e <acc_cal_algorithms_bba_cal_ctrl+0xba>
 800e374:	ffffd8f0 	.word	0xffffd8f0
 800e378:	ffff8000 	.word	0xffff8000

0800e37c <acc_cal_algorithms_area_index>:
 800e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e380:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 800e384:	2200      	movs	r2, #0
 800e386:	4c5f      	ldr	r4, [pc, #380]	@ (800e504 <acc_cal_algorithms_area_index+0x188>)
 800e388:	ab05      	add	r3, sp, #20
 800e38a:	f10d 09f4 	add.w	r9, sp, #244	@ 0xf4
 800e38e:	4f5e      	ldr	r7, [pc, #376]	@ (800e508 <acc_cal_algorithms_area_index+0x18c>)
 800e390:	9304      	str	r3, [sp, #16]
 800e392:	9302      	str	r3, [sp, #8]
 800e394:	f500 63c0 	add.w	r3, r0, #1536	@ 0x600
 800e398:	4d5c      	ldr	r5, [pc, #368]	@ (800e50c <acc_cal_algorithms_area_index+0x190>)
 800e39a:	4e5d      	ldr	r6, [pc, #372]	@ (800e510 <acc_cal_algorithms_area_index+0x194>)
 800e39c:	9105      	str	r1, [sp, #20]
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	e9cd 0200 	strd	r0, r2, [sp]
 800e3a4:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e3a8:	f8dd 8000 	ldr.w	r8, [sp]
 800e3ac:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 800e3b0:	f938 0b04 	ldrsh.w	r0, [r8], #4
 800e3b4:	f003 fb22 	bl	80119fc <acc_alg_atan2_q16>
 800e3b8:	ab26      	add	r3, sp, #152	@ 0x98
 800e3ba:	f84a 0b04 	str.w	r0, [sl], #4
 800e3be:	459a      	cmp	sl, r3
 800e3c0:	d1f4      	bne.n	800e3ac <acc_cal_algorithms_area_index+0x30>
 800e3c2:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 800e3c6:	f8dd 8000 	ldr.w	r8, [sp]
 800e3ca:	46da      	mov	sl, fp
 800e3cc:	f9b8 1062 	ldrsh.w	r1, [r8, #98]	@ 0x62
 800e3d0:	f108 0804 	add.w	r8, r8, #4
 800e3d4:	f9b8 005c 	ldrsh.w	r0, [r8, #92]	@ 0x5c
 800e3d8:	f003 fb10 	bl	80119fc <acc_alg_atan2_q16>
 800e3dc:	f84a 0f04 	str.w	r0, [sl, #4]!
 800e3e0:	45d1      	cmp	r9, sl
 800e3e2:	d1f3      	bne.n	800e3cc <acc_cal_algorithms_area_index+0x50>
 800e3e4:	ab3e      	add	r3, sp, #248	@ 0xf8
 800e3e6:	9a01      	ldr	r2, [sp, #4]
 800e3e8:	f10d 0c34 	add.w	ip, sp, #52	@ 0x34
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	1898      	adds	r0, r3, r2
 800e3f0:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800e3f4:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 800e3f8:	1a9b      	subs	r3, r3, r2
 800e3fa:	42a3      	cmp	r3, r4
 800e3fc:	dd5c      	ble.n	800e4b8 <acc_cal_algorithms_area_index+0x13c>
 800e3fe:	443b      	add	r3, r7
 800e400:	42a3      	cmp	r3, r4
 800e402:	dcfc      	bgt.n	800e3fe <acc_cal_algorithms_area_index+0x82>
 800e404:	2b00      	cmp	r3, #0
 800e406:	bfb8      	it	lt
 800e408:	425b      	neglt	r3, r3
 800e40a:	4299      	cmp	r1, r3
 800e40c:	f840 3b04 	str.w	r3, [r0], #4
 800e410:	bfb8      	it	lt
 800e412:	4619      	movlt	r1, r3
 800e414:	45cb      	cmp	fp, r9
 800e416:	d1eb      	bne.n	800e3f0 <acc_cal_algorithms_area_index+0x74>
 800e418:	9a01      	ldr	r2, [sp, #4]
 800e41a:	1049      	asrs	r1, r1, #1
 800e41c:	9b00      	ldr	r3, [sp, #0]
 800e41e:	3260      	adds	r2, #96	@ 0x60
 800e420:	33c0      	adds	r3, #192	@ 0xc0
 800e422:	9201      	str	r2, [sp, #4]
 800e424:	9a02      	ldr	r2, [sp, #8]
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	f842 1f04 	str.w	r1, [r2, #4]!
 800e42c:	9202      	str	r2, [sp, #8]
 800e42e:	9a03      	ldr	r2, [sp, #12]
 800e430:	4293      	cmp	r3, r2
 800e432:	d1b7      	bne.n	800e3a4 <acc_cal_algorithms_area_index+0x28>
 800e434:	2300      	movs	r3, #0
 800e436:	9c04      	ldr	r4, [sp, #16]
 800e438:	4618      	mov	r0, r3
 800e43a:	4619      	mov	r1, r3
 800e43c:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800e440:	428a      	cmp	r2, r1
 800e442:	dd01      	ble.n	800e448 <acc_cal_algorithms_area_index+0xcc>
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	3301      	adds	r3, #1
 800e44a:	2b08      	cmp	r3, #8
 800e44c:	d1f6      	bne.n	800e43c <acc_cal_algorithms_area_index+0xc0>
 800e44e:	ab06      	add	r3, sp, #24
 800e450:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800e454:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 800e458:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800e45c:	ab3e      	add	r3, sp, #248	@ 0xf8
 800e45e:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 800e462:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800e466:	f851 3b04 	ldr.w	r3, [r1], #4
 800e46a:	42a3      	cmp	r3, r4
 800e46c:	bfac      	ite	ge
 800e46e:	2300      	movge	r3, #0
 800e470:	2301      	movlt	r3, #1
 800e472:	f802 3f01 	strb.w	r3, [r2, #1]!
 800e476:	4290      	cmp	r0, r2
 800e478:	7613      	strb	r3, [r2, #24]
 800e47a:	d1f4      	bne.n	800e466 <acc_cal_algorithms_area_index+0xea>
 800e47c:	2200      	movs	r2, #0
 800e47e:	2301      	movs	r3, #1
 800e480:	4611      	mov	r1, r2
 800e482:	b311      	cbz	r1, 800e4ca <acc_cal_algorithms_area_index+0x14e>
 800e484:	a826      	add	r0, sp, #152	@ 0x98
 800e486:	5cc0      	ldrb	r0, [r0, r3]
 800e488:	b1c8      	cbz	r0, 800e4be <acc_cal_algorithms_area_index+0x142>
 800e48a:	3201      	adds	r2, #1
 800e48c:	3301      	adds	r3, #1
 800e48e:	2b30      	cmp	r3, #48	@ 0x30
 800e490:	d1f7      	bne.n	800e482 <acc_cal_algorithms_area_index+0x106>
 800e492:	f1a2 030c 	sub.w	r3, r2, #12
 800e496:	2b08      	cmp	r3, #8
 800e498:	d82d      	bhi.n	800e4f6 <acc_cal_algorithms_area_index+0x17a>
 800e49a:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800e49e:	2a17      	cmp	r2, #23
 800e4a0:	d902      	bls.n	800e4a8 <acc_cal_algorithms_area_index+0x12c>
 800e4a2:	3a18      	subs	r2, #24
 800e4a4:	2a17      	cmp	r2, #23
 800e4a6:	d8fc      	bhi.n	800e4a2 <acc_cal_algorithms_area_index+0x126>
 800e4a8:	9b05      	ldr	r3, [sp, #20]
 800e4aa:	2001      	movs	r0, #1
 800e4ac:	801a      	strh	r2, [r3, #0]
 800e4ae:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800e4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b6:	4433      	add	r3, r6
 800e4b8:	42ab      	cmp	r3, r5
 800e4ba:	dbfc      	blt.n	800e4b6 <acc_cal_algorithms_area_index+0x13a>
 800e4bc:	e7a2      	b.n	800e404 <acc_cal_algorithms_area_index+0x88>
 800e4be:	2a0b      	cmp	r2, #11
 800e4c0:	d8e7      	bhi.n	800e492 <acc_cal_algorithms_area_index+0x116>
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	2b30      	cmp	r3, #48	@ 0x30
 800e4c6:	d0f2      	beq.n	800e4ae <acc_cal_algorithms_area_index+0x132>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	1e59      	subs	r1, r3, #1
 800e4cc:	1c58      	adds	r0, r3, #1
 800e4ce:	ab26      	add	r3, sp, #152	@ 0x98
 800e4d0:	4419      	add	r1, r3
 800e4d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e4d6:	1e43      	subs	r3, r0, #1
 800e4d8:	b12c      	cbz	r4, 800e4e6 <acc_cal_algorithms_area_index+0x16a>
 800e4da:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 800e4de:	b914      	cbnz	r4, 800e4e6 <acc_cal_algorithms_area_index+0x16a>
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	e7d2      	b.n	800e48c <acc_cal_algorithms_area_index+0x110>
 800e4e6:	2830      	cmp	r0, #48	@ 0x30
 800e4e8:	d001      	beq.n	800e4ee <acc_cal_algorithms_area_index+0x172>
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	e7f1      	b.n	800e4d2 <acc_cal_algorithms_area_index+0x156>
 800e4ee:	f1a2 030c 	sub.w	r3, r2, #12
 800e4f2:	2b08      	cmp	r3, #8
 800e4f4:	d904      	bls.n	800e500 <acc_cal_algorithms_area_index+0x184>
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800e4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e500:	0852      	lsrs	r2, r2, #1
 800e502:	e7d1      	b.n	800e4a8 <acc_cal_algorithms_area_index+0x12c>
 800e504:	0003243f 	.word	0x0003243f
 800e508:	fff9b782 	.word	0xfff9b782
 800e50c:	fffcdbc1 	.word	0xfffcdbc1
 800e510:	0006487e 	.word	0x0006487e

0800e514 <acc_cal_algorithms_iq_imbalance>:
 800e514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e518:	ed2d 8b02 	vpush	{d8}
 800e51c:	b0bd      	sub	sp, #244	@ 0xf4
 800e51e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800e522:	4680      	mov	r8, r0
 800e524:	4689      	mov	r9, r1
 800e526:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 800e52a:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 800e52e:	eddf 5a4d 	vldr	s11, [pc, #308]	@ 800e664 <acc_cal_algorithms_iq_imbalance+0x150>
 800e532:	a804      	add	r0, sp, #16
 800e534:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 800e538:	2700      	movs	r7, #0
 800e53a:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800e53e:	3404      	adds	r4, #4
 800e540:	f934 5c04 	ldrsh.w	r5, [r4, #-4]
 800e544:	fb06 f606 	mul.w	r6, r6, r6
 800e548:	42a1      	cmp	r1, r4
 800e54a:	fb05 6505 	mla	r5, r5, r5, r6
 800e54e:	442f      	add	r7, r5
 800e550:	d1f3      	bne.n	800e53a <acc_cal_algorithms_iq_imbalance+0x26>
 800e552:	ee07 7a90 	vmov	s15, r7
 800e556:	31c0      	adds	r1, #192	@ 0xc0
 800e558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e55c:	458c      	cmp	ip, r1
 800e55e:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800e562:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800e566:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800e56a:	ece0 7a01 	vstmia	r0!, {s15}
 800e56e:	d1e1      	bne.n	800e534 <acc_cal_algorithms_iq_imbalance+0x20>
 800e570:	2a00      	cmp	r2, #0
 800e572:	d071      	beq.n	800e658 <acc_cal_algorithms_iq_imbalance+0x144>
 800e574:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800e578:	461c      	mov	r4, r3
 800e57a:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 800e57e:	eb02 0509 	add.w	r5, r2, r9
 800e582:	ae24      	add	r6, sp, #144	@ 0x90
 800e584:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 800e588:	ab0c      	add	r3, sp, #48	@ 0x30
 800e58a:	a904      	add	r1, sp, #16
 800e58c:	f9b2 0000 	ldrsh.w	r0, [r2]
 800e590:	330c      	adds	r3, #12
 800e592:	ecf1 5a01 	vldmia	r1!, {s11}
 800e596:	32c0      	adds	r2, #192	@ 0xc0
 800e598:	ee06 0a10 	vmov	s12, r0
 800e59c:	f932 0cbe 	ldrsh.w	r0, [r2, #-190]
 800e5a0:	ee06 0a90 	vmov	s13, r0
 800e5a4:	f932 0c60 	ldrsh.w	r0, [r2, #-96]
 800e5a8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800e5ac:	ee07 0a10 	vmov	s14, r0
 800e5b0:	f932 0c5e 	ldrsh.w	r0, [r2, #-94]
 800e5b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e5b8:	ee07 0a90 	vmov	s15, r0
 800e5bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5c0:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5c8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e5cc:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e5d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e5d4:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e5d8:	ee67 5a07 	vmul.f32	s11, s14, s14
 800e5dc:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e5e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5e4:	ed03 5a03 	vstr	s10, [r3, #-12]
 800e5e8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800e5ec:	edc3 5a15 	vstr	s11, [r3, #84]	@ 0x54
 800e5f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e5f4:	ed03 6a02 	vstr	s12, [r3, #-8]
 800e5f8:	ed83 7a16 	vstr	s14, [r3, #88]	@ 0x58
 800e5fc:	ed43 6a01 	vstr	s13, [r3, #-4]
 800e600:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
 800e604:	429e      	cmp	r6, r3
 800e606:	d1c1      	bne.n	800e58c <acc_cal_algorithms_iq_imbalance+0x78>
 800e608:	2210      	movs	r2, #16
 800e60a:	a901      	add	r1, sp, #4
 800e60c:	a80c      	add	r0, sp, #48	@ 0x30
 800e60e:	f003 fa81 	bl	8011b14 <acc_alg_least_square_fit>
 800e612:	b310      	cbz	r0, 800e65a <acc_cal_algorithms_iq_imbalance+0x146>
 800e614:	eddd 7a01 	vldr	s15, [sp, #4]
 800e618:	f109 0901 	add.w	r9, r9, #1
 800e61c:	ed9d 7a02 	vldr	s14, [sp, #8]
 800e620:	4620      	mov	r0, r4
 800e622:	eef1 6ae7 	vsqrt.f32	s13, s15
 800e626:	eddd 5a03 	vldr	s11, [sp, #12]
 800e62a:	3402      	adds	r4, #2
 800e62c:	ee67 7a88 	vmul.f32	s15, s15, s16
 800e630:	ee27 6a07 	vmul.f32	s12, s14, s14
 800e634:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e638:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e63c:	eeb1 1ae7 	vsqrt.f32	s2, s15
 800e640:	eec8 0aa6 	vdiv.f32	s1, s17, s13
 800e644:	eeb0 0a66 	vmov.f32	s0, s13
 800e648:	ee20 1a81 	vmul.f32	s2, s1, s2
 800e64c:	ee60 0a87 	vmul.f32	s1, s1, s14
 800e650:	f004 f9a6 	bl	80129a0 <acc_alg_iq_imb_comp_to_fix_point>
 800e654:	454d      	cmp	r5, r9
 800e656:	d195      	bne.n	800e584 <acc_cal_algorithms_iq_imbalance+0x70>
 800e658:	2001      	movs	r0, #1
 800e65a:	b03d      	add	sp, #244	@ 0xf4
 800e65c:	ecbd 8b02 	vpop	{d8}
 800e660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e664:	42400000 	.word	0x42400000

0800e668 <acc_cal_algorithms_rx_freq_ctrl>:
 800e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66c:	4613      	mov	r3, r2
 800e66e:	2400      	movs	r4, #0
 800e670:	b089      	sub	sp, #36	@ 0x24
 800e672:	4606      	mov	r6, r0
 800e674:	460a      	mov	r2, r1
 800e676:	f100 0902 	add.w	r9, r0, #2
 800e67a:	4625      	mov	r5, r4
 800e67c:	4627      	mov	r7, r4
 800e67e:	46a3      	mov	fp, r4
 800e680:	f10d 081e 	add.w	r8, sp, #30
 800e684:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800e688:	e003      	b.n	800e692 <acc_cal_algorithms_rx_freq_ctrl+0x2a>
 800e68a:	461f      	mov	r7, r3
 800e68c:	3401      	adds	r4, #1
 800e68e:	2c08      	cmp	r4, #8
 800e690:	d023      	beq.n	800e6da <acc_cal_algorithms_rx_freq_ctrl+0x72>
 800e692:	f8cd 8000 	str.w	r8, [sp]
 800e696:	ab07      	add	r3, sp, #28
 800e698:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800e69c:	fa1f fa84 	uxth.w	sl, r4
 800e6a0:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800e6a4:	9203      	str	r2, [sp, #12]
 800e6a6:	f004 f957 	bl	8012958 <acc_alg_comp_iq_imb>
 800e6aa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800e6ae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e6b2:	fb01 f101 	mul.w	r1, r1, r1
 800e6b6:	9a03      	ldr	r2, [sp, #12]
 800e6b8:	fb03 1303 	mla	r3, r3, r3, r1
 800e6bc:	42ab      	cmp	r3, r5
 800e6be:	d9e5      	bls.n	800e68c <acc_cal_algorithms_rx_freq_ctrl+0x24>
 800e6c0:	42bb      	cmp	r3, r7
 800e6c2:	461d      	mov	r5, r3
 800e6c4:	d9e2      	bls.n	800e68c <acc_cal_algorithms_rx_freq_ctrl+0x24>
 800e6c6:	455b      	cmp	r3, fp
 800e6c8:	463d      	mov	r5, r7
 800e6ca:	d9de      	bls.n	800e68a <acc_cal_algorithms_rx_freq_ctrl+0x22>
 800e6cc:	3401      	adds	r4, #1
 800e6ce:	465f      	mov	r7, fp
 800e6d0:	f8cd a010 	str.w	sl, [sp, #16]
 800e6d4:	469b      	mov	fp, r3
 800e6d6:	2c08      	cmp	r4, #8
 800e6d8:	d1db      	bne.n	800e692 <acc_cal_algorithms_rx_freq_ctrl+0x2a>
 800e6da:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800e6de:	45ab      	cmp	fp, r5
 800e6e0:	bf8c      	ite	hi
 800e6e2:	2001      	movhi	r0, #1
 800e6e4:	2000      	movls	r0, #0
 800e6e6:	d902      	bls.n	800e6ee <acc_cal_algorithms_rx_freq_ctrl+0x86>
 800e6e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ec:	801a      	strh	r2, [r3, #0]
 800e6ee:	b009      	add	sp, #36	@ 0x24
 800e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6f4 <acc_cal_algorithms_wavelet_duration_p1>:
 800e6f4:	b508      	push	{r3, lr}
 800e6f6:	f003 fe87 	bl	8012408 <acc_alg_temp>
 800e6fa:	f110 0f14 	cmn.w	r0, #20
 800e6fe:	db06      	blt.n	800e70e <acc_cal_algorithms_wavelet_duration_p1+0x1a>
 800e700:	282c      	cmp	r0, #44	@ 0x2c
 800e702:	dd06      	ble.n	800e712 <acc_cal_algorithms_wavelet_duration_p1+0x1e>
 800e704:	2850      	cmp	r0, #80	@ 0x50
 800e706:	bfb4      	ite	lt
 800e708:	2003      	movlt	r0, #3
 800e70a:	2004      	movge	r0, #4
 800e70c:	bd08      	pop	{r3, pc}
 800e70e:	2001      	movs	r0, #1
 800e710:	bd08      	pop	{r3, pc}
 800e712:	2002      	movs	r0, #2
 800e714:	bd08      	pop	{r3, pc}
 800e716:	bf00      	nop

0800e718 <acc_cal_algorithms_phase_unwrap>:
 800e718:	2901      	cmp	r1, #1
 800e71a:	d921      	bls.n	800e760 <acc_cal_algorithms_phase_unwrap+0x48>
 800e71c:	1f03      	subs	r3, r0, #4
 800e71e:	f8df c050 	ldr.w	ip, [pc, #80]	@ 800e770 <acc_cal_algorithms_phase_unwrap+0x58>
 800e722:	b4f0      	push	{r4, r5, r6, r7}
 800e724:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800e728:	2400      	movs	r4, #0
 800e72a:	4f0e      	ldr	r7, [pc, #56]	@ (800e764 <acc_cal_algorithms_phase_unwrap+0x4c>)
 800e72c:	4e0e      	ldr	r6, [pc, #56]	@ (800e768 <acc_cal_algorithms_phase_unwrap+0x50>)
 800e72e:	490f      	ldr	r1, [pc, #60]	@ (800e76c <acc_cal_algorithms_phase_unwrap+0x54>)
 800e730:	6843      	ldr	r3, [r0, #4]
 800e732:	4602      	mov	r2, r0
 800e734:	4423      	add	r3, r4
 800e736:	f840 3f04 	str.w	r3, [r0, #4]!
 800e73a:	6812      	ldr	r2, [r2, #0]
 800e73c:	1a9a      	subs	r2, r3, r2
 800e73e:	4562      	cmp	r2, ip
 800e740:	dd05      	ble.n	800e74e <acc_cal_algorithms_phase_unwrap+0x36>
 800e742:	443b      	add	r3, r7
 800e744:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e748:	443c      	add	r4, r7
 800e74a:	1a9a      	subs	r2, r3, r2
 800e74c:	6003      	str	r3, [r0, #0]
 800e74e:	42b2      	cmp	r2, r6
 800e750:	440b      	add	r3, r1
 800e752:	da01      	bge.n	800e758 <acc_cal_algorithms_phase_unwrap+0x40>
 800e754:	440c      	add	r4, r1
 800e756:	6003      	str	r3, [r0, #0]
 800e758:	4285      	cmp	r5, r0
 800e75a:	d1e9      	bne.n	800e730 <acc_cal_algorithms_phase_unwrap+0x18>
 800e75c:	bcf0      	pop	{r4, r5, r6, r7}
 800e75e:	4770      	bx	lr
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	fff9b782 	.word	0xfff9b782
 800e768:	fffcdbc1 	.word	0xfffcdbc1
 800e76c:	0006487e 	.word	0x0006487e
 800e770:	0003243f 	.word	0x0003243f

0800e774 <acc_cal_algorithms_tx_freq_ctrl>:
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 800e77c:	4606      	mov	r6, r0
 800e77e:	1c8c      	adds	r4, r1, #2
 800e780:	4690      	mov	r8, r2
 800e782:	4699      	mov	r9, r3
 800e784:	ad01      	add	r5, sp, #4
 800e786:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 800e78a:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e78e:	3404      	adds	r4, #4
 800e790:	f934 0c06 	ldrsh.w	r0, [r4, #-6]
 800e794:	f003 f932 	bl	80119fc <acc_alg_atan2_q16>
 800e798:	f845 0f04 	str.w	r0, [r5, #4]!
 800e79c:	42bd      	cmp	r5, r7
 800e79e:	d1f4      	bne.n	800e78a <acc_cal_algorithms_tx_freq_ctrl+0x16>
 800e7a0:	46ca      	mov	sl, r9
 800e7a2:	f1a9 0304 	sub.w	r3, r9, #4
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	f109 011c 	add.w	r1, r9, #28
 800e7ac:	f843 0f04 	str.w	r0, [r3, #4]!
 800e7b0:	4299      	cmp	r1, r3
 800e7b2:	d1fb      	bne.n	800e7ac <acc_cal_algorithms_tx_freq_ctrl+0x38>
 800e7b4:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800e7b8:	f04f 0b00 	mov.w	fp, #0
 800e7bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e7c0:	ac19      	add	r4, sp, #100	@ 0x64
 800e7c2:	4f32      	ldr	r7, [pc, #200]	@ (800e88c <acc_cal_algorithms_tx_freq_ctrl+0x118>)
 800e7c4:	00ed      	lsls	r5, r5, #3
 800e7c6:	f640 5994 	movw	r9, #3476	@ 0xd94
 800e7ca:	f8cd b000 	str.w	fp, [sp]
 800e7ce:	9301      	str	r3, [sp, #4]
 800e7d0:	2130      	movs	r1, #48	@ 0x30
 800e7d2:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 800e7d6:	f7ff ff9f 	bl	800e718 <acc_cal_algorithms_phase_unwrap>
 800e7da:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 800e7de:	f04f 0c00 	mov.w	ip, #0
 800e7e2:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800e7e6:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800e7e8:	428c      	cmp	r4, r1
 800e7ea:	eba3 0000 	sub.w	r0, r3, r0
 800e7ee:	4484      	add	ip, r0
 800e7f0:	d1f7      	bne.n	800e7e2 <acc_cal_algorithms_tx_freq_ctrl+0x6e>
 800e7f2:	f1bc 0f00 	cmp.w	ip, #0
 800e7f6:	db34      	blt.n	800e862 <acc_cal_algorithms_tx_freq_ctrl+0xee>
 800e7f8:	ea4f 119c 	mov.w	r1, ip, lsr #6
 800e7fc:	fb09 f101 	mul.w	r1, r9, r1
 800e800:	0d49      	lsrs	r1, r1, #21
 800e802:	fb06 f101 	mul.w	r1, r6, r1
 800e806:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 800e80a:	f8ca 1000 	str.w	r1, [sl]
 800e80e:	f1bb 0f00 	cmp.w	fp, #0
 800e812:	d003      	beq.n	800e81c <acc_cal_algorithms_tx_freq_ctrl+0xa8>
 800e814:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e818:	4288      	cmp	r0, r1
 800e81a:	d92f      	bls.n	800e87c <acc_cal_algorithms_tx_freq_ctrl+0x108>
 800e81c:	f8da 1000 	ldr.w	r1, [sl]
 800e820:	eba1 0108 	sub.w	r1, r1, r8
 800e824:	2900      	cmp	r1, #0
 800e826:	bfb8      	it	lt
 800e828:	4249      	neglt	r1, r1
 800e82a:	42b9      	cmp	r1, r7
 800e82c:	d204      	bcs.n	800e838 <acc_cal_algorithms_tx_freq_ctrl+0xc4>
 800e82e:	2301      	movs	r3, #1
 800e830:	460f      	mov	r7, r1
 800e832:	f8cd b004 	str.w	fp, [sp, #4]
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	f10b 0301 	add.w	r3, fp, #1
 800e83c:	f10a 0a04 	add.w	sl, sl, #4
 800e840:	34c0      	adds	r4, #192	@ 0xc0
 800e842:	fa1f fb83 	uxth.w	fp, r3
 800e846:	f1bb 0f08 	cmp.w	fp, #8
 800e84a:	d1c1      	bne.n	800e7d0 <acc_cal_algorithms_tx_freq_ctrl+0x5c>
 800e84c:	9b00      	ldr	r3, [sp, #0]
 800e84e:	b11b      	cbz	r3, 800e858 <acc_cal_algorithms_tx_freq_ctrl+0xe4>
 800e850:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 800e854:	9a01      	ldr	r2, [sp, #4]
 800e856:	801a      	strh	r2, [r3, #0]
 800e858:	9800      	ldr	r0, [sp, #0]
 800e85a:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800e85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e862:	f1cc 0100 	rsb	r1, ip, #0
 800e866:	0989      	lsrs	r1, r1, #6
 800e868:	fb09 f101 	mul.w	r1, r9, r1
 800e86c:	0d49      	lsrs	r1, r1, #21
 800e86e:	fb06 f101 	mul.w	r1, r6, r1
 800e872:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 800e876:	f8ca 1000 	str.w	r1, [sl]
 800e87a:	e7c8      	b.n	800e80e <acc_cal_algorithms_tx_freq_ctrl+0x9a>
 800e87c:	2300      	movs	r3, #0
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	9800      	ldr	r0, [sp, #0]
 800e882:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800e886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88a:	bf00      	nop
 800e88c:	000f4240 	.word	0x000f4240

0800e890 <acc_cal_algorithms_phase_enhancement>:
 800e890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e894:	b0bc      	sub	sp, #240	@ 0xf0
 800e896:	4606      	mov	r6, r0
 800e898:	460d      	mov	r5, r1
 800e89a:	4617      	mov	r7, r2
 800e89c:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800e8a0:	f100 0902 	add.w	r9, r0, #2
 800e8a4:	2400      	movs	r4, #0
 800e8a6:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 800e8aa:	e005      	b.n	800e8b8 <acc_cal_algorithms_phase_enhancement+0x28>
 800e8ac:	f003 f8a6 	bl	80119fc <acc_alg_atan2_q16>
 800e8b0:	2c30      	cmp	r4, #48	@ 0x30
 800e8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800e8b6:	d00e      	beq.n	800e8d6 <acc_cal_algorithms_phase_enhancement+0x46>
 800e8b8:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800e8bc:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800e8c0:	3401      	adds	r4, #1
 800e8c2:	fb01 f301 	mul.w	r3, r1, r1
 800e8c6:	fb00 3300 	mla	r3, r0, r0, r3
 800e8ca:	4543      	cmp	r3, r8
 800e8cc:	dcee      	bgt.n	800e8ac <acc_cal_algorithms_phase_enhancement+0x1c>
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	b03c      	add	sp, #240	@ 0xf0
 800e8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8d6:	ac0b      	add	r4, sp, #44	@ 0x2c
 800e8d8:	f1ad 0602 	sub.w	r6, sp, #2
 800e8dc:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	4632      	mov	r2, r6
 800e8e4:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800e8e8:	3202      	adds	r2, #2
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	bfb8      	it	lt
 800e8ee:	330f      	addlt	r3, #15
 800e8f0:	4541      	cmp	r1, r8
 800e8f2:	ea4f 1323 	mov.w	r3, r3, asr #4
 800e8f6:	8013      	strh	r3, [r2, #0]
 800e8f8:	d1f4      	bne.n	800e8e4 <acc_cal_algorithms_phase_enhancement+0x54>
 800e8fa:	a80c      	add	r0, sp, #48	@ 0x30
 800e8fc:	2130      	movs	r1, #48	@ 0x30
 800e8fe:	f7ff ff0b 	bl	800e718 <acc_cal_algorithms_phase_unwrap>
 800e902:	2200      	movs	r2, #0
 800e904:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800e908:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800e90a:	4544      	cmp	r4, r8
 800e90c:	eba3 0301 	sub.w	r3, r3, r1
 800e910:	441a      	add	r2, r3
 800e912:	d1f7      	bne.n	800e904 <acc_cal_algorithms_phase_enhancement+0x74>
 800e914:	480d      	ldr	r0, [pc, #52]	@ (800e94c <acc_cal_algorithms_phase_enhancement+0xbc>)
 800e916:	17d3      	asrs	r3, r2, #31
 800e918:	f644 41b0 	movw	r1, #19632	@ 0x4cb0
 800e91c:	fb80 0202 	smull	r0, r2, r0, r2
 800e920:	f64c 1062 	movw	r0, #51554	@ 0xc962
 800e924:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800e928:	4411      	add	r1, r2
 800e92a:	4281      	cmp	r1, r0
 800e92c:	d8cf      	bhi.n	800e8ce <acc_cal_algorithms_phase_enhancement+0x3e>
 800e92e:	3d02      	subs	r5, #2
 800e930:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e934:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800e938:	42b1      	cmp	r1, r6
 800e93a:	f825 3f02 	strh.w	r3, [r5, #2]!
 800e93e:	d1f9      	bne.n	800e934 <acc_cal_algorithms_phase_enhancement+0xa4>
 800e940:	2001      	movs	r0, #1
 800e942:	803a      	strh	r2, [r7, #0]
 800e944:	b03c      	add	sp, #240	@ 0xf0
 800e946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e94a:	bf00      	nop
 800e94c:	2aaaaaab 	.word	0x2aaaaaab

0800e950 <acc_cal_algorithms_calc_pulse_params>:
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800e958:	b085      	sub	sp, #20
 800e95a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e95e:	9203      	str	r2, [sp, #12]
 800e960:	f0c0 80ce 	bcc.w	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800e964:	9b02      	ldr	r3, [sp, #8]
 800e966:	2b08      	cmp	r3, #8
 800e968:	f000 80ca 	beq.w	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800e96c:	9a01      	ldr	r2, [sp, #4]
 800e96e:	2500      	movs	r5, #0
 800e970:	9803      	ldr	r0, [sp, #12]
 800e972:	2701      	movs	r7, #1
 800e974:	f1a2 0e12 	sub.w	lr, r2, #18
 800e978:	46a9      	mov	r9, r5
 800e97a:	3a02      	subs	r2, #2
 800e97c:	46ac      	mov	ip, r5
 800e97e:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 800e982:	46ab      	mov	fp, r5
 800e984:	46aa      	mov	sl, r5
 800e986:	e01a      	b.n	800e9be <acc_cal_algorithms_calc_pulse_params+0x6e>
 800e988:	f240 26ee 	movw	r6, #750	@ 0x2ee
 800e98c:	8003      	strh	r3, [r0, #0]
 800e98e:	8811      	ldrh	r1, [r2, #0]
 800e990:	42b3      	cmp	r3, r6
 800e992:	dd23      	ble.n	800e9dc <acc_cal_algorithms_calc_pulse_params+0x8c>
 800e994:	2d00      	cmp	r5, #0
 800e996:	f040 80b7 	bne.w	800eb08 <acc_cal_algorithms_calc_pulse_params+0x1b8>
 800e99a:	459a      	cmp	sl, r3
 800e99c:	f280 80ba 	bge.w	800eb14 <acc_cal_algorithms_calc_pulse_params+0x1c4>
 800e9a0:	469a      	mov	sl, r3
 800e9a2:	f04f 0901 	mov.w	r9, #1
 800e9a6:	f1cb 0600 	rsb	r6, fp, #0
 800e9aa:	3002      	adds	r0, #2
 800e9ac:	429e      	cmp	r6, r3
 800e9ae:	bfc8      	it	gt
 800e9b0:	eba8 0b04 	subgt.w	fp, r8, r4
 800e9b4:	458c      	cmp	ip, r1
 800e9b6:	bf38      	it	cc
 800e9b8:	468c      	movcc	ip, r1
 800e9ba:	4596      	cmp	lr, r2
 800e9bc:	d01b      	beq.n	800e9f6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800e9be:	8a54      	ldrh	r4, [r2, #18]
 800e9c0:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800e9c4:	1a63      	subs	r3, r4, r1
 800e9c6:	4688      	mov	r8, r1
 800e9c8:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 800e9cc:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800e9d0:	d3da      	bcc.n	800e988 <acc_cal_algorithms_calc_pulse_params+0x38>
 800e9d2:	f240 26ee 	movw	r6, #750	@ 0x2ee
 800e9d6:	2700      	movs	r7, #0
 800e9d8:	42b3      	cmp	r3, r6
 800e9da:	dcdb      	bgt.n	800e994 <acc_cal_algorithms_calc_pulse_params+0x44>
 800e9dc:	459a      	cmp	sl, r3
 800e9de:	4e58      	ldr	r6, [pc, #352]	@ (800eb40 <acc_cal_algorithms_calc_pulse_params+0x1f0>)
 800e9e0:	bfb8      	it	lt
 800e9e2:	469a      	movlt	sl, r3
 800e9e4:	42b3      	cmp	r3, r6
 800e9e6:	dade      	bge.n	800e9a6 <acc_cal_algorithms_calc_pulse_params+0x56>
 800e9e8:	f1b9 0f00 	cmp.w	r9, #0
 800e9ec:	bf0a      	itet	eq
 800e9ee:	2700      	moveq	r7, #0
 800e9f0:	464d      	movne	r5, r9
 800e9f2:	2501      	moveq	r5, #1
 800e9f4:	e7d7      	b.n	800e9a6 <acc_cal_algorithms_calc_pulse_params+0x56>
 800e9f6:	ea05 0509 	and.w	r5, r5, r9
 800e9fa:	f015 0fff 	tst.w	r5, #255	@ 0xff
 800e9fe:	d07f      	beq.n	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800ea00:	2f00      	cmp	r7, #0
 800ea02:	d07d      	beq.n	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800ea04:	9b02      	ldr	r3, [sp, #8]
 800ea06:	f1b3 0e1c 	subs.w	lr, r3, #28
 800ea0a:	d079      	beq.n	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800ea0c:	2700      	movs	r7, #0
 800ea0e:	9e03      	ldr	r6, [sp, #12]
 800ea10:	46b9      	mov	r9, r7
 800ea12:	3612      	adds	r6, #18
 800ea14:	46b8      	mov	r8, r7
 800ea16:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ea1a:	46bc      	mov	ip, r7
 800ea1c:	46ba      	mov	sl, r7
 800ea1e:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800ea22:	210a      	movs	r1, #10
 800ea24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800ea28:	4634      	mov	r4, r6
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ea30:	f930 5d02 	ldrsh.w	r5, [r0, #-2]!
 800ea34:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 800ea38:	fb01 3305 	mla	r3, r1, r5, r3
 800ea3c:	fb01 3302 	mla	r3, r1, r2, r3
 800ea40:	3901      	subs	r1, #1
 800ea42:	d1f5      	bne.n	800ea30 <acc_cal_algorithms_calc_pulse_params+0xe0>
 800ea44:	4543      	cmp	r3, r8
 800ea46:	dc6a      	bgt.n	800eb1e <acc_cal_algorithms_calc_pulse_params+0x1ce>
 800ea48:	454b      	cmp	r3, r9
 800ea4a:	da76      	bge.n	800eb3a <acc_cal_algorithms_calc_pulse_params+0x1ea>
 800ea4c:	4699      	mov	r9, r3
 800ea4e:	46ba      	mov	sl, r7
 800ea50:	3701      	adds	r7, #1
 800ea52:	4577      	cmp	r7, lr
 800ea54:	d1e3      	bne.n	800ea1e <acc_cal_algorithms_calc_pulse_params+0xce>
 800ea56:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800ea5a:	4664      	mov	r4, ip
 800ea5c:	4655      	mov	r5, sl
 800ea5e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ea62:	4598      	cmp	r8, r3
 800ea64:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ea68:	dd4a      	ble.n	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800ea6a:	4b36      	ldr	r3, [pc, #216]	@ (800eb44 <acc_cal_algorithms_calc_pulse_params+0x1f4>)
 800ea6c:	4599      	cmp	r9, r3
 800ea6e:	da47      	bge.n	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800ea70:	f1bb 0000 	subs.w	r0, fp, #0
 800ea74:	bf18      	it	ne
 800ea76:	2001      	movne	r0, #1
 800ea78:	f1ba 0f00 	cmp.w	sl, #0
 800ea7c:	bf08      	it	eq
 800ea7e:	2000      	moveq	r0, #0
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d03d      	beq.n	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800ea84:	9b01      	ldr	r3, [sp, #4]
 800ea86:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ea8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ea8c:	881b      	ldrh	r3, [r3, #0]
 800ea8e:	00db      	lsls	r3, r3, #3
 800ea90:	b142      	cbz	r2, 800eaa4 <acc_cal_algorithms_calc_pulse_params+0x154>
 800ea92:	4563      	cmp	r3, ip
 800ea94:	d204      	bcs.n	800eaa0 <acc_cal_algorithms_calc_pulse_params+0x150>
 800ea96:	43d9      	mvns	r1, r3
 800ea98:	4451      	add	r1, sl
 800ea9a:	4461      	add	r1, ip
 800ea9c:	fbb1 f1fa 	udiv	r1, r1, sl
 800eaa0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800eaa2:	6011      	str	r1, [r2, #0]
 800eaa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eaa6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eaa8:	3a00      	subs	r2, #0
 800eaaa:	bf18      	it	ne
 800eaac:	2201      	movne	r2, #1
 800eaae:	2900      	cmp	r1, #0
 800eab0:	bf08      	it	eq
 800eab2:	2200      	moveq	r2, #0
 800eab4:	b32a      	cbz	r2, 800eb02 <acc_cal_algorithms_calc_pulse_params+0x1b2>
 800eab6:	4621      	mov	r1, r4
 800eab8:	9801      	ldr	r0, [sp, #4]
 800eaba:	310e      	adds	r1, #14
 800eabc:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800eac0:	ebb3 0fc0 	cmp.w	r3, r0, lsl #3
 800eac4:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800eac8:	d205      	bcs.n	800ead6 <acc_cal_algorithms_calc_pulse_params+0x186>
 800eaca:	43db      	mvns	r3, r3
 800eacc:	4453      	add	r3, sl
 800eace:	4423      	add	r3, r4
 800ead0:	fbb3 f3fa 	udiv	r3, r3, sl
 800ead4:	1ac9      	subs	r1, r1, r3
 800ead6:	462c      	mov	r4, r5
 800ead8:	9b01      	ldr	r3, [sp, #4]
 800eada:	340e      	adds	r4, #14
 800eadc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800eae0:	ebbc 0fc3 	cmp.w	ip, r3, lsl #3
 800eae4:	ea4f 00c3 	mov.w	r0, r3, lsl #3
 800eae8:	d906      	bls.n	800eaf8 <acc_cal_algorithms_calc_pulse_params+0x1a8>
 800eaea:	f10b 33ff 	add.w	r3, fp, #4294967295
 800eaee:	4463      	add	r3, ip
 800eaf0:	1a1b      	subs	r3, r3, r0
 800eaf2:	fbb3 f3fb 	udiv	r3, r3, fp
 800eaf6:	1ae4      	subs	r4, r4, r3
 800eaf8:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 800eafc:	42a3      	cmp	r3, r4
 800eafe:	dd11      	ble.n	800eb24 <acc_cal_algorithms_calc_pulse_params+0x1d4>
 800eb00:	2000      	movs	r0, #0
 800eb02:	b005      	add	sp, #20
 800eb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb08:	459a      	cmp	sl, r3
 800eb0a:	46a9      	mov	r9, r5
 800eb0c:	da05      	bge.n	800eb1a <acc_cal_algorithms_calc_pulse_params+0x1ca>
 800eb0e:	469a      	mov	sl, r3
 800eb10:	2700      	movs	r7, #0
 800eb12:	e748      	b.n	800e9a6 <acc_cal_algorithms_calc_pulse_params+0x56>
 800eb14:	f04f 0901 	mov.w	r9, #1
 800eb18:	e745      	b.n	800e9a6 <acc_cal_algorithms_calc_pulse_params+0x56>
 800eb1a:	2700      	movs	r7, #0
 800eb1c:	e743      	b.n	800e9a6 <acc_cal_algorithms_calc_pulse_params+0x56>
 800eb1e:	46bc      	mov	ip, r7
 800eb20:	4698      	mov	r8, r3
 800eb22:	e795      	b.n	800ea50 <acc_cal_algorithms_calc_pulse_params+0x100>
 800eb24:	2900      	cmp	r1, #0
 800eb26:	dbeb      	blt.n	800eb00 <acc_cal_algorithms_calc_pulse_params+0x1b0>
 800eb28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb2a:	eba4 0b01 	sub.w	fp, r4, r1
 800eb2e:	4610      	mov	r0, r2
 800eb30:	f8c3 b000 	str.w	fp, [r3]
 800eb34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb36:	6019      	str	r1, [r3, #0]
 800eb38:	e7e3      	b.n	800eb02 <acc_cal_algorithms_calc_pulse_params+0x1b2>
 800eb3a:	4643      	mov	r3, r8
 800eb3c:	4698      	mov	r8, r3
 800eb3e:	e787      	b.n	800ea50 <acc_cal_algorithms_calc_pulse_params+0x100>
 800eb40:	fffffd12 	.word	0xfffffd12
 800eb44:	ffff3cb0 	.word	0xffff3cb0

0800eb48 <acc_cal_algorithms_pulseshaper_wavelet>:
 800eb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800eb50:	2400      	movs	r4, #0
 800eb52:	460d      	mov	r5, r1
 800eb54:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800eb58:	ae04      	add	r6, sp, #16
 800eb5a:	af05      	add	r7, sp, #20
 800eb5c:	9402      	str	r4, [sp, #8]
 800eb5e:	aa08      	add	r2, sp, #32
 800eb60:	9600      	str	r6, [sp, #0]
 800eb62:	2190      	movs	r1, #144	@ 0x90
 800eb64:	9701      	str	r7, [sp, #4]
 800eb66:	4680      	mov	r8, r0
 800eb68:	6034      	str	r4, [r6, #0]
 800eb6a:	603c      	str	r4, [r7, #0]
 800eb6c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800eb70:	f7ff feee 	bl	800e950 <acc_cal_algorithms_calc_pulse_params>
 800eb74:	b920      	cbnz	r0, 800eb80 <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 800eb76:	2000      	movs	r0, #0
 800eb78:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800eb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb80:	ab07      	add	r3, sp, #28
 800eb82:	aa08      	add	r2, sp, #32
 800eb84:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 800eb88:	21f0      	movs	r1, #240	@ 0xf0
 800eb8a:	9301      	str	r3, [sp, #4]
 800eb8c:	ab06      	add	r3, sp, #24
 800eb8e:	9402      	str	r4, [sp, #8]
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800eb96:	f7ff fedb 	bl	800e950 <acc_cal_algorithms_calc_pulse_params>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d0eb      	beq.n	800eb76 <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 800eb9e:	683c      	ldr	r4, [r7, #0]
 800eba0:	9f07      	ldr	r7, [sp, #28]
 800eba2:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd0 <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 800eba4:	1b3f      	subs	r7, r7, r4
 800eba6:	490b      	ldr	r1, [pc, #44]	@ (800ebd4 <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 800eba8:	6832      	ldr	r2, [r6, #0]
 800ebaa:	fb03 f307 	mul.w	r3, r3, r7
 800ebae:	fb01 f404 	mul.w	r4, r1, r4
 800ebb2:	fb01 f202 	mul.w	r2, r1, r2
 800ebb6:	0c1b      	lsrs	r3, r3, #16
 800ebb8:	fb01 f107 	mul.w	r1, r1, r7
 800ebbc:	ebc3 3354 	rsb	r3, r3, r4, lsr #13
 800ebc0:	0b52      	lsrs	r2, r2, #13
 800ebc2:	e9c5 3100 	strd	r3, r1, [r5]
 800ebc6:	60aa      	str	r2, [r5, #8]
 800ebc8:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800ebcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd0:	00042aa8 	.word	0x00042aa8
 800ebd4:	00010aaa 	.word	0x00010aaa

0800ebd8 <acc_cal_algorithms_pulseshaper_supply>:
 800ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 800ebe0:	2600      	movs	r6, #0
 800ebe2:	4605      	mov	r5, r0
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	af06      	add	r7, sp, #24
 800ebe8:	f10d 0814 	add.w	r8, sp, #20
 800ebec:	aa0a      	add	r2, sp, #40	@ 0x28
 800ebee:	3002      	adds	r0, #2
 800ebf0:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800ebf4:	f240 111f 	movw	r1, #287	@ 0x11f
 800ebf8:	f8cd 8000 	str.w	r8, [sp]
 800ebfc:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800ec00:	f7ff fea6 	bl	800e950 <acc_cal_algorithms_calc_pulse_params>
 800ec04:	b920      	cbnz	r0, 800ec10 <acc_cal_algorithms_pulseshaper_supply+0x38>
 800ec06:	2000      	movs	r0, #0
 800ec08:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800ec0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec10:	aa08      	add	r2, sp, #32
 800ec12:	f10d 0a1c 	add.w	sl, sp, #28
 800ec16:	f10d 0b10 	add.w	fp, sp, #16
 800ec1a:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800ec1e:	9202      	str	r2, [sp, #8]
 800ec20:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800ec24:	aa0a      	add	r2, sp, #40	@ 0x28
 800ec26:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 800ec2a:	f8cd a004 	str.w	sl, [sp, #4]
 800ec2e:	f8cd b000 	str.w	fp, [sp]
 800ec32:	f7ff fe8d 	bl	800e950 <acc_cal_algorithms_calc_pulse_params>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d0e5      	beq.n	800ec06 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800ec3a:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800ec3e:	aa0a      	add	r2, sp, #40	@ 0x28
 800ec40:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 800ec44:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800ec48:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800ec4c:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec50:	e9cd 6600 	strd	r6, r6, [sp]
 800ec54:	f7ff fe7c 	bl	800e950 <acc_cal_algorithms_calc_pulse_params>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	d0d4      	beq.n	800ec06 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800ec5c:	f8db 6000 	ldr.w	r6, [fp]
 800ec60:	f8d8 3000 	ldr.w	r3, [r8]
 800ec64:	683d      	ldr	r5, [r7, #0]
 800ec66:	eba3 0c06 	sub.w	ip, r3, r6
 800ec6a:	f8da 1000 	ldr.w	r1, [sl]
 800ec6e:	f8d9 3000 	ldr.w	r3, [r9]
 800ec72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec76:	1b49      	subs	r1, r1, r5
 800ec78:	4a16      	ldr	r2, [pc, #88]	@ (800ecd4 <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 800ec7a:	eba3 0e08 	sub.w	lr, r3, r8
 800ec7e:	4f16      	ldr	r7, [pc, #88]	@ (800ecd8 <acc_cal_algorithms_pulseshaper_supply+0x100>)
 800ec80:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ece0 <acc_cal_algorithms_pulseshaper_supply+0x108>
 800ec84:	fb02 f20c 	mul.w	r2, r2, ip
 800ec88:	4b14      	ldr	r3, [pc, #80]	@ (800ecdc <acc_cal_algorithms_pulseshaper_supply+0x104>)
 800ec8a:	fb07 f701 	mul.w	r7, r7, r1
 800ec8e:	fb0a fa0e 	mul.w	sl, sl, lr
 800ec92:	0c12      	lsrs	r2, r2, #16
 800ec94:	fb03 f906 	mul.w	r9, r3, r6
 800ec98:	0c3f      	lsrs	r7, r7, #16
 800ec9a:	fb03 f808 	mul.w	r8, r3, r8
 800ec9e:	ea4f 461a 	mov.w	r6, sl, lsr #16
 800eca2:	fb03 f505 	mul.w	r5, r3, r5
 800eca6:	ebc2 3259 	rsb	r2, r2, r9, lsr #13
 800ecaa:	fb03 fc0c 	mul.w	ip, r3, ip
 800ecae:	ebc6 3658 	rsb	r6, r6, r8, lsr #13
 800ecb2:	fb03 f101 	mul.w	r1, r3, r1
 800ecb6:	ebc7 3555 	rsb	r5, r7, r5, lsr #13
 800ecba:	fb03 f30e 	mul.w	r3, r3, lr
 800ecbe:	e9c4 2c00 	strd	r2, ip, [r4]
 800ecc2:	e9c4 5102 	strd	r5, r1, [r4, #8]
 800ecc6:	e9c4 6304 	strd	r6, r3, [r4, #16]
 800ecca:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd2:	bf00      	nop
 800ecd4:	00021554 	.word	0x00021554
 800ecd8:	00074aa6 	.word	0x00074aa6
 800ecdc:	00010aaa 	.word	0x00010aaa
 800ece0:	000b754e 	.word	0x000b754e

0800ece4 <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 800ece4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece8:	468a      	mov	sl, r1
 800ecea:	b085      	sub	sp, #20
 800ecec:	4681      	mov	r9, r0
 800ecee:	2400      	movs	r4, #0
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	4650      	mov	r0, sl
 800ecf4:	461f      	mov	r7, r3
 800ecf6:	aa02      	add	r2, sp, #8
 800ecf8:	ab03      	add	r3, sp, #12
 800ecfa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800ecfe:	f000 fffb 	bl	800fcf8 <acc_sensor_a121_prepare_load_confmem>
 800ed02:	4648      	mov	r0, r9
 800ed04:	f001 f8a4 	bl	800fe50 <acc_sensor_protocol_a121_prepare_load>
 800ed08:	b300      	cbz	r0, 800ed4c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800ed0a:	9b03      	ldr	r3, [sp, #12]
 800ed0c:	f640 3b4a 	movw	fp, #2890	@ 0xb4a
 800ed10:	ebab 0204 	sub.w	r2, fp, r4
 800ed14:	b29d      	uxth	r5, r3
 800ed16:	9e02      	ldr	r6, [sp, #8]
 800ed18:	ea4f 0854 	mov.w	r8, r4, lsr #1
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	bf88      	it	hi
 800ed20:	b295      	uxthhi	r5, r2
 800ed22:	f003 fe11 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ed26:	4631      	mov	r1, r6
 800ed28:	086a      	lsrs	r2, r5, #1
 800ed2a:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800ed2e:	f003 f92b 	bl	8011f88 <acc_confprogram_copy>
 800ed32:	f003 fe0d 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ed36:	8879      	ldrh	r1, [r7, #2]
 800ed38:	4603      	mov	r3, r0
 800ed3a:	201c      	movs	r0, #28
 800ed3c:	462a      	mov	r2, r5
 800ed3e:	e9cd 0100 	strd	r0, r1, [sp]
 800ed42:	4621      	mov	r1, r4
 800ed44:	4630      	mov	r0, r6
 800ed46:	f003 f84f 	bl	8011de8 <acc_confprogram_patch_offset>
 800ed4a:	b918      	cbnz	r0, 800ed54 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	b005      	add	sp, #20
 800ed50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed54:	f003 fdfc 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ed58:	88b9      	ldrh	r1, [r7, #4]
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	201a      	movs	r0, #26
 800ed5e:	462a      	mov	r2, r5
 800ed60:	e9cd 0100 	strd	r0, r1, [sp]
 800ed64:	4621      	mov	r1, r4
 800ed66:	4630      	mov	r0, r6
 800ed68:	f003 f83e 	bl	8011de8 <acc_confprogram_patch_offset>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d0ed      	beq.n	800ed4c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800ed70:	f003 fdee 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ed74:	88f9      	ldrh	r1, [r7, #6]
 800ed76:	4603      	mov	r3, r0
 800ed78:	201b      	movs	r0, #27
 800ed7a:	9101      	str	r1, [sp, #4]
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	9000      	str	r0, [sp, #0]
 800ed80:	4621      	mov	r1, r4
 800ed82:	4630      	mov	r0, r6
 800ed84:	f003 f830 	bl	8011de8 <acc_confprogram_patch_offset>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d0df      	beq.n	800ed4c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800ed8c:	f003 fde0 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ed90:	893a      	ldrh	r2, [r7, #8]
 800ed92:	2119      	movs	r1, #25
 800ed94:	4603      	mov	r3, r0
 800ed96:	9201      	str	r2, [sp, #4]
 800ed98:	4630      	mov	r0, r6
 800ed9a:	462a      	mov	r2, r5
 800ed9c:	9100      	str	r1, [sp, #0]
 800ed9e:	4621      	mov	r1, r4
 800eda0:	f003 f822 	bl	8011de8 <acc_confprogram_patch_offset>
 800eda4:	4606      	mov	r6, r0
 800eda6:	462b      	mov	r3, r5
 800eda8:	4652      	mov	r2, sl
 800edaa:	4641      	mov	r1, r8
 800edac:	4648      	mov	r0, r9
 800edae:	2e00      	cmp	r6, #0
 800edb0:	d0cc      	beq.n	800ed4c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800edb2:	f000 ffb9 	bl	800fd28 <acc_sensor_a121_load_confmem>
 800edb6:	9b03      	ldr	r3, [sp, #12]
 800edb8:	f640 3249 	movw	r2, #2889	@ 0xb49
 800edbc:	441c      	add	r4, r3
 800edbe:	b2a4      	uxth	r4, r4
 800edc0:	4294      	cmp	r4, r2
 800edc2:	d9a5      	bls.n	800ed10 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 800edc4:	f240 115b 	movw	r1, #347	@ 0x15b
 800edc8:	4648      	mov	r0, r9
 800edca:	f001 f897 	bl	800fefc <acc_sensor_protocol_a121_run_program>
 800edce:	b005      	add	sp, #20
 800edd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edd4 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	460d      	mov	r5, r1
 800edda:	4604      	mov	r4, r0
 800eddc:	4e0b      	ldr	r6, [pc, #44]	@ (800ee0c <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 800edde:	f003 fdb3 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ede2:	9005      	str	r0, [sp, #20]
 800ede4:	f003 fdb4 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ede8:	2225      	movs	r2, #37	@ 0x25
 800edea:	4603      	mov	r3, r0
 800edec:	9905      	ldr	r1, [sp, #20]
 800edee:	9200      	str	r2, [sp, #0]
 800edf0:	4620      	mov	r0, r4
 800edf2:	2200      	movs	r2, #0
 800edf4:	9501      	str	r5, [sp, #4]
 800edf6:	9602      	str	r6, [sp, #8]
 800edf8:	f003 f85e 	bl	8011eb8 <acc_confprogram_live_patch>
 800edfc:	4620      	mov	r0, r4
 800edfe:	f240 2132 	movw	r1, #562	@ 0x232
 800ee02:	b006      	add	sp, #24
 800ee04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee08:	f001 b878 	b.w	800fefc <acc_sensor_protocol_a121_run_program>
 800ee0c:	0800fcc5 	.word	0x0800fcc5

0800ee10 <acc_a121_cal_session_start_3_delay_cbank_program>:
 800ee10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee12:	b087      	sub	sp, #28
 800ee14:	4604      	mov	r4, r0
 800ee16:	460e      	mov	r6, r1
 800ee18:	4615      	mov	r5, r2
 800ee1a:	4f14      	ldr	r7, [pc, #80]	@ (800ee6c <acc_a121_cal_session_start_3_delay_cbank_program+0x5c>)
 800ee1c:	f003 fd94 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ee20:	9005      	str	r0, [sp, #20]
 800ee22:	f003 fd95 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ee26:	f04f 0c26 	mov.w	ip, #38	@ 0x26
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	9905      	ldr	r1, [sp, #20]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f8cd c000 	str.w	ip, [sp]
 800ee34:	4620      	mov	r0, r4
 800ee36:	9601      	str	r6, [sp, #4]
 800ee38:	9702      	str	r7, [sp, #8]
 800ee3a:	f003 f83d 	bl	8011eb8 <acc_confprogram_live_patch>
 800ee3e:	f003 fd83 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ee42:	9005      	str	r0, [sp, #20]
 800ee44:	f003 fd84 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ee48:	2224      	movs	r2, #36	@ 0x24
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	9905      	ldr	r1, [sp, #20]
 800ee4e:	9200      	str	r2, [sp, #0]
 800ee50:	4620      	mov	r0, r4
 800ee52:	2200      	movs	r2, #0
 800ee54:	9501      	str	r5, [sp, #4]
 800ee56:	9702      	str	r7, [sp, #8]
 800ee58:	f003 f82e 	bl	8011eb8 <acc_confprogram_live_patch>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800ee62:	b007      	add	sp, #28
 800ee64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ee68:	f001 b848 	b.w	800fefc <acc_sensor_protocol_a121_run_program>
 800ee6c:	0800fcc5 	.word	0x0800fcc5

0800ee70 <acc_a121_cal_session_start_4_bba_vga_program>:
 800ee70:	f44f 7145 	mov.w	r1, #788	@ 0x314
 800ee74:	f001 b842 	b.w	800fefc <acc_sensor_protocol_a121_run_program>

0800ee78 <acc_a121_cal_session_start_5_area_index_program>:
 800ee78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee7a:	460f      	mov	r7, r1
 800ee7c:	b087      	sub	sp, #28
 800ee7e:	4604      	mov	r4, r0
 800ee80:	4d24      	ldr	r5, [pc, #144]	@ (800ef14 <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 800ee82:	4616      	mov	r6, r2
 800ee84:	f003 fd60 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ee88:	9005      	str	r0, [sp, #20]
 800ee8a:	f003 fd61 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ee8e:	2207      	movs	r2, #7
 800ee90:	4603      	mov	r3, r0
 800ee92:	8838      	ldrh	r0, [r7, #0]
 800ee94:	9905      	ldr	r1, [sp, #20]
 800ee96:	9001      	str	r0, [sp, #4]
 800ee98:	4620      	mov	r0, r4
 800ee9a:	9200      	str	r2, [sp, #0]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	9502      	str	r5, [sp, #8]
 800eea0:	f003 f80a 	bl	8011eb8 <acc_confprogram_live_patch>
 800eea4:	f003 fd50 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800eea8:	9005      	str	r0, [sp, #20]
 800eeaa:	f003 fd51 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800eeae:	2208      	movs	r2, #8
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	9905      	ldr	r1, [sp, #20]
 800eeb4:	9601      	str	r6, [sp, #4]
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	9200      	str	r2, [sp, #0]
 800eeba:	2200      	movs	r2, #0
 800eebc:	9502      	str	r5, [sp, #8]
 800eebe:	2603      	movs	r6, #3
 800eec0:	f002 fffa 	bl	8011eb8 <acc_confprogram_live_patch>
 800eec4:	f003 fd40 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800eec8:	9005      	str	r0, [sp, #20]
 800eeca:	f003 fd41 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800eece:	2209      	movs	r2, #9
 800eed0:	4603      	mov	r3, r0
 800eed2:	9905      	ldr	r1, [sp, #20]
 800eed4:	4620      	mov	r0, r4
 800eed6:	9502      	str	r5, [sp, #8]
 800eed8:	e9cd 2600 	strd	r2, r6, [sp]
 800eedc:	2200      	movs	r2, #0
 800eede:	2606      	movs	r6, #6
 800eee0:	f002 ffea 	bl	8011eb8 <acc_confprogram_live_patch>
 800eee4:	f003 fd30 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800eee8:	9005      	str	r0, [sp, #20]
 800eeea:	f003 fd31 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800eeee:	220a      	movs	r2, #10
 800eef0:	4603      	mov	r3, r0
 800eef2:	9905      	ldr	r1, [sp, #20]
 800eef4:	4620      	mov	r0, r4
 800eef6:	9502      	str	r5, [sp, #8]
 800eef8:	e9cd 2600 	strd	r2, r6, [sp]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f002 ffdb 	bl	8011eb8 <acc_confprogram_live_patch>
 800ef02:	4620      	mov	r0, r4
 800ef04:	f240 31d5 	movw	r1, #981	@ 0x3d5
 800ef08:	b007      	add	sp, #28
 800ef0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ef0e:	f000 bff5 	b.w	800fefc <acc_sensor_protocol_a121_run_program>
 800ef12:	bf00      	nop
 800ef14:	0800fcc5 	.word	0x0800fcc5

0800ef18 <acc_a121_cal_session_start_6_tx_freq_program>:
 800ef18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef1a:	460d      	mov	r5, r1
 800ef1c:	b087      	sub	sp, #28
 800ef1e:	4604      	mov	r4, r0
 800ef20:	4e44      	ldr	r6, [pc, #272]	@ (800f034 <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 800ef22:	f003 fd11 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ef26:	9005      	str	r0, [sp, #20]
 800ef28:	f003 fd12 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ef2c:	882f      	ldrh	r7, [r5, #0]
 800ef2e:	2221      	movs	r2, #33	@ 0x21
 800ef30:	4603      	mov	r3, r0
 800ef32:	9905      	ldr	r1, [sp, #20]
 800ef34:	4620      	mov	r0, r4
 800ef36:	9701      	str	r7, [sp, #4]
 800ef38:	9200      	str	r2, [sp, #0]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	9602      	str	r6, [sp, #8]
 800ef3e:	f002 ffbb 	bl	8011eb8 <acc_confprogram_live_patch>
 800ef42:	f003 fd01 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ef46:	9005      	str	r0, [sp, #20]
 800ef48:	f003 fd02 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ef4c:	886f      	ldrh	r7, [r5, #2]
 800ef4e:	2222      	movs	r2, #34	@ 0x22
 800ef50:	4603      	mov	r3, r0
 800ef52:	9905      	ldr	r1, [sp, #20]
 800ef54:	4620      	mov	r0, r4
 800ef56:	9200      	str	r2, [sp, #0]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800ef5e:	f002 ffab 	bl	8011eb8 <acc_confprogram_live_patch>
 800ef62:	f003 fcf1 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ef66:	9005      	str	r0, [sp, #20]
 800ef68:	f003 fcf2 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ef6c:	88ef      	ldrh	r7, [r5, #6]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	4603      	mov	r3, r0
 800ef72:	9905      	ldr	r1, [sp, #20]
 800ef74:	4620      	mov	r0, r4
 800ef76:	9200      	str	r2, [sp, #0]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800ef7e:	f002 ff9b 	bl	8011eb8 <acc_confprogram_live_patch>
 800ef82:	f003 fce1 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800ef86:	9005      	str	r0, [sp, #20]
 800ef88:	f003 fce2 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800ef8c:	892f      	ldrh	r7, [r5, #8]
 800ef8e:	2202      	movs	r2, #2
 800ef90:	4603      	mov	r3, r0
 800ef92:	9905      	ldr	r1, [sp, #20]
 800ef94:	4620      	mov	r0, r4
 800ef96:	9200      	str	r2, [sp, #0]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800ef9e:	f002 ff8b 	bl	8011eb8 <acc_confprogram_live_patch>
 800efa2:	f003 fcd1 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800efa6:	9005      	str	r0, [sp, #20]
 800efa8:	f003 fcd2 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800efac:	89af      	ldrh	r7, [r5, #12]
 800efae:	2203      	movs	r2, #3
 800efb0:	4603      	mov	r3, r0
 800efb2:	9905      	ldr	r1, [sp, #20]
 800efb4:	4620      	mov	r0, r4
 800efb6:	9200      	str	r2, [sp, #0]
 800efb8:	2200      	movs	r2, #0
 800efba:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800efbe:	f002 ff7b 	bl	8011eb8 <acc_confprogram_live_patch>
 800efc2:	f003 fcc1 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800efc6:	9005      	str	r0, [sp, #20]
 800efc8:	f003 fcc2 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800efcc:	89ef      	ldrh	r7, [r5, #14]
 800efce:	2204      	movs	r2, #4
 800efd0:	4603      	mov	r3, r0
 800efd2:	9905      	ldr	r1, [sp, #20]
 800efd4:	4620      	mov	r0, r4
 800efd6:	9200      	str	r2, [sp, #0]
 800efd8:	2200      	movs	r2, #0
 800efda:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800efde:	f002 ff6b 	bl	8011eb8 <acc_confprogram_live_patch>
 800efe2:	f003 fcb1 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800efe6:	9005      	str	r0, [sp, #20]
 800efe8:	f003 fcb2 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800efec:	8a6f      	ldrh	r7, [r5, #18]
 800efee:	2205      	movs	r2, #5
 800eff0:	4603      	mov	r3, r0
 800eff2:	9905      	ldr	r1, [sp, #20]
 800eff4:	4620      	mov	r0, r4
 800eff6:	9200      	str	r2, [sp, #0]
 800eff8:	2200      	movs	r2, #0
 800effa:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800effe:	f002 ff5b 	bl	8011eb8 <acc_confprogram_live_patch>
 800f002:	f003 fca1 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800f006:	9005      	str	r0, [sp, #20]
 800f008:	f003 fca2 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800f00c:	2206      	movs	r2, #6
 800f00e:	4603      	mov	r3, r0
 800f010:	8aa8      	ldrh	r0, [r5, #20]
 800f012:	9905      	ldr	r1, [sp, #20]
 800f014:	9200      	str	r2, [sp, #0]
 800f016:	2200      	movs	r2, #0
 800f018:	e9cd 0601 	strd	r0, r6, [sp, #4]
 800f01c:	4620      	mov	r0, r4
 800f01e:	f002 ff4b 	bl	8011eb8 <acc_confprogram_live_patch>
 800f022:	4620      	mov	r0, r4
 800f024:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 800f028:	b007      	add	sp, #28
 800f02a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f02e:	f000 bf65 	b.w	800fefc <acc_sensor_protocol_a121_run_program>
 800f032:	bf00      	nop
 800f034:	0800fcc5 	.word	0x0800fcc5

0800f038 <acc_a121_cal_session_start_7_rx_freq_program>:
 800f038:	b570      	push	{r4, r5, r6, lr}
 800f03a:	b086      	sub	sp, #24
 800f03c:	460d      	mov	r5, r1
 800f03e:	4604      	mov	r4, r0
 800f040:	4e0b      	ldr	r6, [pc, #44]	@ (800f070 <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 800f042:	f003 fc81 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800f046:	9005      	str	r0, [sp, #20]
 800f048:	f003 fc82 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800f04c:	220c      	movs	r2, #12
 800f04e:	4603      	mov	r3, r0
 800f050:	9905      	ldr	r1, [sp, #20]
 800f052:	9200      	str	r2, [sp, #0]
 800f054:	4620      	mov	r0, r4
 800f056:	2200      	movs	r2, #0
 800f058:	9501      	str	r5, [sp, #4]
 800f05a:	9602      	str	r6, [sp, #8]
 800f05c:	f002 ff2c 	bl	8011eb8 <acc_confprogram_live_patch>
 800f060:	4620      	mov	r0, r4
 800f062:	f240 4116 	movw	r1, #1046	@ 0x416
 800f066:	b006      	add	sp, #24
 800f068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f06c:	f000 bf46 	b.w	800fefc <acc_sensor_protocol_a121_run_program>
 800f070:	0800fcc5 	.word	0x0800fcc5

0800f074 <acc_a121_cal_session_start_8_phase_enhancement_program>:
 800f074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f076:	b087      	sub	sp, #28
 800f078:	460f      	mov	r7, r1
 800f07a:	4604      	mov	r4, r0
 800f07c:	2500      	movs	r5, #0
 800f07e:	f003 fc63 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800f082:	4e1c      	ldr	r6, [pc, #112]	@ (800f0f4 <acc_a121_cal_session_start_8_phase_enhancement_program+0x80>)
 800f084:	9005      	str	r0, [sp, #20]
 800f086:	f003 fc63 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800f08a:	f04f 0c0b 	mov.w	ip, #11
 800f08e:	9701      	str	r7, [sp, #4]
 800f090:	2709      	movs	r7, #9
 800f092:	4603      	mov	r3, r0
 800f094:	f8cd c000 	str.w	ip, [sp]
 800f098:	462a      	mov	r2, r5
 800f09a:	9905      	ldr	r1, [sp, #20]
 800f09c:	4620      	mov	r0, r4
 800f09e:	9602      	str	r6, [sp, #8]
 800f0a0:	f002 ff0a 	bl	8011eb8 <acc_confprogram_live_patch>
 800f0a4:	f003 fc50 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800f0a8:	9005      	str	r0, [sp, #20]
 800f0aa:	f003 fc51 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800f0ae:	9905      	ldr	r1, [sp, #20]
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	462a      	mov	r2, r5
 800f0b4:	9700      	str	r7, [sp, #0]
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	9602      	str	r6, [sp, #8]
 800f0ba:	270a      	movs	r7, #10
 800f0bc:	9501      	str	r5, [sp, #4]
 800f0be:	f002 fefb 	bl	8011eb8 <acc_confprogram_live_patch>
 800f0c2:	f003 fc41 	bl	8012948 <acc_image_a121_r1a_cal_session_get>
 800f0c6:	9005      	str	r0, [sp, #20]
 800f0c8:	f003 fc42 	bl	8012950 <acc_image_a121_r1a_cal_session_param_table_get>
 800f0cc:	f04f 0c7e 	mov.w	ip, #126	@ 0x7e
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	9905      	ldr	r1, [sp, #20]
 800f0d4:	462a      	mov	r2, r5
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	9602      	str	r6, [sp, #8]
 800f0da:	e9cd 7c00 	strd	r7, ip, [sp]
 800f0de:	f002 feeb 	bl	8011eb8 <acc_confprogram_live_patch>
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f240 4152 	movw	r1, #1106	@ 0x452
 800f0e8:	b007      	add	sp, #28
 800f0ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f0ee:	f000 bf05 	b.w	800fefc <acc_sensor_protocol_a121_run_program>
 800f0f2:	bf00      	nop
 800f0f4:	0800fcc5 	.word	0x0800fcc5

0800f0f8 <acc_a121_cal_session_start_9_pulseshaper_program>:
 800f0f8:	f240 417b 	movw	r1, #1147	@ 0x47b
 800f0fc:	f000 befe 	b.w	800fefc <acc_sensor_protocol_a121_run_program>

0800f100 <acc_a121_cal_session_ack_program>:
 800f100:	b530      	push	{r4, r5, lr}
 800f102:	b083      	sub	sp, #12
 800f104:	4604      	mov	r4, r0
 800f106:	2101      	movs	r1, #1
 800f108:	aa01      	add	r2, sp, #4
 800f10a:	f000 ffc1 	bl	8010090 <acc_sensor_protocol_a121_get_event>
 800f10e:	2200      	movs	r2, #0
 800f110:	4620      	mov	r0, r4
 800f112:	2101      	movs	r1, #1
 800f114:	f000 ff74 	bl	8010000 <acc_sensor_protocol_a121_ack_event>
 800f118:	a801      	add	r0, sp, #4
 800f11a:	f001 f82b 	bl	8010174 <acc_sensor_protocol_a121_is_done>
 800f11e:	4604      	mov	r4, r0
 800f120:	b930      	cbnz	r0, 800f130 <acc_a121_cal_session_ack_program+0x30>
 800f122:	4a05      	ldr	r2, [pc, #20]	@ (800f138 <acc_a121_cal_session_ack_program+0x38>)
 800f124:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f128:	6915      	ldr	r5, [r2, #16]
 800f12a:	4904      	ldr	r1, [pc, #16]	@ (800f13c <acc_a121_cal_session_ack_program+0x3c>)
 800f12c:	4a04      	ldr	r2, [pc, #16]	@ (800f140 <acc_a121_cal_session_ack_program+0x40>)
 800f12e:	47a8      	blx	r5
 800f130:	4620      	mov	r0, r4
 800f132:	b003      	add	sp, #12
 800f134:	bd30      	pop	{r4, r5, pc}
 800f136:	bf00      	nop
 800f138:	24003210 	.word	0x24003210
 800f13c:	0801be18 	.word	0x0801be18
 800f140:	0801bdd0 	.word	0x0801bdd0

0800f144 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	4688      	mov	r8, r1
 800f14a:	4607      	mov	r7, r0
 800f14c:	2132      	movs	r1, #50	@ 0x32
 800f14e:	461e      	mov	r6, r3
 800f150:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800f154:	f002 ff98 	bl	8012088 <acc_sensor_reg_read>
 800f158:	2312      	movs	r3, #18
 800f15a:	2200      	movs	r2, #0
 800f15c:	4641      	mov	r1, r8
 800f15e:	4638      	mov	r0, r7
 800f160:	f000 fe0c 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f164:	8802      	ldrh	r2, [r0, #0]
 800f166:	1d03      	adds	r3, r0, #4
 800f168:	8032      	strh	r2, [r6, #0]
 800f16a:	8842      	ldrh	r2, [r0, #2]
 800f16c:	802a      	strh	r2, [r5, #0]
 800f16e:	6023      	str	r3, [r4, #0]
 800f170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f174 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 800f174:	b570      	push	{r4, r5, r6, lr}
 800f176:	4616      	mov	r6, r2
 800f178:	461c      	mov	r4, r3
 800f17a:	2200      	movs	r2, #0
 800f17c:	2341      	movs	r3, #65	@ 0x41
 800f17e:	9d04      	ldr	r5, [sp, #16]
 800f180:	f000 fdfc 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f184:	8c02      	ldrh	r2, [r0, #32]
 800f186:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 800f18a:	6030      	str	r0, [r6, #0]
 800f18c:	8022      	strh	r2, [r4, #0]
 800f18e:	602b      	str	r3, [r5, #0]
 800f190:	bd70      	pop	{r4, r5, r6, pc}
 800f192:	bf00      	nop

0800f194 <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 800f194:	b510      	push	{r4, lr}
 800f196:	4614      	mov	r4, r2
 800f198:	2320      	movs	r3, #32
 800f19a:	2200      	movs	r2, #0
 800f19c:	f000 fdee 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f1a0:	6020      	str	r0, [r4, #0]
 800f1a2:	bd10      	pop	{r4, pc}

0800f1a4 <acc_a121_cal_session_get_4_bba_vga_program_data>:
 800f1a4:	b510      	push	{r4, lr}
 800f1a6:	4614      	mov	r4, r2
 800f1a8:	2350      	movs	r3, #80	@ 0x50
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f000 fde6 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f1b0:	6020      	str	r0, [r4, #0]
 800f1b2:	bd10      	pop	{r4, pc}

0800f1b4 <acc_a121_cal_session_get_5_area_index_program_data>:
 800f1b4:	b510      	push	{r4, lr}
 800f1b6:	4614      	mov	r4, r2
 800f1b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f000 fddd 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f1c2:	6020      	str	r0, [r4, #0]
 800f1c4:	bd10      	pop	{r4, pc}
 800f1c6:	bf00      	nop

0800f1c8 <acc_a121_cal_session_get_6_tx_freq_program_data>:
 800f1c8:	f7ff bff4 	b.w	800f1b4 <acc_a121_cal_session_get_5_area_index_program_data>

0800f1cc <acc_a121_cal_session_get_7_rx_freq_program_data>:
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	4614      	mov	r4, r2
 800f1d0:	2310      	movs	r3, #16
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f000 fdd2 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f1d8:	6020      	str	r0, [r4, #0]
 800f1da:	bd10      	pop	{r4, pc}

0800f1dc <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 800f1dc:	b510      	push	{r4, lr}
 800f1de:	4614      	mov	r4, r2
 800f1e0:	2360      	movs	r3, #96	@ 0x60
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f000 fdca 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f1e8:	6020      	str	r0, [r4, #0]
 800f1ea:	bd10      	pop	{r4, pc}

0800f1ec <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4615      	mov	r5, r2
 800f1f0:	461c      	mov	r4, r3
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 800f1f8:	f000 fdc0 	bl	800fd7c <acc_sensor_a121_buffer_processed_read>
 800f1fc:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 800f200:	6028      	str	r0, [r5, #0]
 800f202:	6023      	str	r3, [r4, #0]
 800f204:	bd38      	pop	{r3, r4, r5, pc}
 800f206:	bf00      	nop

0800f208 <acc_rss_integration_register_a121>:
 800f208:	68c3      	ldr	r3, [r0, #12]
 800f20a:	b570      	push	{r4, r5, r6, lr}
 800f20c:	b17b      	cbz	r3, 800f22e <acc_rss_integration_register_a121+0x26>
 800f20e:	6843      	ldr	r3, [r0, #4]
 800f210:	b183      	cbz	r3, 800f234 <acc_rss_integration_register_a121+0x2c>
 800f212:	6883      	ldr	r3, [r0, #8]
 800f214:	b173      	cbz	r3, 800f234 <acc_rss_integration_register_a121+0x2c>
 800f216:	6903      	ldr	r3, [r0, #16]
 800f218:	b13b      	cbz	r3, 800f22a <acc_rss_integration_register_a121+0x22>
 800f21a:	8802      	ldrh	r2, [r0, #0]
 800f21c:	2a0f      	cmp	r2, #15
 800f21e:	d80d      	bhi.n	800f23c <acc_rss_integration_register_a121+0x34>
 800f220:	4a0f      	ldr	r2, [pc, #60]	@ (800f260 <acc_rss_integration_register_a121+0x58>)
 800f222:	2000      	movs	r0, #0
 800f224:	490f      	ldr	r1, [pc, #60]	@ (800f264 <acc_rss_integration_register_a121+0x5c>)
 800f226:	4798      	blx	r3
 800f228:	2300      	movs	r3, #0
 800f22a:	4618      	mov	r0, r3
 800f22c:	bd70      	pop	{r4, r5, r6, pc}
 800f22e:	6943      	ldr	r3, [r0, #20]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1ec      	bne.n	800f20e <acc_rss_integration_register_a121+0x6>
 800f234:	6903      	ldr	r3, [r0, #16]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1f2      	bne.n	800f220 <acc_rss_integration_register_a121+0x18>
 800f23a:	e7f6      	b.n	800f22a <acc_rss_integration_register_a121+0x22>
 800f23c:	4604      	mov	r4, r0
 800f23e:	4d0a      	ldr	r5, [pc, #40]	@ (800f268 <acc_rss_integration_register_a121+0x60>)
 800f240:	4e0a      	ldr	r6, [pc, #40]	@ (800f26c <acc_rss_integration_register_a121+0x64>)
 800f242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f246:	2302      	movs	r3, #2
 800f248:	4a09      	ldr	r2, [pc, #36]	@ (800f270 <acc_rss_integration_register_a121+0x68>)
 800f24a:	490a      	ldr	r1, [pc, #40]	@ (800f274 <acc_rss_integration_register_a121+0x6c>)
 800f24c:	7033      	strb	r3, [r6, #0]
 800f24e:	2301      	movs	r3, #1
 800f250:	6011      	str	r1, [r2, #0]
 800f252:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f256:	e885 0003 	stmia.w	r5, {r0, r1}
 800f25a:	4618      	mov	r0, r3
 800f25c:	bd70      	pop	{r4, r5, r6, pc}
 800f25e:	bf00      	nop
 800f260:	0801be38 	.word	0x0801be38
 800f264:	0801be4c 	.word	0x0801be4c
 800f268:	24003210 	.word	0x24003210
 800f26c:	24002fd4 	.word	0x24002fd4
 800f270:	24002fd8 	.word	0x24002fd8
 800f274:	016e3600 	.word	0x016e3600

0800f278 <acc_rss_integration_get_sensor_reference_frequency>:
 800f278:	4b01      	ldr	r3, [pc, #4]	@ (800f280 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800f27a:	6818      	ldr	r0, [r3, #0]
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	24002fd8 	.word	0x24002fd8

0800f284 <acc_rss_integration_get_max_spi_transfer_size>:
 800f284:	4b01      	ldr	r3, [pc, #4]	@ (800f28c <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800f286:	8818      	ldrh	r0, [r3, #0]
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	24003210 	.word	0x24003210

0800f290 <acc_rss_integration_sensor_device_transfer>:
 800f290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f294:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800f2d8 <acc_rss_integration_sensor_device_transfer+0x48>
 800f298:	f8d8 7014 	ldr.w	r7, [r8, #20]
 800f29c:	b11f      	cbz	r7, 800f2a6 <acc_rss_integration_sensor_device_transfer+0x16>
 800f29e:	463b      	mov	r3, r7
 800f2a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a4:	4718      	bx	r3
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	4615      	mov	r5, r2
 800f2ac:	4699      	mov	r9, r3
 800f2ae:	4611      	mov	r1, r2
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f003 f875 	bl	80123a0 <acc_utils_swap16_array>
 800f2b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	006a      	lsls	r2, r5, #1
 800f2be:	4621      	mov	r1, r4
 800f2c0:	4798      	blx	r3
 800f2c2:	f1b9 0f00 	cmp.w	r9, #0
 800f2c6:	d101      	bne.n	800f2cc <acc_rss_integration_sensor_device_transfer+0x3c>
 800f2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d4:	f003 b864 	b.w	80123a0 <acc_utils_swap16_array>
 800f2d8:	24003210 	.word	0x24003210

0800f2dc <acc_rss_integration_mem_alloc_debug>:
 800f2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e0:	4f0c      	ldr	r7, [pc, #48]	@ (800f314 <acc_rss_integration_mem_alloc_debug+0x38>)
 800f2e2:	4688      	mov	r8, r1
 800f2e4:	4616      	mov	r6, r2
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4798      	blx	r3
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	b150      	cbz	r0, 800f306 <acc_rss_integration_mem_alloc_debug+0x2a>
 800f2f0:	4b09      	ldr	r3, [pc, #36]	@ (800f318 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	b123      	cbz	r3, 800f300 <acc_rss_integration_mem_alloc_debug+0x24>
 800f2f6:	689f      	ldr	r7, [r3, #8]
 800f2f8:	4642      	mov	r2, r8
 800f2fa:	4633      	mov	r3, r6
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	47b8      	blx	r7
 800f300:	4620      	mov	r0, r4
 800f302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	4a04      	ldr	r2, [pc, #16]	@ (800f31c <acc_rss_integration_mem_alloc_debug+0x40>)
 800f30a:	4905      	ldr	r1, [pc, #20]	@ (800f320 <acc_rss_integration_mem_alloc_debug+0x44>)
 800f30c:	4798      	blx	r3
 800f30e:	4620      	mov	r0, r4
 800f310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f314:	24003210 	.word	0x24003210
 800f318:	24002fd0 	.word	0x24002fd0
 800f31c:	0801be5c 	.word	0x0801be5c
 800f320:	0801be4c 	.word	0x0801be4c

0800f324 <acc_rss_integration_mem_calloc_debug>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	b1a8      	cbz	r0, 800f354 <acc_rss_integration_mem_calloc_debug+0x30>
 800f328:	4614      	mov	r4, r2
 800f32a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800f32e:	fbb2 f2f0 	udiv	r2, r2, r0
 800f332:	428a      	cmp	r2, r1
 800f334:	d90e      	bls.n	800f354 <acc_rss_integration_mem_calloc_debug+0x30>
 800f336:	fb01 f500 	mul.w	r5, r1, r0
 800f33a:	461a      	mov	r2, r3
 800f33c:	4621      	mov	r1, r4
 800f33e:	4628      	mov	r0, r5
 800f340:	f7ff ffcc 	bl	800f2dc <acc_rss_integration_mem_alloc_debug>
 800f344:	4604      	mov	r4, r0
 800f346:	b130      	cbz	r0, 800f356 <acc_rss_integration_mem_calloc_debug+0x32>
 800f348:	462a      	mov	r2, r5
 800f34a:	2100      	movs	r1, #0
 800f34c:	f009 facc 	bl	80188e8 <memset>
 800f350:	4620      	mov	r0, r4
 800f352:	bd38      	pop	{r3, r4, r5, pc}
 800f354:	2400      	movs	r4, #0
 800f356:	4620      	mov	r0, r4
 800f358:	bd38      	pop	{r3, r4, r5, pc}
 800f35a:	bf00      	nop

0800f35c <acc_rss_integration_mem_free>:
 800f35c:	4b07      	ldr	r3, [pc, #28]	@ (800f37c <acc_rss_integration_mem_free+0x20>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	b510      	push	{r4, lr}
 800f362:	4604      	mov	r4, r0
 800f364:	b10b      	cbz	r3, 800f36a <acc_rss_integration_mem_free+0xe>
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	4798      	blx	r3
 800f36a:	b12c      	cbz	r4, 800f378 <acc_rss_integration_mem_free+0x1c>
 800f36c:	4b04      	ldr	r3, [pc, #16]	@ (800f380 <acc_rss_integration_mem_free+0x24>)
 800f36e:	4620      	mov	r0, r4
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f376:	4718      	bx	r3
 800f378:	bd10      	pop	{r4, pc}
 800f37a:	bf00      	nop
 800f37c:	24002fd0 	.word	0x24002fd0
 800f380:	24003210 	.word	0x24003210

0800f384 <acc_rss_integration_log_level>:
 800f384:	4b01      	ldr	r3, [pc, #4]	@ (800f38c <acc_rss_integration_log_level+0x8>)
 800f386:	7818      	ldrb	r0, [r3, #0]
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	24002fd4 	.word	0x24002fd4

0800f390 <acc_rss_integration_set_log_level>:
 800f390:	4b01      	ldr	r3, [pc, #4]	@ (800f398 <acc_rss_integration_set_log_level+0x8>)
 800f392:	7018      	strb	r0, [r3, #0]
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	24002fd4 	.word	0x24002fd4

0800f39c <pipeline_a121_produce>:
 800f39c:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 800f3a0:	6803      	ldr	r3, [r0, #0]
 800f3a2:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	4710      	bx	r2

0800f3ac <pipeline_a121_disassemble>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	6805      	ldr	r5, [r0, #0]
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	b175      	cbz	r5, 800f3d2 <pipeline_a121_disassemble+0x26>
 800f3b4:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800f3b8:	f003 fc4e 	bl	8012c58 <acc_element_frame_release>
 800f3bc:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 800f3c0:	f003 fcd0 	bl	8012d64 <acc_element_frame_aux_release>
 800f3c4:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800f3c8:	f7ff ffc8 	bl	800f35c <acc_rss_integration_mem_free>
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f7ff ffc5 	bl	800f35c <acc_rss_integration_mem_free>
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3d8:	f7ff bfc0 	b.w	800f35c <acc_rss_integration_mem_free>

0800f3dc <acc_pipeline_get_buffer_size>:
 800f3dc:	b510      	push	{r4, lr}
 800f3de:	b08e      	sub	sp, #56	@ 0x38
 800f3e0:	460c      	mov	r4, r1
 800f3e2:	4669      	mov	r1, sp
 800f3e4:	f000 fbf2 	bl	800fbcc <acc_radar_engine_a121_get_metadata>
 800f3e8:	b110      	cbz	r0, 800f3f0 <acc_pipeline_get_buffer_size+0x14>
 800f3ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800f3ee:	6023      	str	r3, [r4, #0]
 800f3f0:	b00e      	add	sp, #56	@ 0x38
 800f3f2:	bd10      	pop	{r4, pc}

0800f3f4 <acc_pipeline_a121_assemble>:
 800f3f4:	6803      	ldr	r3, [r0, #0]
 800f3f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3fa:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800f3fe:	b09a      	sub	sp, #104	@ 0x68
 800f400:	4607      	mov	r7, r0
 800f402:	4688      	mov	r8, r1
 800f404:	b342      	cbz	r2, 800f458 <acc_pipeline_a121_assemble+0x64>
 800f406:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f40a:	b32b      	cbz	r3, 800f458 <acc_pipeline_a121_assemble+0x64>
 800f40c:	233d      	movs	r3, #61	@ 0x3d
 800f40e:	4aa4      	ldr	r2, [pc, #656]	@ (800f6a0 <acc_pipeline_a121_assemble+0x2ac>)
 800f410:	2110      	movs	r1, #16
 800f412:	2001      	movs	r0, #1
 800f414:	f7ff ff86 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800f418:	233e      	movs	r3, #62	@ 0x3e
 800f41a:	4aa1      	ldr	r2, [pc, #644]	@ (800f6a0 <acc_pipeline_a121_assemble+0x2ac>)
 800f41c:	21fc      	movs	r1, #252	@ 0xfc
 800f41e:	4605      	mov	r5, r0
 800f420:	2001      	movs	r0, #1
 800f422:	f7ff ff7f 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800f426:	2343      	movs	r3, #67	@ 0x43
 800f428:	4604      	mov	r4, r0
 800f42a:	4a9d      	ldr	r2, [pc, #628]	@ (800f6a0 <acc_pipeline_a121_assemble+0x2ac>)
 800f42c:	2160      	movs	r1, #96	@ 0x60
 800f42e:	2001      	movs	r0, #1
 800f430:	f7ff ff78 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800f434:	4606      	mov	r6, r0
 800f436:	b10d      	cbz	r5, 800f43c <acc_pipeline_a121_assemble+0x48>
 800f438:	b104      	cbz	r4, 800f43c <acc_pipeline_a121_assemble+0x48>
 800f43a:	bb2e      	cbnz	r6, 800f488 <acc_pipeline_a121_assemble+0x94>
 800f43c:	4628      	mov	r0, r5
 800f43e:	2500      	movs	r5, #0
 800f440:	f7ff ff8c 	bl	800f35c <acc_rss_integration_mem_free>
 800f444:	4620      	mov	r0, r4
 800f446:	f7ff ff89 	bl	800f35c <acc_rss_integration_mem_free>
 800f44a:	4630      	mov	r0, r6
 800f44c:	f7ff ff86 	bl	800f35c <acc_rss_integration_mem_free>
 800f450:	4628      	mov	r0, r5
 800f452:	b01a      	add	sp, #104	@ 0x68
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	233d      	movs	r3, #61	@ 0x3d
 800f45a:	4a91      	ldr	r2, [pc, #580]	@ (800f6a0 <acc_pipeline_a121_assemble+0x2ac>)
 800f45c:	2110      	movs	r1, #16
 800f45e:	2001      	movs	r0, #1
 800f460:	f7ff ff60 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800f464:	4605      	mov	r5, r0
 800f466:	233e      	movs	r3, #62	@ 0x3e
 800f468:	4a8d      	ldr	r2, [pc, #564]	@ (800f6a0 <acc_pipeline_a121_assemble+0x2ac>)
 800f46a:	21fc      	movs	r1, #252	@ 0xfc
 800f46c:	2001      	movs	r0, #1
 800f46e:	f7ff ff59 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800f472:	4604      	mov	r4, r0
 800f474:	2d00      	cmp	r5, #0
 800f476:	f000 810c 	beq.w	800f692 <acc_pipeline_a121_assemble+0x29e>
 800f47a:	fab0 f380 	clz	r3, r0
 800f47e:	095b      	lsrs	r3, r3, #5
 800f480:	2800      	cmp	r0, #0
 800f482:	f000 8106 	beq.w	800f692 <acc_pipeline_a121_assemble+0x29e>
 800f486:	461e      	mov	r6, r3
 800f488:	f8d7 9000 	ldr.w	r9, [r7]
 800f48c:	a90c      	add	r1, sp, #48	@ 0x30
 800f48e:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
 800f492:	4648      	mov	r0, r9
 800f494:	602c      	str	r4, [r5, #0]
 800f496:	f000 fb99 	bl	800fbcc <acc_radar_engine_a121_get_metadata>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	f000 80df 	beq.w	800f65e <acc_pipeline_a121_assemble+0x26a>
 800f4a0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	f8bd 003e 	ldrh.w	r0, [sp, #62]	@ 0x3e
 800f4aa:	f104 06f0 	add.w	r6, r4, #240	@ 0xf0
 800f4ae:	0052      	lsls	r2, r2, #1
 800f4b0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800f4b4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800f4b8:	f104 0ef4 	add.w	lr, r4, #244	@ 0xf4
 800f4bc:	4403      	add	r3, r0
 800f4be:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
 800f4c2:	f104 02f6 	add.w	r2, r4, #246	@ 0xf6
 800f4c6:	8720      	strh	r0, [r4, #56]	@ 0x38
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 800f4ce:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 800f4d2:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 800f4d6:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 800f4da:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 800f4de:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800f4e2:	6266      	str	r6, [r4, #36]	@ 0x24
 800f4e4:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 800f4e8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 800f4ec:	e9c4 0e21 	strd	r0, lr, [r4, #132]	@ 0x84
 800f4f0:	b132      	cbz	r2, 800f500 <acc_pipeline_a121_assemble+0x10c>
 800f4f2:	f104 00ec 	add.w	r0, r4, #236	@ 0xec
 800f4f6:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 800f4fa:	6256      	str	r6, [r2, #36]	@ 0x24
 800f4fc:	6190      	str	r0, [r2, #24]
 800f4fe:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800f500:	2008      	movs	r0, #8
 800f502:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 800f506:	e9c4 6c36 	strd	r6, ip, [r4, #216]	@ 0xd8
 800f50a:	f002 fd77 	bl	8011ffc <acc_element_sizeof>
 800f50e:	f899 604e 	ldrb.w	r6, [r9, #78]	@ 0x4e
 800f512:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800f516:	b17e      	cbz	r6, 800f538 <acc_pipeline_a121_assemble+0x144>
 800f518:	3e01      	subs	r6, #1
 800f51a:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 800f51e:	f1a8 0202 	sub.w	r2, r8, #2
 800f522:	b2f6      	uxtb	r6, r6
 800f524:	eb08 0646 	add.w	r6, r8, r6, lsl #1
 800f528:	f831 3b02 	ldrh.w	r3, [r1], #2
 800f52c:	fbb3 f3f0 	udiv	r3, r3, r0
 800f530:	f822 3f02 	strh.w	r3, [r2, #2]!
 800f534:	42b2      	cmp	r2, r6
 800f536:	d1f7      	bne.n	800f528 <acc_pipeline_a121_assemble+0x134>
 800f538:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800f53c:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 800f540:	f8d7 9000 	ldr.w	r9, [r7]
 800f544:	441a      	add	r2, r3
 800f546:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800f548:	f8b9 a048 	ldrh.w	sl, [r9, #72]	@ 0x48
 800f54c:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800f550:	f8a8 200e 	strh.w	r2, [r8, #14]
 800f554:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800f558:	f8c8 0008 	str.w	r0, [r8, #8]
 800f55c:	f888 100c 	strb.w	r1, [r8, #12]
 800f560:	f8a8 2010 	strh.w	r2, [r8, #16]
 800f564:	f1ba 0f00 	cmp.w	sl, #0
 800f568:	d003      	beq.n	800f572 <acc_pipeline_a121_assemble+0x17e>
 800f56a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 800f56e:	fbb2 fafa 	udiv	sl, r2, sl
 800f572:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 800f576:	210f      	movs	r1, #15
 800f578:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f57c:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 800f580:	f8bd e032 	ldrh.w	lr, [sp, #50]	@ 0x32
 800f584:	f04f 0c03 	mov.w	ip, #3
 800f588:	441a      	add	r2, r3
 800f58a:	4403      	add	r3, r0
 800f58c:	f8ad 100a 	strh.w	r1, [sp, #10]
 800f590:	4630      	mov	r0, r6
 800f592:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f596:	4669      	mov	r1, sp
 800f598:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 800f59c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f5a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f5a4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800f5a8:	f8ad e000 	strh.w	lr, [sp]
 800f5ac:	f88d c00c 	strb.w	ip, [sp, #12]
 800f5b0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f5b4:	f003 fbb2 	bl	8012d1c <acc_element_frame_aux_init>
 800f5b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800f5bc:	b378      	cbz	r0, 800f61e <acc_pipeline_a121_assemble+0x22a>
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800f5c4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 800f5c8:	9205      	str	r2, [sp, #20]
 800f5ca:	4419      	add	r1, r3
 800f5cc:	f8b9 c048 	ldrh.w	ip, [r9, #72]	@ 0x48
 800f5d0:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 800f5d4:	9207      	str	r2, [sp, #28]
 800f5d6:	920a      	str	r2, [sp, #40]	@ 0x28
 800f5d8:	f8ad a01a 	strh.w	sl, [sp, #26]
 800f5dc:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 800f5e0:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f5e4:	f88d 3016 	strb.w	r3, [sp, #22]
 800f5e8:	f8ad c018 	strh.w	ip, [sp, #24]
 800f5ec:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800f5f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5f2:	9204      	str	r2, [sp, #16]
 800f5f4:	b183      	cbz	r3, 800f618 <acc_pipeline_a121_assemble+0x224>
 800f5f6:	1e59      	subs	r1, r3, #1
 800f5f8:	f10d 0c50 	add.w	ip, sp, #80	@ 0x50
 800f5fc:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 800f600:	aa07      	add	r2, sp, #28
 800f602:	b2c9      	uxtb	r1, r1
 800f604:	eb0c 0e41 	add.w	lr, ip, r1, lsl #1
 800f608:	f833 cb02 	ldrh.w	ip, [r3], #2
 800f60c:	88d9      	ldrh	r1, [r3, #6]
 800f60e:	4573      	cmp	r3, lr
 800f610:	f822 cb02 	strh.w	ip, [r2], #2
 800f614:	80d1      	strh	r1, [r2, #6]
 800f616:	d1f7      	bne.n	800f608 <acc_pipeline_a121_assemble+0x214>
 800f618:	a904      	add	r1, sp, #16
 800f61a:	f003 faa3 	bl	8012b64 <acc_element_frame_init>
 800f61e:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 800f622:	6879      	ldr	r1, [r7, #4]
 800f624:	4640      	mov	r0, r8
 800f626:	f003 fbcf 	bl	8012dc8 <acc_element_sink_a121_callback_init>
 800f62a:	4631      	mov	r1, r6
 800f62c:	4620      	mov	r0, r4
 800f62e:	f002 fcf1 	bl	8012014 <acc_element_connect>
 800f632:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800f636:	2900      	cmp	r1, #0
 800f638:	d02d      	beq.n	800f696 <acc_pipeline_a121_assemble+0x2a2>
 800f63a:	4630      	mov	r0, r6
 800f63c:	f002 fcea 	bl	8012014 <acc_element_connect>
 800f640:	4641      	mov	r1, r8
 800f642:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800f646:	f002 fce5 	bl	8012014 <acc_element_connect>
 800f64a:	6820      	ldr	r0, [r4, #0]
 800f64c:	6883      	ldr	r3, [r0, #8]
 800f64e:	4798      	blx	r3
 800f650:	b990      	cbnz	r0, 800f678 <acc_pipeline_a121_assemble+0x284>
 800f652:	4b14      	ldr	r3, [pc, #80]	@ (800f6a4 <acc_pipeline_a121_assemble+0x2b0>)
 800f654:	4a14      	ldr	r2, [pc, #80]	@ (800f6a8 <acc_pipeline_a121_assemble+0x2b4>)
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	4911      	ldr	r1, [pc, #68]	@ (800f6a0 <acc_pipeline_a121_assemble+0x2ac>)
 800f65a:	4798      	blx	r3
 800f65c:	e004      	b.n	800f668 <acc_pipeline_a121_assemble+0x274>
 800f65e:	4b11      	ldr	r3, [pc, #68]	@ (800f6a4 <acc_pipeline_a121_assemble+0x2b0>)
 800f660:	4a12      	ldr	r2, [pc, #72]	@ (800f6ac <acc_pipeline_a121_assemble+0x2b8>)
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	490e      	ldr	r1, [pc, #56]	@ (800f6a0 <acc_pipeline_a121_assemble+0x2ac>)
 800f666:	4798      	blx	r3
 800f668:	4628      	mov	r0, r5
 800f66a:	2500      	movs	r5, #0
 800f66c:	f7ff fe9e 	bl	800f3ac <pipeline_a121_disassemble>
 800f670:	4628      	mov	r0, r5
 800f672:	b01a      	add	sp, #104	@ 0x68
 800f674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f678:	6820      	ldr	r0, [r4, #0]
 800f67a:	68c3      	ldr	r3, [r0, #12]
 800f67c:	4798      	blx	r3
 800f67e:	490c      	ldr	r1, [pc, #48]	@ (800f6b0 <acc_pipeline_a121_assemble+0x2bc>)
 800f680:	4a0c      	ldr	r2, [pc, #48]	@ (800f6b4 <acc_pipeline_a121_assemble+0x2c0>)
 800f682:	2300      	movs	r3, #0
 800f684:	4628      	mov	r0, r5
 800f686:	6069      	str	r1, [r5, #4]
 800f688:	e9c5 3202 	strd	r3, r2, [r5, #8]
 800f68c:	b01a      	add	sp, #104	@ 0x68
 800f68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f692:	2600      	movs	r6, #0
 800f694:	e6d2      	b.n	800f43c <acc_pipeline_a121_assemble+0x48>
 800f696:	4641      	mov	r1, r8
 800f698:	4630      	mov	r0, r6
 800f69a:	f002 fcbb 	bl	8012014 <acc_element_connect>
 800f69e:	e7d4      	b.n	800f64a <acc_pipeline_a121_assemble+0x256>
 800f6a0:	0801be90 	.word	0x0801be90
 800f6a4:	24003210 	.word	0x24003210
 800f6a8:	0801bea0 	.word	0x0801bea0
 800f6ac:	0801be6c 	.word	0x0801be6c
 800f6b0:	0800f39d 	.word	0x0800f39d
 800f6b4:	0800f3ad 	.word	0x0800f3ad

0800f6b8 <acc_pipeline_a121_prepare_memory>:
 800f6b8:	6803      	ldr	r3, [r0, #0]
 800f6ba:	b430      	push	{r4, r5}
 800f6bc:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 800f6c0:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 800f6c2:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 800f6c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800f6ca:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800f6ce:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800f6d2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f6d6:	615c      	str	r4, [r3, #20]
 800f6d8:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 800f6dc:	b14d      	cbz	r5, 800f6f2 <acc_pipeline_a121_prepare_memory+0x3a>
 800f6de:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 800f6e2:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 800f6e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800f6ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f6ee:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800f6f2:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 800f6f6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800f6fa:	bc30      	pop	{r4, r5}
 800f6fc:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop

0800f704 <acc_radar_engine_a121_context_create>:
 800f704:	b508      	push	{r3, lr}
 800f706:	4a07      	ldr	r2, [pc, #28]	@ (800f724 <acc_radar_engine_a121_context_create+0x20>)
 800f708:	2373      	movs	r3, #115	@ 0x73
 800f70a:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800f70e:	2001      	movs	r0, #1
 800f710:	f7ff fe08 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 800f714:	b120      	cbz	r0, 800f720 <acc_radar_engine_a121_context_create+0x1c>
 800f716:	2301      	movs	r3, #1
 800f718:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 800f71c:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 800f720:	bd08      	pop	{r3, pc}
 800f722:	bf00      	nop
 800f724:	0801bec0 	.word	0x0801bec0

0800f728 <acc_radar_engine_a121_context_destroy>:
 800f728:	b108      	cbz	r0, 800f72e <acc_radar_engine_a121_context_destroy+0x6>
 800f72a:	f7ff be17 	b.w	800f35c <acc_rss_integration_mem_free>
 800f72e:	4770      	bx	lr

0800f730 <acc_radar_engine_a121_run_program>:
 800f730:	f003 bbfc 	b.w	8012f2c <acc_cpd_a121_meas_session_run_program>

0800f734 <acc_radar_engine_a121_measure>:
 800f734:	b510      	push	{r4, lr}
 800f736:	460c      	mov	r4, r1
 800f738:	2201      	movs	r2, #1
 800f73a:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800f73e:	f000 fc5f 	bl	8010000 <acc_sensor_protocol_a121_ack_event>
 800f742:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 800f746:	b143      	cbz	r3, 800f75a <acc_radar_engine_a121_measure+0x26>
 800f748:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	bf0c      	ite	eq
 800f750:	2301      	moveq	r3, #1
 800f752:	2302      	movne	r3, #2
 800f754:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800f758:	bd10      	pop	{r4, pc}
 800f75a:	2301      	movs	r3, #1
 800f75c:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800f760:	bd10      	pop	{r4, pc}
 800f762:	bf00      	nop

0800f764 <acc_radar_engine_a121_transfer_data>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800f76a:	461d      	mov	r5, r3
 800f76c:	9c04      	ldr	r4, [sp, #16]
 800f76e:	2901      	cmp	r1, #1
 800f770:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800f774:	bf14      	ite	ne
 800f776:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 800f77a:	2100      	moveq	r1, #0
 800f77c:	f003 fc4e 	bl	801301c <acc_cpd_a121_meas_session_transfer_data>
 800f780:	b118      	cbz	r0, 800f78a <acc_radar_engine_a121_transfer_data+0x26>
 800f782:	1e28      	subs	r0, r5, #0
 800f784:	bf18      	it	ne
 800f786:	2001      	movne	r0, #1
 800f788:	bd38      	pop	{r3, r4, r5, pc}
 800f78a:	4b04      	ldr	r3, [pc, #16]	@ (800f79c <acc_radar_engine_a121_transfer_data+0x38>)
 800f78c:	4604      	mov	r4, r0
 800f78e:	4a04      	ldr	r2, [pc, #16]	@ (800f7a0 <acc_radar_engine_a121_transfer_data+0x3c>)
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	4904      	ldr	r1, [pc, #16]	@ (800f7a4 <acc_radar_engine_a121_transfer_data+0x40>)
 800f794:	4798      	blx	r3
 800f796:	4620      	mov	r0, r4
 800f798:	bd38      	pop	{r3, r4, r5, pc}
 800f79a:	bf00      	nop
 800f79c:	24003210 	.word	0x24003210
 800f7a0:	0801bed4 	.word	0x0801bed4
 800f7a4:	0801bec0 	.word	0x0801bec0

0800f7a8 <acc_radar_engine_a121_verify_radar_data_ready>:
 800f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ac:	2400      	movs	r4, #0
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	460d      	mov	r5, r1
 800f7b2:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800f7b6:	4616      	mov	r6, r2
 800f7b8:	4607      	mov	r7, r0
 800f7ba:	9403      	str	r4, [sp, #12]
 800f7bc:	f000 fc04 	bl	800ffc8 <acc_sensor_protocol_a121_is_event_pending>
 800f7c0:	b988      	cbnz	r0, 800f7e6 <acc_radar_engine_a121_verify_radar_data_ready+0x3e>
 800f7c2:	4916      	ldr	r1, [pc, #88]	@ (800f81c <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800f7c4:	463b      	mov	r3, r7
 800f7c6:	4a16      	ldr	r2, [pc, #88]	@ (800f820 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	690d      	ldr	r5, [r1, #16]
 800f7cc:	f10d 080c 	add.w	r8, sp, #12
 800f7d0:	4914      	ldr	r1, [pc, #80]	@ (800f824 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800f7d2:	47a8      	blx	r5
 800f7d4:	4640      	mov	r0, r8
 800f7d6:	f000 fcd5 	bl	8010184 <acc_sensor_protocol_a121_get_frame_delayed_flag>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	4620      	mov	r0, r4
 800f7de:	7033      	strb	r3, [r6, #0]
 800f7e0:	b004      	add	sp, #16
 800f7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7e6:	f10d 080c 	add.w	r8, sp, #12
 800f7ea:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	4642      	mov	r2, r8
 800f7f2:	f000 fc4d 	bl	8010090 <acc_sensor_protocol_a121_get_event>
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d0eb      	beq.n	800f7d4 <acc_radar_engine_a121_verify_radar_data_ready+0x2c>
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	f000 fcb1 	bl	8010164 <acc_sensor_protocol_a121_is_handshake>
 800f802:	4604      	mov	r4, r0
 800f804:	2800      	cmp	r0, #0
 800f806:	d1e5      	bne.n	800f7d4 <acc_radar_engine_a121_verify_radar_data_ready+0x2c>
 800f808:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800f80c:	463b      	mov	r3, r7
 800f80e:	4903      	ldr	r1, [pc, #12]	@ (800f81c <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800f810:	690d      	ldr	r5, [r1, #16]
 800f812:	9200      	str	r2, [sp, #0]
 800f814:	4903      	ldr	r1, [pc, #12]	@ (800f824 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800f816:	4a04      	ldr	r2, [pc, #16]	@ (800f828 <acc_radar_engine_a121_verify_radar_data_ready+0x80>)
 800f818:	47a8      	blx	r5
 800f81a:	e7db      	b.n	800f7d4 <acc_radar_engine_a121_verify_radar_data_ready+0x2c>
 800f81c:	24003210 	.word	0x24003210
 800f820:	0801bf00 	.word	0x0801bf00
 800f824:	0801bec0 	.word	0x0801bec0
 800f828:	0801bf20 	.word	0x0801bf20

0800f82c <acc_radar_engine_a121_update_buffer_header>:
 800f82c:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 800f830:	8011      	strh	r1, [r2, #0]
 800f832:	b4f0      	push	{r4, r5, r6, r7}
 800f834:	b133      	cbz	r3, 800f844 <acc_radar_engine_a121_update_buffer_header+0x18>
 800f836:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 800f83a:	f1a3 0301 	sub.w	r3, r3, #1
 800f83e:	fab3 f383 	clz	r3, r3
 800f842:	095b      	lsrs	r3, r3, #5
 800f844:	8053      	strh	r3, [r2, #2]
 800f846:	1d91      	adds	r1, r2, #6
 800f848:	f8b0 41c8 	ldrh.w	r4, [r0, #456]	@ 0x1c8
 800f84c:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 800f850:	f500 75fd 	add.w	r5, r0, #506	@ 0x1fa
 800f854:	8094      	strh	r4, [r2, #4]
 800f856:	f8d3 c000 	ldr.w	ip, [r3]
 800f85a:	3310      	adds	r3, #16
 800f85c:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 800f860:	3110      	adds	r1, #16
 800f862:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800f866:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800f86a:	42ab      	cmp	r3, r5
 800f86c:	f841 cc10 	str.w	ip, [r1, #-16]
 800f870:	f841 7c0c 	str.w	r7, [r1, #-12]
 800f874:	f841 6c08 	str.w	r6, [r1, #-8]
 800f878:	f841 4c04 	str.w	r4, [r1, #-4]
 800f87c:	d1eb      	bne.n	800f856 <acc_radar_engine_a121_update_buffer_header+0x2a>
 800f87e:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 800f882:	bcf0      	pop	{r4, r5, r6, r7}
 800f884:	86d3      	strh	r3, [r2, #54]	@ 0x36
 800f886:	4770      	bx	lr

0800f888 <acc_radar_engine_a121_check_asic_id>:
 800f888:	f000 bc80 	b.w	801018c <acc_sensor_protocol_a121_check_asic_id>

0800f88c <acc_radar_engine_a121_is_sensor_running>:
 800f88c:	f000 bb8a 	b.w	800ffa4 <acc_sensor_protocol_a121_is_sensor_running>

0800f890 <acc_radar_engine_121_populate_metadata>:
 800f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f894:	2a00      	cmp	r2, #0
 800f896:	8806      	ldrh	r6, [r0, #0]
 800f898:	461c      	mov	r4, r3
 800f89a:	4605      	mov	r5, r0
 800f89c:	bf14      	ite	ne
 800f89e:	f44f 5380 	movne.w	r3, #4096	@ 0x1000
 800f8a2:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
 800f8a6:	f5b6 6f9c 	cmp.w	r6, #1248	@ 0x4e0
 800f8aa:	460f      	mov	r7, r1
 800f8ac:	bf38      	it	cc
 800f8ae:	f44f 669c 	movcc.w	r6, #1248	@ 0x4e0
 800f8b2:	42b3      	cmp	r3, r6
 800f8b4:	d22f      	bcs.n	800f916 <acc_radar_engine_121_populate_metadata+0x86>
 800f8b6:	4b19      	ldr	r3, [pc, #100]	@ (800f91c <acc_radar_engine_121_populate_metadata+0x8c>)
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	4a19      	ldr	r2, [pc, #100]	@ (800f920 <acc_radar_engine_121_populate_metadata+0x90>)
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	4680      	mov	r8, r0
 800f8c0:	4918      	ldr	r1, [pc, #96]	@ (800f924 <acc_radar_engine_121_populate_metadata+0x94>)
 800f8c2:	4798      	blx	r3
 800f8c4:	4918      	ldr	r1, [pc, #96]	@ (800f928 <acc_radar_engine_121_populate_metadata+0x98>)
 800f8c6:	231c      	movs	r3, #28
 800f8c8:	4a18      	ldr	r2, [pc, #96]	@ (800f92c <acc_radar_engine_121_populate_metadata+0x9c>)
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	81a3      	strh	r3, [r4, #12]
 800f8ce:	8060      	strh	r0, [r4, #2]
 800f8d0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f8d4:	f000 f9f4 	bl	800fcc0 <acc_sensor_a121_get_max_header_length>
 800f8d8:	4684      	mov	ip, r0
 800f8da:	6869      	ldr	r1, [r5, #4]
 800f8dc:	f10c 0c1c 	add.w	ip, ip, #28
 800f8e0:	6828      	ldr	r0, [r5, #0]
 800f8e2:	68aa      	ldr	r2, [r5, #8]
 800f8e4:	fa1f fc8c 	uxth.w	ip, ip
 800f8e8:	68eb      	ldr	r3, [r5, #12]
 800f8ea:	4466      	add	r6, ip
 800f8ec:	f8a4 c00e 	strh.w	ip, [r4, #14]
 800f8f0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800f8f4:	0076      	lsls	r6, r6, #1
 800f8f6:	f824 6b10 	strh.w	r6, [r4], #16
 800f8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8fc:	6928      	ldr	r0, [r5, #16]
 800f8fe:	6969      	ldr	r1, [r5, #20]
 800f900:	69aa      	ldr	r2, [r5, #24]
 800f902:	c407      	stmia	r4!, {r0, r1, r2}
 800f904:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f908:	8bab      	ldrh	r3, [r5, #28]
 800f90a:	8023      	strh	r3, [r4, #0]
 800f90c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f910:	4640      	mov	r0, r8
 800f912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f916:	f04f 0801 	mov.w	r8, #1
 800f91a:	e7d3      	b.n	800f8c4 <acc_radar_engine_121_populate_metadata+0x34>
 800f91c:	24003210 	.word	0x24003210
 800f920:	0801bf4c 	.word	0x0801bf4c
 800f924:	0801bec0 	.word	0x0801bec0
 800f928:	00020001 	.word	0x00020001
 800f92c:	001b0003 	.word	0x001b0003

0800f930 <acc_radar_engine_a121_prepare>:
 800f930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f934:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800f938:	460c      	mov	r4, r1
 800f93a:	4615      	mov	r5, r2
 800f93c:	2100      	movs	r1, #0
 800f93e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800f942:	4606      	mov	r6, r0
 800f944:	f10d 090c 	add.w	r9, sp, #12
 800f948:	a81b      	add	r0, sp, #108	@ 0x6c
 800f94a:	4698      	mov	r8, r3
 800f94c:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 800f94e:	f008 ffcb 	bl	80188e8 <memset>
 800f952:	2238      	movs	r2, #56	@ 0x38
 800f954:	2100      	movs	r1, #0
 800f956:	a80d      	add	r0, sp, #52	@ 0x34
 800f958:	f008 ffc6 	bl	80188e8 <memset>
 800f95c:	4629      	mov	r1, r5
 800f95e:	4620      	mov	r0, r4
 800f960:	aa1b      	add	r2, sp, #108	@ 0x6c
 800f962:	ab05      	add	r3, sp, #20
 800f964:	f8cd 9000 	str.w	r9, [sp]
 800f968:	f001 fb88 	bl	801107c <acc_translation_a121_translate>
 800f96c:	b930      	cbnz	r0, 800f97c <acc_radar_engine_a121_prepare+0x4c>
 800f96e:	f04f 0900 	mov.w	r9, #0
 800f972:	4648      	mov	r0, r9
 800f974:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800f978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f97c:	4649      	mov	r1, r9
 800f97e:	a805      	add	r0, sp, #20
 800f980:	ab0d      	add	r3, sp, #52	@ 0x34
 800f982:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800f986:	f7ff ff83 	bl	800f890 <acc_radar_engine_121_populate_metadata>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d0ef      	beq.n	800f96e <acc_radar_engine_a121_prepare+0x3e>
 800f98e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f992:	2304      	movs	r3, #4
 800f994:	9896      	ldr	r0, [sp, #600]	@ 0x258
 800f996:	aa1b      	add	r2, sp, #108	@ 0x6c
 800f998:	f8bd c044 	ldrh.w	ip, [sp, #68]	@ 0x44
 800f99c:	8001      	strh	r1, [r0, #0]
 800f99e:	4631      	mov	r1, r6
 800f9a0:	9897      	ldr	r0, [sp, #604]	@ 0x25c
 800f9a2:	f8a0 c000 	strh.w	ip, [r0]
 800f9a6:	2014      	movs	r0, #20
 800f9a8:	f002 fb56 	bl	8012058 <acc_probes_execute_struct>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d0de      	beq.n	800f96e <acc_radar_engine_a121_prepare+0x3e>
 800f9b0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f9b2:	4642      	mov	r2, r8
 800f9b4:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f003 fa88 	bl	8012ecc <acc_cpd_a121_meas_session_load_program>
 800f9bc:	4681      	mov	r9, r0
 800f9be:	b928      	cbnz	r0, 800f9cc <acc_radar_engine_a121_prepare+0x9c>
 800f9c0:	4b29      	ldr	r3, [pc, #164]	@ (800fa68 <acc_radar_engine_a121_prepare+0x138>)
 800f9c2:	4a2a      	ldr	r2, [pc, #168]	@ (800fa6c <acc_radar_engine_a121_prepare+0x13c>)
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	492a      	ldr	r1, [pc, #168]	@ (800fa70 <acc_radar_engine_a121_prepare+0x140>)
 800f9c8:	4798      	blx	r3
 800f9ca:	e7d2      	b.n	800f972 <acc_radar_engine_a121_prepare+0x42>
 800f9cc:	2360      	movs	r3, #96	@ 0x60
 800f9ce:	4929      	ldr	r1, [pc, #164]	@ (800fa74 <acc_radar_engine_a121_prepare+0x144>)
 800f9d0:	4642      	mov	r2, r8
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	9100      	str	r1, [sp, #0]
 800f9da:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800f9dc:	f000 facc 	bl	800ff78 <acc_sensor_protocol_a121_load_lut>
 800f9e0:	4681      	mov	r9, r0
 800f9e2:	b3d8      	cbz	r0, 800fa5c <acc_radar_engine_a121_prepare+0x12c>
 800f9e4:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800f9e8:	a91b      	add	r1, sp, #108	@ 0x6c
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	f009 f833 	bl	8018a56 <memcpy>
 800f9f0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800f9f4:	b122      	cbz	r2, 800fa00 <acc_radar_engine_a121_prepare+0xd0>
 800f9f6:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 800f9fa:	1e1a      	subs	r2, r3, #0
 800f9fc:	bf18      	it	ne
 800f9fe:	2201      	movne	r2, #1
 800fa00:	2101      	movs	r1, #1
 800fa02:	462b      	mov	r3, r5
 800fa04:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 800fa08:	f105 0c56 	add.w	ip, r5, #86	@ 0x56
 800fa0c:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 800fa10:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 800fa14:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 800fa18:	f833 2b26 	ldrh.w	r2, [r3], #38
 800fa1c:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 800fa20:	f8a7 21c8 	strh.w	r2, [r7, #456]	@ 0x1c8
 800fa24:	681e      	ldr	r6, [r3, #0]
 800fa26:	3310      	adds	r3, #16
 800fa28:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 800fa2c:	3110      	adds	r1, #16
 800fa2e:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800fa32:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800fa36:	4563      	cmp	r3, ip
 800fa38:	f841 6c10 	str.w	r6, [r1, #-16]
 800fa3c:	f841 4c0c 	str.w	r4, [r1, #-12]
 800fa40:	f841 0c08 	str.w	r0, [r1, #-8]
 800fa44:	f841 2c04 	str.w	r2, [r1, #-4]
 800fa48:	d1ec      	bne.n	800fa24 <acc_radar_engine_a121_prepare+0xf4>
 800fa4a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	@ 0x56
 800fa4e:	4648      	mov	r0, r9
 800fa50:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 800fa54:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800fa58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa5c:	4b02      	ldr	r3, [pc, #8]	@ (800fa68 <acc_radar_engine_a121_prepare+0x138>)
 800fa5e:	4a06      	ldr	r2, [pc, #24]	@ (800fa78 <acc_radar_engine_a121_prepare+0x148>)
 800fa60:	691b      	ldr	r3, [r3, #16]
 800fa62:	4903      	ldr	r1, [pc, #12]	@ (800fa70 <acc_radar_engine_a121_prepare+0x140>)
 800fa64:	4798      	blx	r3
 800fa66:	e784      	b.n	800f972 <acc_radar_engine_a121_prepare+0x42>
 800fa68:	24003210 	.word	0x24003210
 800fa6c:	0801bf6c 	.word	0x0801bf6c
 800fa70:	0801bec0 	.word	0x0801bec0
 800fa74:	0801e364 	.word	0x0801e364
 800fa78:	0801bf80 	.word	0x0801bf80

0800fa7c <acc_radar_engine_a121_reconfigure>:
 800fa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa80:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800fa84:	4607      	mov	r7, r0
 800fa86:	460d      	mov	r5, r1
 800fa88:	4616      	mov	r6, r2
 800fa8a:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 800fa8c:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800fa90:	2100      	movs	r1, #0
 800fa92:	a81b      	add	r0, sp, #108	@ 0x6c
 800fa94:	469a      	mov	sl, r3
 800fa96:	f008 ff27 	bl	80188e8 <memset>
 800fa9a:	a80d      	add	r0, sp, #52	@ 0x34
 800fa9c:	2238      	movs	r2, #56	@ 0x38
 800fa9e:	2100      	movs	r1, #0
 800faa0:	f008 ff22 	bl	80188e8 <memset>
 800faa4:	f894 91c5 	ldrb.w	r9, [r4, #453]	@ 0x1c5
 800faa8:	f1b9 0f00 	cmp.w	r9, #0
 800faac:	d00b      	beq.n	800fac6 <acc_radar_engine_a121_reconfigure+0x4a>
 800faae:	2000      	movs	r0, #0
 800fab0:	4b43      	ldr	r3, [pc, #268]	@ (800fbc0 <acc_radar_engine_a121_reconfigure+0x144>)
 800fab2:	4a44      	ldr	r2, [pc, #272]	@ (800fbc4 <acc_radar_engine_a121_reconfigure+0x148>)
 800fab4:	4680      	mov	r8, r0
 800fab6:	691b      	ldr	r3, [r3, #16]
 800fab8:	4943      	ldr	r1, [pc, #268]	@ (800fbc8 <acc_radar_engine_a121_reconfigure+0x14c>)
 800faba:	4798      	blx	r3
 800fabc:	4640      	mov	r0, r8
 800fabe:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800fac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac6:	f10d 080c 	add.w	r8, sp, #12
 800faca:	aa1b      	add	r2, sp, #108	@ 0x6c
 800facc:	4631      	mov	r1, r6
 800face:	ab05      	add	r3, sp, #20
 800fad0:	4628      	mov	r0, r5
 800fad2:	f8cd 8000 	str.w	r8, [sp]
 800fad6:	f001 fad1 	bl	801107c <acc_translation_a121_translate>
 800fada:	2800      	cmp	r0, #0
 800fadc:	d069      	beq.n	800fbb2 <acc_radar_engine_a121_reconfigure+0x136>
 800fade:	4641      	mov	r1, r8
 800fae0:	a805      	add	r0, sp, #20
 800fae2:	ab0d      	add	r3, sp, #52	@ 0x34
 800fae4:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800fae8:	f7ff fed2 	bl	800f890 <acc_radar_engine_121_populate_metadata>
 800faec:	2800      	cmp	r0, #0
 800faee:	d060      	beq.n	800fbb2 <acc_radar_engine_a121_reconfigure+0x136>
 800faf0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800faf4:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800faf8:	9896      	ldr	r0, [sp, #600]	@ 0x258
 800fafa:	aa1b      	add	r2, sp, #108	@ 0x6c
 800fafc:	f8bd c044 	ldrh.w	ip, [sp, #68]	@ 0x44
 800fb00:	8001      	strh	r1, [r0, #0]
 800fb02:	4639      	mov	r1, r7
 800fb04:	9897      	ldr	r0, [sp, #604]	@ 0x25c
 800fb06:	f8a0 c000 	strh.w	ip, [r0]
 800fb0a:	2014      	movs	r0, #20
 800fb0c:	f002 faa4 	bl	8012058 <acc_probes_execute_struct>
 800fb10:	4680      	mov	r8, r0
 800fb12:	2800      	cmp	r0, #0
 800fb14:	d04d      	beq.n	800fbb2 <acc_radar_engine_a121_reconfigure+0x136>
 800fb16:	a91b      	add	r1, sp, #108	@ 0x6c
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f003 fa0b 	bl	8012f34 <acc_cpd_a121_meas_session_is_patch_needed>
 800fb1e:	bbf0      	cbnz	r0, 800fb9e <acc_radar_engine_a121_reconfigure+0x122>
 800fb20:	a91b      	add	r1, sp, #108	@ 0x6c
 800fb22:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800fb26:	4620      	mov	r0, r4
 800fb28:	f008 ff95 	bl	8018a56 <memcpy>
 800fb2c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800fb30:	bb6b      	cbnz	r3, 800fb8e <acc_radar_engine_a121_reconfigure+0x112>
 800fb32:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800fb36:	2101      	movs	r1, #1
 800fb38:	4633      	mov	r3, r6
 800fb3a:	f106 0c56 	add.w	ip, r6, #86	@ 0x56
 800fb3e:	f884 11c6 	strb.w	r1, [r4, #454]	@ 0x1c6
 800fb42:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 800fb46:	f884 21c5 	strb.w	r2, [r4, #453]	@ 0x1c5
 800fb4a:	f833 2b26 	ldrh.w	r2, [r3], #38
 800fb4e:	f884 91c4 	strb.w	r9, [r4, #452]	@ 0x1c4
 800fb52:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 800fb56:	681f      	ldr	r7, [r3, #0]
 800fb58:	3310      	adds	r3, #16
 800fb5a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800fb5e:	3110      	adds	r1, #16
 800fb60:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800fb64:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800fb68:	4563      	cmp	r3, ip
 800fb6a:	f841 7c10 	str.w	r7, [r1, #-16]
 800fb6e:	f841 5c0c 	str.w	r5, [r1, #-12]
 800fb72:	f841 0c08 	str.w	r0, [r1, #-8]
 800fb76:	f841 2c04 	str.w	r2, [r1, #-4]
 800fb7a:	d1ec      	bne.n	800fb56 <acc_radar_engine_a121_reconfigure+0xda>
 800fb7c:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 800fb80:	4640      	mov	r0, r8
 800fb82:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 800fb86:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800fb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb8e:	f895 904e 	ldrb.w	r9, [r5, #78]	@ 0x4e
 800fb92:	f1b9 0900 	subs.w	r9, r9, #0
 800fb96:	bf18      	it	ne
 800fb98:	f04f 0901 	movne.w	r9, #1
 800fb9c:	e7c9      	b.n	800fb32 <acc_radar_engine_a121_reconfigure+0xb6>
 800fb9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fba0:	4652      	mov	r2, sl
 800fba2:	4638      	mov	r0, r7
 800fba4:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	4623      	mov	r3, r4
 800fbaa:	f003 f9d5 	bl	8012f58 <acc_cpd_a121_meas_session_update_program>
 800fbae:	2800      	cmp	r0, #0
 800fbb0:	d1b6      	bne.n	800fb20 <acc_radar_engine_a121_reconfigure+0xa4>
 800fbb2:	f04f 0800 	mov.w	r8, #0
 800fbb6:	4640      	mov	r0, r8
 800fbb8:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800fbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc0:	24003210 	.word	0x24003210
 800fbc4:	0801bf90 	.word	0x0801bf90
 800fbc8:	0801bec0 	.word	0x0801bec0

0800fbcc <acc_radar_engine_a121_get_metadata>:
 800fbcc:	b570      	push	{r4, r5, r6, lr}
 800fbce:	b0fe      	sub	sp, #504	@ 0x1f8
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800fbd6:	460d      	mov	r5, r1
 800fbd8:	ae03      	add	r6, sp, #12
 800fbda:	2100      	movs	r1, #0
 800fbdc:	a80d      	add	r0, sp, #52	@ 0x34
 800fbde:	f008 fe83 	bl	80188e8 <memset>
 800fbe2:	aa0d      	add	r2, sp, #52	@ 0x34
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	ab05      	add	r3, sp, #20
 800fbe8:	2100      	movs	r1, #0
 800fbea:	9600      	str	r6, [sp, #0]
 800fbec:	f001 fa46 	bl	801107c <acc_translation_a121_translate>
 800fbf0:	b908      	cbnz	r0, 800fbf6 <acc_radar_engine_a121_get_metadata+0x2a>
 800fbf2:	b07e      	add	sp, #504	@ 0x1f8
 800fbf4:	bd70      	pop	{r4, r5, r6, pc}
 800fbf6:	462b      	mov	r3, r5
 800fbf8:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800fbfc:	4631      	mov	r1, r6
 800fbfe:	a805      	add	r0, sp, #20
 800fc00:	f7ff fe46 	bl	800f890 <acc_radar_engine_121_populate_metadata>
 800fc04:	b07e      	add	sp, #504	@ 0x1f8
 800fc06:	bd70      	pop	{r4, r5, r6, pc}

0800fc08 <acc_radar_engine_a121_points_to_meter>:
 800fc08:	f000 bce8 	b.w	80105dc <acc_translation_a121_points_to_meter>

0800fc0c <acc_radar_engine_a121_init_interrupts>:
 800fc0c:	f000 b906 	b.w	800fe1c <acc_sensor_protocol_a121_init_interrupts>

0800fc10 <acc_radar_engine_a121_hibernate_off>:
 800fc10:	f000 baf2 	b.w	80101f8 <acc_sensor_protocol_a121_hibernate_off>

0800fc14 <acc_radar_engine_a121_is_hibernate>:
 800fc14:	f000 bb2a 	b.w	801026c <acc_sensor_protocol_a121_is_hibernate>

0800fc18 <internal_buffer_processed_read.part.0>:
 800fc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc1c:	469a      	mov	sl, r3
 800fc1e:	b085      	sub	sp, #20
 800fc20:	2600      	movs	r6, #0
 800fc22:	4683      	mov	fp, r0
 800fc24:	4689      	mov	r9, r1
 800fc26:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 800fc2a:	9200      	str	r2, [sp, #0]
 800fc2c:	f7ff fb2a 	bl	800f284 <acc_rss_integration_get_max_spi_transfer_size>
 800fc30:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800fc34:	f1ba 0f00 	cmp.w	sl, #0
 800fc38:	d03d      	beq.n	800fcb6 <internal_buffer_processed_read.part.0+0x9e>
 800fc3a:	42b4      	cmp	r4, r6
 800fc3c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800fc40:	464d      	mov	r5, r9
 800fc42:	4657      	mov	r7, sl
 800fc44:	bf14      	ite	ne
 800fc46:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 800fc4a:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 800fc4e:	f1a0 0804 	sub.w	r8, r0, #4
 800fc52:	9301      	str	r3, [sp, #4]
 800fc54:	e024      	b.n	800fca0 <internal_buffer_processed_read.part.0+0x88>
 800fc56:	9b00      	ldr	r3, [sp, #0]
 800fc58:	f04f 0100 	mov.w	r1, #0
 800fc5c:	9a01      	ldr	r2, [sp, #4]
 800fc5e:	1b3f      	subs	r7, r7, r4
 800fc60:	1998      	adds	r0, r3, r6
 800fc62:	1e63      	subs	r3, r4, #1
 800fc64:	802a      	strh	r2, [r5, #0]
 800fc66:	0062      	lsls	r2, r4, #1
 800fc68:	80e9      	strh	r1, [r5, #6]
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	8068      	strh	r0, [r5, #2]
 800fc6e:	f105 0008 	add.w	r0, r5, #8
 800fc72:	80ab      	strh	r3, [r5, #4]
 800fc74:	4426      	add	r6, r4
 800fc76:	f008 fe37 	bl	80188e8 <memset>
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	1d22      	adds	r2, r4, #4
 800fc7e:	2301      	movs	r3, #1
 800fc80:	4658      	mov	r0, fp
 800fc82:	f7ff fb05 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 800fc86:	aa02      	add	r2, sp, #8
 800fc88:	4556      	cmp	r6, sl
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	ca03      	ldmia	r2!, {r0, r1}
 800fc8e:	6069      	str	r1, [r5, #4]
 800fc90:	6028      	str	r0, [r5, #0]
 800fc92:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 800fc96:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 800fc9a:	6869      	ldr	r1, [r5, #4]
 800fc9c:	c303      	stmia	r3!, {r0, r1}
 800fc9e:	d20a      	bcs.n	800fcb6 <internal_buffer_processed_read.part.0+0x9e>
 800fca0:	45b8      	cmp	r8, r7
 800fca2:	4644      	mov	r4, r8
 800fca4:	bf28      	it	cs
 800fca6:	463c      	movcs	r4, r7
 800fca8:	45b8      	cmp	r8, r7
 800fcaa:	d2d4      	bcs.n	800fc56 <internal_buffer_processed_read.part.0+0x3e>
 800fcac:	e000      	b.n	800fcb0 <internal_buffer_processed_read.part.0+0x98>
 800fcae:	3c01      	subs	r4, #1
 800fcb0:	07e3      	lsls	r3, r4, #31
 800fcb2:	d4fc      	bmi.n	800fcae <internal_buffer_processed_read.part.0+0x96>
 800fcb4:	e7cf      	b.n	800fc56 <internal_buffer_processed_read.part.0+0x3e>
 800fcb6:	f109 0008 	add.w	r0, r9, #8
 800fcba:	b005      	add	sp, #20
 800fcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcc0 <acc_sensor_a121_get_max_header_length>:
 800fcc0:	2004      	movs	r0, #4
 800fcc2:	4770      	bx	lr

0800fcc4 <acc_sensor_a121_conf_write_instr>:
 800fcc4:	b530      	push	{r4, r5, lr}
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	b085      	sub	sp, #20
 800fcca:	f441 41a0 	orr.w	r1, r1, #20480	@ 0x5000
 800fcce:	4615      	mov	r5, r2
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	a801      	add	r0, sp, #4
 800fcd6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fcda:	a903      	add	r1, sp, #12
 800fcdc:	f8ad 300a 	strh.w	r3, [sp, #10]
 800fce0:	9501      	str	r5, [sp, #4]
 800fce2:	f002 fb69 	bl	80123b8 <acc_utils_uint32_to_transfer_buffer>
 800fce6:	4620      	mov	r0, r4
 800fce8:	a902      	add	r1, sp, #8
 800fcea:	2300      	movs	r3, #0
 800fcec:	2204      	movs	r2, #4
 800fcee:	f7ff facf 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 800fcf2:	b005      	add	sp, #20
 800fcf4:	bd30      	pop	{r4, r5, pc}
 800fcf6:	bf00      	nop

0800fcf8 <acc_sensor_a121_prepare_load_confmem>:
 800fcf8:	0849      	lsrs	r1, r1, #1
 800fcfa:	b570      	push	{r4, r5, r6, lr}
 800fcfc:	461c      	mov	r4, r3
 800fcfe:	6019      	str	r1, [r3, #0]
 800fd00:	4605      	mov	r5, r0
 800fd02:	4616      	mov	r6, r2
 800fd04:	f7ff fabe 	bl	800f284 <acc_rss_integration_get_max_spi_transfer_size>
 800fd08:	6821      	ldr	r1, [r4, #0]
 800fd0a:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800fd0e:	d806      	bhi.n	800fd1e <acc_sensor_a121_prepare_load_confmem+0x26>
 800fd10:	3902      	subs	r1, #2
 800fd12:	3504      	adds	r5, #4
 800fd14:	f021 0101 	bic.w	r1, r1, #1
 800fd18:	6035      	str	r5, [r6, #0]
 800fd1a:	6021      	str	r1, [r4, #0]
 800fd1c:	bd70      	pop	{r4, r5, r6, pc}
 800fd1e:	f7ff fab1 	bl	800f284 <acc_rss_integration_get_max_spi_transfer_size>
 800fd22:	0841      	lsrs	r1, r0, #1
 800fd24:	e7f4      	b.n	800fd10 <acc_sensor_a121_prepare_load_confmem+0x18>
 800fd26:	bf00      	nop

0800fd28 <acc_sensor_a121_load_confmem>:
 800fd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2c:	f103 0802 	add.w	r8, r3, #2
 800fd30:	461c      	mov	r4, r3
 800fd32:	4607      	mov	r7, r0
 800fd34:	460e      	mov	r6, r1
 800fd36:	4615      	mov	r5, r2
 800fd38:	f7ff faa4 	bl	800f284 <acc_rss_integration_get_max_spi_transfer_size>
 800fd3c:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 800fd40:	d207      	bcs.n	800fd52 <acc_sensor_a121_load_confmem+0x2a>
 800fd42:	4b0b      	ldr	r3, [pc, #44]	@ (800fd70 <acc_sensor_a121_load_confmem+0x48>)
 800fd44:	2000      	movs	r0, #0
 800fd46:	4a0b      	ldr	r2, [pc, #44]	@ (800fd74 <acc_sensor_a121_load_confmem+0x4c>)
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	490b      	ldr	r1, [pc, #44]	@ (800fd78 <acc_sensor_a121_load_confmem+0x50>)
 800fd4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd50:	4718      	bx	r3
 800fd52:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 800fd56:	3c01      	subs	r4, #1
 800fd58:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 800fd5c:	4638      	mov	r0, r7
 800fd5e:	8029      	strh	r1, [r5, #0]
 800fd60:	2300      	movs	r3, #0
 800fd62:	4629      	mov	r1, r5
 800fd64:	806c      	strh	r4, [r5, #2]
 800fd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd6a:	f7ff ba91 	b.w	800f290 <acc_rss_integration_sensor_device_transfer>
 800fd6e:	bf00      	nop
 800fd70:	24003210 	.word	0x24003210
 800fd74:	0801bffc 	.word	0x0801bffc
 800fd78:	0801bfe8 	.word	0x0801bfe8

0800fd7c <acc_sensor_a121_buffer_processed_read>:
 800fd7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd80:	b510      	push	{r4, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	d805      	bhi.n	800fd92 <acc_sensor_a121_buffer_processed_read+0x16>
 800fd86:	2400      	movs	r4, #0
 800fd88:	9400      	str	r4, [sp, #0]
 800fd8a:	f7ff ff45 	bl	800fc18 <internal_buffer_processed_read.part.0>
 800fd8e:	b002      	add	sp, #8
 800fd90:	bd10      	pop	{r4, pc}
 800fd92:	4b04      	ldr	r3, [pc, #16]	@ (800fda4 <acc_sensor_a121_buffer_processed_read+0x28>)
 800fd94:	2000      	movs	r0, #0
 800fd96:	4a04      	ldr	r2, [pc, #16]	@ (800fda8 <acc_sensor_a121_buffer_processed_read+0x2c>)
 800fd98:	691b      	ldr	r3, [r3, #16]
 800fd9a:	4904      	ldr	r1, [pc, #16]	@ (800fdac <acc_sensor_a121_buffer_processed_read+0x30>)
 800fd9c:	4798      	blx	r3
 800fd9e:	2000      	movs	r0, #0
 800fda0:	b002      	add	sp, #8
 800fda2:	bd10      	pop	{r4, pc}
 800fda4:	24003210 	.word	0x24003210
 800fda8:	0801c01c 	.word	0x0801c01c
 800fdac:	0801bfe8 	.word	0x0801bfe8

0800fdb0 <acc_sensor_a121_lut_buffer_write>:
 800fdb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb4:	4614      	mov	r4, r2
 800fdb6:	4681      	mov	r9, r0
 800fdb8:	460d      	mov	r5, r1
 800fdba:	4698      	mov	r8, r3
 800fdbc:	f101 0b04 	add.w	fp, r1, #4
 800fdc0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fdc2:	f7ff fa5f 	bl	800f284 <acc_rss_integration_get_max_spi_transfer_size>
 800fdc6:	1f22      	subs	r2, r4, #4
 800fdc8:	1f07      	subs	r7, r0, #4
 800fdca:	2400      	movs	r4, #0
 800fdcc:	0852      	lsrs	r2, r2, #1
 800fdce:	087f      	lsrs	r7, r7, #1
 800fdd0:	4297      	cmp	r7, r2
 800fdd2:	bf28      	it	cs
 800fdd4:	4617      	movcs	r7, r2
 800fdd6:	1b33      	subs	r3, r6, r4
 800fdd8:	eb08 0204 	add.w	r2, r8, r4
 800fddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fdde:	4658      	mov	r0, fp
 800fde0:	42bb      	cmp	r3, r7
 800fde2:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 800fde6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800fdea:	bf28      	it	cs
 800fdec:	463b      	movcs	r3, r7
 800fdee:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 800fdf2:	f103 3cff 	add.w	ip, r3, #4294967295
 800fdf6:	469a      	mov	sl, r3
 800fdf8:	441c      	add	r4, r3
 800fdfa:	802a      	strh	r2, [r5, #0]
 800fdfc:	f8a5 c002 	strh.w	ip, [r5, #2]
 800fe00:	005a      	lsls	r2, r3, #1
 800fe02:	f008 fe28 	bl	8018a56 <memcpy>
 800fe06:	f10a 0202 	add.w	r2, sl, #2
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	4648      	mov	r0, r9
 800fe10:	f7ff fa3e 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 800fe14:	42a6      	cmp	r6, r4
 800fe16:	d8de      	bhi.n	800fdd6 <acc_sensor_a121_lut_buffer_write+0x26>
 800fe18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe1c <acc_sensor_protocol_a121_init_interrupts>:
 800fe1c:	b530      	push	{r4, r5, lr}
 800fe1e:	2500      	movs	r5, #0
 800fe20:	b083      	sub	sp, #12
 800fe22:	237b      	movs	r3, #123	@ 0x7b
 800fe24:	22ff      	movs	r2, #255	@ 0xff
 800fe26:	4629      	mov	r1, r5
 800fe28:	9500      	str	r5, [sp, #0]
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	f002 f952 	bl	80120d4 <acc_sensor_reg_field_write>
 800fe30:	2101      	movs	r1, #1
 800fe32:	238b      	movs	r3, #139	@ 0x8b
 800fe34:	4620      	mov	r0, r4
 800fe36:	2202      	movs	r2, #2
 800fe38:	9100      	str	r1, [sp, #0]
 800fe3a:	f002 f94b 	bl	80120d4 <acc_sensor_reg_field_write>
 800fe3e:	4620      	mov	r0, r4
 800fe40:	238b      	movs	r3, #139	@ 0x8b
 800fe42:	2280      	movs	r2, #128	@ 0x80
 800fe44:	2107      	movs	r1, #7
 800fe46:	9500      	str	r5, [sp, #0]
 800fe48:	f002 f944 	bl	80120d4 <acc_sensor_reg_field_write>
 800fe4c:	b003      	add	sp, #12
 800fe4e:	bd30      	pop	{r4, r5, pc}

0800fe50 <acc_sensor_protocol_a121_prepare_load>:
 800fe50:	b530      	push	{r4, r5, lr}
 800fe52:	b083      	sub	sp, #12
 800fe54:	2400      	movs	r4, #0
 800fe56:	2137      	movs	r1, #55	@ 0x37
 800fe58:	4605      	mov	r5, r0
 800fe5a:	f10d 0206 	add.w	r2, sp, #6
 800fe5e:	f8ad 4006 	strh.w	r4, [sp, #6]
 800fe62:	f002 f911 	bl	8012088 <acc_sensor_reg_read>
 800fe66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fe6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fe6e:	b9b3      	cbnz	r3, 800fe9e <acc_sensor_protocol_a121_prepare_load+0x4e>
 800fe70:	2400      	movs	r4, #0
 800fe72:	f10d 0206 	add.w	r2, sp, #6
 800fe76:	211c      	movs	r1, #28
 800fe78:	4628      	mov	r0, r5
 800fe7a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800fe7e:	f002 f903 	bl	8012088 <acc_sensor_reg_read>
 800fe82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fe86:	051b      	lsls	r3, r3, #20
 800fe88:	d515      	bpl.n	800feb6 <acc_sensor_protocol_a121_prepare_load+0x66>
 800fe8a:	490e      	ldr	r1, [pc, #56]	@ (800fec4 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800fe8c:	462b      	mov	r3, r5
 800fe8e:	4620      	mov	r0, r4
 800fe90:	4a0d      	ldr	r2, [pc, #52]	@ (800fec8 <acc_sensor_protocol_a121_prepare_load+0x78>)
 800fe92:	690d      	ldr	r5, [r1, #16]
 800fe94:	490d      	ldr	r1, [pc, #52]	@ (800fecc <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800fe96:	47a8      	blx	r5
 800fe98:	4620      	mov	r0, r4
 800fe9a:	b003      	add	sp, #12
 800fe9c:	bd30      	pop	{r4, r5, pc}
 800fe9e:	f7ff fa71 	bl	800f384 <acc_rss_integration_log_level>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d0e4      	beq.n	800fe70 <acc_sensor_protocol_a121_prepare_load+0x20>
 800fea6:	4907      	ldr	r1, [pc, #28]	@ (800fec4 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800fea8:	462b      	mov	r3, r5
 800feaa:	4a09      	ldr	r2, [pc, #36]	@ (800fed0 <acc_sensor_protocol_a121_prepare_load+0x80>)
 800feac:	2001      	movs	r0, #1
 800feae:	690c      	ldr	r4, [r1, #16]
 800feb0:	4906      	ldr	r1, [pc, #24]	@ (800fecc <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800feb2:	47a0      	blx	r4
 800feb4:	e7dc      	b.n	800fe70 <acc_sensor_protocol_a121_prepare_load+0x20>
 800feb6:	4628      	mov	r0, r5
 800feb8:	f7ff ffb0 	bl	800fe1c <acc_sensor_protocol_a121_init_interrupts>
 800febc:	2001      	movs	r0, #1
 800febe:	b003      	add	sp, #12
 800fec0:	bd30      	pop	{r4, r5, pc}
 800fec2:	bf00      	nop
 800fec4:	24003210 	.word	0x24003210
 800fec8:	0801c078 	.word	0x0801c078
 800fecc:	0801c060 	.word	0x0801c060
 800fed0:	0801c034 	.word	0x0801c034

0800fed4 <acc_sensor_protocol_a121_is_ready_to_update>:
 800fed4:	b500      	push	{lr}
 800fed6:	b083      	sub	sp, #12
 800fed8:	2300      	movs	r3, #0
 800feda:	2137      	movs	r1, #55	@ 0x37
 800fedc:	f10d 0206 	add.w	r2, sp, #6
 800fee0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fee4:	f002 f8d0 	bl	8012088 <acc_sensor_reg_read>
 800fee8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800feec:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 800fef0:	3800      	subs	r0, #0
 800fef2:	bf18      	it	ne
 800fef4:	2001      	movne	r0, #1
 800fef6:	b003      	add	sp, #12
 800fef8:	f85d fb04 	ldr.w	pc, [sp], #4

0800fefc <acc_sensor_protocol_a121_run_program>:
 800fefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fefe:	b083      	sub	sp, #12
 800ff00:	2400      	movs	r4, #0
 800ff02:	460e      	mov	r6, r1
 800ff04:	211c      	movs	r1, #28
 800ff06:	f10d 0206 	add.w	r2, sp, #6
 800ff0a:	4607      	mov	r7, r0
 800ff0c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ff10:	f002 f8ba 	bl	8012088 <acc_sensor_reg_read>
 800ff14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff18:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 800ff1c:	d10c      	bne.n	800ff38 <acc_sensor_protocol_a121_run_program+0x3c>
 800ff1e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800ff22:	d313      	bcc.n	800ff4c <acc_sensor_protocol_a121_run_program+0x50>
 800ff24:	4910      	ldr	r1, [pc, #64]	@ (800ff68 <acc_sensor_protocol_a121_run_program+0x6c>)
 800ff26:	4628      	mov	r0, r5
 800ff28:	4633      	mov	r3, r6
 800ff2a:	4a10      	ldr	r2, [pc, #64]	@ (800ff6c <acc_sensor_protocol_a121_run_program+0x70>)
 800ff2c:	690c      	ldr	r4, [r1, #16]
 800ff2e:	4910      	ldr	r1, [pc, #64]	@ (800ff70 <acc_sensor_protocol_a121_run_program+0x74>)
 800ff30:	47a0      	blx	r4
 800ff32:	4628      	mov	r0, r5
 800ff34:	b003      	add	sp, #12
 800ff36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff38:	490b      	ldr	r1, [pc, #44]	@ (800ff68 <acc_sensor_protocol_a121_run_program+0x6c>)
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	463b      	mov	r3, r7
 800ff3e:	4a0d      	ldr	r2, [pc, #52]	@ (800ff74 <acc_sensor_protocol_a121_run_program+0x78>)
 800ff40:	690d      	ldr	r5, [r1, #16]
 800ff42:	490b      	ldr	r1, [pc, #44]	@ (800ff70 <acc_sensor_protocol_a121_run_program+0x74>)
 800ff44:	47a8      	blx	r5
 800ff46:	4620      	mov	r0, r4
 800ff48:	b003      	add	sp, #12
 800ff4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff4c:	462a      	mov	r2, r5
 800ff4e:	4638      	mov	r0, r7
 800ff50:	211b      	movs	r1, #27
 800ff52:	f002 f8af 	bl	80120b4 <acc_sensor_reg_write>
 800ff56:	4638      	mov	r0, r7
 800ff58:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 800ff5c:	211b      	movs	r1, #27
 800ff5e:	f002 f8a9 	bl	80120b4 <acc_sensor_reg_write>
 800ff62:	2001      	movs	r0, #1
 800ff64:	b003      	add	sp, #12
 800ff66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff68:	24003210 	.word	0x24003210
 800ff6c:	0801c0d8 	.word	0x0801c0d8
 800ff70:	0801c060 	.word	0x0801c060
 800ff74:	0801c0a8 	.word	0x0801c0a8

0800ff78 <acc_sensor_protocol_a121_load_lut>:
 800ff78:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff7a:	d809      	bhi.n	800ff90 <acc_sensor_protocol_a121_load_lut+0x18>
 800ff7c:	b530      	push	{r4, r5, lr}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	461c      	mov	r4, r3
 800ff82:	9d07      	ldr	r5, [sp, #28]
 800ff84:	442c      	add	r4, r5
 800ff86:	2c80      	cmp	r4, #128	@ 0x80
 800ff88:	d904      	bls.n	800ff94 <acc_sensor_protocol_a121_load_lut+0x1c>
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	b003      	add	sp, #12
 800ff8e:	bd30      	pop	{r4, r5, pc}
 800ff90:	2000      	movs	r0, #0
 800ff92:	4770      	bx	lr
 800ff94:	9c06      	ldr	r4, [sp, #24]
 800ff96:	9501      	str	r5, [sp, #4]
 800ff98:	9400      	str	r4, [sp, #0]
 800ff9a:	f7ff ff09 	bl	800fdb0 <acc_sensor_a121_lut_buffer_write>
 800ff9e:	2001      	movs	r0, #1
 800ffa0:	b003      	add	sp, #12
 800ffa2:	bd30      	pop	{r4, r5, pc}

0800ffa4 <acc_sensor_protocol_a121_is_sensor_running>:
 800ffa4:	b500      	push	{lr}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	211c      	movs	r1, #28
 800ffac:	f10d 0206 	add.w	r2, sp, #6
 800ffb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ffb4:	f002 f868 	bl	8012088 <acc_sensor_reg_read>
 800ffb8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800ffbc:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800ffc0:	b003      	add	sp, #12
 800ffc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffc6:	bf00      	nop

0800ffc8 <acc_sensor_protocol_a121_is_event_pending>:
 800ffc8:	b510      	push	{r4, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	460c      	mov	r4, r1
 800ffce:	2300      	movs	r3, #0
 800ffd0:	2137      	movs	r1, #55	@ 0x37
 800ffd2:	f10d 0206 	add.w	r2, sp, #6
 800ffd6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ffda:	f002 f855 	bl	8012088 <acc_sensor_reg_read>
 800ffde:	2c01      	cmp	r4, #1
 800ffe0:	d00b      	beq.n	800fffa <acc_sensor_protocol_a121_is_event_pending+0x32>
 800ffe2:	2c02      	cmp	r4, #2
 800ffe4:	bf14      	ite	ne
 800ffe6:	23c0      	movne	r3, #192	@ 0xc0
 800ffe8:	2380      	moveq	r3, #128	@ 0x80
 800ffea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ffee:	4213      	tst	r3, r2
 800fff0:	bf14      	ite	ne
 800fff2:	2001      	movne	r0, #1
 800fff4:	2000      	moveq	r0, #0
 800fff6:	b002      	add	sp, #8
 800fff8:	bd10      	pop	{r4, pc}
 800fffa:	2340      	movs	r3, #64	@ 0x40
 800fffc:	e7f5      	b.n	800ffea <acc_sensor_protocol_a121_is_event_pending+0x22>
 800fffe:	bf00      	nop

08010000 <acc_sensor_protocol_a121_ack_event>:
 8010000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010002:	2901      	cmp	r1, #1
 8010004:	b083      	sub	sp, #12
 8010006:	f04f 0400 	mov.w	r4, #0
 801000a:	4606      	mov	r6, r0
 801000c:	4617      	mov	r7, r2
 801000e:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010012:	d01e      	beq.n	8010052 <acc_sensor_protocol_a121_ack_event+0x52>
 8010014:	2902      	cmp	r1, #2
 8010016:	d009      	beq.n	801002c <acc_sensor_protocol_a121_ack_event+0x2c>
 8010018:	4919      	ldr	r1, [pc, #100]	@ (8010080 <acc_sensor_protocol_a121_ack_event+0x80>)
 801001a:	4603      	mov	r3, r0
 801001c:	4a19      	ldr	r2, [pc, #100]	@ (8010084 <acc_sensor_protocol_a121_ack_event+0x84>)
 801001e:	4620      	mov	r0, r4
 8010020:	690d      	ldr	r5, [r1, #16]
 8010022:	4919      	ldr	r1, [pc, #100]	@ (8010088 <acc_sensor_protocol_a121_ack_event+0x88>)
 8010024:	47a8      	blx	r5
 8010026:	4620      	mov	r0, r4
 8010028:	b003      	add	sp, #12
 801002a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801002c:	2146      	movs	r1, #70	@ 0x46
 801002e:	f10d 0206 	add.w	r2, sp, #6
 8010032:	4630      	mov	r0, r6
 8010034:	2484      	movs	r4, #132	@ 0x84
 8010036:	f002 f827 	bl	8012088 <acc_sensor_reg_read>
 801003a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801003e:	b19d      	cbz	r5, 8010068 <acc_sensor_protocol_a121_ack_event+0x68>
 8010040:	b1e7      	cbz	r7, 801007c <acc_sensor_protocol_a121_ack_event+0x7c>
 8010042:	4630      	mov	r0, r6
 8010044:	4621      	mov	r1, r4
 8010046:	2200      	movs	r2, #0
 8010048:	f002 f834 	bl	80120b4 <acc_sensor_reg_write>
 801004c:	4638      	mov	r0, r7
 801004e:	b003      	add	sp, #12
 8010050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010052:	2145      	movs	r1, #69	@ 0x45
 8010054:	f10d 0206 	add.w	r2, sp, #6
 8010058:	4630      	mov	r0, r6
 801005a:	2483      	movs	r4, #131	@ 0x83
 801005c:	f002 f814 	bl	8012088 <acc_sensor_reg_read>
 8010060:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8010064:	2d00      	cmp	r5, #0
 8010066:	d1eb      	bne.n	8010040 <acc_sensor_protocol_a121_ack_event+0x40>
 8010068:	4905      	ldr	r1, [pc, #20]	@ (8010080 <acc_sensor_protocol_a121_ack_event+0x80>)
 801006a:	4628      	mov	r0, r5
 801006c:	4633      	mov	r3, r6
 801006e:	4a07      	ldr	r2, [pc, #28]	@ (801008c <acc_sensor_protocol_a121_ack_event+0x8c>)
 8010070:	690c      	ldr	r4, [r1, #16]
 8010072:	4905      	ldr	r1, [pc, #20]	@ (8010088 <acc_sensor_protocol_a121_ack_event+0x88>)
 8010074:	47a0      	blx	r4
 8010076:	4628      	mov	r0, r5
 8010078:	b003      	add	sp, #12
 801007a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801007c:	2001      	movs	r0, #1
 801007e:	e7d3      	b.n	8010028 <acc_sensor_protocol_a121_ack_event+0x28>
 8010080:	24003210 	.word	0x24003210
 8010084:	0801c0f4 	.word	0x0801c0f4
 8010088:	0801c060 	.word	0x0801c060
 801008c:	0801c110 	.word	0x0801c110

08010090 <acc_sensor_protocol_a121_get_event>:
 8010090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010092:	2400      	movs	r4, #0
 8010094:	b085      	sub	sp, #20
 8010096:	4615      	mov	r5, r2
 8010098:	f8ad 400e 	strh.w	r4, [sp, #14]
 801009c:	2a00      	cmp	r2, #0
 801009e:	d03d      	beq.n	801011c <acc_sensor_protocol_a121_get_event+0x8c>
 80100a0:	2901      	cmp	r1, #1
 80100a2:	4606      	mov	r6, r0
 80100a4:	d027      	beq.n	80100f6 <acc_sensor_protocol_a121_get_event+0x66>
 80100a6:	2902      	cmp	r1, #2
 80100a8:	d11c      	bne.n	80100e4 <acc_sensor_protocol_a121_get_event+0x54>
 80100aa:	2132      	movs	r1, #50	@ 0x32
 80100ac:	2401      	movs	r4, #1
 80100ae:	4630      	mov	r0, r6
 80100b0:	f10d 020e 	add.w	r2, sp, #14
 80100b4:	f001 ffe8 	bl	8012088 <acc_sensor_reg_read>
 80100b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80100bc:	f003 0007 	and.w	r0, r3, #7
 80100c0:	806b      	strh	r3, [r5, #2]
 80100c2:	2801      	cmp	r0, #1
 80100c4:	8028      	strh	r0, [r5, #0]
 80100c6:	d033      	beq.n	8010130 <acc_sensor_protocol_a121_get_event+0xa0>
 80100c8:	f013 0f06 	tst.w	r3, #6
 80100cc:	d116      	bne.n	80100fc <acc_sensor_protocol_a121_get_event+0x6c>
 80100ce:	b9c0      	cbnz	r0, 8010102 <acc_sensor_protocol_a121_get_event+0x72>
 80100d0:	4a1d      	ldr	r2, [pc, #116]	@ (8010148 <acc_sensor_protocol_a121_get_event+0xb8>)
 80100d2:	4604      	mov	r4, r0
 80100d4:	9600      	str	r6, [sp, #0]
 80100d6:	491d      	ldr	r1, [pc, #116]	@ (801014c <acc_sensor_protocol_a121_get_event+0xbc>)
 80100d8:	6915      	ldr	r5, [r2, #16]
 80100da:	4a1d      	ldr	r2, [pc, #116]	@ (8010150 <acc_sensor_protocol_a121_get_event+0xc0>)
 80100dc:	47a8      	blx	r5
 80100de:	4620      	mov	r0, r4
 80100e0:	b005      	add	sp, #20
 80100e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100e4:	4918      	ldr	r1, [pc, #96]	@ (8010148 <acc_sensor_protocol_a121_get_event+0xb8>)
 80100e6:	4603      	mov	r3, r0
 80100e8:	4a1a      	ldr	r2, [pc, #104]	@ (8010154 <acc_sensor_protocol_a121_get_event+0xc4>)
 80100ea:	4620      	mov	r0, r4
 80100ec:	690f      	ldr	r7, [r1, #16]
 80100ee:	4917      	ldr	r1, [pc, #92]	@ (801014c <acc_sensor_protocol_a121_get_event+0xbc>)
 80100f0:	47b8      	blx	r7
 80100f2:	4621      	mov	r1, r4
 80100f4:	e7db      	b.n	80100ae <acc_sensor_protocol_a121_get_event+0x1e>
 80100f6:	460c      	mov	r4, r1
 80100f8:	2133      	movs	r1, #51	@ 0x33
 80100fa:	e7d8      	b.n	80100ae <acc_sensor_protocol_a121_get_event+0x1e>
 80100fc:	1e81      	subs	r1, r0, #2
 80100fe:	2901      	cmp	r1, #1
 8010100:	d9ed      	bls.n	80100de <acc_sensor_protocol_a121_get_event+0x4e>
 8010102:	4a11      	ldr	r2, [pc, #68]	@ (8010148 <acc_sensor_protocol_a121_get_event+0xb8>)
 8010104:	2000      	movs	r0, #0
 8010106:	9600      	str	r6, [sp, #0]
 8010108:	4910      	ldr	r1, [pc, #64]	@ (801014c <acc_sensor_protocol_a121_get_event+0xbc>)
 801010a:	6914      	ldr	r4, [r2, #16]
 801010c:	4a12      	ldr	r2, [pc, #72]	@ (8010158 <acc_sensor_protocol_a121_get_event+0xc8>)
 801010e:	47a0      	blx	r4
 8010110:	2300      	movs	r3, #0
 8010112:	461c      	mov	r4, r3
 8010114:	802b      	strh	r3, [r5, #0]
 8010116:	4620      	mov	r0, r4
 8010118:	b005      	add	sp, #20
 801011a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801011c:	4b0a      	ldr	r3, [pc, #40]	@ (8010148 <acc_sensor_protocol_a121_get_event+0xb8>)
 801011e:	462c      	mov	r4, r5
 8010120:	4610      	mov	r0, r2
 8010122:	490a      	ldr	r1, [pc, #40]	@ (801014c <acc_sensor_protocol_a121_get_event+0xbc>)
 8010124:	4a0d      	ldr	r2, [pc, #52]	@ (801015c <acc_sensor_protocol_a121_get_event+0xcc>)
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	4798      	blx	r3
 801012a:	4620      	mov	r0, r4
 801012c:	b005      	add	sp, #20
 801012e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010130:	2000      	movs	r0, #0
 8010132:	4a05      	ldr	r2, [pc, #20]	@ (8010148 <acc_sensor_protocol_a121_get_event+0xb8>)
 8010134:	9600      	str	r6, [sp, #0]
 8010136:	4604      	mov	r4, r0
 8010138:	6915      	ldr	r5, [r2, #16]
 801013a:	4904      	ldr	r1, [pc, #16]	@ (801014c <acc_sensor_protocol_a121_get_event+0xbc>)
 801013c:	4a08      	ldr	r2, [pc, #32]	@ (8010160 <acc_sensor_protocol_a121_get_event+0xd0>)
 801013e:	47a8      	blx	r5
 8010140:	4620      	mov	r0, r4
 8010142:	b005      	add	sp, #20
 8010144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010146:	bf00      	nop
 8010148:	24003210 	.word	0x24003210
 801014c:	0801c060 	.word	0x0801c060
 8010150:	0801c158 	.word	0x0801c158
 8010154:	0801c0f4 	.word	0x0801c0f4
 8010158:	0801c1bc 	.word	0x0801c1bc
 801015c:	0801c144 	.word	0x0801c144
 8010160:	0801c188 	.word	0x0801c188

08010164 <acc_sensor_protocol_a121_is_handshake>:
 8010164:	8800      	ldrh	r0, [r0, #0]
 8010166:	f1a0 0003 	sub.w	r0, r0, #3
 801016a:	fab0 f080 	clz	r0, r0
 801016e:	0940      	lsrs	r0, r0, #5
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop

08010174 <acc_sensor_protocol_a121_is_done>:
 8010174:	8800      	ldrh	r0, [r0, #0]
 8010176:	f1a0 0002 	sub.w	r0, r0, #2
 801017a:	fab0 f080 	clz	r0, r0
 801017e:	0940      	lsrs	r0, r0, #5
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop

08010184 <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 8010184:	8840      	ldrh	r0, [r0, #2]
 8010186:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801018a:	4770      	bx	lr

0801018c <acc_sensor_protocol_a121_check_asic_id>:
 801018c:	b570      	push	{r4, r5, r6, lr}
 801018e:	2600      	movs	r6, #0
 8010190:	b082      	sub	sp, #8
 8010192:	4604      	mov	r4, r0
 8010194:	460d      	mov	r5, r1
 8010196:	f10d 0206 	add.w	r2, sp, #6
 801019a:	4631      	mov	r1, r6
 801019c:	f8ad 6006 	strh.w	r6, [sp, #6]
 80101a0:	f001 ff72 	bl	8012088 <acc_sensor_reg_read>
 80101a4:	480f      	ldr	r0, [pc, #60]	@ (80101e4 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 80101a6:	f002 fba7 	bl	80128f8 <acc_diagnostic_log_set_scope>
 80101aa:	4621      	mov	r1, r4
 80101ac:	480e      	ldr	r0, [pc, #56]	@ (80101e8 <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 80101ae:	f002 fbb3 	bl	8012918 <acc_diagnostic_log_scalar>
 80101b2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80101b6:	480b      	ldr	r0, [pc, #44]	@ (80101e4 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 80101b8:	f002 fbae 	bl	8012918 <acc_diagnostic_log_scalar>
 80101bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80101c0:	f241 2210 	movw	r2, #4624	@ 0x1210
 80101c4:	4293      	cmp	r3, r2
 80101c6:	bf0c      	ite	eq
 80101c8:	2401      	moveq	r4, #1
 80101ca:	4634      	movne	r4, r6
 80101cc:	d007      	beq.n	80101de <acc_sensor_protocol_a121_check_asic_id+0x52>
 80101ce:	2d01      	cmp	r5, #1
 80101d0:	d005      	beq.n	80101de <acc_sensor_protocol_a121_check_asic_id+0x52>
 80101d2:	4906      	ldr	r1, [pc, #24]	@ (80101ec <acc_sensor_protocol_a121_check_asic_id+0x60>)
 80101d4:	4630      	mov	r0, r6
 80101d6:	4a06      	ldr	r2, [pc, #24]	@ (80101f0 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 80101d8:	690d      	ldr	r5, [r1, #16]
 80101da:	4906      	ldr	r1, [pc, #24]	@ (80101f4 <acc_sensor_protocol_a121_check_asic_id+0x68>)
 80101dc:	47a8      	blx	r5
 80101de:	4620      	mov	r0, r4
 80101e0:	b002      	add	sp, #8
 80101e2:	bd70      	pop	{r4, r5, r6, pc}
 80101e4:	0801c1f0 	.word	0x0801c1f0
 80101e8:	0801b930 	.word	0x0801b930
 80101ec:	24003210 	.word	0x24003210
 80101f0:	0801c1f8 	.word	0x0801c1f8
 80101f4:	0801c060 	.word	0x0801c060

080101f8 <acc_sensor_protocol_a121_hibernate_off>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	2203      	movs	r2, #3
 80101fc:	b082      	sub	sp, #8
 80101fe:	2500      	movs	r5, #0
 8010200:	4604      	mov	r4, r0
 8010202:	460e      	mov	r6, r1
 8010204:	f240 1349 	movw	r3, #329	@ 0x149
 8010208:	4629      	mov	r1, r5
 801020a:	9200      	str	r2, [sp, #0]
 801020c:	f001 ff62 	bl	80120d4 <acc_sensor_reg_field_write>
 8010210:	4620      	mov	r0, r4
 8010212:	f240 1349 	movw	r3, #329	@ 0x149
 8010216:	2204      	movs	r2, #4
 8010218:	2102      	movs	r1, #2
 801021a:	9500      	str	r5, [sp, #0]
 801021c:	f001 ff5a 	bl	80120d4 <acc_sensor_reg_field_write>
 8010220:	4620      	mov	r0, r4
 8010222:	f240 1349 	movw	r3, #329	@ 0x149
 8010226:	2210      	movs	r2, #16
 8010228:	2104      	movs	r1, #4
 801022a:	9500      	str	r5, [sp, #0]
 801022c:	f001 ff52 	bl	80120d4 <acc_sensor_reg_field_write>
 8010230:	4620      	mov	r0, r4
 8010232:	f240 1349 	movw	r3, #329	@ 0x149
 8010236:	2220      	movs	r2, #32
 8010238:	2105      	movs	r1, #5
 801023a:	9500      	str	r5, [sp, #0]
 801023c:	f001 ff4a 	bl	80120d4 <acc_sensor_reg_field_write>
 8010240:	4620      	mov	r0, r4
 8010242:	f240 1349 	movw	r3, #329	@ 0x149
 8010246:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 801024a:	2106      	movs	r1, #6
 801024c:	9500      	str	r5, [sp, #0]
 801024e:	f001 ff41 	bl	80120d4 <acc_sensor_reg_field_write>
 8010252:	b90e      	cbnz	r6, 8010258 <acc_sensor_protocol_a121_hibernate_off+0x60>
 8010254:	b002      	add	sp, #8
 8010256:	bd70      	pop	{r4, r5, r6, pc}
 8010258:	4620      	mov	r0, r4
 801025a:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 801025e:	2131      	movs	r1, #49	@ 0x31
 8010260:	b002      	add	sp, #8
 8010262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010266:	f001 bf25 	b.w	80120b4 <acc_sensor_reg_write>
 801026a:	bf00      	nop

0801026c <acc_sensor_protocol_a121_is_hibernate>:
 801026c:	b500      	push	{lr}
 801026e:	b083      	sub	sp, #12
 8010270:	2300      	movs	r3, #0
 8010272:	2131      	movs	r1, #49	@ 0x31
 8010274:	f10d 0206 	add.w	r2, sp, #6
 8010278:	f8ad 3006 	strh.w	r3, [sp, #6]
 801027c:	f001 ff04 	bl	8012088 <acc_sensor_reg_read>
 8010280:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010284:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 8010288:	1ac0      	subs	r0, r0, r3
 801028a:	fab0 f080 	clz	r0, r0
 801028e:	0940      	lsrs	r0, r0, #5
 8010290:	b003      	add	sp, #12
 8010292:	f85d fb04 	ldr.w	pc, [sp], #4
 8010296:	bf00      	nop

08010298 <acc_sensor_protocol_a121_reconfigure>:
 8010298:	2201      	movs	r2, #1
 801029a:	2180      	movs	r1, #128	@ 0x80
 801029c:	b508      	push	{r3, lr}
 801029e:	f001 ff09 	bl	80120b4 <acc_sensor_reg_write>
 80102a2:	2001      	movs	r0, #1
 80102a4:	bd08      	pop	{r3, pc}
 80102a6:	bf00      	nop

080102a8 <a121_diagnostics_decode_stack_level>:
 80102a8:	b570      	push	{r4, r5, r6, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	4605      	mov	r5, r0
 80102ae:	460c      	mov	r4, r1
 80102b0:	4616      	mov	r6, r2
 80102b2:	f7ff f867 	bl	800f384 <acc_rss_integration_log_level>
 80102b6:	2801      	cmp	r0, #1
 80102b8:	d90c      	bls.n	80102d4 <a121_diagnostics_decode_stack_level+0x2c>
 80102ba:	f5a4 728c 	sub.w	r2, r4, #280	@ 0x118
 80102be:	4906      	ldr	r1, [pc, #24]	@ (80102d8 <a121_diagnostics_decode_stack_level+0x30>)
 80102c0:	9602      	str	r6, [sp, #8]
 80102c2:	462b      	mov	r3, r5
 80102c4:	b292      	uxth	r2, r2
 80102c6:	9401      	str	r4, [sp, #4]
 80102c8:	2002      	movs	r0, #2
 80102ca:	690c      	ldr	r4, [r1, #16]
 80102cc:	9200      	str	r2, [sp, #0]
 80102ce:	4903      	ldr	r1, [pc, #12]	@ (80102dc <a121_diagnostics_decode_stack_level+0x34>)
 80102d0:	4a03      	ldr	r2, [pc, #12]	@ (80102e0 <a121_diagnostics_decode_stack_level+0x38>)
 80102d2:	47a0      	blx	r4
 80102d4:	b004      	add	sp, #16
 80102d6:	bd70      	pop	{r4, r5, r6, pc}
 80102d8:	24003210 	.word	0x24003210
 80102dc:	0801c2f4 	.word	0x0801c2f4
 80102e0:	0801c2cc 	.word	0x0801c2cc

080102e4 <a121_diagnostics_decode_wakeupinputwakeup>:
 80102e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102e6:	460c      	mov	r4, r1
 80102e8:	3962      	subs	r1, #98	@ 0x62
 80102ea:	b085      	sub	sp, #20
 80102ec:	4606      	mov	r6, r0
 80102ee:	07cb      	lsls	r3, r1, #31
 80102f0:	4617      	mov	r7, r2
 80102f2:	b28d      	uxth	r5, r1
 80102f4:	d410      	bmi.n	8010318 <a121_diagnostics_decode_wakeupinputwakeup+0x34>
 80102f6:	f7ff f845 	bl	800f384 <acc_rss_integration_log_level>
 80102fa:	2801      	cmp	r0, #1
 80102fc:	d90a      	bls.n	8010314 <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 80102fe:	4a0f      	ldr	r2, [pc, #60]	@ (801033c <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 8010300:	086d      	lsrs	r5, r5, #1
 8010302:	9702      	str	r7, [sp, #8]
 8010304:	4633      	mov	r3, r6
 8010306:	9500      	str	r5, [sp, #0]
 8010308:	2002      	movs	r0, #2
 801030a:	9401      	str	r4, [sp, #4]
 801030c:	490c      	ldr	r1, [pc, #48]	@ (8010340 <a121_diagnostics_decode_wakeupinputwakeup+0x5c>)
 801030e:	6914      	ldr	r4, [r2, #16]
 8010310:	4a0c      	ldr	r2, [pc, #48]	@ (8010344 <a121_diagnostics_decode_wakeupinputwakeup+0x60>)
 8010312:	47a0      	blx	r4
 8010314:	b005      	add	sp, #20
 8010316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010318:	f7ff f834 	bl	800f384 <acc_rss_integration_log_level>
 801031c:	2801      	cmp	r0, #1
 801031e:	d9f9      	bls.n	8010314 <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 8010320:	086d      	lsrs	r5, r5, #1
 8010322:	4a06      	ldr	r2, [pc, #24]	@ (801033c <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 8010324:	9702      	str	r7, [sp, #8]
 8010326:	4633      	mov	r3, r6
 8010328:	9500      	str	r5, [sp, #0]
 801032a:	2002      	movs	r0, #2
 801032c:	9401      	str	r4, [sp, #4]
 801032e:	4904      	ldr	r1, [pc, #16]	@ (8010340 <a121_diagnostics_decode_wakeupinputwakeup+0x5c>)
 8010330:	6914      	ldr	r4, [r2, #16]
 8010332:	4a05      	ldr	r2, [pc, #20]	@ (8010348 <a121_diagnostics_decode_wakeupinputwakeup+0x64>)
 8010334:	47a0      	blx	r4
 8010336:	b005      	add	sp, #20
 8010338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801033a:	bf00      	nop
 801033c:	24003210 	.word	0x24003210
 8010340:	0801c2f4 	.word	0x0801c2f4
 8010344:	0801c308 	.word	0x0801c308
 8010348:	0801c340 	.word	0x0801c340

0801034c <a121_diagnostics_decode_inputmuxwakeupinput>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	4605      	mov	r5, r0
 8010352:	460c      	mov	r4, r1
 8010354:	4616      	mov	r6, r2
 8010356:	f7ff f815 	bl	800f384 <acc_rss_integration_log_level>
 801035a:	2801      	cmp	r0, #1
 801035c:	d90b      	bls.n	8010376 <a121_diagnostics_decode_inputmuxwakeupinput+0x2a>
 801035e:	f1a4 017d 	sub.w	r1, r4, #125	@ 0x7d
 8010362:	4a06      	ldr	r2, [pc, #24]	@ (801037c <a121_diagnostics_decode_inputmuxwakeupinput+0x30>)
 8010364:	9601      	str	r6, [sp, #4]
 8010366:	462b      	mov	r3, r5
 8010368:	b289      	uxth	r1, r1
 801036a:	6914      	ldr	r4, [r2, #16]
 801036c:	2002      	movs	r0, #2
 801036e:	4a04      	ldr	r2, [pc, #16]	@ (8010380 <a121_diagnostics_decode_inputmuxwakeupinput+0x34>)
 8010370:	9100      	str	r1, [sp, #0]
 8010372:	4904      	ldr	r1, [pc, #16]	@ (8010384 <a121_diagnostics_decode_inputmuxwakeupinput+0x38>)
 8010374:	47a0      	blx	r4
 8010376:	b002      	add	sp, #8
 8010378:	bd70      	pop	{r4, r5, r6, pc}
 801037a:	bf00      	nop
 801037c:	24003210 	.word	0x24003210
 8010380:	0801c378 	.word	0x0801c378
 8010384:	0801c2f4 	.word	0x0801c2f4

08010388 <a121_diagnostics_decode_scratchpad>:
 8010388:	b570      	push	{r4, r5, r6, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	4605      	mov	r5, r0
 801038e:	460c      	mov	r4, r1
 8010390:	4616      	mov	r6, r2
 8010392:	f7fe fff7 	bl	800f384 <acc_rss_integration_log_level>
 8010396:	2801      	cmp	r0, #1
 8010398:	d90b      	bls.n	80103b2 <a121_diagnostics_decode_scratchpad+0x2a>
 801039a:	f1a4 012c 	sub.w	r1, r4, #44	@ 0x2c
 801039e:	4a06      	ldr	r2, [pc, #24]	@ (80103b8 <a121_diagnostics_decode_scratchpad+0x30>)
 80103a0:	9601      	str	r6, [sp, #4]
 80103a2:	462b      	mov	r3, r5
 80103a4:	b289      	uxth	r1, r1
 80103a6:	6914      	ldr	r4, [r2, #16]
 80103a8:	2002      	movs	r0, #2
 80103aa:	4a04      	ldr	r2, [pc, #16]	@ (80103bc <a121_diagnostics_decode_scratchpad+0x34>)
 80103ac:	9100      	str	r1, [sp, #0]
 80103ae:	4904      	ldr	r1, [pc, #16]	@ (80103c0 <a121_diagnostics_decode_scratchpad+0x38>)
 80103b0:	47a0      	blx	r4
 80103b2:	b002      	add	sp, #8
 80103b4:	bd70      	pop	{r4, r5, r6, pc}
 80103b6:	bf00      	nop
 80103b8:	24003210 	.word	0x24003210
 80103bc:	0801c3a8 	.word	0x0801c3a8
 80103c0:	0801c2f4 	.word	0x0801c2f4

080103c4 <a121_diagnostics_decode_run_status>:
 80103c4:	b530      	push	{r4, r5, lr}
 80103c6:	b083      	sub	sp, #12
 80103c8:	4605      	mov	r5, r0
 80103ca:	4614      	mov	r4, r2
 80103cc:	f7fe ffda 	bl	800f384 <acc_rss_integration_log_level>
 80103d0:	2801      	cmp	r0, #1
 80103d2:	d910      	bls.n	80103f6 <a121_diagnostics_decode_run_status+0x32>
 80103d4:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 80103d8:	4808      	ldr	r0, [pc, #32]	@ (80103fc <a121_diagnostics_decode_run_status+0x38>)
 80103da:	4a09      	ldr	r2, [pc, #36]	@ (8010400 <a121_diagnostics_decode_run_status+0x3c>)
 80103dc:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80103e0:	bf18      	it	ne
 80103e2:	4602      	movne	r2, r0
 80103e4:	4907      	ldr	r1, [pc, #28]	@ (8010404 <a121_diagnostics_decode_run_status+0x40>)
 80103e6:	9401      	str	r4, [sp, #4]
 80103e8:	462b      	mov	r3, r5
 80103ea:	690c      	ldr	r4, [r1, #16]
 80103ec:	2002      	movs	r0, #2
 80103ee:	9200      	str	r2, [sp, #0]
 80103f0:	4905      	ldr	r1, [pc, #20]	@ (8010408 <a121_diagnostics_decode_run_status+0x44>)
 80103f2:	4a06      	ldr	r2, [pc, #24]	@ (801040c <a121_diagnostics_decode_run_status+0x48>)
 80103f4:	47a0      	blx	r4
 80103f6:	b003      	add	sp, #12
 80103f8:	bd30      	pop	{r4, r5, pc}
 80103fa:	bf00      	nop
 80103fc:	0801c3d8 	.word	0x0801c3d8
 8010400:	0801c3d0 	.word	0x0801c3d0
 8010404:	24003210 	.word	0x24003210
 8010408:	0801c2f4 	.word	0x0801c2f4
 801040c:	0801c3e0 	.word	0x0801c3e0

08010410 <a121_diagnostics_decode_asic_error>:
 8010410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	4e1e      	ldr	r6, [pc, #120]	@ (8010490 <a121_diagnostics_decode_asic_error+0x80>)
 8010416:	b091      	sub	sp, #68	@ 0x44
 8010418:	4680      	mov	r8, r0
 801041a:	4615      	mov	r5, r2
 801041c:	ac02      	add	r4, sp, #8
 801041e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010422:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010426:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801042a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801042e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010432:	f7fe ffa7 	bl	800f384 <acc_rss_integration_log_level>
 8010436:	2801      	cmp	r0, #1
 8010438:	d907      	bls.n	801044a <a121_diagnostics_decode_asic_error+0x3a>
 801043a:	4a16      	ldr	r2, [pc, #88]	@ (8010494 <a121_diagnostics_decode_asic_error+0x84>)
 801043c:	4643      	mov	r3, r8
 801043e:	9500      	str	r5, [sp, #0]
 8010440:	2002      	movs	r0, #2
 8010442:	6914      	ldr	r4, [r2, #16]
 8010444:	4914      	ldr	r1, [pc, #80]	@ (8010498 <a121_diagnostics_decode_asic_error+0x88>)
 8010446:	4a15      	ldr	r2, [pc, #84]	@ (801049c <a121_diagnostics_decode_asic_error+0x8c>)
 8010448:	47a0      	blx	r4
 801044a:	ac02      	add	r4, sp, #8
 801044c:	ae10      	add	r6, sp, #64	@ 0x40
 801044e:	f8df b044 	ldr.w	fp, [pc, #68]	@ 8010494 <a121_diagnostics_decode_asic_error+0x84>
 8010452:	f8df a04c 	ldr.w	sl, [pc, #76]	@ 80104a0 <a121_diagnostics_decode_asic_error+0x90>
 8010456:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8010498 <a121_diagnostics_decode_asic_error+0x88>
 801045a:	e002      	b.n	8010462 <a121_diagnostics_decode_asic_error+0x52>
 801045c:	3408      	adds	r4, #8
 801045e:	42b4      	cmp	r4, r6
 8010460:	d013      	beq.n	801048a <a121_diagnostics_decode_asic_error+0x7a>
 8010462:	88a3      	ldrh	r3, [r4, #4]
 8010464:	421d      	tst	r5, r3
 8010466:	d0f9      	beq.n	801045c <a121_diagnostics_decode_asic_error+0x4c>
 8010468:	f7fe ff8c 	bl	800f384 <acc_rss_integration_log_level>
 801046c:	2801      	cmp	r0, #1
 801046e:	4643      	mov	r3, r8
 8010470:	4652      	mov	r2, sl
 8010472:	4649      	mov	r1, r9
 8010474:	f04f 0002 	mov.w	r0, #2
 8010478:	d9f0      	bls.n	801045c <a121_diagnostics_decode_asic_error+0x4c>
 801047a:	6827      	ldr	r7, [r4, #0]
 801047c:	3408      	adds	r4, #8
 801047e:	9700      	str	r7, [sp, #0]
 8010480:	f8db 7010 	ldr.w	r7, [fp, #16]
 8010484:	47b8      	blx	r7
 8010486:	42b4      	cmp	r4, r6
 8010488:	d1eb      	bne.n	8010462 <a121_diagnostics_decode_asic_error+0x52>
 801048a:	b011      	add	sp, #68	@ 0x44
 801048c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010490:	0801b3d4 	.word	0x0801b3d4
 8010494:	24003210 	.word	0x24003210
 8010498:	0801c2f4 	.word	0x0801c2f4
 801049c:	0801c3f4 	.word	0x0801c3f4
 80104a0:	0801c410 	.word	0x0801c410

080104a4 <a121_diagnostics_decode_wakeup_status0>:
 80104a4:	b530      	push	{r4, r5, lr}
 80104a6:	b083      	sub	sp, #12
 80104a8:	4605      	mov	r5, r0
 80104aa:	4614      	mov	r4, r2
 80104ac:	f7fe ff6a 	bl	800f384 <acc_rss_integration_log_level>
 80104b0:	2801      	cmp	r0, #1
 80104b2:	d909      	bls.n	80104c8 <a121_diagnostics_decode_wakeup_status0+0x24>
 80104b4:	f004 040f 	and.w	r4, r4, #15
 80104b8:	4904      	ldr	r1, [pc, #16]	@ (80104cc <a121_diagnostics_decode_wakeup_status0+0x28>)
 80104ba:	462b      	mov	r3, r5
 80104bc:	4a04      	ldr	r2, [pc, #16]	@ (80104d0 <a121_diagnostics_decode_wakeup_status0+0x2c>)
 80104be:	9400      	str	r4, [sp, #0]
 80104c0:	2002      	movs	r0, #2
 80104c2:	690c      	ldr	r4, [r1, #16]
 80104c4:	4903      	ldr	r1, [pc, #12]	@ (80104d4 <a121_diagnostics_decode_wakeup_status0+0x30>)
 80104c6:	47a0      	blx	r4
 80104c8:	b003      	add	sp, #12
 80104ca:	bd30      	pop	{r4, r5, pc}
 80104cc:	24003210 	.word	0x24003210
 80104d0:	0801c424 	.word	0x0801c424
 80104d4:	0801c2f4 	.word	0x0801c2f4

080104d8 <acc_sensor_status_a121>:
 80104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104dc:	ed2d 8b02 	vpush	{d8}
 80104e0:	b0a3      	sub	sp, #140	@ 0x8c
 80104e2:	4606      	mov	r6, r0
 80104e4:	f7fe ff4e 	bl	800f384 <acc_rss_integration_log_level>
 80104e8:	2801      	cmp	r0, #1
 80104ea:	d905      	bls.n	80104f8 <acc_sensor_status_a121+0x20>
 80104ec:	4b2c      	ldr	r3, [pc, #176]	@ (80105a0 <acc_sensor_status_a121+0xc8>)
 80104ee:	2002      	movs	r0, #2
 80104f0:	4a2c      	ldr	r2, [pc, #176]	@ (80105a4 <acc_sensor_status_a121+0xcc>)
 80104f2:	691b      	ldr	r3, [r3, #16]
 80104f4:	492c      	ldr	r1, [pc, #176]	@ (80105a8 <acc_sensor_status_a121+0xd0>)
 80104f6:	4798      	blx	r3
 80104f8:	a804      	add	r0, sp, #16
 80104fa:	2278      	movs	r2, #120	@ 0x78
 80104fc:	492b      	ldr	r1, [pc, #172]	@ (80105ac <acc_sensor_status_a121+0xd4>)
 80104fe:	f10d 0a88 	add.w	sl, sp, #136	@ 0x88
 8010502:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 80105a0 <acc_sensor_status_a121+0xc8>
 8010506:	4605      	mov	r5, r0
 8010508:	ed9f 8a29 	vldr	s16, [pc, #164]	@ 80105b0 <acc_sensor_status_a121+0xd8>
 801050c:	f008 faa3 	bl	8018a56 <memcpy>
 8010510:	2201      	movs	r2, #1
 8010512:	21d5      	movs	r1, #213	@ 0xd5
 8010514:	4630      	mov	r0, r6
 8010516:	f001 fdcd 	bl	80120b4 <acc_sensor_reg_write>
 801051a:	88ac      	ldrh	r4, [r5, #4]
 801051c:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 8010520:	44a0      	add	r8, r4
 8010522:	4544      	cmp	r4, r8
 8010524:	da2a      	bge.n	801057c <acc_sensor_status_a121+0xa4>
 8010526:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80105a8 <acc_sensor_status_a121+0xd0>
 801052a:	e006      	b.n	801053a <acc_sensor_status_a121+0x62>
 801052c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010530:	4798      	blx	r3
 8010532:	3401      	adds	r4, #1
 8010534:	b2a4      	uxth	r4, r4
 8010536:	4544      	cmp	r4, r8
 8010538:	da20      	bge.n	801057c <acc_sensor_status_a121+0xa4>
 801053a:	4621      	mov	r1, r4
 801053c:	4630      	mov	r0, r6
 801053e:	f10d 020e 	add.w	r2, sp, #14
 8010542:	f001 fda1 	bl	8012088 <acc_sensor_reg_read>
 8010546:	68ab      	ldr	r3, [r5, #8]
 8010548:	4621      	mov	r1, r4
 801054a:	4630      	mov	r0, r6
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1ed      	bne.n	801052c <acc_sensor_status_a121+0x54>
 8010550:	f7fe ff18 	bl	800f384 <acc_rss_integration_log_level>
 8010554:	2801      	cmp	r0, #1
 8010556:	4633      	mov	r3, r6
 8010558:	ee18 2a10 	vmov	r2, s16
 801055c:	4659      	mov	r1, fp
 801055e:	f04f 0002 	mov.w	r0, #2
 8010562:	d9e6      	bls.n	8010532 <acc_sensor_status_a121+0x5a>
 8010564:	3401      	adds	r4, #1
 8010566:	682f      	ldr	r7, [r5, #0]
 8010568:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801056c:	b2a4      	uxth	r4, r4
 801056e:	e9cd 7c00 	strd	r7, ip, [sp]
 8010572:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010576:	47b8      	blx	r7
 8010578:	4544      	cmp	r4, r8
 801057a:	dbde      	blt.n	801053a <acc_sensor_status_a121+0x62>
 801057c:	350c      	adds	r5, #12
 801057e:	45aa      	cmp	sl, r5
 8010580:	d1cb      	bne.n	801051a <acc_sensor_status_a121+0x42>
 8010582:	f7fe feff 	bl	800f384 <acc_rss_integration_log_level>
 8010586:	2801      	cmp	r0, #1
 8010588:	d905      	bls.n	8010596 <acc_sensor_status_a121+0xbe>
 801058a:	4b05      	ldr	r3, [pc, #20]	@ (80105a0 <acc_sensor_status_a121+0xc8>)
 801058c:	2002      	movs	r0, #2
 801058e:	4a09      	ldr	r2, [pc, #36]	@ (80105b4 <acc_sensor_status_a121+0xdc>)
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	4905      	ldr	r1, [pc, #20]	@ (80105a8 <acc_sensor_status_a121+0xd0>)
 8010594:	4798      	blx	r3
 8010596:	b023      	add	sp, #140	@ 0x8c
 8010598:	ecbd 8b02 	vpop	{d8}
 801059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a0:	24003210 	.word	0x24003210
 80105a4:	0801c444 	.word	0x0801c444
 80105a8:	0801c2f4 	.word	0x0801c2f4
 80105ac:	0801b40c 	.word	0x0801b40c
 80105b0:	0801c480 	.word	0x0801c480
 80105b4:	0801c494 	.word	0x0801c494

080105b8 <get_pll_freq>:
 80105b8:	b508      	push	{r3, lr}
 80105ba:	ed2d 8b02 	vpush	{d8}
 80105be:	f7fe fe5b 	bl	800f278 <acc_rss_integration_get_sensor_reference_frequency>
 80105c2:	ee07 0a90 	vmov	s15, r0
 80105c6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80105ca:	eeb0 0a48 	vmov.f32	s0, s16
 80105ce:	f001 feb1 	bl	8012334 <acc_cpd_pll_divisors_ref_divisor>
 80105d2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80105d6:	ecbd 8b02 	vpop	{d8}
 80105da:	bd08      	pop	{r3, pc}

080105dc <acc_translation_a121_points_to_meter>:
 80105dc:	b508      	push	{r3, lr}
 80105de:	ed2d 8b02 	vpush	{d8}
 80105e2:	ee08 0a10 	vmov	s16, r0
 80105e6:	f7ff ffe7 	bl	80105b8 <get_pll_freq>
 80105ea:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 80105ee:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8010618 <acc_translation_a121_points_to_meter+0x3c>
 80105f2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80105f6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80105fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010602:	eec6 7a00 	vdiv.f32	s15, s12, s0
 8010606:	ee67 7a88 	vmul.f32	s15, s15, s16
 801060a:	ecbd 8b02 	vpop	{d8}
 801060e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010612:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010616:	bd08      	pop	{r3, pc}
 8010618:	4d8ef3c2 	.word	0x4d8ef3c2

0801061c <acc_translation_a121_profile_to_pulse_params>:
 801061c:	2300      	movs	r3, #0
 801061e:	3801      	subs	r0, #1
 8010620:	b430      	push	{r4, r5}
 8010622:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8010626:	60d3      	str	r3, [r2, #12]
 8010628:	2804      	cmp	r0, #4
 801062a:	d836      	bhi.n	801069a <acc_translation_a121_profile_to_pulse_params+0x7e>
 801062c:	e8df f000 	tbb	[pc, r0]
 8010630:	2d291b0d 	.word	0x2d291b0d
 8010634:	03          	.byte	0x03
 8010635:	00          	.byte	0x00
 8010636:	2400      	movs	r4, #0
 8010638:	4b1b      	ldr	r3, [pc, #108]	@ (80106a8 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 801063a:	491c      	ldr	r1, [pc, #112]	@ (80106ac <acc_translation_a121_profile_to_pulse_params+0x90>)
 801063c:	2001      	movs	r0, #1
 801063e:	7014      	strb	r4, [r2, #0]
 8010640:	61d1      	str	r1, [r2, #28]
 8010642:	e9c2 3305 	strd	r3, r3, [r2, #20]
 8010646:	bc30      	pop	{r4, r5}
 8010648:	4770      	bx	lr
 801064a:	2001      	movs	r0, #1
 801064c:	2400      	movs	r4, #0
 801064e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010652:	7014      	strb	r4, [r2, #0]
 8010654:	82d0      	strh	r0, [r2, #22]
 8010656:	8350      	strh	r0, [r2, #26]
 8010658:	61d3      	str	r3, [r2, #28]
 801065a:	b1d1      	cbz	r1, 8010692 <acc_translation_a121_profile_to_pulse_params+0x76>
 801065c:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 801065e:	bc30      	pop	{r4, r5}
 8010660:	8293      	strh	r3, [r2, #20]
 8010662:	8313      	strh	r3, [r2, #24]
 8010664:	4770      	bx	lr
 8010666:	2001      	movs	r0, #1
 8010668:	2596      	movs	r5, #150	@ 0x96
 801066a:	4c11      	ldr	r4, [pc, #68]	@ (80106b0 <acc_translation_a121_profile_to_pulse_params+0x94>)
 801066c:	21fa      	movs	r1, #250	@ 0xfa
 801066e:	4b11      	ldr	r3, [pc, #68]	@ (80106b4 <acc_translation_a121_profile_to_pulse_params+0x98>)
 8010670:	60d5      	str	r5, [r2, #12]
 8010672:	61d4      	str	r4, [r2, #28]
 8010674:	7010      	strb	r0, [r2, #0]
 8010676:	bc30      	pop	{r4, r5}
 8010678:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801067c:	e9c2 3305 	strd	r3, r3, [r2, #20]
 8010680:	4770      	bx	lr
 8010682:	2400      	movs	r4, #0
 8010684:	4b0c      	ldr	r3, [pc, #48]	@ (80106b8 <acc_translation_a121_profile_to_pulse_params+0x9c>)
 8010686:	490d      	ldr	r1, [pc, #52]	@ (80106bc <acc_translation_a121_profile_to_pulse_params+0xa0>)
 8010688:	e7d8      	b.n	801063c <acc_translation_a121_profile_to_pulse_params+0x20>
 801068a:	2400      	movs	r4, #0
 801068c:	4b0c      	ldr	r3, [pc, #48]	@ (80106c0 <acc_translation_a121_profile_to_pulse_params+0xa4>)
 801068e:	490d      	ldr	r1, [pc, #52]	@ (80106c4 <acc_translation_a121_profile_to_pulse_params+0xa8>)
 8010690:	e7d4      	b.n	801063c <acc_translation_a121_profile_to_pulse_params+0x20>
 8010692:	2302      	movs	r3, #2
 8010694:	8293      	strh	r3, [r2, #20]
 8010696:	8313      	strh	r3, [r2, #24]
 8010698:	e7d5      	b.n	8010646 <acc_translation_a121_profile_to_pulse_params+0x2a>
 801069a:	2300      	movs	r3, #0
 801069c:	4618      	mov	r0, r3
 801069e:	7013      	strb	r3, [r2, #0]
 80106a0:	61d3      	str	r3, [r2, #28]
 80106a2:	e9c2 3305 	strd	r3, r3, [r2, #20]
 80106a6:	e7ce      	b.n	8010646 <acc_translation_a121_profile_to_pulse_params+0x2a>
 80106a8:	00050008 	.word	0x00050008
 80106ac:	0002000b 	.word	0x0002000b
 80106b0:	00030002 	.word	0x00030002
 80106b4:	00010008 	.word	0x00010008
 80106b8:	00020008 	.word	0x00020008
 80106bc:	00020004 	.word	0x00020004
 80106c0:	00030008 	.word	0x00030008
 80106c4:	00020006 	.word	0x00020006

080106c8 <acc_translation_a121_profile_to_start_point_offset>:
 80106c8:	3801      	subs	r0, #1
 80106ca:	2804      	cmp	r0, #4
 80106cc:	d818      	bhi.n	8010700 <acc_translation_a121_profile_to_start_point_offset+0x38>
 80106ce:	e8df f000 	tbb	[pc, r0]
 80106d2:	0812      	.short	0x0812
 80106d4:	0d03      	.short	0x0d03
 80106d6:	03          	.byte	0x03
 80106d7:	00          	.byte	0x00
 80106d8:	f06f 030c 	mvn.w	r3, #12
 80106dc:	2001      	movs	r0, #1
 80106de:	600b      	str	r3, [r1, #0]
 80106e0:	4770      	bx	lr
 80106e2:	f06f 0306 	mvn.w	r3, #6
 80106e6:	2001      	movs	r0, #1
 80106e8:	600b      	str	r3, [r1, #0]
 80106ea:	4770      	bx	lr
 80106ec:	f06f 030f 	mvn.w	r3, #15
 80106f0:	2001      	movs	r0, #1
 80106f2:	600b      	str	r3, [r1, #0]
 80106f4:	4770      	bx	lr
 80106f6:	f06f 030b 	mvn.w	r3, #11
 80106fa:	2001      	movs	r0, #1
 80106fc:	600b      	str	r3, [r1, #0]
 80106fe:	4770      	bx	lr
 8010700:	2300      	movs	r3, #0
 8010702:	4618      	mov	r0, r3
 8010704:	600b      	str	r3, [r1, #0]
 8010706:	4770      	bx	lr

08010708 <acc_translation_a121_set_calibration_params>:
 8010708:	b530      	push	{r4, r5, lr}
 801070a:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 801070e:	460c      	mov	r4, r1
 8010710:	f8b0 5084 	ldrh.w	r5, [r0, #132]	@ 0x84
 8010714:	b087      	sub	sp, #28
 8010716:	2160      	movs	r1, #96	@ 0x60
 8010718:	8065      	strh	r5, [r4, #2]
 801071a:	466a      	mov	r2, sp
 801071c:	f8b0 5082 	ldrh.w	r5, [r0, #130]	@ 0x82
 8010720:	80a3      	strh	r3, [r4, #4]
 8010722:	f8b0 3088 	ldrh.w	r3, [r0, #136]	@ 0x88
 8010726:	8025      	strh	r5, [r4, #0]
 8010728:	8845      	ldrh	r5, [r0, #2]
 801072a:	80e3      	strh	r3, [r4, #6]
 801072c:	8883      	ldrh	r3, [r0, #4]
 801072e:	8125      	strh	r5, [r4, #8]
 8010730:	88c5      	ldrh	r5, [r0, #6]
 8010732:	8163      	strh	r3, [r4, #10]
 8010734:	8943      	ldrh	r3, [r0, #10]
 8010736:	81a5      	strh	r5, [r4, #12]
 8010738:	8c05      	ldrh	r5, [r0, #32]
 801073a:	81e3      	strh	r3, [r4, #14]
 801073c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 801073e:	8225      	strh	r5, [r4, #16]
 8010740:	8263      	strh	r3, [r4, #18]
 8010742:	8900      	ldrh	r0, [r0, #8]
 8010744:	f001 fe00 	bl	8012348 <acc_dll_calculate_area_settings>
 8010748:	f8bd 1000 	ldrh.w	r1, [sp]
 801074c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010750:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010754:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 8010758:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801075c:	82a1      	strh	r1, [r4, #20]
 801075e:	82e2      	strh	r2, [r4, #22]
 8010760:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8010764:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010768:	8323      	strh	r3, [r4, #24]
 801076a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801076e:	8365      	strh	r5, [r4, #26]
 8010770:	83a0      	strh	r0, [r4, #28]
 8010772:	83e1      	strh	r1, [r4, #30]
 8010774:	8422      	strh	r2, [r4, #32]
 8010776:	8463      	strh	r3, [r4, #34]	@ 0x22
 8010778:	b007      	add	sp, #28
 801077a:	bd30      	pop	{r4, r5, pc}

0801077c <acc_translation_a121_set_gain_params>:
 801077c:	7a83      	ldrb	r3, [r0, #10]
 801077e:	2b17      	cmp	r3, #23
 8010780:	d80e      	bhi.n	80107a0 <acc_translation_a121_set_gain_params+0x24>
 8010782:	2b09      	cmp	r3, #9
 8010784:	d80e      	bhi.n	80107a4 <acc_translation_a121_set_gain_params+0x28>
 8010786:	f1c3 0309 	rsb	r3, r3, #9
 801078a:	2015      	movs	r0, #21
 801078c:	8053      	strh	r3, [r2, #2]
 801078e:	8010      	strh	r0, [r2, #0]
 8010790:	b1a1      	cbz	r1, 80107bc <acc_translation_a121_set_gain_params+0x40>
 8010792:	8853      	ldrh	r3, [r2, #2]
 8010794:	2001      	movs	r0, #1
 8010796:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801079a:	898b      	ldrh	r3, [r1, #12]
 801079c:	8093      	strh	r3, [r2, #4]
 801079e:	4770      	bx	lr
 80107a0:	2000      	movs	r0, #0
 80107a2:	4770      	bx	lr
 80107a4:	2b10      	cmp	r3, #16
 80107a6:	f04f 0000 	mov.w	r0, #0
 80107aa:	bf94      	ite	ls
 80107ac:	f1c3 031e 	rsbls	r3, r3, #30
 80107b0:	f1c3 0317 	rsbhi	r3, r3, #23
 80107b4:	8050      	strh	r0, [r2, #2]
 80107b6:	8013      	strh	r3, [r2, #0]
 80107b8:	2900      	cmp	r1, #0
 80107ba:	d1ea      	bne.n	8010792 <acc_translation_a121_set_gain_params+0x16>
 80107bc:	2001      	movs	r0, #1
 80107be:	8091      	strh	r1, [r2, #4]
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop

080107c4 <acc_translation_a121_set_pulse_length_params>:
 80107c4:	8a83      	ldrh	r3, [r0, #20]
 80107c6:	2b08      	cmp	r3, #8
 80107c8:	d802      	bhi.n	80107d0 <acc_translation_a121_set_pulse_length_params+0xc>
 80107ca:	8ac2      	ldrh	r2, [r0, #22]
 80107cc:	2a07      	cmp	r2, #7
 80107ce:	d901      	bls.n	80107d4 <acc_translation_a121_set_pulse_length_params+0x10>
 80107d0:	2000      	movs	r0, #0
 80107d2:	4770      	bx	lr
 80107d4:	b470      	push	{r4, r5, r6}
 80107d6:	8b05      	ldrh	r5, [r0, #24]
 80107d8:	2d08      	cmp	r5, #8
 80107da:	d902      	bls.n	80107e2 <acc_translation_a121_set_pulse_length_params+0x1e>
 80107dc:	2000      	movs	r0, #0
 80107de:	bc70      	pop	{r4, r5, r6}
 80107e0:	4770      	bx	lr
 80107e2:	8b44      	ldrh	r4, [r0, #26]
 80107e4:	2c08      	cmp	r4, #8
 80107e6:	d8f9      	bhi.n	80107dc <acc_translation_a121_set_pulse_length_params+0x18>
 80107e8:	2001      	movs	r0, #1
 80107ea:	1e66      	subs	r6, r4, #1
 80107ec:	800b      	strh	r3, [r1, #0]
 80107ee:	fa00 f302 	lsl.w	r3, r0, r2
 80107f2:	fa00 f204 	lsl.w	r2, r0, r4
 80107f6:	fa00 f406 	lsl.w	r4, r0, r6
 80107fa:	804d      	strh	r5, [r1, #2]
 80107fc:	3b01      	subs	r3, #1
 80107fe:	3a01      	subs	r2, #1
 8010800:	3c01      	subs	r4, #1
 8010802:	b29b      	uxth	r3, r3
 8010804:	0192      	lsls	r2, r2, #6
 8010806:	019d      	lsls	r5, r3, #6
 8010808:	80ca      	strh	r2, [r1, #6]
 801080a:	025b      	lsls	r3, r3, #9
 801080c:	0262      	lsls	r2, r4, #9
 801080e:	808d      	strh	r5, [r1, #4]
 8010810:	810b      	strh	r3, [r1, #8]
 8010812:	814a      	strh	r2, [r1, #10]
 8010814:	e7e3      	b.n	80107de <acc_translation_a121_set_pulse_length_params+0x1a>
 8010816:	bf00      	nop

08010818 <acc_translation_a121_set_range_params>:
 8010818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8010820:	b08d      	sub	sp, #52	@ 0x34
 8010822:	460e      	mov	r6, r1
 8010824:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 8010828:	f1ba 0f18 	cmp.w	sl, #24
 801082c:	4691      	mov	r9, r2
 801082e:	461c      	mov	r4, r3
 8010830:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8010834:	f240 80dd 	bls.w	80109f2 <acc_translation_a121_set_range_params+0x1da>
 8010838:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 801083c:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 8010840:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010844:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8010848:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 801084c:	f3c3 01cc 	ubfx	r1, r3, #3, #13
 8010850:	ea41 3343 	orr.w	r3, r1, r3, lsl #13
 8010854:	b29b      	uxth	r3, r3
 8010856:	4293      	cmp	r3, r2
 8010858:	f240 818c 	bls.w	8010b74 <acc_translation_a121_set_range_params+0x35c>
 801085c:	4bbb      	ldr	r3, [pc, #748]	@ (8010b4c <acc_translation_a121_set_range_params+0x334>)
 801085e:	2000      	movs	r0, #0
 8010860:	4abb      	ldr	r2, [pc, #748]	@ (8010b50 <acc_translation_a121_set_range_params+0x338>)
 8010862:	2501      	movs	r5, #1
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	49bb      	ldr	r1, [pc, #748]	@ (8010b54 <acc_translation_a121_set_range_params+0x33c>)
 8010868:	4798      	blx	r3
 801086a:	2300      	movs	r3, #0
 801086c:	9500      	str	r5, [sp, #0]
 801086e:	9302      	str	r3, [sp, #8]
 8010870:	9308      	str	r3, [sp, #32]
 8010872:	2f00      	cmp	r7, #0
 8010874:	f000 8207 	beq.w	8010c86 <acc_translation_a121_set_range_params+0x46e>
 8010878:	2700      	movs	r7, #0
 801087a:	2302      	movs	r3, #2
 801087c:	6832      	ldr	r2, [r6, #0]
 801087e:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8010882:	fb13 f308 	smulbb	r3, r3, r8
 8010886:	f108 38ff 	add.w	r8, r8, #4294967295
 801088a:	4491      	add	r9, r2
 801088c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010890:	b29b      	uxth	r3, r3
 8010892:	4449      	add	r1, r9
 8010894:	fb0a 9808 	mla	r8, sl, r8, r9
 8010898:	9304      	str	r3, [sp, #16]
 801089a:	4291      	cmp	r1, r2
 801089c:	d906      	bls.n	80108ac <acc_translation_a121_set_range_params+0x94>
 801089e:	4bab      	ldr	r3, [pc, #684]	@ (8010b4c <acc_translation_a121_set_range_params+0x334>)
 80108a0:	2700      	movs	r7, #0
 80108a2:	4aad      	ldr	r2, [pc, #692]	@ (8010b58 <acc_translation_a121_set_range_params+0x340>)
 80108a4:	4638      	mov	r0, r7
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	49aa      	ldr	r1, [pc, #680]	@ (8010b54 <acc_translation_a121_set_range_params+0x33c>)
 80108aa:	4798      	blx	r3
 80108ac:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80108b0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80108b4:	4443      	add	r3, r8
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d906      	bls.n	80108c8 <acc_translation_a121_set_range_params+0xb0>
 80108ba:	4ba4      	ldr	r3, [pc, #656]	@ (8010b4c <acc_translation_a121_set_range_params+0x334>)
 80108bc:	2700      	movs	r7, #0
 80108be:	4aa7      	ldr	r2, [pc, #668]	@ (8010b5c <acc_translation_a121_set_range_params+0x344>)
 80108c0:	4638      	mov	r0, r7
 80108c2:	691b      	ldr	r3, [r3, #16]
 80108c4:	49a3      	ldr	r1, [pc, #652]	@ (8010b54 <acc_translation_a121_set_range_params+0x33c>)
 80108c6:	4798      	blx	r3
 80108c8:	f1b9 0f00 	cmp.w	r9, #0
 80108cc:	f2c0 81bc 	blt.w	8010c48 <acc_translation_a121_set_range_params+0x430>
 80108d0:	4ba3      	ldr	r3, [pc, #652]	@ (8010b60 <acc_translation_a121_set_range_params+0x348>)
 80108d2:	ea4f 72e9 	mov.w	r2, r9, asr #31
 80108d6:	fb83 3b09 	smull	r3, fp, r3, r9
 80108da:	ebc2 0bab 	rsb	fp, r2, fp, asr #2
 80108de:	fa0f fb8b 	sxth.w	fp, fp
 80108e2:	f1b8 0f00 	cmp.w	r8, #0
 80108e6:	f2c0 81a3 	blt.w	8010c30 <acc_translation_a121_set_range_params+0x418>
 80108ea:	4b9d      	ldr	r3, [pc, #628]	@ (8010b60 <acc_translation_a121_set_range_params+0x348>)
 80108ec:	ea4f 7ee8 	mov.w	lr, r8, asr #31
 80108f0:	fb83 3c08 	smull	r3, ip, r3, r8
 80108f4:	ebce 0cac 	rsb	ip, lr, ip, asr #2
 80108f8:	fa0f fc8c 	sxth.w	ip, ip
 80108fc:	fa1f fb8b 	uxth.w	fp, fp
 8010900:	4897      	ldr	r0, [pc, #604]	@ (8010b60 <acc_translation_a121_set_range_params+0x348>)
 8010902:	2118      	movs	r1, #24
 8010904:	ebac 0c0b 	sub.w	ip, ip, fp
 8010908:	fb80 3009 	smull	r3, r0, r0, r9
 801090c:	fa1f f38c 	uxth.w	r3, ip
 8010910:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 8010914:	fa0f f08c 	sxth.w	r0, ip
 8010918:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801091c:	9005      	str	r0, [sp, #20]
 801091e:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 8010922:	fbb3 f5f5 	udiv	r5, r3, r5
 8010926:	9b00      	ldr	r3, [sp, #0]
 8010928:	f105 0501 	add.w	r5, r5, #1
 801092c:	fbb1 f1f3 	udiv	r1, r1, r3
 8010930:	b2ad      	uxth	r5, r5
 8010932:	f100 8177 	bmi.w	8010c24 <acc_translation_a121_set_range_params+0x40c>
 8010936:	b213      	sxth	r3, r2
 8010938:	b292      	uxth	r2, r2
 801093a:	9303      	str	r3, [sp, #12]
 801093c:	4b88      	ldr	r3, [pc, #544]	@ (8010b60 <acc_translation_a121_set_range_params+0x348>)
 801093e:	fb83 0308 	smull	r0, r3, r3, r8
 8010942:	9800      	ldr	r0, [sp, #0]
 8010944:	ebce 03a3 	rsb	r3, lr, r3, asr #2
 8010948:	fbb2 fcf0 	udiv	ip, r2, r0
 801094c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010950:	fb00 2c1c 	mls	ip, r0, ip, r2
 8010954:	ebb8 03c3 	subs.w	r3, r8, r3, lsl #3
 8010958:	fa1f f98c 	uxth.w	r9, ip
 801095c:	f100 815a 	bmi.w	8010c14 <acc_translation_a121_set_range_params+0x3fc>
 8010960:	b218      	sxth	r0, r3
 8010962:	b29b      	uxth	r3, r3
 8010964:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010966:	3901      	subs	r1, #1
 8010968:	9800      	ldr	r0, [sp, #0]
 801096a:	2d01      	cmp	r5, #1
 801096c:	b289      	uxth	r1, r1
 801096e:	fb11 9a00 	smlabb	sl, r1, r0, r9
 8010972:	9109      	str	r1, [sp, #36]	@ 0x24
 8010974:	fa1f fa8a 	uxth.w	sl, sl
 8010978:	f000 8172 	beq.w	8010c60 <acc_translation_a121_set_range_params+0x448>
 801097c:	ebba 0303 	subs.w	r3, sl, r3
 8010980:	bf18      	it	ne
 8010982:	2301      	movne	r3, #1
 8010984:	4591      	cmp	r9, r2
 8010986:	4619      	mov	r1, r3
 8010988:	9301      	str	r3, [sp, #4]
 801098a:	bf14      	ite	ne
 801098c:	2301      	movne	r3, #1
 801098e:	2300      	moveq	r3, #0
 8010990:	b288      	uxth	r0, r1
 8010992:	eba5 0503 	sub.w	r5, r5, r3
 8010996:	9007      	str	r0, [sp, #28]
 8010998:	eba5 0501 	sub.w	r5, r5, r1
 801099c:	b2ad      	uxth	r5, r5
 801099e:	f000 80d0 	beq.w	8010b42 <acc_translation_a121_set_range_params+0x32a>
 80109a2:	9b03      	ldr	r3, [sp, #12]
 80109a4:	9900      	ldr	r1, [sp, #0]
 80109a6:	ebaa 0a03 	sub.w	sl, sl, r3
 80109aa:	2301      	movs	r3, #1
 80109ac:	fb9a f0f1 	sdiv	r0, sl, r1
 80109b0:	9306      	str	r3, [sp, #24]
 80109b2:	469a      	mov	sl, r3
 80109b4:	b283      	uxth	r3, r0
 80109b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109b8:	0092      	lsls	r2, r2, #2
 80109ba:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80109be:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 80109c0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80109c2:	2f00      	cmp	r7, #0
 80109c4:	d038      	beq.n	8010a38 <acc_translation_a121_set_range_params+0x220>
 80109c6:	7bb3      	ldrb	r3, [r6, #14]
 80109c8:	2b05      	cmp	r3, #5
 80109ca:	f200 8107 	bhi.w	8010bdc <acc_translation_a121_set_range_params+0x3c4>
 80109ce:	4a65      	ldr	r2, [pc, #404]	@ (8010b64 <acc_translation_a121_set_range_params+0x34c>)
 80109d0:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
 80109d4:	ea4f 0358 	mov.w	r3, r8, lsr #1
 80109d8:	f1a8 0203 	sub.w	r2, r8, #3
 80109dc:	f1a8 0014 	sub.w	r0, r8, #20
 80109e0:	f1a8 014a 	sub.w	r1, r8, #74	@ 0x4a
 80109e4:	3b03      	subs	r3, #3
 80109e6:	b292      	uxth	r2, r2
 80109e8:	fa1f f881 	uxth.w	r8, r1
 80109ec:	9003      	str	r0, [sp, #12]
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	e028      	b.n	8010a44 <acc_translation_a121_set_range_params+0x22c>
 80109f2:	f1ba 0f00 	cmp.w	sl, #0
 80109f6:	f43f af31 	beq.w	801085c <acc_translation_a121_set_range_params+0x44>
 80109fa:	2318      	movs	r3, #24
 80109fc:	fbb3 f3fa 	udiv	r3, r3, sl
 8010a00:	fb0a f303 	mul.w	r3, sl, r3
 8010a04:	f1c3 0318 	rsb	r3, r3, #24
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	9308      	str	r3, [sp, #32]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f47f af25 	bne.w	801085c <acc_translation_a121_set_range_params+0x44>
 8010a12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010a16:	2501      	movs	r5, #1
 8010a18:	f8cd a000 	str.w	sl, [sp]
 8010a1c:	009b      	lsls	r3, r3, #2
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	9302      	str	r3, [sp, #8]
 8010a22:	f1b8 0f00 	cmp.w	r8, #0
 8010a26:	f040 80e7 	bne.w	8010bf8 <acc_translation_a121_set_range_params+0x3e0>
 8010a2a:	4b48      	ldr	r3, [pc, #288]	@ (8010b4c <acc_translation_a121_set_range_params+0x334>)
 8010a2c:	4640      	mov	r0, r8
 8010a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8010b68 <acc_translation_a121_set_range_params+0x350>)
 8010a30:	691b      	ldr	r3, [r3, #16]
 8010a32:	4948      	ldr	r1, [pc, #288]	@ (8010b54 <acc_translation_a121_set_range_params+0x33c>)
 8010a34:	4798      	blx	r3
 8010a36:	e71c      	b.n	8010872 <acc_translation_a121_set_range_params+0x5a>
 8010a38:	236c      	movs	r3, #108	@ 0x6c
 8010a3a:	f04f 0836 	mov.w	r8, #54	@ 0x36
 8010a3e:	227d      	movs	r2, #125	@ 0x7d
 8010a40:	9303      	str	r3, [sp, #12]
 8010a42:	233d      	movs	r3, #61	@ 0x3d
 8010a44:	f1cb 0629 	rsb	r6, fp, #41	@ 0x29
 8010a48:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8010a4a:	9b05      	ldr	r3, [sp, #20]
 8010a4c:	4446      	add	r6, r8
 8010a4e:	86a2      	strh	r2, [r4, #52]	@ 0x34
 8010a50:	fa0f fb86 	sxth.w	fp, r6
 8010a54:	b2b6      	uxth	r6, r6
 8010a56:	ebab 0303 	sub.w	r3, fp, r3
 8010a5a:	2b29      	cmp	r3, #41	@ 0x29
 8010a5c:	dc06      	bgt.n	8010a6c <acc_translation_a121_set_range_params+0x254>
 8010a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8010b4c <acc_translation_a121_set_range_params+0x334>)
 8010a60:	2700      	movs	r7, #0
 8010a62:	4a42      	ldr	r2, [pc, #264]	@ (8010b6c <acc_translation_a121_set_range_params+0x354>)
 8010a64:	4638      	mov	r0, r7
 8010a66:	691b      	ldr	r3, [r3, #16]
 8010a68:	493a      	ldr	r1, [pc, #232]	@ (8010b54 <acc_translation_a121_set_range_params+0x33c>)
 8010a6a:	4798      	blx	r3
 8010a6c:	9b03      	ldr	r3, [sp, #12]
 8010a6e:	459b      	cmp	fp, r3
 8010a70:	db06      	blt.n	8010a80 <acc_translation_a121_set_range_params+0x268>
 8010a72:	4b36      	ldr	r3, [pc, #216]	@ (8010b4c <acc_translation_a121_set_range_params+0x334>)
 8010a74:	2700      	movs	r7, #0
 8010a76:	4a3e      	ldr	r2, [pc, #248]	@ (8010b70 <acc_translation_a121_set_range_params+0x358>)
 8010a78:	4638      	mov	r0, r7
 8010a7a:	691b      	ldr	r3, [r3, #16]
 8010a7c:	4935      	ldr	r1, [pc, #212]	@ (8010b54 <acc_translation_a121_set_range_params+0x33c>)
 8010a7e:	4798      	blx	r3
 8010a80:	9b02      	ldr	r3, [sp, #8]
 8010a82:	f8a4 8038 	strh.w	r8, [r4, #56]	@ 0x38
 8010a86:	2b2c      	cmp	r3, #44	@ 0x2c
 8010a88:	8766      	strh	r6, [r4, #58]	@ 0x3a
 8010a8a:	d92c      	bls.n	8010ae6 <acc_translation_a121_set_range_params+0x2ce>
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 8010a92:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8010a96:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8010a9a:	9b08      	ldr	r3, [sp, #32]
 8010a9c:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8010aa0:	9b06      	ldr	r3, [sp, #24]
 8010aa2:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8010aa6:	b35d      	cbz	r5, 8010b00 <acc_translation_a121_set_range_params+0x2e8>
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	9a07      	ldr	r2, [sp, #28]
 8010aac:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8010ab0:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 8010ab4:	f1ba 0f00 	cmp.w	sl, #0
 8010ab8:	f000 8083 	beq.w	8010bc2 <acc_translation_a121_set_range_params+0x3aa>
 8010abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010abe:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8010ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac4:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8010ac8:	9b01      	ldr	r3, [sp, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f000 8082 	beq.w	8010bd4 <acc_translation_a121_set_range_params+0x3bc>
 8010ad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ad2:	eba3 0c09 	sub.w	ip, r3, r9
 8010ad6:	9b00      	ldr	r3, [sp, #0]
 8010ad8:	fb9c fcf3 	sdiv	ip, ip, r3
 8010adc:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
 8010ae0:	3d01      	subs	r5, #1
 8010ae2:	b2ad      	uxth	r5, r5
 8010ae4:	e024      	b.n	8010b30 <acc_translation_a121_set_range_params+0x318>
 8010ae6:	9b02      	ldr	r3, [sp, #8]
 8010ae8:	2b1e      	cmp	r3, #30
 8010aea:	d95c      	bls.n	8010ba6 <acc_translation_a121_set_range_params+0x38e>
 8010aec:	f1a3 021e 	sub.w	r2, r3, #30
 8010af0:	230f      	movs	r3, #15
 8010af2:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 8010af6:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 8010afa:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8010afe:	e7cc      	b.n	8010a9a <acc_translation_a121_set_range_params+0x282>
 8010b00:	9b07      	ldr	r3, [sp, #28]
 8010b02:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8010b06:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 8010b0a:	f1ba 0f00 	cmp.w	sl, #0
 8010b0e:	d13d      	bne.n	8010b8c <acc_translation_a121_set_range_params+0x374>
 8010b10:	2300      	movs	r3, #0
 8010b12:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 8010b16:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8010b1a:	9b01      	ldr	r3, [sp, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d03e      	beq.n	8010b9e <acc_translation_a121_set_range_params+0x386>
 8010b20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b22:	eba3 0c09 	sub.w	ip, r3, r9
 8010b26:	9b00      	ldr	r3, [sp, #0]
 8010b28:	fb9c fcf3 	sdiv	ip, ip, r3
 8010b2c:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
 8010b30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010b32:	4638      	mov	r0, r7
 8010b34:	9a04      	ldr	r2, [sp, #16]
 8010b36:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 8010b3a:	801a      	strh	r2, [r3, #0]
 8010b3c:	b00d      	add	sp, #52	@ 0x34
 8010b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b42:	2300      	movs	r3, #0
 8010b44:	469a      	mov	sl, r3
 8010b46:	9306      	str	r3, [sp, #24]
 8010b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b4a:	e735      	b.n	80109b8 <acc_translation_a121_set_range_params+0x1a0>
 8010b4c:	24003210 	.word	0x24003210
 8010b50:	0801c4d0 	.word	0x0801c4d0
 8010b54:	0801c4e4 	.word	0x0801c4e4
 8010b58:	0801c544 	.word	0x0801c544
 8010b5c:	0801c558 	.word	0x0801c558
 8010b60:	2aaaaaab 	.word	0x2aaaaaab
 8010b64:	0801c7e8 	.word	0x0801c7e8
 8010b68:	0801c4f8 	.word	0x0801c4f8
 8010b6c:	0801c58c 	.word	0x0801c58c
 8010b70:	0801c5ac 	.word	0x0801c5ac
 8010b74:	235c      	movs	r3, #92	@ 0x5c
 8010b76:	4d4d      	ldr	r5, [pc, #308]	@ (8010cac <acc_translation_a121_set_range_params+0x494>)
 8010b78:	9302      	str	r3, [sp, #8]
 8010b7a:	2318      	movs	r3, #24
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	fba5 350a 	umull	r3, r5, r5, sl
 8010b82:	092d      	lsrs	r5, r5, #4
 8010b84:	1e6b      	subs	r3, r5, #1
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	9308      	str	r3, [sp, #32]
 8010b8a:	e74a      	b.n	8010a22 <acc_translation_a121_set_range_params+0x20a>
 8010b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b8e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8010b92:	2300      	movs	r3, #0
 8010b94:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8010b98:	9b01      	ldr	r3, [sp, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d1c0      	bne.n	8010b20 <acc_translation_a121_set_range_params+0x308>
 8010b9e:	9b01      	ldr	r3, [sp, #4]
 8010ba0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8010ba4:	e7c4      	b.n	8010b30 <acc_translation_a121_set_range_params+0x318>
 8010ba6:	9b02      	ldr	r3, [sp, #8]
 8010ba8:	2b0f      	cmp	r3, #15
 8010baa:	d975      	bls.n	8010c98 <acc_translation_a121_set_range_params+0x480>
 8010bac:	f1a3 010f 	sub.w	r1, r3, #15
 8010bb0:	220f      	movs	r2, #15
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	f8a4 1052 	strh.w	r1, [r4, #82]	@ 0x52
 8010bb8:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 8010bbc:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8010bc0:	e76b      	b.n	8010a9a <acc_translation_a121_set_range_params+0x282>
 8010bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bc4:	f8a4 a042 	strh.w	sl, [r4, #66]	@ 0x42
 8010bc8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8010bcc:	9b01      	ldr	r3, [sp, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f47f af7e 	bne.w	8010ad0 <acc_translation_a121_set_range_params+0x2b8>
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8010bda:	e781      	b.n	8010ae0 <acc_translation_a121_set_range_params+0x2c8>
 8010bdc:	216c      	movs	r1, #108	@ 0x6c
 8010bde:	4b34      	ldr	r3, [pc, #208]	@ (8010cb0 <acc_translation_a121_set_range_params+0x498>)
 8010be0:	4a34      	ldr	r2, [pc, #208]	@ (8010cb4 <acc_translation_a121_set_range_params+0x49c>)
 8010be2:	2000      	movs	r0, #0
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	f04f 0836 	mov.w	r8, #54	@ 0x36
 8010bea:	9103      	str	r1, [sp, #12]
 8010bec:	2700      	movs	r7, #0
 8010bee:	4932      	ldr	r1, [pc, #200]	@ (8010cb8 <acc_translation_a121_set_range_params+0x4a0>)
 8010bf0:	4798      	blx	r3
 8010bf2:	233d      	movs	r3, #61	@ 0x3d
 8010bf4:	227d      	movs	r2, #125	@ 0x7d
 8010bf6:	e725      	b.n	8010a44 <acc_translation_a121_set_range_params+0x22c>
 8010bf8:	2f00      	cmp	r7, #0
 8010bfa:	f47f ae3e 	bne.w	801087a <acc_translation_a121_set_range_params+0x62>
 8010bfe:	7b33      	ldrb	r3, [r6, #12]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d03f      	beq.n	8010c84 <acc_translation_a121_set_range_params+0x46c>
 8010c04:	4b2a      	ldr	r3, [pc, #168]	@ (8010cb0 <acc_translation_a121_set_range_params+0x498>)
 8010c06:	4638      	mov	r0, r7
 8010c08:	4a2c      	ldr	r2, [pc, #176]	@ (8010cbc <acc_translation_a121_set_range_params+0x4a4>)
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	492a      	ldr	r1, [pc, #168]	@ (8010cb8 <acc_translation_a121_set_range_params+0x4a0>)
 8010c0e:	4798      	blx	r3
 8010c10:	2304      	movs	r3, #4
 8010c12:	e633      	b.n	801087c <acc_translation_a121_set_range_params+0x64>
 8010c14:	f103 0c18 	add.w	ip, r3, #24
 8010c18:	fa0f f08c 	sxth.w	r0, ip
 8010c1c:	fa1f f38c 	uxth.w	r3, ip
 8010c20:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010c22:	e6a0      	b.n	8010966 <acc_translation_a121_set_range_params+0x14e>
 8010c24:	f102 0018 	add.w	r0, r2, #24
 8010c28:	b203      	sxth	r3, r0
 8010c2a:	b282      	uxth	r2, r0
 8010c2c:	9303      	str	r3, [sp, #12]
 8010c2e:	e685      	b.n	801093c <acc_translation_a121_set_range_params+0x124>
 8010c30:	ea6f 0c08 	mvn.w	ip, r8
 8010c34:	4b1d      	ldr	r3, [pc, #116]	@ (8010cac <acc_translation_a121_set_range_params+0x494>)
 8010c36:	ea4f 7ee8 	mov.w	lr, r8, asr #31
 8010c3a:	fba3 3c0c 	umull	r3, ip, r3, ip
 8010c3e:	ea6f 1c1c 	mvn.w	ip, ip, lsr #4
 8010c42:	fa0f fc8c 	sxth.w	ip, ip
 8010c46:	e659      	b.n	80108fc <acc_translation_a121_set_range_params+0xe4>
 8010c48:	ea6f 0b09 	mvn.w	fp, r9
 8010c4c:	4b17      	ldr	r3, [pc, #92]	@ (8010cac <acc_translation_a121_set_range_params+0x494>)
 8010c4e:	ea4f 72e9 	mov.w	r2, r9, asr #31
 8010c52:	fba3 3b0b 	umull	r3, fp, r3, fp
 8010c56:	ea6f 1b1b 	mvn.w	fp, fp, lsr #4
 8010c5a:	fa0f fb8b 	sxth.w	fp, fp
 8010c5e:	e640      	b.n	80108e2 <acc_translation_a121_set_range_params+0xca>
 8010c60:	459a      	cmp	sl, r3
 8010c62:	bf08      	it	eq
 8010c64:	4591      	cmpeq	r9, r2
 8010c66:	bf14      	ite	ne
 8010c68:	f04f 0a01 	movne.w	sl, #1
 8010c6c:	f04f 0a00 	moveq.w	sl, #0
 8010c70:	f08a 0501 	eor.w	r5, sl, #1
 8010c74:	f1ba 0f00 	cmp.w	sl, #0
 8010c78:	d007      	beq.n	8010c8a <acc_translation_a121_set_range_params+0x472>
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	469a      	mov	sl, r3
 8010c7e:	9107      	str	r1, [sp, #28]
 8010c80:	9101      	str	r1, [sp, #4]
 8010c82:	e68e      	b.n	80109a2 <acc_translation_a121_set_range_params+0x18a>
 8010c84:	2701      	movs	r7, #1
 8010c86:	2304      	movs	r3, #4
 8010c88:	e5f8      	b.n	801087c <acc_translation_a121_set_range_params+0x64>
 8010c8a:	f8cd a004 	str.w	sl, [sp, #4]
 8010c8e:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8010c92:	e9cd aa06 	strd	sl, sl, [sp, #24]
 8010c96:	e68f      	b.n	80109b8 <acc_translation_a121_set_range_params+0x1a0>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	9a02      	ldr	r2, [sp, #8]
 8010c9c:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8010ca0:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 8010ca4:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8010ca8:	e6f7      	b.n	8010a9a <acc_translation_a121_set_range_params+0x282>
 8010caa:	bf00      	nop
 8010cac:	aaaaaaab 	.word	0xaaaaaaab
 8010cb0:	24003210 	.word	0x24003210
 8010cb4:	0801c580 	.word	0x0801c580
 8010cb8:	0801c4e4 	.word	0x0801c4e4
 8010cbc:	0801c50c 	.word	0x0801c50c

08010cc0 <acc_translation_a121_subsweep_translate>:
 8010cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cc4:	f240 15ff 	movw	r5, #511	@ 0x1ff
 8010cc8:	f240 37ff 	movw	r7, #1023	@ 0x3ff
 8010ccc:	4680      	mov	r8, r0
 8010cce:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
 8010cd2:	890c      	ldrh	r4, [r1, #8]
 8010cd4:	b08d      	sub	sp, #52	@ 0x34
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	bf08      	it	eq
 8010cda:	463d      	moveq	r5, r7
 8010cdc:	42a5      	cmp	r5, r4
 8010cde:	bf2c      	ite	cs
 8010ce0:	2500      	movcs	r5, #0
 8010ce2:	2501      	movcc	r5, #1
 8010ce4:	2c00      	cmp	r4, #0
 8010ce6:	bf14      	ite	ne
 8010ce8:	462c      	movne	r4, r5
 8010cea:	2401      	moveq	r4, #1
 8010cec:	b994      	cbnz	r4, 8010d14 <acc_translation_a121_subsweep_translate+0x54>
 8010cee:	461f      	mov	r7, r3
 8010cf0:	7b4b      	ldrb	r3, [r1, #13]
 8010cf2:	460e      	mov	r6, r1
 8010cf4:	4691      	mov	r9, r2
 8010cf6:	b9c3      	cbnz	r3, 8010d2a <acc_translation_a121_subsweep_translate+0x6a>
 8010cf8:	7bcb      	ldrb	r3, [r1, #15]
 8010cfa:	7bb0      	ldrb	r0, [r6, #14]
 8010cfc:	b9f8      	cbnz	r0, 8010d3e <acc_translation_a121_subsweep_translate+0x7e>
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d021      	beq.n	8010d46 <acc_translation_a121_subsweep_translate+0x86>
 8010d02:	4b52      	ldr	r3, [pc, #328]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010d04:	4a52      	ldr	r2, [pc, #328]	@ (8010e50 <acc_translation_a121_subsweep_translate+0x190>)
 8010d06:	691b      	ldr	r3, [r3, #16]
 8010d08:	4952      	ldr	r1, [pc, #328]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010d0a:	4798      	blx	r3
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	b00d      	add	sp, #52	@ 0x34
 8010d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d14:	4b4d      	ldr	r3, [pc, #308]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010d16:	2000      	movs	r0, #0
 8010d18:	4a4f      	ldr	r2, [pc, #316]	@ (8010e58 <acc_translation_a121_subsweep_translate+0x198>)
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	4604      	mov	r4, r0
 8010d1e:	494d      	ldr	r1, [pc, #308]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010d20:	4798      	blx	r3
 8010d22:	4620      	mov	r0, r4
 8010d24:	b00d      	add	sp, #52	@ 0x34
 8010d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d2a:	7bcb      	ldrb	r3, [r1, #15]
 8010d2c:	2b02      	cmp	r3, #2
 8010d2e:	d1e4      	bne.n	8010cfa <acc_translation_a121_subsweep_translate+0x3a>
 8010d30:	4b46      	ldr	r3, [pc, #280]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010d32:	4620      	mov	r0, r4
 8010d34:	4a49      	ldr	r2, [pc, #292]	@ (8010e5c <acc_translation_a121_subsweep_translate+0x19c>)
 8010d36:	691b      	ldr	r3, [r3, #16]
 8010d38:	4946      	ldr	r1, [pc, #280]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010d3a:	4798      	blx	r3
 8010d3c:	e7f1      	b.n	8010d22 <acc_translation_a121_subsweep_translate+0x62>
 8010d3e:	1e58      	subs	r0, r3, #1
 8010d40:	b2c0      	uxtb	r0, r0
 8010d42:	2804      	cmp	r0, #4
 8010d44:	d859      	bhi.n	8010dfa <acc_translation_a121_subsweep_translate+0x13a>
 8010d46:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010d48:	463b      	mov	r3, r7
 8010d4a:	4a45      	ldr	r2, [pc, #276]	@ (8010e60 <acc_translation_a121_subsweep_translate+0x1a0>)
 8010d4c:	9100      	str	r1, [sp, #0]
 8010d4e:	4631      	mov	r1, r6
 8010d50:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010d54:	4640      	mov	r0, r8
 8010d56:	f7ff fd5f 	bl	8010818 <acc_translation_a121_set_range_params>
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d0e1      	beq.n	8010d22 <acc_translation_a121_subsweep_translate+0x62>
 8010d5e:	463a      	mov	r2, r7
 8010d60:	4649      	mov	r1, r9
 8010d62:	4630      	mov	r0, r6
 8010d64:	f7ff fd0a 	bl	801077c <acc_translation_a121_set_gain_params>
 8010d68:	b948      	cbnz	r0, 8010d7e <acc_translation_a121_subsweep_translate+0xbe>
 8010d6a:	4938      	ldr	r1, [pc, #224]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8010e64 <acc_translation_a121_subsweep_translate+0x1a4>)
 8010d70:	690b      	ldr	r3, [r1, #16]
 8010d72:	4938      	ldr	r1, [pc, #224]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010d74:	4798      	blx	r3
 8010d76:	4620      	mov	r0, r4
 8010d78:	b00d      	add	sp, #52	@ 0x34
 8010d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d7e:	4649      	mov	r1, r9
 8010d80:	7bf0      	ldrb	r0, [r6, #15]
 8010d82:	aa04      	add	r2, sp, #16
 8010d84:	f7ff fc4a 	bl	801061c <acc_translation_a121_profile_to_pulse_params>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	d046      	beq.n	8010e1c <acc_translation_a121_subsweep_translate+0x15c>
 8010d8e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8010d92:	f107 0108 	add.w	r1, r7, #8
 8010d96:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8010d9a:	a804      	add	r0, sp, #16
 8010d9c:	857a      	strh	r2, [r7, #42]	@ 0x2a
 8010d9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010da0:	f7ff fd10 	bl	80107c4 <acc_translation_a121_set_pulse_length_params>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d0bc      	beq.n	8010d22 <acc_translation_a121_subsweep_translate+0x62>
 8010da8:	f107 0214 	add.w	r2, r7, #20
 8010dac:	f898 304d 	ldrb.w	r3, [r8, #77]	@ 0x4d
 8010db0:	a804      	add	r0, sp, #16
 8010db2:	4611      	mov	r1, r2
 8010db4:	9203      	str	r2, [sp, #12]
 8010db6:	9308      	str	r3, [sp, #32]
 8010db8:	f000 fe00 	bl	80119bc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 8010dbc:	9a03      	ldr	r2, [sp, #12]
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d03c      	beq.n	8010e3e <acc_translation_a121_subsweep_translate+0x17e>
 8010dc4:	f1b9 0f00 	cmp.w	r9, #0
 8010dc8:	d005      	beq.n	8010dd6 <acc_translation_a121_subsweep_translate+0x116>
 8010dca:	f109 015c 	add.w	r1, r9, #92	@ 0x5c
 8010dce:	a804      	add	r0, sp, #16
 8010dd0:	f000 fcec 	bl	80117ac <acc_translation_pulseshaper_calc_settings>
 8010dd4:	b1d8      	cbz	r0, 8010e0e <acc_translation_a121_subsweep_translate+0x14e>
 8010dd6:	8933      	ldrh	r3, [r6, #8]
 8010dd8:	7af2      	ldrb	r2, [r6, #11]
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	863a      	strh	r2, [r7, #48]	@ 0x30
 8010dde:	d02a      	beq.n	8010e36 <acc_translation_a121_subsweep_translate+0x176>
 8010de0:	3b02      	subs	r3, #2
 8010de2:	2201      	movs	r2, #1
 8010de4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010de6:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8010de8:	7b73      	ldrb	r3, [r6, #13]
 8010dea:	4620      	mov	r0, r4
 8010dec:	f083 0201 	eor.w	r2, r3, #1
 8010df0:	80fb      	strh	r3, [r7, #6]
 8010df2:	867a      	strh	r2, [r7, #50]	@ 0x32
 8010df4:	b00d      	add	sp, #52	@ 0x34
 8010df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dfa:	4b14      	ldr	r3, [pc, #80]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8010e68 <acc_translation_a121_subsweep_translate+0x1a8>)
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	4914      	ldr	r1, [pc, #80]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010e04:	4798      	blx	r3
 8010e06:	4620      	mov	r0, r4
 8010e08:	b00d      	add	sp, #52	@ 0x34
 8010e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e0e:	490f      	ldr	r1, [pc, #60]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010e10:	4604      	mov	r4, r0
 8010e12:	4a16      	ldr	r2, [pc, #88]	@ (8010e6c <acc_translation_a121_subsweep_translate+0x1ac>)
 8010e14:	690b      	ldr	r3, [r1, #16]
 8010e16:	490f      	ldr	r1, [pc, #60]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010e18:	4798      	blx	r3
 8010e1a:	e782      	b.n	8010d22 <acc_translation_a121_subsweep_translate+0x62>
 8010e1c:	490b      	ldr	r1, [pc, #44]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010e1e:	461c      	mov	r4, r3
 8010e20:	4a11      	ldr	r2, [pc, #68]	@ (8010e68 <acc_translation_a121_subsweep_translate+0x1a8>)
 8010e22:	690b      	ldr	r3, [r1, #16]
 8010e24:	490b      	ldr	r1, [pc, #44]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010e26:	4798      	blx	r3
 8010e28:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8010e2c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8010e30:	857a      	strh	r2, [r7, #42]	@ 0x2a
 8010e32:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010e34:	e775      	b.n	8010d22 <acc_translation_a121_subsweep_translate+0x62>
 8010e36:	2300      	movs	r3, #0
 8010e38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010e3a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010e3c:	e7d4      	b.n	8010de8 <acc_translation_a121_subsweep_translate+0x128>
 8010e3e:	4b03      	ldr	r3, [pc, #12]	@ (8010e4c <acc_translation_a121_subsweep_translate+0x18c>)
 8010e40:	4a0b      	ldr	r2, [pc, #44]	@ (8010e70 <acc_translation_a121_subsweep_translate+0x1b0>)
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	4903      	ldr	r1, [pc, #12]	@ (8010e54 <acc_translation_a121_subsweep_translate+0x194>)
 8010e46:	4798      	blx	r3
 8010e48:	e76b      	b.n	8010d22 <acc_translation_a121_subsweep_translate+0x62>
 8010e4a:	bf00      	nop
 8010e4c:	24003210 	.word	0x24003210
 8010e50:	0801c600 	.word	0x0801c600
 8010e54:	0801c4e4 	.word	0x0801c4e4
 8010e58:	0801c5c4 	.word	0x0801c5c4
 8010e5c:	0801c5d4 	.word	0x0801c5d4
 8010e60:	0801c7f4 	.word	0x0801c7f4
 8010e64:	0801c638 	.word	0x0801c638
 8010e68:	0801c628 	.word	0x0801c628
 8010e6c:	0801c650 	.word	0x0801c650
 8010e70:	0801c67c 	.word	0x0801c67c

08010e74 <acc_translation_a121_point_to_coarse>:
 8010e74:	2800      	cmp	r0, #0
 8010e76:	db04      	blt.n	8010e82 <acc_translation_a121_point_to_coarse+0xe>
 8010e78:	b209      	sxth	r1, r1
 8010e7a:	fb90 f0f1 	sdiv	r0, r0, r1
 8010e7e:	b200      	sxth	r0, r0
 8010e80:	4770      	bx	lr
 8010e82:	43c3      	mvns	r3, r0
 8010e84:	b208      	sxth	r0, r1
 8010e86:	fb93 f0f0 	sdiv	r0, r3, r0
 8010e8a:	43c0      	mvns	r0, r0
 8010e8c:	b200      	sxth	r0, r0
 8010e8e:	4770      	bx	lr

08010e90 <acc_translation_a121_point_in_coarse>:
 8010e90:	fb90 f3f1 	sdiv	r3, r0, r1
 8010e94:	fb03 0011 	mls	r0, r3, r1, r0
 8010e98:	0403      	lsls	r3, r0, #16
 8010e9a:	bf48      	it	mi
 8010e9c:	1840      	addmi	r0, r0, r1
 8010e9e:	b280      	uxth	r0, r0
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop

08010ea4 <acc_translation_a121_calculate_minimum_sweep_period>:
 8010ea4:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eae:	4617      	mov	r7, r2
 8010eb0:	4680      	mov	r8, r0
 8010eb2:	f8b1 21a4 	ldrh.w	r2, [r1, #420]	@ 0x1a4
 8010eb6:	ed2d 8b0a 	vpush	{d8-d12}
 8010eba:	b088      	sub	sp, #32
 8010ebc:	f000 80ba 	beq.w	8011034 <acc_translation_a121_calculate_minimum_sweep_period+0x190>
 8010ec0:	ee07 2a90 	vmov	s15, r2
 8010ec4:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 8010ec8:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 8010ecc:	eddf 9a5e 	vldr	s19, [pc, #376]	@ 8011048 <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>
 8010ed0:	eef8 aa67 	vcvt.f32.u32	s21, s15
 8010ed4:	f7ff fb70 	bl	80105b8 <get_pll_freq>
 8010ed8:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 8010edc:	eef0 8a40 	vmov.f32	s17, s0
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	f200 809b 	bhi.w	801101c <acc_translation_a121_calculate_minimum_sweep_period+0x178>
 8010ee6:	4959      	ldr	r1, [pc, #356]	@ (801104c <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 8010ee8:	2501      	movs	r5, #1
 8010eea:	4a59      	ldr	r2, [pc, #356]	@ (8011050 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>)
 8010eec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010ef0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ef4:	edd1 ba00 	vldr	s23, [r1]
 8010ef8:	ed93 ca00 	vldr	s24, [r3]
 8010efc:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d06b      	beq.n	8010fdc <acc_translation_a121_calculate_minimum_sweep_period+0x138>
 8010f04:	2400      	movs	r4, #0
 8010f06:	ed9f 8a53 	vldr	s16, [pc, #332]	@ 8011054 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>
 8010f0a:	4e53      	ldr	r6, [pc, #332]	@ (8011058 <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>)
 8010f0c:	46a1      	mov	r9, r4
 8010f0e:	ed9f ba53 	vldr	s22, [pc, #332]	@ 801105c <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 8010f12:	ed9f aa53 	vldr	s20, [pc, #332]	@ 8011060 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>
 8010f16:	e041      	b.n	8010f9c <acc_translation_a121_calculate_minimum_sweep_period+0xf8>
 8010f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f1c:	ee07 3a90 	vmov	s15, r3
 8010f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f24:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 8010f28:	f10a 0302 	add.w	r3, sl, #2
 8010f2c:	44c1      	add	r9, r8
 8010f2e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8010f32:	005b      	lsls	r3, r3, #1
 8010f34:	3401      	adds	r4, #1
 8010f36:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8010f3a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8010f44:	f10a 0a18 	add.w	sl, sl, #24
 8010f48:	fa5f f984 	uxtb.w	r9, r4
 8010f4c:	fb02 3303 	mla	r3, r2, r3, r3
 8010f50:	ee07 1a90 	vmov	s15, r1
 8010f54:	fa1f fa8a 	uxth.w	sl, sl
 8010f58:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 8010f5c:	3302      	adds	r3, #2
 8010f5e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8010f62:	ee07 aa90 	vmov	s15, sl
 8010f66:	454a      	cmp	r2, r9
 8010f68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	ee07 3a90 	vmov	s15, r3
 8010f76:	eec6 5a8a 	vdiv.f32	s11, s13, s20
 8010f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f7e:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8010f82:	ee87 5a25 	vdiv.f32	s10, s14, s11
 8010f86:	ee66 7a86 	vmul.f32	s15, s13, s12
 8010f8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010f8e:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8010f92:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010f96:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010f9a:	d921      	bls.n	8010fe0 <acc_translation_a121_calculate_minimum_sweep_period+0x13c>
 8010f9c:	eb08 1309 	add.w	r3, r8, r9, lsl #4
 8010fa0:	466a      	mov	r2, sp
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8010fa8:	7bd8      	ldrb	r0, [r3, #15]
 8010faa:	f7ff fb37 	bl	801061c <acc_translation_a121_profile_to_pulse_params>
 8010fae:	4a2d      	ldr	r2, [pc, #180]	@ (8011064 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 8010fb0:	492d      	ldr	r1, [pc, #180]	@ (8011068 <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 8010fb2:	b910      	cbnz	r0, 8010fba <acc_translation_a121_calculate_minimum_sweep_period+0x116>
 8010fb4:	6933      	ldr	r3, [r6, #16]
 8010fb6:	4605      	mov	r5, r0
 8010fb8:	4798      	blx	r3
 8010fba:	eb08 0309 	add.w	r3, r8, r9
 8010fbe:	4a2b      	ldr	r2, [pc, #172]	@ (801106c <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 8010fc0:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 8010fc4:	7b9b      	ldrb	r3, [r3, #14]
 8010fc6:	2b05      	cmp	r3, #5
 8010fc8:	d9a6      	bls.n	8010f18 <acc_translation_a121_calculate_minimum_sweep_period+0x74>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	6933      	ldr	r3, [r6, #16]
 8010fce:	4a28      	ldr	r2, [pc, #160]	@ (8011070 <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>)
 8010fd0:	4925      	ldr	r1, [pc, #148]	@ (8011068 <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	4798      	blx	r3
 8010fd6:	eef0 7a4b 	vmov.f32	s15, s22
 8010fda:	e7a3      	b.n	8010f24 <acc_translation_a121_calculate_minimum_sweep_period+0x80>
 8010fdc:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8011054 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>
 8010fe0:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8011074 <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>
 8010fe4:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8010fe8:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8011060 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>
 8010fec:	ee7b ba8c 	vadd.f32	s23, s23, s24
 8010ff0:	eec8 6a86 	vdiv.f32	s13, s17, s12
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ffe:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8011002:	ee77 caac 	vadd.f32	s25, s15, s25
 8011006:	ee3c 8a88 	vadd.f32	s16, s25, s16
 801100a:	ee78 ba2b 	vadd.f32	s23, s16, s23
 801100e:	edc7 ba00 	vstr	s23, [r7]
 8011012:	b008      	add	sp, #32
 8011014:	ecbd 8b0a 	vpop	{d8-d12}
 8011018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801101c:	4b0e      	ldr	r3, [pc, #56]	@ (8011058 <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>)
 801101e:	2000      	movs	r0, #0
 8011020:	ed9f ca0c 	vldr	s24, [pc, #48]	@ 8011054 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>
 8011024:	4a14      	ldr	r2, [pc, #80]	@ (8011078 <acc_translation_a121_calculate_minimum_sweep_period+0x1d4>)
 8011026:	4605      	mov	r5, r0
 8011028:	691b      	ldr	r3, [r3, #16]
 801102a:	eef0 ba4c 	vmov.f32	s23, s24
 801102e:	490e      	ldr	r1, [pc, #56]	@ (8011068 <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 8011030:	4798      	blx	r3
 8011032:	e763      	b.n	8010efc <acc_translation_a121_calculate_minimum_sweep_period+0x58>
 8011034:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 8011054 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>
 8011038:	eef0 9a49 	vmov.f32	s19, s18
 801103c:	eef0 ca49 	vmov.f32	s25, s18
 8011040:	eef0 aa49 	vmov.f32	s21, s18
 8011044:	e746      	b.n	8010ed4 <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 8011046:	bf00      	nop
 8011048:	419d999a 	.word	0x419d999a
 801104c:	0801c808 	.word	0x0801c808
 8011050:	0801c814 	.word	0x0801c814
 8011054:	00000000 	.word	0x00000000
 8011058:	24003210 	.word	0x24003210
 801105c:	43000000 	.word	0x43000000
 8011060:	49742400 	.word	0x49742400
 8011064:	0801c628 	.word	0x0801c628
 8011068:	0801c4e4 	.word	0x0801c4e4
 801106c:	0801c7e8 	.word	0x0801c7e8
 8011070:	0801c580 	.word	0x0801c580
 8011074:	43200000 	.word	0x43200000
 8011078:	0801c69c 	.word	0x0801c69c

0801107c <acc_translation_a121_translate>:
 801107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011080:	4691      	mov	r9, r2
 8011082:	469a      	mov	sl, r3
 8011084:	f890 204c 	ldrb.w	r2, [r0, #76]	@ 0x4c
 8011088:	4680      	mov	r8, r0
 801108a:	468b      	mov	fp, r1
 801108c:	ed2d 8b06 	vpush	{d8-d10}
 8011090:	b091      	sub	sp, #68	@ 0x44
 8011092:	f890 304e 	ldrb.w	r3, [r0, #78]	@ 0x4e
 8011096:	9208      	str	r2, [sp, #32]
 8011098:	2b04      	cmp	r3, #4
 801109a:	f8b0 2048 	ldrh.w	r2, [r0, #72]	@ 0x48
 801109e:	9207      	str	r2, [sp, #28]
 80110a0:	d818      	bhi.n	80110d4 <acc_translation_a121_translate+0x58>
 80110a2:	edd0 7a10 	vldr	s15, [r0, #64]	@ 0x40
 80110a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ae:	f100 8141 	bmi.w	8011334 <acc_translation_a121_translate+0x2b8>
 80110b2:	f890 3056 	ldrb.w	r3, [r0, #86]	@ 0x56
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f000 8143 	beq.w	8011342 <acc_translation_a121_translate+0x2c6>
 80110bc:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f000 813e 	beq.w	8011342 <acc_translation_a121_translate+0x2c6>
 80110c6:	4bc6      	ldr	r3, [pc, #792]	@ (80113e0 <acc_translation_a121_translate+0x364>)
 80110c8:	2000      	movs	r0, #0
 80110ca:	4ac6      	ldr	r2, [pc, #792]	@ (80113e4 <acc_translation_a121_translate+0x368>)
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	49c6      	ldr	r1, [pc, #792]	@ (80113e8 <acc_translation_a121_translate+0x36c>)
 80110d0:	4798      	blx	r3
 80110d2:	e005      	b.n	80110e0 <acc_translation_a121_translate+0x64>
 80110d4:	4bc2      	ldr	r3, [pc, #776]	@ (80113e0 <acc_translation_a121_translate+0x364>)
 80110d6:	2000      	movs	r0, #0
 80110d8:	4ac4      	ldr	r2, [pc, #784]	@ (80113ec <acc_translation_a121_translate+0x370>)
 80110da:	691b      	ldr	r3, [r3, #16]
 80110dc:	49c2      	ldr	r1, [pc, #776]	@ (80113e8 <acc_translation_a121_translate+0x36c>)
 80110de:	4798      	blx	r3
 80110e0:	f7fe f8ca 	bl	800f278 <acc_rss_integration_get_sensor_reference_frequency>
 80110e4:	edd8 7a11 	vldr	s15, [r8, #68]	@ 0x44
 80110e8:	ee07 0a10 	vmov	s14, r0
 80110ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110f0:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 80110f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f8:	f340 8108 	ble.w	801130c <acc_translation_a121_translate+0x290>
 80110fc:	ee88 aa27 	vdiv.f32	s20, s16, s15
 8011100:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011104:	ee3a aa27 	vadd.f32	s20, s20, s15
 8011108:	9b07      	ldr	r3, [sp, #28]
 801110a:	2b00      	cmp	r3, #0
 801110c:	f040 8104 	bne.w	8011318 <acc_translation_a121_translate+0x29c>
 8011110:	9305      	str	r3, [sp, #20]
 8011112:	f898 304a 	ldrb.w	r3, [r8, #74]	@ 0x4a
 8011116:	2b00      	cmp	r3, #0
 8011118:	f040 8106 	bne.w	8011328 <acc_translation_a121_translate+0x2ac>
 801111c:	f898 2050 	ldrb.w	r2, [r8, #80]	@ 0x50
 8011120:	2a02      	cmp	r2, #2
 8011122:	f040 831b 	bne.w	801175c <acc_translation_a121_translate+0x6e0>
 8011126:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 801112a:	2a01      	cmp	r2, #1
 801112c:	f000 81e8 	beq.w	8011500 <acc_translation_a121_translate+0x484>
 8011130:	2200      	movs	r2, #0
 8011132:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8011134:	7102      	strb	r2, [r0, #4]
 8011136:	f8a9 21ac 	strh.w	r2, [r9, #428]	@ 0x1ac
 801113a:	b183      	cbz	r3, 801115e <acc_translation_a121_translate+0xe2>
 801113c:	f898 304f 	ldrb.w	r3, [r8, #79]	@ 0x4f
 8011140:	2b01      	cmp	r3, #1
 8011142:	f000 8287 	beq.w	8011654 <acc_translation_a121_translate+0x5d8>
 8011146:	2b02      	cmp	r3, #2
 8011148:	f000 81f7 	beq.w	801153a <acc_translation_a121_translate+0x4be>
 801114c:	2b00      	cmp	r3, #0
 801114e:	f000 81de 	beq.w	801150e <acc_translation_a121_translate+0x492>
 8011152:	4ba3      	ldr	r3, [pc, #652]	@ (80113e0 <acc_translation_a121_translate+0x364>)
 8011154:	2000      	movs	r0, #0
 8011156:	4aa6      	ldr	r2, [pc, #664]	@ (80113f0 <acc_translation_a121_translate+0x374>)
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	49a3      	ldr	r1, [pc, #652]	@ (80113e8 <acc_translation_a121_translate+0x36c>)
 801115c:	4798      	blx	r3
 801115e:	f1bb 0f00 	cmp.w	fp, #0
 8011162:	f000 82c5 	beq.w	80116f0 <acc_translation_a121_translate+0x674>
 8011166:	4649      	mov	r1, r9
 8011168:	4658      	mov	r0, fp
 801116a:	f7ff facd 	bl	8010708 <acc_translation_a121_set_calibration_params>
 801116e:	2000      	movs	r0, #0
 8011170:	2301      	movs	r3, #1
 8011172:	2102      	movs	r1, #2
 8011174:	4602      	mov	r2, r0
 8011176:	4684      	mov	ip, r0
 8011178:	f8aa 0002 	strh.w	r0, [sl, #2]
 801117c:	f8aa 300a 	strh.w	r3, [sl, #10]
 8011180:	9004      	str	r0, [sp, #16]
 8011182:	f8b9 41ac 	ldrh.w	r4, [r9, #428]	@ 0x1ac
 8011186:	2c01      	cmp	r4, #1
 8011188:	d104      	bne.n	8011194 <acc_translation_a121_translate+0x118>
 801118a:	9c04      	ldr	r4, [sp, #16]
 801118c:	9d07      	ldr	r5, [sp, #28]
 801118e:	fb05 f404 	mul.w	r4, r5, r4
 8011192:	9404      	str	r4, [sp, #16]
 8011194:	f898 5052 	ldrb.w	r5, [r8, #82]	@ 0x52
 8011198:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 801119c:	f8b8 4054 	ldrh.w	r4, [r8, #84]	@ 0x54
 80111a0:	9503      	str	r5, [sp, #12]
 80111a2:	9d04      	ldr	r5, [sp, #16]
 80111a4:	0867      	lsrs	r7, r4, #1
 80111a6:	f898 6053 	ldrb.w	r6, [r8, #83]	@ 0x53
 80111aa:	3c03      	subs	r4, #3
 80111ac:	4575      	cmp	r5, lr
 80111ae:	f1a7 0703 	sub.w	r7, r7, #3
 80111b2:	f086 0601 	eor.w	r6, r6, #1
 80111b6:	bf28      	it	cs
 80111b8:	4675      	movcs	r5, lr
 80111ba:	46ae      	mov	lr, r5
 80111bc:	f898 5056 	ldrb.w	r5, [r8, #86]	@ 0x56
 80111c0:	f8a9 41a8 	strh.w	r4, [r9, #424]	@ 0x1a8
 80111c4:	9c03      	ldr	r4, [sp, #12]
 80111c6:	f8a9 71aa 	strh.w	r7, [r9, #426]	@ 0x1aa
 80111ca:	f8a9 61a6 	strh.w	r6, [r9, #422]	@ 0x1a6
 80111ce:	f8a9 419e 	strh.w	r4, [r9, #414]	@ 0x19e
 80111d2:	f8a9 c1a0 	strh.w	ip, [r9, #416]	@ 0x1a0
 80111d6:	f8a9 e1a4 	strh.w	lr, [r9, #420]	@ 0x1a4
 80111da:	f8aa 200c 	strh.w	r2, [sl, #12]
 80111de:	f8aa 3004 	strh.w	r3, [sl, #4]
 80111e2:	f8aa 1006 	strh.w	r1, [sl, #6]
 80111e6:	2d00      	cmp	r5, #0
 80111e8:	f000 80ef 	beq.w	80113ca <acc_translation_a121_translate+0x34e>
 80111ec:	3341      	adds	r3, #65	@ 0x41
 80111ee:	2240      	movs	r2, #64	@ 0x40
 80111f0:	2501      	movs	r5, #1
 80111f2:	f8aa 3000 	strh.w	r3, [sl]
 80111f6:	f8aa 2008 	strh.w	r2, [sl, #8]
 80111fa:	f8a9 51c0 	strh.w	r5, [r9, #448]	@ 0x1c0
 80111fe:	f1bb 0f00 	cmp.w	fp, #0
 8011202:	d003      	beq.n	801120c <acc_translation_a121_translate+0x190>
 8011204:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8011208:	f8a9 31c2 	strh.w	r3, [r9, #450]	@ 0x1c2
 801120c:	2800      	cmp	r0, #0
 801120e:	f040 80fb 	bne.w	8011408 <acc_translation_a121_translate+0x38c>
 8011212:	edd8 4a10 	vldr	s9, [r8, #64]	@ 0x40
 8011216:	2300      	movs	r3, #0
 8011218:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801121a:	4602      	mov	r2, r0
 801121c:	eef5 4a40 	vcmp.f32	s9, #0.0
 8011220:	600b      	str	r3, [r1, #0]
 8011222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011226:	bf14      	ite	ne
 8011228:	2101      	movne	r1, #1
 801122a:	2100      	moveq	r1, #0
 801122c:	9b08      	ldr	r3, [sp, #32]
 801122e:	f8a9 31b2 	strh.w	r3, [r9, #434]	@ 0x1b2
 8011232:	9b07      	ldr	r3, [sp, #28]
 8011234:	2b01      	cmp	r3, #1
 8011236:	f240 80cd 	bls.w	80113d4 <acc_translation_a121_translate+0x358>
 801123a:	f8b8 3048 	ldrh.w	r3, [r8, #72]	@ 0x48
 801123e:	2401      	movs	r4, #1
 8011240:	3b02      	subs	r3, #2
 8011242:	f8a9 41b0 	strh.w	r4, [r9, #432]	@ 0x1b0
 8011246:	f8a9 31ae 	strh.w	r3, [r9, #430]	@ 0x1ae
 801124a:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801124e:	eddf 5a6c 	vldr	s11, [pc, #432]	@ 8011400 <acc_translation_a121_translate+0x384>
 8011252:	ed9f 5a68 	vldr	s10, [pc, #416]	@ 80113f4 <acc_translation_a121_translate+0x378>
 8011256:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801125a:	eec8 6a25 	vdiv.f32	s13, s16, s11
 801125e:	f8a9 1038 	strh.w	r1, [r9, #56]	@ 0x38
 8011262:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011266:	ee28 5a05 	vmul.f32	s10, s16, s10
 801126a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 801126e:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8011272:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011276:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801127a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801127e:	ee16 3a90 	vmov	r3, s13
 8011282:	f8a9 31b4 	strh.w	r3, [r9, #436]	@ 0x1b4
 8011286:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801128a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801128e:	ee17 3a10 	vmov	r3, s14
 8011292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011296:	f8a9 31b6 	strh.w	r3, [r9, #438]	@ 0x1b6
 801129a:	ee17 3a90 	vmov	r3, s15
 801129e:	f8a9 31b8 	strh.w	r3, [r9, #440]	@ 0x1b8
 80112a2:	2a00      	cmp	r2, #0
 80112a4:	f040 80f4 	bne.w	8011490 <acc_translation_a121_translate+0x414>
 80112a8:	edd8 7a11 	vldr	s15, [r8, #68]	@ 0x44
 80112ac:	f898 304b 	ldrb.w	r3, [r8, #75]	@ 0x4b
 80112b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112b4:	f898 204a 	ldrb.w	r2, [r8, #74]	@ 0x4a
 80112b8:	f8a9 3032 	strh.w	r3, [r9, #50]	@ 0x32
 80112bc:	f8a9 2030 	strh.w	r2, [r9, #48]	@ 0x30
 80112c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c4:	bf14      	ite	ne
 80112c6:	2301      	movne	r3, #1
 80112c8:	2300      	moveq	r3, #0
 80112ca:	f8a9 302a 	strh.w	r3, [r9, #42]	@ 0x2a
 80112ce:	b14b      	cbz	r3, 80112e4 <acc_translation_a121_translate+0x268>
 80112d0:	b140      	cbz	r0, 80112e4 <acc_translation_a121_translate+0x268>
 80112d2:	eefc 7aca 	vcvt.u32.f32	s15, s20
 80112d6:	ee17 3a90 	vmov	r3, s15
 80112da:	0c1a      	lsrs	r2, r3, #16
 80112dc:	f8a9 302e 	strh.w	r3, [r9, #46]	@ 0x2e
 80112e0:	f8a9 202c 	strh.w	r2, [r9, #44]	@ 0x2c
 80112e4:	f898 4051 	ldrb.w	r4, [r8, #81]	@ 0x51
 80112e8:	2101      	movs	r1, #1
 80112ea:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80112ee:	f640 0301 	movw	r3, #2049	@ 0x801
 80112f2:	f8a9 41be 	strh.w	r4, [r9, #446]	@ 0x1be
 80112f6:	f8a9 1024 	strh.w	r1, [r9, #36]	@ 0x24
 80112fa:	f8a9 21ba 	strh.w	r2, [r9, #442]	@ 0x1ba
 80112fe:	f8a9 31bc 	strh.w	r3, [r9, #444]	@ 0x1bc
 8011302:	b011      	add	sp, #68	@ 0x44
 8011304:	ecbd 8b06 	vpop	{d8-d10}
 8011308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130c:	9b07      	ldr	r3, [sp, #28]
 801130e:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8011404 <acc_translation_a121_translate+0x388>
 8011312:	2b00      	cmp	r3, #0
 8011314:	f43f aefc 	beq.w	8011110 <acc_translation_a121_translate+0x94>
 8011318:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 801131c:	9305      	str	r3, [sp, #20]
 801131e:	f898 304a 	ldrb.w	r3, [r8, #74]	@ 0x4a
 8011322:	2b00      	cmp	r3, #0
 8011324:	f43f aefa 	beq.w	801111c <acc_translation_a121_translate+0xa0>
 8011328:	2300      	movs	r3, #0
 801132a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801132c:	7113      	strb	r3, [r2, #4]
 801132e:	f8a9 31ac 	strh.w	r3, [r9, #428]	@ 0x1ac
 8011332:	e714      	b.n	801115e <acc_translation_a121_translate+0xe2>
 8011334:	4b2a      	ldr	r3, [pc, #168]	@ (80113e0 <acc_translation_a121_translate+0x364>)
 8011336:	2000      	movs	r0, #0
 8011338:	4a2f      	ldr	r2, [pc, #188]	@ (80113f8 <acc_translation_a121_translate+0x37c>)
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	492a      	ldr	r1, [pc, #168]	@ (80113e8 <acc_translation_a121_translate+0x36c>)
 801133e:	4798      	blx	r3
 8011340:	e6ce      	b.n	80110e0 <acc_translation_a121_translate+0x64>
 8011342:	f7fd ff99 	bl	800f278 <acc_rss_integration_get_sensor_reference_frequency>
 8011346:	edd8 7a11 	vldr	s15, [r8, #68]	@ 0x44
 801134a:	ee07 0a10 	vmov	s14, r0
 801134e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011352:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 8011356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135a:	dd16      	ble.n	801138a <acc_translation_a121_translate+0x30e>
 801135c:	ee88 aa27 	vdiv.f32	s20, s16, s15
 8011360:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011364:	ee3a aa27 	vadd.f32	s20, s20, s15
 8011368:	f100 80ad 	bmi.w	80114c6 <acc_translation_a121_translate+0x44a>
 801136c:	ee1a 0a10 	vmov	r0, s20
 8011370:	f7ef fb22 	bl	80009b8 <__aeabi_f2ulz>
 8011374:	2901      	cmp	r1, #1
 8011376:	bf08      	it	eq
 8011378:	2800      	cmpeq	r0, #0
 801137a:	f080 80a4 	bcs.w	80114c6 <acc_translation_a121_translate+0x44a>
 801137e:	f898 204a 	ldrb.w	r2, [r8, #74]	@ 0x4a
 8011382:	2a00      	cmp	r2, #0
 8011384:	f040 80b5 	bne.w	80114f2 <acc_translation_a121_translate+0x476>
 8011388:	e008      	b.n	801139c <acc_translation_a121_translate+0x320>
 801138a:	f100 809a 	bmi.w	80114c2 <acc_translation_a121_translate+0x446>
 801138e:	f898 204a 	ldrb.w	r2, [r8, #74]	@ 0x4a
 8011392:	2a00      	cmp	r2, #0
 8011394:	f040 809e 	bne.w	80114d4 <acc_translation_a121_translate+0x458>
 8011398:	ed9f aa1a 	vldr	s20, [pc, #104]	@ 8011404 <acc_translation_a121_translate+0x388>
 801139c:	f898 104f 	ldrb.w	r1, [r8, #79]	@ 0x4f
 80113a0:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 80113a4:	9807      	ldr	r0, [sp, #28]
 80113a6:	2800      	cmp	r0, #0
 80113a8:	f040 81c7 	bne.w	801173a <acc_translation_a121_translate+0x6be>
 80113ac:	9005      	str	r0, [sp, #20]
 80113ae:	4299      	cmp	r1, r3
 80113b0:	f200 81b4 	bhi.w	801171c <acc_translation_a121_translate+0x6a0>
 80113b4:	2a00      	cmp	r2, #0
 80113b6:	f040 81ba 	bne.w	801172e <acc_translation_a121_translate+0x6b2>
 80113ba:	2b02      	cmp	r3, #2
 80113bc:	f000 81b5 	beq.w	801172a <acc_translation_a121_translate+0x6ae>
 80113c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80113c2:	711a      	strb	r2, [r3, #4]
 80113c4:	f8a9 21ac 	strh.w	r2, [r9, #428]	@ 0x1ac
 80113c8:	e6b8      	b.n	801113c <acc_translation_a121_translate+0xc0>
 80113ca:	f8aa 5008 	strh.w	r5, [sl, #8]
 80113ce:	f8aa 1000 	strh.w	r1, [sl]
 80113d2:	e712      	b.n	80111fa <acc_translation_a121_translate+0x17e>
 80113d4:	2300      	movs	r3, #0
 80113d6:	f8a9 31ae 	strh.w	r3, [r9, #430]	@ 0x1ae
 80113da:	f8a9 31b0 	strh.w	r3, [r9, #432]	@ 0x1b0
 80113de:	e734      	b.n	801124a <acc_translation_a121_translate+0x1ce>
 80113e0:	24003210 	.word	0x24003210
 80113e4:	0801c6ec 	.word	0x0801c6ec
 80113e8:	0801c4e4 	.word	0x0801c4e4
 80113ec:	0801c6bc 	.word	0x0801c6bc
 80113f0:	0801c7a8 	.word	0x0801c7a8
 80113f4:	43960000 	.word	0x43960000
 80113f8:	0801c6d8 	.word	0x0801c6d8
 80113fc:	3c23d70a 	.word	0x3c23d70a
 8011400:	49742400 	.word	0x49742400
 8011404:	00000000 	.word	0x00000000
 8011408:	2400      	movs	r4, #0
 801140a:	f898 304d 	ldrb.w	r3, [r8, #77]	@ 0x4d
 801140e:	f509 71d1 	add.w	r1, r9, #418	@ 0x1a2
 8011412:	a80b      	add	r0, sp, #44	@ 0x2c
 8011414:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
 8011418:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
 801141c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 8011420:	f000 facc 	bl	80119bc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 8011424:	2300      	movs	r3, #0
 8011426:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011428:	6013      	str	r3, [r2, #0]
 801142a:	9b05      	ldr	r3, [sp, #20]
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 8188 	beq.w	8011742 <acc_translation_a121_translate+0x6c6>
 8011432:	2800      	cmp	r0, #0
 8011434:	f000 8185 	beq.w	8011742 <acc_translation_a121_translate+0x6c6>
 8011438:	aa0b      	add	r2, sp, #44	@ 0x2c
 801143a:	4649      	mov	r1, r9
 801143c:	4640      	mov	r0, r8
 801143e:	f7ff fd31 	bl	8010ea4 <acc_translation_a121_calculate_minimum_sweep_period>
 8011442:	b398      	cbz	r0, 80114ac <acc_translation_a121_translate+0x430>
 8011444:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8011448:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801144c:	ed5f 7a15 	vldr	s15, [pc, #-84]	@ 80113fc <acc_translation_a121_translate+0x380>
 8011450:	ed5f 6a15 	vldr	s13, [pc, #-84]	@ 8011400 <acc_translation_a121_translate+0x384>
 8011454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011458:	edd8 4a10 	vldr	s9, [r8, #64]	@ 0x40
 801145c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801145e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801146a:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 801146e:	eef4 4ac7 	vcmpe.f32	s9, s14
 8011472:	ed83 7a00 	vstr	s14, [r3]
 8011476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801147a:	f300 8123 	bgt.w	80116c4 <acc_translation_a121_translate+0x648>
 801147e:	eef5 4a40 	vcmp.f32	s9, #0.0
 8011482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011486:	bf14      	ite	ne
 8011488:	2201      	movne	r2, #1
 801148a:	2200      	moveq	r2, #0
 801148c:	4611      	mov	r1, r2
 801148e:	e6cd      	b.n	801122c <acc_translation_a121_translate+0x1b0>
 8011490:	eec8 7a24 	vdiv.f32	s15, s16, s9
 8011494:	ee37 6a86 	vadd.f32	s12, s15, s12
 8011498:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 801149c:	ee17 3a90 	vmov	r3, s15
 80114a0:	0c1a      	lsrs	r2, r3, #16
 80114a2:	f8a9 303c 	strh.w	r3, [r9, #60]	@ 0x3c
 80114a6:	f8a9 203a 	strh.w	r2, [r9, #58]	@ 0x3a
 80114aa:	e6fd      	b.n	80112a8 <acc_translation_a121_translate+0x22c>
 80114ac:	edd8 4a10 	vldr	s9, [r8, #64]	@ 0x40
 80114b0:	4602      	mov	r2, r0
 80114b2:	eef5 4a40 	vcmp.f32	s9, #0.0
 80114b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ba:	bf14      	ite	ne
 80114bc:	2101      	movne	r1, #1
 80114be:	2100      	moveq	r1, #0
 80114c0:	e6b4      	b.n	801122c <acc_translation_a121_translate+0x1b0>
 80114c2:	ed1f aa30 	vldr	s20, [pc, #-192]	@ 8011404 <acc_translation_a121_translate+0x388>
 80114c6:	4bae      	ldr	r3, [pc, #696]	@ (8011780 <acc_translation_a121_translate+0x704>)
 80114c8:	2000      	movs	r0, #0
 80114ca:	4aae      	ldr	r2, [pc, #696]	@ (8011784 <acc_translation_a121_translate+0x708>)
 80114cc:	691b      	ldr	r3, [r3, #16]
 80114ce:	49ae      	ldr	r1, [pc, #696]	@ (8011788 <acc_translation_a121_translate+0x70c>)
 80114d0:	4798      	blx	r3
 80114d2:	e619      	b.n	8011108 <acc_translation_a121_translate+0x8c>
 80114d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80114d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114dc:	d107      	bne.n	80114ee <acc_translation_a121_translate+0x472>
 80114de:	edd8 7a10 	vldr	s15, [r8, #64]	@ 0x40
 80114e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80114e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ea:	f040 810d 	bne.w	8011708 <acc_translation_a121_translate+0x68c>
 80114ee:	ed9f aaa7 	vldr	s20, [pc, #668]	@ 801178c <acc_translation_a121_translate+0x710>
 80114f2:	4ba3      	ldr	r3, [pc, #652]	@ (8011780 <acc_translation_a121_translate+0x704>)
 80114f4:	2000      	movs	r0, #0
 80114f6:	4aa6      	ldr	r2, [pc, #664]	@ (8011790 <acc_translation_a121_translate+0x714>)
 80114f8:	691b      	ldr	r3, [r3, #16]
 80114fa:	49a3      	ldr	r1, [pc, #652]	@ (8011788 <acc_translation_a121_translate+0x70c>)
 80114fc:	4798      	blx	r3
 80114fe:	e603      	b.n	8011108 <acc_translation_a121_translate+0x8c>
 8011500:	f898 100f 	ldrb.w	r1, [r8, #15]
 8011504:	3901      	subs	r1, #1
 8011506:	2901      	cmp	r1, #1
 8011508:	f67f ae12 	bls.w	8011130 <acc_translation_a121_translate+0xb4>
 801150c:	e611      	b.n	8011132 <acc_translation_a121_translate+0xb6>
 801150e:	2301      	movs	r3, #1
 8011510:	f8a9 3026 	strh.w	r3, [r9, #38]	@ 0x26
 8011514:	f8a9 3028 	strh.w	r3, [r9, #40]	@ 0x28
 8011518:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 801151c:	2b01      	cmp	r3, #1
 801151e:	d015      	beq.n	801154c <acc_translation_a121_translate+0x4d0>
 8011520:	2b02      	cmp	r3, #2
 8011522:	f000 80c9 	beq.w	80116b8 <acc_translation_a121_translate+0x63c>
 8011526:	2b00      	cmp	r3, #0
 8011528:	f000 809a 	beq.w	8011660 <acc_translation_a121_translate+0x5e4>
 801152c:	4b94      	ldr	r3, [pc, #592]	@ (8011780 <acc_translation_a121_translate+0x704>)
 801152e:	2000      	movs	r0, #0
 8011530:	4a98      	ldr	r2, [pc, #608]	@ (8011794 <acc_translation_a121_translate+0x718>)
 8011532:	691b      	ldr	r3, [r3, #16]
 8011534:	4994      	ldr	r1, [pc, #592]	@ (8011788 <acc_translation_a121_translate+0x70c>)
 8011536:	4798      	blx	r3
 8011538:	e611      	b.n	801115e <acc_translation_a121_translate+0xe2>
 801153a:	2300      	movs	r3, #0
 801153c:	f8a9 3026 	strh.w	r3, [r9, #38]	@ 0x26
 8011540:	f8a9 3028 	strh.w	r3, [r9, #40]	@ 0x28
 8011544:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 8011548:	2b01      	cmp	r3, #1
 801154a:	d1e9      	bne.n	8011520 <acc_translation_a121_translate+0x4a4>
 801154c:	2200      	movs	r2, #0
 801154e:	f8a9 3034 	strh.w	r3, [r9, #52]	@ 0x34
 8011552:	f8a9 2036 	strh.w	r2, [r9, #54]	@ 0x36
 8011556:	f1bb 0f00 	cmp.w	fp, #0
 801155a:	f040 8104 	bne.w	8011766 <acc_translation_a121_translate+0x6ea>
 801155e:	2301      	movs	r3, #1
 8011560:	f8aa b002 	strh.w	fp, [sl, #2]
 8011564:	f8aa b00c 	strh.w	fp, [sl, #12]
 8011568:	f8aa 300a 	strh.w	r3, [sl, #10]
 801156c:	2400      	movs	r4, #0
 801156e:	f109 0746 	add.w	r7, r9, #70	@ 0x46
 8011572:	f109 033e 	add.w	r3, r9, #62	@ 0x3e
 8011576:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801157a:	f10a 060e 	add.w	r6, sl, #14
 801157e:	4645      	mov	r5, r8
 8011580:	eddf 9a85 	vldr	s19, [pc, #532]	@ 8011798 <acc_translation_a121_translate+0x71c>
 8011584:	4699      	mov	r9, r3
 8011586:	eddf aa85 	vldr	s21, [pc, #532]	@ 801179c <acc_translation_a121_translate+0x720>
 801158a:	ed9f 9a80 	vldr	s18, [pc, #512]	@ 801178c <acc_translation_a121_translate+0x710>
 801158e:	eddf 8a84 	vldr	s17, [pc, #528]	@ 80117a0 <acc_translation_a121_translate+0x724>
 8011592:	9406      	str	r4, [sp, #24]
 8011594:	9404      	str	r4, [sp, #16]
 8011596:	9703      	str	r7, [sp, #12]
 8011598:	e00d      	b.n	80115b6 <acc_translation_a121_translate+0x53a>
 801159a:	f8a6 c000 	strh.w	ip, [r6]
 801159e:	f8a6 c008 	strh.w	ip, [r6, #8]
 80115a2:	f829 c014 	strh.w	ip, [r9, r4, lsl #1]
 80115a6:	9b03      	ldr	r3, [sp, #12]
 80115a8:	3401      	adds	r4, #1
 80115aa:	3602      	adds	r6, #2
 80115ac:	3510      	adds	r5, #16
 80115ae:	3356      	adds	r3, #86	@ 0x56
 80115b0:	2c04      	cmp	r4, #4
 80115b2:	9303      	str	r3, [sp, #12]
 80115b4:	d05d      	beq.n	8011672 <acc_translation_a121_translate+0x5f6>
 80115b6:	fa5f fc84 	uxtb.w	ip, r4
 80115ba:	9f05      	ldr	r7, [sp, #20]
 80115bc:	9b03      	ldr	r3, [sp, #12]
 80115be:	4629      	mov	r1, r5
 80115c0:	4567      	cmp	r7, ip
 80115c2:	465a      	mov	r2, fp
 80115c4:	4640      	mov	r0, r8
 80115c6:	f04f 0c00 	mov.w	ip, #0
 80115ca:	d9e6      	bls.n	801159a <acc_translation_a121_translate+0x51e>
 80115cc:	f04f 0701 	mov.w	r7, #1
 80115d0:	f829 7014 	strh.w	r7, [r9, r4, lsl #1]
 80115d4:	af0b      	add	r7, sp, #44	@ 0x2c
 80115d6:	9700      	str	r7, [sp, #0]
 80115d8:	f7ff fb72 	bl	8010cc0 <acc_translation_a121_subsweep_translate>
 80115dc:	2800      	cmp	r0, #0
 80115de:	d05a      	beq.n	8011696 <acc_translation_a121_translate+0x61a>
 80115e0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80115e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80115e8:	8033      	strh	r3, [r6, #0]
 80115ea:	8132      	strh	r2, [r6, #8]
 80115ec:	4413      	add	r3, r2
 80115ee:	7bea      	ldrb	r2, [r5, #15]
 80115f0:	f8aa 300c 	strh.w	r3, [sl, #12]
 80115f4:	2a01      	cmp	r2, #1
 80115f6:	9b03      	ldr	r3, [sp, #12]
 80115f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115fa:	d037      	beq.n	801166c <acc_translation_a121_translate+0x5f0>
 80115fc:	2a02      	cmp	r2, #2
 80115fe:	fe48 5a89 	vseleq.f32	s11, s17, s18
 8011602:	3301      	adds	r3, #1
 8011604:	88aa      	ldrh	r2, [r5, #4]
 8011606:	eeb1 5a00 	vmov.f32	s10, #16	@ 0x40800000  4.0
 801160a:	b29b      	uxth	r3, r3
 801160c:	ee06 2a10 	vmov	s12, r2
 8011610:	892a      	ldrh	r2, [r5, #8]
 8011612:	ee07 3a90 	vmov	s15, r3
 8011616:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801161a:	ee06 2a90 	vmov	s13, r2
 801161e:	9b04      	ldr	r3, [sp, #16]
 8011620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011624:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8011628:	ee67 7a05 	vmul.f32	s15, s14, s10
 801162c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011630:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011634:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011638:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011640:	ee17 2a90 	vmov	r2, s15
 8011644:	4413      	add	r3, r2
 8011646:	9304      	str	r3, [sp, #16]
 8011648:	9b06      	ldr	r3, [sp, #24]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d1ab      	bne.n	80115a6 <acc_translation_a121_translate+0x52a>
 801164e:	7aeb      	ldrb	r3, [r5, #11]
 8011650:	9306      	str	r3, [sp, #24]
 8011652:	e7a8      	b.n	80115a6 <acc_translation_a121_translate+0x52a>
 8011654:	2200      	movs	r2, #0
 8011656:	f8a9 3026 	strh.w	r3, [r9, #38]	@ 0x26
 801165a:	f8a9 2028 	strh.w	r2, [r9, #40]	@ 0x28
 801165e:	e75b      	b.n	8011518 <acc_translation_a121_translate+0x49c>
 8011660:	2301      	movs	r3, #1
 8011662:	f8a9 3034 	strh.w	r3, [r9, #52]	@ 0x34
 8011666:	f8a9 3036 	strh.w	r3, [r9, #54]	@ 0x36
 801166a:	e774      	b.n	8011556 <acc_translation_a121_translate+0x4da>
 801166c:	eef0 5a6a 	vmov.f32	s11, s21
 8011670:	e7c7      	b.n	8011602 <acc_translation_a121_translate+0x586>
 8011672:	9907      	ldr	r1, [sp, #28]
 8011674:	2001      	movs	r0, #1
 8011676:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 801167a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801167e:	fb12 f201 	smulbb	r2, r2, r1
 8011682:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8011686:	f8bd c018 	ldrh.w	ip, [sp, #24]
 801168a:	b292      	uxth	r2, r2
 801168c:	4413      	add	r3, r2
 801168e:	b29b      	uxth	r3, r3
 8011690:	1819      	adds	r1, r3, r0
 8011692:	b289      	uxth	r1, r1
 8011694:	e575      	b.n	8011182 <acc_translation_a121_translate+0x106>
 8011696:	9907      	ldr	r1, [sp, #28]
 8011698:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 801169c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80116a0:	fb12 f201 	smulbb	r2, r2, r1
 80116a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80116a8:	f8bd c018 	ldrh.w	ip, [sp, #24]
 80116ac:	b292      	uxth	r2, r2
 80116ae:	4413      	add	r3, r2
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	1c59      	adds	r1, r3, #1
 80116b4:	b289      	uxth	r1, r1
 80116b6:	e564      	b.n	8011182 <acc_translation_a121_translate+0x106>
 80116b8:	2300      	movs	r3, #0
 80116ba:	f8a9 3034 	strh.w	r3, [r9, #52]	@ 0x34
 80116be:	f8a9 3036 	strh.w	r3, [r9, #54]	@ 0x36
 80116c2:	e748      	b.n	8011556 <acc_translation_a121_translate+0x4da>
 80116c4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80116c8:	492d      	ldr	r1, [pc, #180]	@ (8011780 <acc_translation_a121_translate+0x704>)
 80116ca:	4a36      	ldr	r2, [pc, #216]	@ (80117a4 <acc_translation_a121_translate+0x728>)
 80116cc:	4620      	mov	r0, r4
 80116ce:	690d      	ldr	r5, [r1, #16]
 80116d0:	ee17 3a90 	vmov	r3, s15
 80116d4:	492c      	ldr	r1, [pc, #176]	@ (8011788 <acc_translation_a121_translate+0x70c>)
 80116d6:	47a8      	blx	r5
 80116d8:	edd8 4a10 	vldr	s9, [r8, #64]	@ 0x40
 80116dc:	4620      	mov	r0, r4
 80116de:	4622      	mov	r2, r4
 80116e0:	eef5 4a40 	vcmp.f32	s9, #0.0
 80116e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e8:	bf14      	ite	ne
 80116ea:	2101      	movne	r1, #1
 80116ec:	2100      	moveq	r1, #0
 80116ee:	e59d      	b.n	801122c <acc_translation_a121_translate+0x1b0>
 80116f0:	2301      	movs	r3, #1
 80116f2:	2102      	movs	r1, #2
 80116f4:	465a      	mov	r2, fp
 80116f6:	46dc      	mov	ip, fp
 80116f8:	4658      	mov	r0, fp
 80116fa:	f8aa b002 	strh.w	fp, [sl, #2]
 80116fe:	f8aa 300a 	strh.w	r3, [sl, #10]
 8011702:	f8cd b010 	str.w	fp, [sp, #16]
 8011706:	e53c      	b.n	8011182 <acc_translation_a121_translate+0x106>
 8011708:	f898 104f 	ldrb.w	r1, [r8, #79]	@ 0x4f
 801170c:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 8011710:	ed9f aa1e 	vldr	s20, [pc, #120]	@ 801178c <acc_translation_a121_translate+0x710>
 8011714:	4299      	cmp	r1, r3
 8011716:	f47f aeec 	bne.w	80114f2 <acc_translation_a121_translate+0x476>
 801171a:	e643      	b.n	80113a4 <acc_translation_a121_translate+0x328>
 801171c:	4b18      	ldr	r3, [pc, #96]	@ (8011780 <acc_translation_a121_translate+0x704>)
 801171e:	2000      	movs	r0, #0
 8011720:	4a21      	ldr	r2, [pc, #132]	@ (80117a8 <acc_translation_a121_translate+0x72c>)
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	4918      	ldr	r1, [pc, #96]	@ (8011788 <acc_translation_a121_translate+0x70c>)
 8011726:	4798      	blx	r3
 8011728:	e4f3      	b.n	8011112 <acc_translation_a121_translate+0x96>
 801172a:	2301      	movs	r3, #1
 801172c:	e4fb      	b.n	8011126 <acc_translation_a121_translate+0xaa>
 801172e:	2300      	movs	r3, #0
 8011730:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011732:	7113      	strb	r3, [r2, #4]
 8011734:	f8a9 31ac 	strh.w	r3, [r9, #428]	@ 0x1ac
 8011738:	e500      	b.n	801113c <acc_translation_a121_translate+0xc0>
 801173a:	f898 004e 	ldrb.w	r0, [r8, #78]	@ 0x4e
 801173e:	9005      	str	r0, [sp, #20]
 8011740:	e635      	b.n	80113ae <acc_translation_a121_translate+0x332>
 8011742:	edd8 4a10 	vldr	s9, [r8, #64]	@ 0x40
 8011746:	f000 0201 	and.w	r2, r0, #1
 801174a:	eef5 4a40 	vcmp.f32	s9, #0.0
 801174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011752:	bf12      	itee	ne
 8011754:	2101      	movne	r1, #1
 8011756:	2100      	moveq	r1, #0
 8011758:	2200      	moveq	r2, #0
 801175a:	e567      	b.n	801122c <acc_translation_a121_translate+0x1b0>
 801175c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801175e:	7113      	strb	r3, [r2, #4]
 8011760:	f8a9 31ac 	strh.w	r3, [r9, #428]	@ 0x1ac
 8011764:	e4fb      	b.n	801115e <acc_translation_a121_translate+0xe2>
 8011766:	4649      	mov	r1, r9
 8011768:	4658      	mov	r0, fp
 801176a:	f7fe ffcd 	bl	8010708 <acc_translation_a121_set_calibration_params>
 801176e:	2300      	movs	r3, #0
 8011770:	2201      	movs	r2, #1
 8011772:	f8aa 3002 	strh.w	r3, [sl, #2]
 8011776:	f8aa 300c 	strh.w	r3, [sl, #12]
 801177a:	f8aa 200a 	strh.w	r2, [sl, #10]
 801177e:	e6f5      	b.n	801156c <acc_translation_a121_translate+0x4f0>
 8011780:	24003210 	.word	0x24003210
 8011784:	0801c718 	.word	0x0801c718
 8011788:	0801c4e4 	.word	0x0801c4e4
 801178c:	00000000 	.word	0x00000000
 8011790:	0801c72c 	.word	0x0801c72c
 8011794:	0801c69c 	.word	0x0801c69c
 8011798:	3e124925 	.word	0x3e124925
 801179c:	3e4ccccd 	.word	0x3e4ccccd
 80117a0:	3d75c28f 	.word	0x3d75c28f
 80117a4:	0801c7c8 	.word	0x0801c7c8
 80117a8:	0801c758 	.word	0x0801c758

080117ac <acc_translation_pulseshaper_calc_settings>:
 80117ac:	2300      	movs	r3, #0
 80117ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117b2:	7804      	ldrb	r4, [r0, #0]
 80117b4:	8093      	strh	r3, [r2, #4]
 80117b6:	b37c      	cbz	r4, 8011818 <acc_translation_pulseshaper_calc_settings+0x6c>
 80117b8:	6846      	ldr	r6, [r0, #4]
 80117ba:	2501      	movs	r5, #1
 80117bc:	4637      	mov	r7, r6
 80117be:	8215      	strh	r5, [r2, #16]
 80117c0:	b3b6      	cbz	r6, 8011830 <acc_translation_pulseshaper_calc_settings+0x84>
 80117c2:	461c      	mov	r4, r3
 80117c4:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80117c8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80117cc:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 80117d0:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 80117d4:	4453      	add	r3, sl
 80117d6:	fa1f fc84 	uxth.w	ip, r4
 80117da:	3401      	adds	r4, #1
 80117dc:	eba5 0508 	sub.w	r5, r5, r8
 80117e0:	4575      	cmp	r5, lr
 80117e2:	da02      	bge.n	80117ea <acc_translation_pulseshaper_calc_settings+0x3e>
 80117e4:	2c0f      	cmp	r4, #15
 80117e6:	d1f3      	bne.n	80117d0 <acc_translation_pulseshaper_calc_settings+0x24>
 80117e8:	46a4      	mov	ip, r4
 80117ea:	f8d1 e020 	ldr.w	lr, [r1, #32]
 80117ee:	2505      	movs	r5, #5
 80117f0:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80117f4:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80117f8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80117fc:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 8011800:	f105 0c01 	add.w	ip, r5, #1
 8011804:	4473      	add	r3, lr
 8011806:	1ba4      	subs	r4, r4, r6
 8011808:	d562      	bpl.n	80118d0 <acc_translation_pulseshaper_calc_settings+0x124>
 801180a:	fa1f f58c 	uxth.w	r5, ip
 801180e:	2d14      	cmp	r5, #20
 8011810:	d1f4      	bne.n	80117fc <acc_translation_pulseshaper_calc_settings+0x50>
 8011812:	2000      	movs	r0, #0
 8011814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011818:	4620      	mov	r0, r4
 801181a:	8214      	strh	r4, [r2, #16]
 801181c:	80d4      	strh	r4, [r2, #6]
 801181e:	8054      	strh	r4, [r2, #2]
 8011820:	8114      	strh	r4, [r2, #8]
 8011822:	81d4      	strh	r4, [r2, #14]
 8011824:	8154      	strh	r4, [r2, #10]
 8011826:	8194      	strh	r4, [r2, #12]
 8011828:	8250      	strh	r0, [r2, #18]
 801182a:	2001      	movs	r0, #1
 801182c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011830:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8011834:	80d6      	strh	r6, [r2, #6]
 8011836:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 801183a:	8056      	strh	r6, [r2, #2]
 801183c:	d341      	bcc.n	80118c2 <acc_translation_pulseshaper_calc_settings+0x116>
 801183e:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8011842:	ebac 040e 	sub.w	r4, ip, lr
 8011846:	f5b4 7fc8 	cmp.w	r4, #400	@ 0x190
 801184a:	f340 80b2 	ble.w	80119b2 <acc_translation_pulseshaper_calc_settings+0x206>
 801184e:	2000      	movs	r0, #0
 8011850:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8011854:	4603      	mov	r3, r0
 8011856:	3001      	adds	r0, #1
 8011858:	3302      	adds	r3, #2
 801185a:	fb05 f303 	mul.w	r3, r5, r3
 801185e:	42a3      	cmp	r3, r4
 8011860:	dbf8      	blt.n	8011854 <acc_translation_pulseshaper_calc_settings+0xa8>
 8011862:	2e00      	cmp	r6, #0
 8011864:	f04f 0401 	mov.w	r4, #1
 8011868:	bf0c      	ite	eq
 801186a:	2300      	moveq	r3, #0
 801186c:	4623      	movne	r3, r4
 801186e:	81d4      	strh	r4, [r2, #14]
 8011870:	8113      	strh	r3, [r2, #8]
 8011872:	d14f      	bne.n	8011914 <acc_translation_pulseshaper_calc_settings+0x168>
 8011874:	8156      	strh	r6, [r2, #10]
 8011876:	b338      	cbz	r0, 80118c8 <acc_translation_pulseshaper_calc_settings+0x11c>
 8011878:	fb05 c310 	mls	r3, r5, r0, ip
 801187c:	2400      	movs	r4, #0
 801187e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8011882:	4621      	mov	r1, r4
 8011884:	e001      	b.n	801188a <acc_translation_pulseshaper_calc_settings+0xde>
 8011886:	2916      	cmp	r1, #22
 8011888:	d0c3      	beq.n	8011812 <acc_translation_pulseshaper_calc_settings+0x66>
 801188a:	eb0c 4514 	add.w	r5, ip, r4, lsr #16
 801188e:	4474      	add	r4, lr
 8011890:	b28e      	uxth	r6, r1
 8011892:	3101      	adds	r1, #1
 8011894:	1aed      	subs	r5, r5, r3
 8011896:	d4f6      	bmi.n	8011886 <acc_translation_pulseshaper_calc_settings+0xda>
 8011898:	b15e      	cbz	r6, 80118b2 <acc_translation_pulseshaper_calc_settings+0x106>
 801189a:	b957      	cbnz	r7, 80118b2 <acc_translation_pulseshaper_calc_settings+0x106>
 801189c:	1e71      	subs	r1, r6, #1
 801189e:	b289      	uxth	r1, r1
 80118a0:	fb0e fe01 	mul.w	lr, lr, r1
 80118a4:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 80118a8:	eba3 030c 	sub.w	r3, r3, ip
 80118ac:	429d      	cmp	r5, r3
 80118ae:	bfc8      	it	gt
 80118b0:	460e      	movgt	r6, r1
 80118b2:	8196      	strh	r6, [r2, #12]
 80118b4:	2800      	cmp	r0, #0
 80118b6:	d0b7      	beq.n	8011828 <acc_translation_pulseshaper_calc_settings+0x7c>
 80118b8:	1dc3      	adds	r3, r0, #7
 80118ba:	2001      	movs	r0, #1
 80118bc:	4098      	lsls	r0, r3
 80118be:	b280      	uxth	r0, r0
 80118c0:	e7b2      	b.n	8011828 <acc_translation_pulseshaper_calc_settings+0x7c>
 80118c2:	8116      	strh	r6, [r2, #8]
 80118c4:	81d6      	strh	r6, [r2, #14]
 80118c6:	8156      	strh	r6, [r2, #10]
 80118c8:	2000      	movs	r0, #0
 80118ca:	4663      	mov	r3, ip
 80118cc:	4607      	mov	r7, r0
 80118ce:	e7d5      	b.n	801187c <acc_translation_pulseshaper_calc_settings+0xd0>
 80118d0:	2d05      	cmp	r5, #5
 80118d2:	d00a      	beq.n	80118ea <acc_translation_pulseshaper_calc_settings+0x13e>
 80118d4:	1e6b      	subs	r3, r5, #1
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	fb0e fe03 	mul.w	lr, lr, r3
 80118dc:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 80118e0:	eba6 0e0e 	sub.w	lr, r6, lr
 80118e4:	4574      	cmp	r4, lr
 80118e6:	bfc8      	it	gt
 80118e8:	461d      	movgt	r5, r3
 80118ea:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80118ee:	8055      	strh	r5, [r2, #2]
 80118f0:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 80118f4:	d349      	bcc.n	801198a <acc_translation_pulseshaper_calc_settings+0x1de>
 80118f6:	f8d1 e014 	ldr.w	lr, [r1, #20]
 80118fa:	ebac 040e 	sub.w	r4, ip, lr
 80118fe:	f5b4 7fc8 	cmp.w	r4, #400	@ 0x190
 8011902:	dca4      	bgt.n	801184e <acc_translation_pulseshaper_calc_settings+0xa2>
 8011904:	1e30      	subs	r0, r6, #0
 8011906:	f04f 0301 	mov.w	r3, #1
 801190a:	bf18      	it	ne
 801190c:	2001      	movne	r0, #1
 801190e:	81d3      	strh	r3, [r2, #14]
 8011910:	8110      	strh	r0, [r2, #8]
 8011912:	2000      	movs	r0, #0
 8011914:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011918:	fb03 c310 	mls	r3, r3, r0, ip
 801191c:	2500      	movs	r5, #0
 801191e:	f8d1 9018 	ldr.w	r9, [r1, #24]
 8011922:	462c      	mov	r4, r5
 8011924:	e002      	b.n	801192c <acc_translation_pulseshaper_calc_settings+0x180>
 8011926:	2c16      	cmp	r4, #22
 8011928:	f43f af73 	beq.w	8011812 <acc_translation_pulseshaper_calc_settings+0x66>
 801192c:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 8011930:	444d      	add	r5, r9
 8011932:	fa1f f884 	uxth.w	r8, r4
 8011936:	3401      	adds	r4, #1
 8011938:	1aff      	subs	r7, r7, r3
 801193a:	d4f4      	bmi.n	8011926 <acc_translation_pulseshaper_calc_settings+0x17a>
 801193c:	f1b8 0f00 	cmp.w	r8, #0
 8011940:	d12b      	bne.n	801199a <acc_translation_pulseshaper_calc_settings+0x1ee>
 8011942:	f8a2 800a 	strh.w	r8, [r2, #10]
 8011946:	b1c0      	cbz	r0, 801197a <acc_translation_pulseshaper_calc_settings+0x1ce>
 8011948:	4637      	mov	r7, r6
 801194a:	2e00      	cmp	r6, #0
 801194c:	d096      	beq.n	801187c <acc_translation_pulseshaper_calc_settings+0xd0>
 801194e:	88d6      	ldrh	r6, [r2, #6]
 8011950:	e9d1 4503 	ldrd	r4, r5, [r1, #12]
 8011954:	fb05 f506 	mul.w	r5, r5, r6
 8011958:	688e      	ldr	r6, [r1, #8]
 801195a:	eb04 4415 	add.w	r4, r4, r5, lsr #16
 801195e:	1ba4      	subs	r4, r4, r6
 8011960:	f53f af57 	bmi.w	8011812 <acc_translation_pulseshaper_calc_settings+0x66>
 8011964:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8011968:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 801196c:	fb06 f60c 	mul.w	r6, r6, ip
 8011970:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8011974:	442c      	add	r4, r5
 8011976:	4423      	add	r3, r4
 8011978:	e780      	b.n	801187c <acc_translation_pulseshaper_calc_settings+0xd0>
 801197a:	4637      	mov	r7, r6
 801197c:	2e00      	cmp	r6, #0
 801197e:	d0a3      	beq.n	80118c8 <acc_translation_pulseshaper_calc_settings+0x11c>
 8011980:	fb09 f308 	mul.w	r3, r9, r8
 8011984:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 8011988:	e7e1      	b.n	801194e <acc_translation_pulseshaper_calc_settings+0x1a2>
 801198a:	2400      	movs	r4, #0
 801198c:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8011990:	4663      	mov	r3, ip
 8011992:	4620      	mov	r0, r4
 8011994:	8114      	strh	r4, [r2, #8]
 8011996:	81d4      	strh	r4, [r2, #14]
 8011998:	e7c0      	b.n	801191c <acc_translation_pulseshaper_calc_settings+0x170>
 801199a:	f108 35ff 	add.w	r5, r8, #4294967295
 801199e:	b2ad      	uxth	r5, r5
 80119a0:	fb09 f405 	mul.w	r4, r9, r5
 80119a4:	eb0e 4414 	add.w	r4, lr, r4, lsr #16
 80119a8:	1b1c      	subs	r4, r3, r4
 80119aa:	42a7      	cmp	r7, r4
 80119ac:	bfc8      	it	gt
 80119ae:	46a8      	movgt	r8, r5
 80119b0:	e7c7      	b.n	8011942 <acc_translation_pulseshaper_calc_settings+0x196>
 80119b2:	8116      	strh	r6, [r2, #8]
 80119b4:	81d5      	strh	r5, [r2, #14]
 80119b6:	8156      	strh	r6, [r2, #10]
 80119b8:	e786      	b.n	80118c8 <acc_translation_pulseshaper_calc_settings+0x11c>
 80119ba:	bf00      	nop

080119bc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 80119bc:	7803      	ldrb	r3, [r0, #0]
 80119be:	b13b      	cbz	r3, 80119d0 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 80119c0:	6842      	ldr	r2, [r0, #4]
 80119c2:	b12a      	cbz	r2, 80119d0 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 80119c4:	6902      	ldr	r2, [r0, #16]
 80119c6:	2a02      	cmp	r2, #2
 80119c8:	d90b      	bls.n	80119e2 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 80119ca:	2300      	movs	r3, #0
 80119cc:	4618      	mov	r0, r3
 80119ce:	4770      	bx	lr
 80119d0:	6902      	ldr	r2, [r0, #16]
 80119d2:	2a07      	cmp	r2, #7
 80119d4:	d8f9      	bhi.n	80119ca <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 80119d6:	4805      	ldr	r0, [pc, #20]	@ (80119ec <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 80119d8:	2301      	movs	r3, #1
 80119da:	5c82      	ldrb	r2, [r0, r2]
 80119dc:	4618      	mov	r0, r3
 80119de:	800a      	strh	r2, [r1, #0]
 80119e0:	4770      	bx	lr
 80119e2:	4803      	ldr	r0, [pc, #12]	@ (80119f0 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 80119e4:	5c82      	ldrb	r2, [r0, r2]
 80119e6:	4618      	mov	r0, r3
 80119e8:	800a      	strh	r2, [r1, #0]
 80119ea:	4770      	bx	lr
 80119ec:	0801c820 	.word	0x0801c820
 80119f0:	0801c828 	.word	0x0801c828

080119f4 <acc_version_get>:
 80119f4:	4800      	ldr	r0, [pc, #0]	@ (80119f8 <acc_version_get+0x4>)
 80119f6:	4770      	bx	lr
 80119f8:	0801b484 	.word	0x0801b484

080119fc <acc_alg_atan2_q16>:
 80119fc:	2800      	cmp	r0, #0
 80119fe:	b4f0      	push	{r4, r5, r6, r7}
 8011a00:	db48      	blt.n	8011a94 <acc_alg_atan2_q16+0x98>
 8011a02:	2400      	movs	r4, #0
 8011a04:	2900      	cmp	r1, #0
 8011a06:	db3d      	blt.n	8011a84 <acc_alg_atan2_q16+0x88>
 8011a08:	4288      	cmp	r0, r1
 8011a0a:	db36      	blt.n	8011a7a <acc_alg_atan2_q16+0x7e>
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	4603      	mov	r3, r0
 8011a10:	b358      	cbz	r0, 8011a6a <acc_alg_atan2_q16+0x6e>
 8011a12:	4608      	mov	r0, r1
 8011a14:	2600      	movs	r6, #0
 8011a16:	0400      	lsls	r0, r0, #16
 8011a18:	f643 4528 	movw	r5, #15400	@ 0x3c28
 8011a1c:	fbb0 f1f3 	udiv	r1, r0, r3
 8011a20:	42a9      	cmp	r1, r5
 8011a22:	d93e      	bls.n	8011aa2 <acc_alg_atan2_q16+0xa6>
 8011a24:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 8011a28:	4299      	cmp	r1, r3
 8011a2a:	d946      	bls.n	8011aba <acc_alg_atan2_q16+0xbe>
 8011a2c:	f648 0372 	movw	r3, #34930	@ 0x8872
 8011a30:	4299      	cmp	r1, r3
 8011a32:	d944      	bls.n	8011abe <acc_alg_atan2_q16+0xc2>
 8011a34:	f64a 4349 	movw	r3, #44105	@ 0xac49
 8011a38:	4299      	cmp	r1, r3
 8011a3a:	d942      	bls.n	8011ac2 <acc_alg_atan2_q16+0xc6>
 8011a3c:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 8011a40:	4299      	cmp	r1, r3
 8011a42:	d940      	bls.n	8011ac6 <acc_alg_atan2_q16+0xca>
 8011a44:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 8011a48:	4299      	cmp	r1, r3
 8011a4a:	d93e      	bls.n	8011aca <acc_alg_atan2_q16+0xce>
 8011a4c:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 8011a50:	f248 2333 	movw	r3, #33331	@ 0x8233
 8011a54:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 8011a58:	1b49      	subs	r1, r1, r5
 8011a5a:	fb03 f101 	mul.w	r1, r3, r1
 8011a5e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 8011a62:	b116      	cbz	r6, 8011a6a <acc_alg_atan2_q16+0x6e>
 8011a64:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 8011a68:	301f      	adds	r0, #31
 8011a6a:	b114      	cbz	r4, 8011a72 <acc_alg_atan2_q16+0x76>
 8011a6c:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 8011a70:	303f      	adds	r0, #63	@ 0x3f
 8011a72:	b102      	cbz	r2, 8011a76 <acc_alg_atan2_q16+0x7a>
 8011a74:	4240      	negs	r0, r0
 8011a76:	bcf0      	pop	{r4, r5, r6, r7}
 8011a78:	4770      	bx	lr
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	b971      	cbnz	r1, 8011a9c <acc_alg_atan2_q16+0xa0>
 8011a7e:	460a      	mov	r2, r1
 8011a80:	4813      	ldr	r0, [pc, #76]	@ (8011ad0 <acc_alg_atan2_q16+0xd4>)
 8011a82:	e7f2      	b.n	8011a6a <acc_alg_atan2_q16+0x6e>
 8011a84:	4249      	negs	r1, r1
 8011a86:	2201      	movs	r2, #1
 8011a88:	b209      	sxth	r1, r1
 8011a8a:	4288      	cmp	r0, r1
 8011a8c:	dabf      	bge.n	8011a0e <acc_alg_atan2_q16+0x12>
 8011a8e:	460b      	mov	r3, r1
 8011a90:	4616      	mov	r6, r2
 8011a92:	e7c0      	b.n	8011a16 <acc_alg_atan2_q16+0x1a>
 8011a94:	4240      	negs	r0, r0
 8011a96:	2401      	movs	r4, #1
 8011a98:	b200      	sxth	r0, r0
 8011a9a:	e7b3      	b.n	8011a04 <acc_alg_atan2_q16+0x8>
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	2601      	movs	r6, #1
 8011aa0:	e7b9      	b.n	8011a16 <acc_alg_atan2_q16+0x1a>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	480b      	ldr	r0, [pc, #44]	@ (8011ad4 <acc_alg_atan2_q16+0xd8>)
 8011aa6:	f8df c030 	ldr.w	ip, [pc, #48]	@ 8011ad8 <acc_alg_atan2_q16+0xdc>
 8011aaa:	eb00 07c3 	add.w	r7, r0, r3, lsl #3
 8011aae:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
 8011ab2:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	e7ce      	b.n	8011a58 <acc_alg_atan2_q16+0x5c>
 8011aba:	2301      	movs	r3, #1
 8011abc:	e7f2      	b.n	8011aa4 <acc_alg_atan2_q16+0xa8>
 8011abe:	2302      	movs	r3, #2
 8011ac0:	e7f0      	b.n	8011aa4 <acc_alg_atan2_q16+0xa8>
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	e7ee      	b.n	8011aa4 <acc_alg_atan2_q16+0xa8>
 8011ac6:	2304      	movs	r3, #4
 8011ac8:	e7ec      	b.n	8011aa4 <acc_alg_atan2_q16+0xa8>
 8011aca:	2305      	movs	r3, #5
 8011acc:	e7ea      	b.n	8011aa4 <acc_alg_atan2_q16+0xa8>
 8011ace:	bf00      	nop
 8011ad0:	0001921f 	.word	0x0001921f
 8011ad4:	0801c82c 	.word	0x0801c82c
 8011ad8:	0801c864 	.word	0x0801c864

08011adc <acc_alg_basic_util_crc32>:
 8011adc:	b1a9      	cbz	r1, 8011b0a <acc_alg_basic_util_crc32+0x2e>
 8011ade:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae2:	b430      	push	{r4, r5}
 8011ae4:	1e45      	subs	r5, r0, #1
 8011ae6:	4c0a      	ldr	r4, [pc, #40]	@ (8011b10 <acc_alg_basic_util_crc32+0x34>)
 8011ae8:	1868      	adds	r0, r5, r1
 8011aea:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8011aee:	2208      	movs	r2, #8
 8011af0:	404b      	eors	r3, r1
 8011af2:	07d9      	lsls	r1, r3, #31
 8011af4:	bf4c      	ite	mi
 8011af6:	ea84 0353 	eormi.w	r3, r4, r3, lsr #1
 8011afa:	085b      	lsrpl	r3, r3, #1
 8011afc:	3a01      	subs	r2, #1
 8011afe:	d1f8      	bne.n	8011af2 <acc_alg_basic_util_crc32+0x16>
 8011b00:	4285      	cmp	r5, r0
 8011b02:	d1f2      	bne.n	8011aea <acc_alg_basic_util_crc32+0xe>
 8011b04:	43d8      	mvns	r0, r3
 8011b06:	bc30      	pop	{r4, r5}
 8011b08:	4770      	bx	lr
 8011b0a:	4608      	mov	r0, r1
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	edb88320 	.word	0xedb88320

08011b14 <acc_alg_least_square_fit>:
 8011b14:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8011b18:	460b      	mov	r3, r1
 8011b1a:	4601      	mov	r1, r0
 8011b1c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8011b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	2600      	movs	r6, #0
 8011b26:	b08f      	sub	sp, #60	@ 0x3c
 8011b28:	4682      	mov	sl, r0
 8011b2a:	4680      	mov	r8, r0
 8011b2c:	46b1      	mov	r9, r6
 8011b2e:	f10d 0b14 	add.w	fp, sp, #20
 8011b32:	4667      	mov	r7, ip
 8011b34:	9301      	str	r3, [sp, #4]
 8011b36:	ea4f 0589 	mov.w	r5, r9, lsl #2
 8011b3a:	46de      	mov	lr, fp
 8011b3c:	2a00      	cmp	r2, #0
 8011b3e:	d05e      	beq.n	8011bfe <acc_alg_least_square_fit+0xea>
 8011b40:	4643      	mov	r3, r8
 8011b42:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8011cc4 <acc_alg_least_square_fit+0x1b0>
 8011b46:	199c      	adds	r4, r3, r6
 8011b48:	4618      	mov	r0, r3
 8011b4a:	330c      	adds	r3, #12
 8011b4c:	442c      	add	r4, r5
 8011b4e:	edd0 6a00 	vldr	s13, [r0]
 8011b52:	42bb      	cmp	r3, r7
 8011b54:	edd4 7a00 	vldr	s15, [r4]
 8011b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011b60:	d1f1      	bne.n	8011b46 <acc_alg_least_square_fit+0x32>
 8011b62:	3504      	adds	r5, #4
 8011b64:	ecae 7a01 	vstmia	lr!, {s14}
 8011b68:	2d0c      	cmp	r5, #12
 8011b6a:	d1e7      	bne.n	8011b3c <acc_alg_least_square_fit+0x28>
 8011b6c:	f109 0901 	add.w	r9, r9, #1
 8011b70:	f10b 0b10 	add.w	fp, fp, #16
 8011b74:	f108 0804 	add.w	r8, r8, #4
 8011b78:	3e04      	subs	r6, #4
 8011b7a:	f1b9 0f03 	cmp.w	r9, #3
 8011b7e:	f107 0704 	add.w	r7, r7, #4
 8011b82:	d1d8      	bne.n	8011b36 <acc_alg_least_square_fit+0x22>
 8011b84:	ed9d 6a06 	vldr	s12, [sp, #24]
 8011b88:	a802      	add	r0, sp, #8
 8011b8a:	eddd 5a07 	vldr	s11, [sp, #28]
 8011b8e:	f101 040c 	add.w	r4, r1, #12
 8011b92:	eddd 6a0a 	vldr	s13, [sp, #40]	@ 0x28
 8011b96:	2a00      	cmp	r2, #0
 8011b98:	f000 8087 	beq.w	8011caa <acc_alg_least_square_fit+0x196>
 8011b9c:	4653      	mov	r3, sl
 8011b9e:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011cc4 <acc_alg_least_square_fit+0x1b0>
 8011ba2:	461d      	mov	r5, r3
 8011ba4:	330c      	adds	r3, #12
 8011ba6:	ed95 7a00 	vldr	s14, [r5]
 8011baa:	4563      	cmp	r3, ip
 8011bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bb0:	d1f7      	bne.n	8011ba2 <acc_alg_least_square_fit+0x8e>
 8011bb2:	f10a 0a04 	add.w	sl, sl, #4
 8011bb6:	f10c 0c04 	add.w	ip, ip, #4
 8011bba:	ece0 7a01 	vstmia	r0!, {s15}
 8011bbe:	45a2      	cmp	sl, r4
 8011bc0:	d1e9      	bne.n	8011b96 <acc_alg_least_square_fit+0x82>
 8011bc2:	eddd 7a05 	vldr	s15, [sp, #20]
 8011bc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bce:	d010      	beq.n	8011bf2 <acc_alg_least_square_fit+0xde>
 8011bd0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8011bd4:	ed9d 7a09 	vldr	s14, [sp, #36]	@ 0x24
 8011bd8:	ee85 4a27 	vdiv.f32	s8, s10, s15
 8011bdc:	ee66 4a04 	vmul.f32	s9, s12, s8
 8011be0:	ee66 7a24 	vmul.f32	s15, s12, s9
 8011be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011be8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf0:	d10d      	bne.n	8011c0e <acc_alg_least_square_fit+0xfa>
 8011bf2:	2000      	movs	r0, #0
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	600b      	str	r3, [r1, #0]
 8011bf8:	b00f      	add	sp, #60	@ 0x3c
 8011bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bfe:	3504      	adds	r5, #4
 8011c00:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011cc4 <acc_alg_least_square_fit+0x1b0>
 8011c04:	2d0c      	cmp	r5, #12
 8011c06:	ecae 7a01 	vstmia	lr!, {s14}
 8011c0a:	d197      	bne.n	8011b3c <acc_alg_least_square_fit+0x28>
 8011c0c:	e7ae      	b.n	8011b6c <acc_alg_least_square_fit+0x58>
 8011c0e:	eec5 2a27 	vdiv.f32	s5, s10, s15
 8011c12:	ed9d 5a0d 	vldr	s10, [sp, #52]	@ 0x34
 8011c16:	ee65 3a84 	vmul.f32	s7, s11, s8
 8011c1a:	ee25 7aa4 	vmul.f32	s14, s11, s9
 8011c1e:	ee66 7a23 	vmul.f32	s15, s12, s7
 8011c22:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011c26:	ee25 3aa3 	vmul.f32	s6, s11, s7
 8011c2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011c2e:	ee75 6a43 	vsub.f32	s13, s10, s6
 8011c32:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011c36:	ee27 5a27 	vmul.f32	s10, s14, s15
 8011c3a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8011c3e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c46:	d0d4      	beq.n	8011bf2 <acc_alg_least_square_fit+0xde>
 8011c48:	ed9d 5a02 	vldr	s10, [sp, #8]
 8011c4c:	2001      	movs	r0, #1
 8011c4e:	ed9d 3a03 	vldr	s6, [sp, #12]
 8011c52:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011c56:	ed9d 2a04 	vldr	s4, [sp, #16]
 8011c5a:	ee63 3a85 	vmul.f32	s7, s7, s10
 8011c5e:	9b01      	ldr	r3, [sp, #4]
 8011c60:	ee73 4a64 	vsub.f32	s9, s6, s9
 8011c64:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011c68:	ee72 7a67 	vsub.f32	s15, s4, s15
 8011c6c:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8011c70:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 8011c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c78:	edc3 7a02 	vstr	s15, [r3, #8]
 8011c7c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011c80:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011c84:	ee67 7a22 	vmul.f32	s15, s14, s5
 8011c88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011c8c:	edc3 7a01 	vstr	s15, [r3, #4]
 8011c90:	ee35 6a46 	vsub.f32	s12, s10, s12
 8011c94:	ee76 5a65 	vsub.f32	s11, s12, s11
 8011c98:	ee25 4a84 	vmul.f32	s8, s11, s8
 8011c9c:	ed83 4a00 	vstr	s8, [r3]
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	600b      	str	r3, [r1, #0]
 8011ca4:	b00f      	add	sp, #60	@ 0x3c
 8011ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011caa:	f10a 0a04 	add.w	sl, sl, #4
 8011cae:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8011cc4 <acc_alg_least_square_fit+0x1b0>
 8011cb2:	f10c 0c04 	add.w	ip, ip, #4
 8011cb6:	45a2      	cmp	sl, r4
 8011cb8:	ece0 7a01 	vstmia	r0!, {s15}
 8011cbc:	f47f af6b 	bne.w	8011b96 <acc_alg_least_square_fit+0x82>
 8011cc0:	e77f      	b.n	8011bc2 <acc_alg_least_square_fit+0xae>
 8011cc2:	bf00      	nop
 8011cc4:	00000000 	.word	0x00000000

08011cc8 <acc_confprogram_modify_bin_sensor>:
 8011cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ccc:	2601      	movs	r6, #1
 8011cce:	b085      	sub	sp, #20
 8011cd0:	461c      	mov	r4, r3
 8011cd2:	fa06 f503 	lsl.w	r5, r6, r3
 8011cd6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8011cd8:	460b      	mov	r3, r1
 8011cda:	42bd      	cmp	r5, r7
 8011cdc:	d80c      	bhi.n	8011cf8 <acc_confprogram_modify_bin_sensor+0x30>
 8011cde:	3d01      	subs	r5, #1
 8011ce0:	4a13      	ldr	r2, [pc, #76]	@ (8011d30 <acc_confprogram_modify_bin_sensor+0x68>)
 8011ce2:	2000      	movs	r0, #0
 8011ce4:	4913      	ldr	r1, [pc, #76]	@ (8011d34 <acc_confprogram_modify_bin_sensor+0x6c>)
 8011ce6:	e9cd 7500 	strd	r7, r5, [sp]
 8011cea:	6914      	ldr	r4, [r2, #16]
 8011cec:	4a12      	ldr	r2, [pc, #72]	@ (8011d38 <acc_confprogram_modify_bin_sensor+0x70>)
 8011cee:	47a0      	blx	r4
 8011cf0:	2000      	movs	r0, #0
 8011cf2:	b005      	add	sp, #20
 8011cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cf8:	4690      	mov	r8, r2
 8011cfa:	4681      	mov	r9, r0
 8011cfc:	9103      	str	r1, [sp, #12]
 8011cfe:	f1c4 0420 	rsb	r4, r4, #32
 8011d02:	f000 fa17 	bl	8012134 <acc_sensor_conf_read_instr>
 8011d06:	4602      	mov	r2, r0
 8011d08:	f04f 30ff 	mov.w	r0, #4294967295
 8011d0c:	fa07 f708 	lsl.w	r7, r7, r8
 8011d10:	9b03      	ldr	r3, [sp, #12]
 8011d12:	fa20 f404 	lsr.w	r4, r0, r4
 8011d16:	4648      	mov	r0, r9
 8011d18:	4619      	mov	r1, r3
 8011d1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d1c:	fa04 f808 	lsl.w	r8, r4, r8
 8011d20:	ea22 0208 	bic.w	r2, r2, r8
 8011d24:	433a      	orrs	r2, r7
 8011d26:	4798      	blx	r3
 8011d28:	4630      	mov	r0, r6
 8011d2a:	b005      	add	sp, #20
 8011d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d30:	24003210 	.word	0x24003210
 8011d34:	0801c8b8 	.word	0x0801c8b8
 8011d38:	0801c880 	.word	0x0801c880

08011d3c <acc_confprogram_modify_bin>:
 8011d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d40:	2401      	movs	r4, #1
 8011d42:	b085      	sub	sp, #20
 8011d44:	461d      	mov	r5, r3
 8011d46:	fa04 f603 	lsl.w	r6, r4, r3
 8011d4a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	42be      	cmp	r6, r7
 8011d50:	d80c      	bhi.n	8011d6c <acc_confprogram_modify_bin+0x30>
 8011d52:	3e01      	subs	r6, #1
 8011d54:	4a15      	ldr	r2, [pc, #84]	@ (8011dac <acc_confprogram_modify_bin+0x70>)
 8011d56:	2000      	movs	r0, #0
 8011d58:	4915      	ldr	r1, [pc, #84]	@ (8011db0 <acc_confprogram_modify_bin+0x74>)
 8011d5a:	e9cd 7600 	strd	r7, r6, [sp]
 8011d5e:	6914      	ldr	r4, [r2, #16]
 8011d60:	4a14      	ldr	r2, [pc, #80]	@ (8011db4 <acc_confprogram_modify_bin+0x78>)
 8011d62:	47a0      	blx	r4
 8011d64:	2000      	movs	r0, #0
 8011d66:	b005      	add	sp, #20
 8011d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d6c:	eb00 0941 	add.w	r9, r0, r1, lsl #1
 8011d70:	4690      	mov	r8, r2
 8011d72:	a902      	add	r1, sp, #8
 8011d74:	4622      	mov	r2, r4
 8011d76:	4648      	mov	r0, r9
 8011d78:	f1c5 0520 	rsb	r5, r5, #32
 8011d7c:	f000 fb30 	bl	80123e0 <acc_utils_transfer_buffer_to_uint32>
 8011d80:	f04f 33ff 	mov.w	r3, #4294967295
 8011d84:	9e02      	ldr	r6, [sp, #8]
 8011d86:	fa07 f708 	lsl.w	r7, r7, r8
 8011d8a:	fa23 f505 	lsr.w	r5, r3, r5
 8011d8e:	a803      	add	r0, sp, #12
 8011d90:	4649      	mov	r1, r9
 8011d92:	4622      	mov	r2, r4
 8011d94:	fa05 f808 	lsl.w	r8, r5, r8
 8011d98:	ea26 0608 	bic.w	r6, r6, r8
 8011d9c:	433e      	orrs	r6, r7
 8011d9e:	9603      	str	r6, [sp, #12]
 8011da0:	f000 fb0a 	bl	80123b8 <acc_utils_uint32_to_transfer_buffer>
 8011da4:	4620      	mov	r0, r4
 8011da6:	b005      	add	sp, #20
 8011da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dac:	24003210 	.word	0x24003210
 8011db0:	0801c8b8 	.word	0x0801c8b8
 8011db4:	0801c8c4 	.word	0x0801c8c4

08011db8 <acc_confprogram_modify_runif>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	460e      	mov	r6, r1
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	4669      	mov	r1, sp
 8011dc8:	461d      	mov	r5, r3
 8011dca:	f000 fb09 	bl	80123e0 <acc_utils_transfer_buffer_to_uint32>
 8011dce:	9a00      	ldr	r2, [sp, #0]
 8011dd0:	f022 020f 	bic.w	r2, r2, #15
 8011dd4:	b105      	cbz	r5, 8011dd8 <acc_confprogram_modify_runif+0x20>
 8011dd6:	4332      	orrs	r2, r6
 8011dd8:	9201      	str	r2, [sp, #4]
 8011dda:	4621      	mov	r1, r4
 8011ddc:	2201      	movs	r2, #1
 8011dde:	a801      	add	r0, sp, #4
 8011de0:	f000 faea 	bl	80123b8 <acc_utils_uint32_to_transfer_buffer>
 8011de4:	b002      	add	sp, #8
 8011de6:	bd70      	pop	{r4, r5, r6, pc}

08011de8 <acc_confprogram_patch_offset>:
 8011de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dec:	b082      	sub	sp, #8
 8011dee:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 8011df2:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8011df6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011dfa:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8011dfe:	b30b      	cbz	r3, 8011e44 <acc_confprogram_patch_offset+0x5c>
 8011e00:	188f      	adds	r7, r1, r2
 8011e02:	4681      	mov	r9, r0
 8011e04:	460e      	mov	r6, r1
 8011e06:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011e0a:	2500      	movs	r5, #0
 8011e0c:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
 8011e10:	004c      	lsls	r4, r1, #1
 8011e12:	b2a4      	uxth	r4, r4
 8011e14:	42b4      	cmp	r4, r6
 8011e16:	d312      	bcc.n	8011e3e <acc_confprogram_patch_offset+0x56>
 8011e18:	42bc      	cmp	r4, r7
 8011e1a:	da10      	bge.n	8011e3e <acc_confprogram_patch_offset+0x56>
 8011e1c:	f3c1 7301 	ubfx	r3, r1, #28, #2
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d039      	beq.n	8011e98 <acc_confprogram_patch_offset+0xb0>
 8011e24:	2b02      	cmp	r3, #2
 8011e26:	d026      	beq.n	8011e76 <acc_confprogram_patch_offset+0x8e>
 8011e28:	b183      	cbz	r3, 8011e4c <acc_confprogram_patch_offset+0x64>
 8011e2a:	4b20      	ldr	r3, [pc, #128]	@ (8011eac <acc_confprogram_patch_offset+0xc4>)
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	4a20      	ldr	r2, [pc, #128]	@ (8011eb0 <acc_confprogram_patch_offset+0xc8>)
 8011e30:	691b      	ldr	r3, [r3, #16]
 8011e32:	4920      	ldr	r1, [pc, #128]	@ (8011eb4 <acc_confprogram_patch_offset+0xcc>)
 8011e34:	4798      	blx	r3
 8011e36:	2000      	movs	r0, #0
 8011e38:	b002      	add	sp, #8
 8011e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e3e:	3501      	adds	r5, #1
 8011e40:	42ab      	cmp	r3, r5
 8011e42:	d8e3      	bhi.n	8011e0c <acc_confprogram_patch_offset+0x24>
 8011e44:	2001      	movs	r0, #1
 8011e46:	b002      	add	sp, #8
 8011e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e4c:	1ba4      	subs	r4, r4, r6
 8011e4e:	f3c1 5344 	ubfx	r3, r1, #21, #5
 8011e52:	f3c1 4204 	ubfx	r2, r1, #16, #5
 8011e56:	4648      	mov	r0, r9
 8011e58:	b2a1      	uxth	r1, r4
 8011e5a:	f8cd a000 	str.w	sl, [sp]
 8011e5e:	f7ff ff6d 	bl	8011d3c <acc_confprogram_modify_bin>
 8011e62:	3501      	adds	r5, #1
 8011e64:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8011e68:	42ab      	cmp	r3, r5
 8011e6a:	d9e5      	bls.n	8011e38 <acc_confprogram_patch_offset+0x50>
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	d0e3      	beq.n	8011e38 <acc_confprogram_patch_offset+0x50>
 8011e70:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011e74:	e7ca      	b.n	8011e0c <acc_confprogram_patch_offset+0x24>
 8011e76:	1ba4      	subs	r4, r4, r6
 8011e78:	faba f38a 	clz	r3, sl
 8011e7c:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8011e80:	4648      	mov	r0, r9
 8011e82:	b2a2      	uxth	r2, r4
 8011e84:	095b      	lsrs	r3, r3, #5
 8011e86:	f7ff ff97 	bl	8011db8 <acc_confprogram_modify_runif>
 8011e8a:	3501      	adds	r5, #1
 8011e8c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8011e90:	42ab      	cmp	r3, r5
 8011e92:	d8ed      	bhi.n	8011e70 <acc_confprogram_patch_offset+0x88>
 8011e94:	2001      	movs	r0, #1
 8011e96:	e7d6      	b.n	8011e46 <acc_confprogram_patch_offset+0x5e>
 8011e98:	1ba4      	subs	r4, r4, r6
 8011e9a:	f1ba 0300 	subs.w	r3, sl, #0
 8011e9e:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8011ea2:	4648      	mov	r0, r9
 8011ea4:	bf18      	it	ne
 8011ea6:	2301      	movne	r3, #1
 8011ea8:	b2a2      	uxth	r2, r4
 8011eaa:	e7ec      	b.n	8011e86 <acc_confprogram_patch_offset+0x9e>
 8011eac:	24003210 	.word	0x24003210
 8011eb0:	0801c8fc 	.word	0x0801c8fc
 8011eb4:	0801c8b8 	.word	0x0801c8b8

08011eb8 <acc_confprogram_live_patch>:
 8011eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	b083      	sub	sp, #12
 8011ebe:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8011ec2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011ec6:	8873      	ldrh	r3, [r6, #2]
 8011ec8:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d050      	beq.n	8011f72 <acc_confprogram_live_patch+0xba>
 8011ed0:	4607      	mov	r7, r0
 8011ed2:	468b      	mov	fp, r1
 8011ed4:	4690      	mov	r8, r2
 8011ed6:	2501      	movs	r5, #1
 8011ed8:	6873      	ldr	r3, [r6, #4]
 8011eda:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8011ede:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011ee2:	f3c0 7401 	ubfx	r4, r0, #28, #2
 8011ee6:	2c01      	cmp	r4, #1
 8011ee8:	d00c      	beq.n	8011f04 <acc_confprogram_live_patch+0x4c>
 8011eea:	2c02      	cmp	r4, #2
 8011eec:	d032      	beq.n	8011f54 <acc_confprogram_live_patch+0x9c>
 8011eee:	b1ec      	cbz	r4, 8011f2c <acc_confprogram_live_patch+0x74>
 8011ef0:	4b22      	ldr	r3, [pc, #136]	@ (8011f7c <acc_confprogram_live_patch+0xc4>)
 8011ef2:	2000      	movs	r0, #0
 8011ef4:	4a22      	ldr	r2, [pc, #136]	@ (8011f80 <acc_confprogram_live_patch+0xc8>)
 8011ef6:	691b      	ldr	r3, [r3, #16]
 8011ef8:	4922      	ldr	r1, [pc, #136]	@ (8011f84 <acc_confprogram_live_patch+0xcc>)
 8011efa:	4798      	blx	r3
 8011efc:	2000      	movs	r0, #0
 8011efe:	b003      	add	sp, #12
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f04:	eb08 0100 	add.w	r1, r8, r0
 8011f08:	b289      	uxth	r1, r1
 8011f0a:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8011f0e:	f022 020f 	bic.w	r2, r2, #15
 8011f12:	f1b9 0f00 	cmp.w	r9, #0
 8011f16:	d002      	beq.n	8011f1e <acc_confprogram_live_patch+0x66>
 8011f18:	f3c0 4003 	ubfx	r0, r0, #16, #4
 8011f1c:	4302      	orrs	r2, r0
 8011f1e:	4638      	mov	r0, r7
 8011f20:	47d0      	blx	sl
 8011f22:	8873      	ldrh	r3, [r6, #2]
 8011f24:	42ab      	cmp	r3, r5
 8011f26:	d924      	bls.n	8011f72 <acc_confprogram_live_patch+0xba>
 8011f28:	3501      	adds	r5, #1
 8011f2a:	e7d5      	b.n	8011ed8 <acc_confprogram_live_patch+0x20>
 8011f2c:	eb08 0100 	add.w	r1, r8, r0
 8011f30:	f3c0 5344 	ubfx	r3, r0, #21, #5
 8011f34:	f3c0 4204 	ubfx	r2, r0, #16, #5
 8011f38:	4638      	mov	r0, r7
 8011f3a:	b289      	uxth	r1, r1
 8011f3c:	e9cd 9a00 	strd	r9, sl, [sp]
 8011f40:	f7ff fec2 	bl	8011cc8 <acc_confprogram_modify_bin_sensor>
 8011f44:	8873      	ldrh	r3, [r6, #2]
 8011f46:	42ab      	cmp	r3, r5
 8011f48:	d9d9      	bls.n	8011efe <acc_confprogram_live_patch+0x46>
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d1ec      	bne.n	8011f28 <acc_confprogram_live_patch+0x70>
 8011f4e:	b003      	add	sp, #12
 8011f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f54:	eb08 0100 	add.w	r1, r8, r0
 8011f58:	b289      	uxth	r1, r1
 8011f5a:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8011f5e:	f022 020f 	bic.w	r2, r2, #15
 8011f62:	f1b9 0f00 	cmp.w	r9, #0
 8011f66:	d0d7      	beq.n	8011f18 <acc_confprogram_live_patch+0x60>
 8011f68:	4638      	mov	r0, r7
 8011f6a:	47d0      	blx	sl
 8011f6c:	8873      	ldrh	r3, [r6, #2]
 8011f6e:	42ab      	cmp	r3, r5
 8011f70:	d8da      	bhi.n	8011f28 <acc_confprogram_live_patch+0x70>
 8011f72:	2001      	movs	r0, #1
 8011f74:	b003      	add	sp, #12
 8011f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7a:	bf00      	nop
 8011f7c:	24003210 	.word	0x24003210
 8011f80:	0801c920 	.word	0x0801c920
 8011f84:	0801c8b8 	.word	0x0801c8b8

08011f88 <acc_confprogram_copy>:
 8011f88:	b182      	cbz	r2, 8011fac <acc_confprogram_copy+0x24>
 8011f8a:	3804      	subs	r0, #4
 8011f8c:	b410      	push	{r4}
 8011f8e:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8011f92:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8011f96:	3104      	adds	r1, #4
 8011f98:	0c1a      	lsrs	r2, r3, #16
 8011f9a:	f821 3c02 	strh.w	r3, [r1, #-2]
 8011f9e:	f821 2c04 	strh.w	r2, [r1, #-4]
 8011fa2:	42a1      	cmp	r1, r4
 8011fa4:	d1f5      	bne.n	8011f92 <acc_confprogram_copy+0xa>
 8011fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011faa:	4770      	bx	lr
 8011fac:	4770      	bx	lr
 8011fae:	bf00      	nop

08011fb0 <acc_confprogram_get_parameter_patch_range>:
 8011fb0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011fb4:	b470      	push	{r4, r5, r6}
 8011fb6:	884e      	ldrh	r6, [r1, #2]
 8011fb8:	b1c6      	cbz	r6, 8011fec <acc_confprogram_get_parameter_patch_range+0x3c>
 8011fba:	6848      	ldr	r0, [r1, #4]
 8011fbc:	2500      	movs	r5, #0
 8011fbe:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8011fc2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8011fc6:	f850 1b04 	ldr.w	r1, [r0], #4
 8011fca:	b289      	uxth	r1, r1
 8011fcc:	428c      	cmp	r4, r1
 8011fce:	bf28      	it	cs
 8011fd0:	460c      	movcs	r4, r1
 8011fd2:	428d      	cmp	r5, r1
 8011fd4:	bf38      	it	cc
 8011fd6:	460d      	movcc	r5, r1
 8011fd8:	4286      	cmp	r6, r0
 8011fda:	d1f4      	bne.n	8011fc6 <acc_confprogram_get_parameter_patch_range+0x16>
 8011fdc:	0064      	lsls	r4, r4, #1
 8011fde:	006d      	lsls	r5, r5, #1
 8011fe0:	b2a4      	uxth	r4, r4
 8011fe2:	b2ad      	uxth	r5, r5
 8011fe4:	8014      	strh	r4, [r2, #0]
 8011fe6:	801d      	strh	r5, [r3, #0]
 8011fe8:	bc70      	pop	{r4, r5, r6}
 8011fea:	4770      	bx	lr
 8011fec:	4635      	mov	r5, r6
 8011fee:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8011ff2:	8014      	strh	r4, [r2, #0]
 8011ff4:	801d      	strh	r5, [r3, #0]
 8011ff6:	bc70      	pop	{r4, r5, r6}
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop

08011ffc <acc_element_sizeof>:
 8011ffc:	3801      	subs	r0, #1
 8011ffe:	b2c0      	uxtb	r0, r0
 8012000:	2807      	cmp	r0, #7
 8012002:	d803      	bhi.n	801200c <acc_element_sizeof+0x10>
 8012004:	4b02      	ldr	r3, [pc, #8]	@ (8012010 <acc_element_sizeof+0x14>)
 8012006:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801200a:	4770      	bx	lr
 801200c:	2000      	movs	r0, #0
 801200e:	4770      	bx	lr
 8012010:	0801c948 	.word	0x0801c948

08012014 <acc_element_connect>:
 8012014:	6001      	str	r1, [r0, #0]
 8012016:	4770      	bx	lr

08012018 <acc_probes_register_callback>:
 8012018:	2817      	cmp	r0, #23
 801201a:	d80e      	bhi.n	801203a <acc_probes_register_callback+0x22>
 801201c:	2900      	cmp	r1, #0
 801201e:	4b0a      	ldr	r3, [pc, #40]	@ (8012048 <acc_probes_register_callback+0x30>)
 8012020:	b410      	push	{r4}
 8012022:	f04f 0400 	mov.w	r4, #0
 8012026:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801202a:	bf08      	it	eq
 801202c:	4622      	moveq	r2, r4
 801202e:	e9c0 1401 	strd	r1, r4, [r0, #4]
 8012032:	60c2      	str	r2, [r0, #12]
 8012034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012038:	4770      	bx	lr
 801203a:	4b04      	ldr	r3, [pc, #16]	@ (801204c <acc_probes_register_callback+0x34>)
 801203c:	2000      	movs	r0, #0
 801203e:	4a04      	ldr	r2, [pc, #16]	@ (8012050 <acc_probes_register_callback+0x38>)
 8012040:	691b      	ldr	r3, [r3, #16]
 8012042:	4904      	ldr	r1, [pc, #16]	@ (8012054 <acc_probes_register_callback+0x3c>)
 8012044:	4718      	bx	r3
 8012046:	bf00      	nop
 8012048:	24000030 	.word	0x24000030
 801204c:	24003210 	.word	0x24003210
 8012050:	0801c968 	.word	0x0801c968
 8012054:	0801c97c 	.word	0x0801c97c

08012058 <acc_probes_execute_struct>:
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	4c0a      	ldr	r4, [pc, #40]	@ (8012084 <acc_probes_execute_struct+0x2c>)
 801205c:	b084      	sub	sp, #16
 801205e:	2607      	movs	r6, #7
 8012060:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8012064:	9102      	str	r1, [sp, #8]
 8012066:	f88d 0004 	strb.w	r0, [sp, #4]
 801206a:	6865      	ldr	r5, [r4, #4]
 801206c:	9603      	str	r6, [sp, #12]
 801206e:	b135      	cbz	r5, 801207e <acc_probes_execute_struct+0x26>
 8012070:	4611      	mov	r1, r2
 8012072:	461a      	mov	r2, r3
 8012074:	68e3      	ldr	r3, [r4, #12]
 8012076:	a801      	add	r0, sp, #4
 8012078:	47a8      	blx	r5
 801207a:	b004      	add	sp, #16
 801207c:	bd70      	pop	{r4, r5, r6, pc}
 801207e:	2001      	movs	r0, #1
 8012080:	b004      	add	sp, #16
 8012082:	bd70      	pop	{r4, r5, r6, pc}
 8012084:	24000030 	.word	0x24000030

08012088 <acc_sensor_reg_read>:
 8012088:	b530      	push	{r4, r5, lr}
 801208a:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 801208e:	b083      	sub	sp, #12
 8012090:	2500      	movs	r5, #0
 8012092:	4614      	mov	r4, r2
 8012094:	f8ad 1000 	strh.w	r1, [sp]
 8012098:	2301      	movs	r3, #1
 801209a:	2203      	movs	r2, #3
 801209c:	4669      	mov	r1, sp
 801209e:	f8ad 5002 	strh.w	r5, [sp, #2]
 80120a2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80120a6:	f7fd f8f3 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 80120aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80120ae:	8023      	strh	r3, [r4, #0]
 80120b0:	b003      	add	sp, #12
 80120b2:	bd30      	pop	{r4, r5, pc}

080120b4 <acc_sensor_reg_write>:
 80120b4:	b530      	push	{r4, r5, lr}
 80120b6:	b083      	sub	sp, #12
 80120b8:	4615      	mov	r5, r2
 80120ba:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 80120be:	2300      	movs	r3, #0
 80120c0:	2202      	movs	r2, #2
 80120c2:	a901      	add	r1, sp, #4
 80120c4:	f8ad 5006 	strh.w	r5, [sp, #6]
 80120c8:	f8ad 4004 	strh.w	r4, [sp, #4]
 80120cc:	f7fd f8e0 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 80120d0:	b003      	add	sp, #12
 80120d2:	bd30      	pop	{r4, r5, pc}

080120d4 <acc_sensor_reg_field_write>:
 80120d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d8:	b082      	sub	sp, #8
 80120da:	f04f 0900 	mov.w	r9, #0
 80120de:	460d      	mov	r5, r1
 80120e0:	f443 5740 	orr.w	r7, r3, #12288	@ 0x3000
 80120e4:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 80120e8:	4690      	mov	r8, r2
 80120ea:	4669      	mov	r1, sp
 80120ec:	461e      	mov	r6, r3
 80120ee:	2203      	movs	r2, #3
 80120f0:	2301      	movs	r3, #1
 80120f2:	4682      	mov	sl, r0
 80120f4:	f8ad 7000 	strh.w	r7, [sp]
 80120f8:	f8ad 9002 	strh.w	r9, [sp, #2]
 80120fc:	f446 5680 	orr.w	r6, r6, #4096	@ 0x1000
 8012100:	f8ad 9004 	strh.w	r9, [sp, #4]
 8012104:	f7fd f8c4 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 8012108:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 801210c:	fa04 f105 	lsl.w	r1, r4, r5
 8012110:	4650      	mov	r0, sl
 8012112:	464b      	mov	r3, r9
 8012114:	ea87 0501 	eor.w	r5, r7, r1
 8012118:	2202      	movs	r2, #2
 801211a:	4669      	mov	r1, sp
 801211c:	f8ad 6000 	strh.w	r6, [sp]
 8012120:	ea05 0408 	and.w	r4, r5, r8
 8012124:	407c      	eors	r4, r7
 8012126:	f8ad 4002 	strh.w	r4, [sp, #2]
 801212a:	f7fd f8b1 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 801212e:	b002      	add	sp, #8
 8012130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012134 <acc_sensor_conf_read_instr>:
 8012134:	b530      	push	{r4, r5, lr}
 8012136:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 801213a:	b085      	sub	sp, #20
 801213c:	2401      	movs	r4, #1
 801213e:	2500      	movs	r5, #0
 8012140:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012144:	2205      	movs	r2, #5
 8012146:	4623      	mov	r3, r4
 8012148:	a901      	add	r1, sp, #4
 801214a:	f8ad 4006 	strh.w	r4, [sp, #6]
 801214e:	f8ad 5008 	strh.w	r5, [sp, #8]
 8012152:	f8cd 500a 	str.w	r5, [sp, #10]
 8012156:	f7fd f89b 	bl	800f290 <acc_rss_integration_sensor_device_transfer>
 801215a:	f10d 000a 	add.w	r0, sp, #10
 801215e:	4622      	mov	r2, r4
 8012160:	4669      	mov	r1, sp
 8012162:	f000 f93d 	bl	80123e0 <acc_utils_transfer_buffer_to_uint32>
 8012166:	9800      	ldr	r0, [sp, #0]
 8012168:	b005      	add	sp, #20
 801216a:	bd30      	pop	{r4, r5, pc}

0801216c <acc_cpd_pll_divisors_calculate>:
 801216c:	edd0 7a00 	vldr	s15, [r0]
 8012170:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012174:	eddf 5a63 	vldr	s11, [pc, #396]	@ 8012304 <acc_cpd_pll_divisors_calculate+0x198>
 8012178:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8012308 <acc_cpd_pll_divisors_calculate+0x19c>
 801217c:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8012180:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	b083      	sub	sp, #12
 801218c:	4606      	mov	r6, r0
 801218e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012192:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012196:	ee17 3a10 	vmov	r3, s14
 801219a:	b29c      	uxth	r4, r3
 801219c:	dc06      	bgt.n	80121ac <acc_cpd_pll_divisors_calculate+0x40>
 801219e:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 801230c <acc_cpd_pll_divisors_calculate+0x1a0>
 80121a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80121a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121aa:	d56c      	bpl.n	8012286 <acc_cpd_pll_divisors_calculate+0x11a>
 80121ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80121b0:	4d57      	ldr	r5, [pc, #348]	@ (8012310 <acc_cpd_pll_divisors_calculate+0x1a4>)
 80121b2:	692f      	ldr	r7, [r5, #16]
 80121b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b8:	d461      	bmi.n	801227e <acc_cpd_pll_divisors_calculate+0x112>
 80121ba:	4b56      	ldr	r3, [pc, #344]	@ (8012314 <acc_cpd_pll_divisors_calculate+0x1a8>)
 80121bc:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8012318 <acc_cpd_pll_divisors_calculate+0x1ac>
 80121c0:	3c10      	subs	r4, #16
 80121c2:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8012318 <acc_cpd_pll_divisors_calculate+0x1ac>
 80121c6:	2000      	movs	r0, #0
 80121c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121cc:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801231c <acc_cpd_pll_divisors_calculate+0x1b0>
 80121d0:	4953      	ldr	r1, [pc, #332]	@ (8012320 <acc_cpd_pll_divisors_calculate+0x1b4>)
 80121d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80121d6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80121da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121de:	ee17 2a10 	vmov	r2, s14
 80121e2:	bf48      	it	mi
 80121e4:	eeb1 7a67 	vnegmi.f32	s14, s15
 80121e8:	9200      	str	r2, [sp, #0]
 80121ea:	bf58      	it	pl
 80121ec:	eeb0 7a67 	vmovpl.f32	s14, s15
 80121f0:	4a4c      	ldr	r2, [pc, #304]	@ (8012324 <acc_cpd_pll_divisors_calculate+0x1b8>)
 80121f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80121f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80121fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80121fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012202:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801220a:	edcd 7a01 	vstr	s15, [sp, #4]
 801220e:	47b8      	blx	r7
 8012210:	2cef      	cmp	r4, #239	@ 0xef
 8012212:	d966      	bls.n	80122e2 <acc_cpd_pll_divisors_calculate+0x176>
 8012214:	edd6 7a00 	vldr	s15, [r6]
 8012218:	692c      	ldr	r4, [r5, #16]
 801221a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012222:	d43c      	bmi.n	801229e <acc_cpd_pll_divisors_calculate+0x132>
 8012224:	4b3b      	ldr	r3, [pc, #236]	@ (8012314 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8012226:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8012318 <acc_cpd_pll_divisors_calculate+0x1ac>
 801222a:	2000      	movs	r0, #0
 801222c:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8012318 <acc_cpd_pll_divisors_calculate+0x1ac>
 8012230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012234:	eddf 6a39 	vldr	s13, [pc, #228]	@ 801231c <acc_cpd_pll_divisors_calculate+0x1b0>
 8012238:	4939      	ldr	r1, [pc, #228]	@ (8012320 <acc_cpd_pll_divisors_calculate+0x1b4>)
 801223a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801223e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012246:	ee17 2a10 	vmov	r2, s14
 801224a:	bf48      	it	mi
 801224c:	eeb1 7a67 	vnegmi.f32	s14, s15
 8012250:	9200      	str	r2, [sp, #0]
 8012252:	bf58      	it	pl
 8012254:	eeb0 7a67 	vmovpl.f32	s14, s15
 8012258:	4a32      	ldr	r2, [pc, #200]	@ (8012324 <acc_cpd_pll_divisors_calculate+0x1b8>)
 801225a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801225e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012262:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801226a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801226e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012272:	edcd 7a01 	vstr	s15, [sp, #4]
 8012276:	47a0      	blx	r4
 8012278:	2000      	movs	r0, #0
 801227a:	b003      	add	sp, #12
 801227c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801227e:	eef1 7a67 	vneg.f32	s15, s15
 8012282:	4b29      	ldr	r3, [pc, #164]	@ (8012328 <acc_cpd_pll_divisors_calculate+0x1bc>)
 8012284:	e79a      	b.n	80121bc <acc_cpd_pll_divisors_calculate+0x50>
 8012286:	f1a4 0310 	sub.w	r3, r4, #16
 801228a:	b29b      	uxth	r3, r3
 801228c:	2bef      	cmp	r3, #239	@ 0xef
 801228e:	d90a      	bls.n	80122a6 <acc_cpd_pll_divisors_calculate+0x13a>
 8012290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012294:	4d1e      	ldr	r5, [pc, #120]	@ (8012310 <acc_cpd_pll_divisors_calculate+0x1a4>)
 8012296:	692c      	ldr	r4, [r5, #16]
 8012298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801229c:	d5c2      	bpl.n	8012224 <acc_cpd_pll_divisors_calculate+0xb8>
 801229e:	eef1 7a67 	vneg.f32	s15, s15
 80122a2:	4b21      	ldr	r3, [pc, #132]	@ (8012328 <acc_cpd_pll_divisors_calculate+0x1bc>)
 80122a4:	e7bf      	b.n	8012226 <acc_cpd_pll_divisors_calculate+0xba>
 80122a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122aa:	eddf 6a20 	vldr	s13, [pc, #128]	@ 801232c <acc_cpd_pll_divisors_calculate+0x1c0>
 80122ae:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8012330 <acc_cpd_pll_divisors_calculate+0x1c4>
 80122b2:	2c3f      	cmp	r4, #63	@ 0x3f
 80122b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80122b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80122bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122c0:	ee17 2a90 	vmov	r2, s15
 80122c4:	810a      	strh	r2, [r1, #8]
 80122c6:	d90f      	bls.n	80122e8 <acc_cpd_pll_divisors_calculate+0x17c>
 80122c8:	2301      	movs	r3, #1
 80122ca:	2cbf      	cmp	r4, #191	@ 0xbf
 80122cc:	804b      	strh	r3, [r1, #2]
 80122ce:	d913      	bls.n	80122f8 <acc_cpd_pll_divisors_calculate+0x18c>
 80122d0:	08e2      	lsrs	r2, r4, #3
 80122d2:	f004 0307 	and.w	r3, r4, #7
 80122d6:	808a      	strh	r2, [r1, #4]
 80122d8:	80cb      	strh	r3, [r1, #6]
 80122da:	2001      	movs	r0, #1
 80122dc:	800c      	strh	r4, [r1, #0]
 80122de:	b003      	add	sp, #12
 80122e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e2:	2000      	movs	r0, #0
 80122e4:	b003      	add	sp, #12
 80122e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e8:	2200      	movs	r2, #0
 80122ea:	2c2f      	cmp	r4, #47	@ 0x2f
 80122ec:	bf88      	it	hi
 80122ee:	4623      	movhi	r3, r4
 80122f0:	804a      	strh	r2, [r1, #2]
 80122f2:	808b      	strh	r3, [r1, #4]
 80122f4:	80ca      	strh	r2, [r1, #6]
 80122f6:	e7f0      	b.n	80122da <acc_cpd_pll_divisors_calculate+0x16e>
 80122f8:	f1a4 0240 	sub.w	r2, r4, #64	@ 0x40
 80122fc:	f3c2 02cf 	ubfx	r2, r2, #3, #16
 8012300:	e7e7      	b.n	80122d2 <acc_cpd_pll_divisors_calculate+0x166>
 8012302:	bf00      	nop
 8012304:	4f1502f9 	.word	0x4f1502f9
 8012308:	4c989680 	.word	0x4c989680
 801230c:	4b989680 	.word	0x4b989680
 8012310:	24003210 	.word	0x24003210
 8012314:	080208d4 	.word	0x080208d4
 8012318:	350637bd 	.word	0x350637bd
 801231c:	49742400 	.word	0x49742400
 8012320:	0801c9b0 	.word	0x0801c9b0
 8012324:	0801c984 	.word	0x0801c984
 8012328:	0801c47c 	.word	0x0801c47c
 801232c:	b55b38e8 	.word	0xb55b38e8
 8012330:	427c0000 	.word	0x427c0000

08012334 <acc_cpd_pll_divisors_ref_divisor>:
 8012334:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 8012344 <acc_cpd_pll_divisors_ref_divisor+0x10>
 8012338:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801233c:	feb8 0a67 	vrinta.f32	s0, s15
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	4f1502f9 	.word	0x4f1502f9

08012348 <acc_dll_calculate_area_settings>:
 8012348:	0080      	lsls	r0, r0, #2
 801234a:	b280      	uxth	r0, r0
 801234c:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8012350:	8010      	strh	r0, [r2, #0]
 8012352:	b29b      	uxth	r3, r3
 8012354:	428b      	cmp	r3, r1
 8012356:	8053      	strh	r3, [r2, #2]
 8012358:	d20c      	bcs.n	8012374 <acc_dll_calculate_area_settings+0x2c>
 801235a:	2301      	movs	r3, #1
 801235c:	2100      	movs	r1, #0
 801235e:	2003      	movs	r0, #3
 8012360:	8093      	strh	r3, [r2, #4]
 8012362:	8153      	strh	r3, [r2, #10]
 8012364:	8193      	strh	r3, [r2, #12]
 8012366:	8213      	strh	r3, [r2, #16]
 8012368:	80d1      	strh	r1, [r2, #6]
 801236a:	8251      	strh	r1, [r2, #18]
 801236c:	8291      	strh	r1, [r2, #20]
 801236e:	8110      	strh	r0, [r2, #8]
 8012370:	81d0      	strh	r0, [r2, #14]
 8012372:	4770      	bx	lr
 8012374:	b430      	push	{r4, r5}
 8012376:	fbb3 f4f1 	udiv	r4, r3, r1
 801237a:	2500      	movs	r5, #0
 801237c:	fb01 3114 	mls	r1, r1, r4, r3
 8012380:	2401      	movs	r4, #1
 8012382:	2303      	movs	r3, #3
 8012384:	8195      	strh	r5, [r2, #12]
 8012386:	8094      	strh	r4, [r2, #4]
 8012388:	80d4      	strh	r4, [r2, #6]
 801238a:	8154      	strh	r4, [r2, #10]
 801238c:	8214      	strh	r4, [r2, #16]
 801238e:	8254      	strh	r4, [r2, #18]
 8012390:	81d5      	strh	r5, [r2, #14]
 8012392:	8295      	strh	r5, [r2, #20]
 8012394:	8050      	strh	r0, [r2, #2]
 8012396:	8011      	strh	r1, [r2, #0]
 8012398:	8113      	strh	r3, [r2, #8]
 801239a:	bc30      	pop	{r4, r5}
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop

080123a0 <acc_utils_swap16_array>:
 80123a0:	b141      	cbz	r1, 80123b4 <acc_utils_swap16_array+0x14>
 80123a2:	3802      	subs	r0, #2
 80123a4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80123a8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80123ac:	ba5b      	rev16	r3, r3
 80123ae:	4288      	cmp	r0, r1
 80123b0:	8003      	strh	r3, [r0, #0]
 80123b2:	d1f9      	bne.n	80123a8 <acc_utils_swap16_array+0x8>
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop

080123b8 <acc_utils_uint32_to_transfer_buffer>:
 80123b8:	b182      	cbz	r2, 80123dc <acc_utils_uint32_to_transfer_buffer+0x24>
 80123ba:	3804      	subs	r0, #4
 80123bc:	b410      	push	{r4}
 80123be:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80123c2:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80123c6:	3104      	adds	r1, #4
 80123c8:	0c1a      	lsrs	r2, r3, #16
 80123ca:	f821 3c02 	strh.w	r3, [r1, #-2]
 80123ce:	f821 2c04 	strh.w	r2, [r1, #-4]
 80123d2:	42a1      	cmp	r1, r4
 80123d4:	d1f5      	bne.n	80123c2 <acc_utils_uint32_to_transfer_buffer+0xa>
 80123d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123da:	4770      	bx	lr
 80123dc:	4770      	bx	lr
 80123de:	bf00      	nop

080123e0 <acc_utils_transfer_buffer_to_uint32>:
 80123e0:	b182      	cbz	r2, 8012404 <acc_utils_transfer_buffer_to_uint32+0x24>
 80123e2:	3904      	subs	r1, #4
 80123e4:	b410      	push	{r4}
 80123e6:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 80123ea:	8802      	ldrh	r2, [r0, #0]
 80123ec:	3004      	adds	r0, #4
 80123ee:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 80123f2:	4284      	cmp	r4, r0
 80123f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123f8:	f841 3f04 	str.w	r3, [r1, #4]!
 80123fc:	d1f5      	bne.n	80123ea <acc_utils_transfer_buffer_to_uint32+0xa>
 80123fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012402:	4770      	bx	lr
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop

08012408 <acc_alg_temp>:
 8012408:	f240 13e5 	movw	r3, #485	@ 0x1e5
 801240c:	fb03 f000 	mul.w	r0, r3, r0
 8012410:	0c00      	lsrs	r0, r0, #16
 8012412:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 8012416:	4770      	bx	lr

08012418 <adl_add_value_to_buffer>:
 8012418:	4a18      	ldr	r2, [pc, #96]	@ (801247c <adl_add_value_to_buffer+0x64>)
 801241a:	2300      	movs	r3, #0
 801241c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012420:	6817      	ldr	r7, [r2, #0]
 8012422:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8012480 <adl_add_value_to_buffer+0x68>
 8012426:	187e      	adds	r6, r7, r1
 8012428:	1e74      	subs	r4, r6, #1
 801242a:	46a6      	mov	lr, r4
 801242c:	fba8 2500 	umull	r2, r5, r8, r0
 8012430:	4681      	mov	r9, r0
 8012432:	469c      	mov	ip, r3
 8012434:	3301      	adds	r3, #1
 8012436:	08ed      	lsrs	r5, r5, #3
 8012438:	f1b9 0f09 	cmp.w	r9, #9
 801243c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8012440:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8012444:	4628      	mov	r0, r5
 8012446:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 801244a:	f80e 2f01 	strb.w	r2, [lr, #1]!
 801244e:	d8ed      	bhi.n	801242c <adl_add_value_to_buffer+0x14>
 8012450:	461a      	mov	r2, r3
 8012452:	2000      	movs	r0, #0
 8012454:	eb06 0c5c 	add.w	ip, r6, ip, lsr #1
 8012458:	4432      	add	r2, r6
 801245a:	54f0      	strb	r0, [r6, r3]
 801245c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8012460:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
 8012464:	4564      	cmp	r4, ip
 8012466:	7025      	strb	r5, [r4, #0]
 8012468:	7010      	strb	r0, [r2, #0]
 801246a:	d1f7      	bne.n	801245c <adl_add_value_to_buffer+0x44>
 801246c:	4419      	add	r1, r3
 801246e:	222c      	movs	r2, #44	@ 0x2c
 8012470:	2300      	movs	r3, #0
 8012472:	1c48      	adds	r0, r1, #1
 8012474:	547a      	strb	r2, [r7, r1]
 8012476:	543b      	strb	r3, [r7, r0]
 8012478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801247c:	24002fdc 	.word	0x24002fdc
 8012480:	cccccccd 	.word	0xcccccccd

08012484 <diagnostic_log_scalar>:
 8012484:	b530      	push	{r4, r5, lr}
 8012486:	b083      	sub	sp, #12
 8012488:	4605      	mov	r5, r0
 801248a:	460c      	mov	r4, r1
 801248c:	f7fc ff7a 	bl	800f384 <acc_rss_integration_log_level>
 8012490:	2801      	cmp	r0, #1
 8012492:	d907      	bls.n	80124a4 <diagnostic_log_scalar+0x20>
 8012494:	4a04      	ldr	r2, [pc, #16]	@ (80124a8 <diagnostic_log_scalar+0x24>)
 8012496:	462b      	mov	r3, r5
 8012498:	9400      	str	r4, [sp, #0]
 801249a:	2002      	movs	r0, #2
 801249c:	6914      	ldr	r4, [r2, #16]
 801249e:	4903      	ldr	r1, [pc, #12]	@ (80124ac <diagnostic_log_scalar+0x28>)
 80124a0:	4a03      	ldr	r2, [pc, #12]	@ (80124b0 <diagnostic_log_scalar+0x2c>)
 80124a2:	47a0      	blx	r4
 80124a4:	b003      	add	sp, #12
 80124a6:	bd30      	pop	{r4, r5, pc}
 80124a8:	24003210 	.word	0x24003210
 80124ac:	0801c9d8 	.word	0x0801c9d8
 80124b0:	0801c9c4 	.word	0x0801c9c4

080124b4 <diagnostic_log_array_sub_name>:
 80124b4:	b570      	push	{r4, r5, r6, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	4606      	mov	r6, r0
 80124ba:	460c      	mov	r4, r1
 80124bc:	4615      	mov	r5, r2
 80124be:	f7fc ff61 	bl	800f384 <acc_rss_integration_log_level>
 80124c2:	2801      	cmp	r0, #1
 80124c4:	d908      	bls.n	80124d8 <diagnostic_log_array_sub_name+0x24>
 80124c6:	4a05      	ldr	r2, [pc, #20]	@ (80124dc <diagnostic_log_array_sub_name+0x28>)
 80124c8:	4633      	mov	r3, r6
 80124ca:	9501      	str	r5, [sp, #4]
 80124cc:	2002      	movs	r0, #2
 80124ce:	9400      	str	r4, [sp, #0]
 80124d0:	4903      	ldr	r1, [pc, #12]	@ (80124e0 <diagnostic_log_array_sub_name+0x2c>)
 80124d2:	6914      	ldr	r4, [r2, #16]
 80124d4:	4a03      	ldr	r2, [pc, #12]	@ (80124e4 <diagnostic_log_array_sub_name+0x30>)
 80124d6:	47a0      	blx	r4
 80124d8:	b002      	add	sp, #8
 80124da:	bd70      	pop	{r4, r5, r6, pc}
 80124dc:	24003210 	.word	0x24003210
 80124e0:	0801c9d8 	.word	0x0801c9d8
 80124e4:	0801c9dc 	.word	0x0801c9dc

080124e8 <diagnostic_log_array>:
 80124e8:	b530      	push	{r4, r5, lr}
 80124ea:	b083      	sub	sp, #12
 80124ec:	4605      	mov	r5, r0
 80124ee:	460c      	mov	r4, r1
 80124f0:	f7fc ff48 	bl	800f384 <acc_rss_integration_log_level>
 80124f4:	2801      	cmp	r0, #1
 80124f6:	d907      	bls.n	8012508 <diagnostic_log_array+0x20>
 80124f8:	4a04      	ldr	r2, [pc, #16]	@ (801250c <diagnostic_log_array+0x24>)
 80124fa:	462b      	mov	r3, r5
 80124fc:	9400      	str	r4, [sp, #0]
 80124fe:	2002      	movs	r0, #2
 8012500:	6914      	ldr	r4, [r2, #16]
 8012502:	4903      	ldr	r1, [pc, #12]	@ (8012510 <diagnostic_log_array+0x28>)
 8012504:	4a03      	ldr	r2, [pc, #12]	@ (8012514 <diagnostic_log_array+0x2c>)
 8012506:	47a0      	blx	r4
 8012508:	b003      	add	sp, #12
 801250a:	bd30      	pop	{r4, r5, pc}
 801250c:	24003210 	.word	0x24003210
 8012510:	0801c9d8 	.word	0x0801c9d8
 8012514:	0801c9f4 	.word	0x0801c9f4

08012518 <diagnostic_log_set_parameter>:
 8012518:	b530      	push	{r4, r5, lr}
 801251a:	b083      	sub	sp, #12
 801251c:	4605      	mov	r5, r0
 801251e:	460c      	mov	r4, r1
 8012520:	f7fc ff30 	bl	800f384 <acc_rss_integration_log_level>
 8012524:	2801      	cmp	r0, #1
 8012526:	d907      	bls.n	8012538 <diagnostic_log_set_parameter+0x20>
 8012528:	4a04      	ldr	r2, [pc, #16]	@ (801253c <diagnostic_log_set_parameter+0x24>)
 801252a:	462b      	mov	r3, r5
 801252c:	9400      	str	r4, [sp, #0]
 801252e:	2002      	movs	r0, #2
 8012530:	6914      	ldr	r4, [r2, #16]
 8012532:	4903      	ldr	r1, [pc, #12]	@ (8012540 <diagnostic_log_set_parameter+0x28>)
 8012534:	4a03      	ldr	r2, [pc, #12]	@ (8012544 <diagnostic_log_set_parameter+0x2c>)
 8012536:	47a0      	blx	r4
 8012538:	b003      	add	sp, #12
 801253a:	bd30      	pop	{r4, r5, pc}
 801253c:	24003210 	.word	0x24003210
 8012540:	0801c9d8 	.word	0x0801c9d8
 8012544:	0801ca08 	.word	0x0801ca08

08012548 <diagnostic_log_declare_parameter>:
 8012548:	b570      	push	{r4, r5, r6, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	4606      	mov	r6, r0
 801254e:	460c      	mov	r4, r1
 8012550:	4615      	mov	r5, r2
 8012552:	f7fc ff17 	bl	800f384 <acc_rss_integration_log_level>
 8012556:	2801      	cmp	r0, #1
 8012558:	d908      	bls.n	801256c <diagnostic_log_declare_parameter+0x24>
 801255a:	4a05      	ldr	r2, [pc, #20]	@ (8012570 <diagnostic_log_declare_parameter+0x28>)
 801255c:	4633      	mov	r3, r6
 801255e:	9501      	str	r5, [sp, #4]
 8012560:	2002      	movs	r0, #2
 8012562:	9400      	str	r4, [sp, #0]
 8012564:	4903      	ldr	r1, [pc, #12]	@ (8012574 <diagnostic_log_declare_parameter+0x2c>)
 8012566:	6914      	ldr	r4, [r2, #16]
 8012568:	4a03      	ldr	r2, [pc, #12]	@ (8012578 <diagnostic_log_declare_parameter+0x30>)
 801256a:	47a0      	blx	r4
 801256c:	b002      	add	sp, #8
 801256e:	bd70      	pop	{r4, r5, r6, pc}
 8012570:	24003210 	.word	0x24003210
 8012574:	0801c9d8 	.word	0x0801c9d8
 8012578:	0801ca1c 	.word	0x0801ca1c

0801257c <diagnostic_log_set_scope>:
 801257c:	b510      	push	{r4, lr}
 801257e:	4604      	mov	r4, r0
 8012580:	f7fc ff00 	bl	800f384 <acc_rss_integration_log_level>
 8012584:	2801      	cmp	r0, #1
 8012586:	d909      	bls.n	801259c <diagnostic_log_set_scope+0x20>
 8012588:	4905      	ldr	r1, [pc, #20]	@ (80125a0 <diagnostic_log_set_scope+0x24>)
 801258a:	4623      	mov	r3, r4
 801258c:	4a05      	ldr	r2, [pc, #20]	@ (80125a4 <diagnostic_log_set_scope+0x28>)
 801258e:	2002      	movs	r0, #2
 8012590:	690c      	ldr	r4, [r1, #16]
 8012592:	4905      	ldr	r1, [pc, #20]	@ (80125a8 <diagnostic_log_set_scope+0x2c>)
 8012594:	46a4      	mov	ip, r4
 8012596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801259a:	4760      	bx	ip
 801259c:	bd10      	pop	{r4, pc}
 801259e:	bf00      	nop
 80125a0:	24003210 	.word	0x24003210
 80125a4:	0801ca34 	.word	0x0801ca34
 80125a8:	0801c9d8 	.word	0x0801c9d8

080125ac <adl_data_new_line_test>:
 80125ac:	b138      	cbz	r0, 80125be <adl_data_new_line_test+0x12>
 80125ae:	b538      	push	{r3, r4, r5, lr}
 80125b0:	fbb0 f3f1 	udiv	r3, r0, r1
 80125b4:	fb01 0113 	mls	r1, r1, r3, r0
 80125b8:	b119      	cbz	r1, 80125c2 <adl_data_new_line_test+0x16>
 80125ba:	4610      	mov	r0, r2
 80125bc:	bd38      	pop	{r3, r4, r5, pc}
 80125be:	4610      	mov	r0, r2
 80125c0:	4770      	bx	lr
 80125c2:	f7fc fedf 	bl	800f384 <acc_rss_integration_log_level>
 80125c6:	2801      	cmp	r0, #1
 80125c8:	4c09      	ldr	r4, [pc, #36]	@ (80125f0 <adl_data_new_line_test+0x44>)
 80125ca:	d906      	bls.n	80125da <adl_data_new_line_test+0x2e>
 80125cc:	4a09      	ldr	r2, [pc, #36]	@ (80125f4 <adl_data_new_line_test+0x48>)
 80125ce:	2002      	movs	r0, #2
 80125d0:	6823      	ldr	r3, [r4, #0]
 80125d2:	6915      	ldr	r5, [r2, #16]
 80125d4:	4908      	ldr	r1, [pc, #32]	@ (80125f8 <adl_data_new_line_test+0x4c>)
 80125d6:	4a09      	ldr	r2, [pc, #36]	@ (80125fc <adl_data_new_line_test+0x50>)
 80125d8:	47a8      	blx	r5
 80125da:	4b09      	ldr	r3, [pc, #36]	@ (8012600 <adl_data_new_line_test+0x54>)
 80125dc:	2209      	movs	r2, #9
 80125de:	6824      	ldr	r4, [r4, #0]
 80125e0:	cb03      	ldmia	r3!, {r0, r1}
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	6020      	str	r0, [r4, #0]
 80125e6:	4610      	mov	r0, r2
 80125e8:	7223      	strb	r3, [r4, #8]
 80125ea:	6061      	str	r1, [r4, #4]
 80125ec:	bd38      	pop	{r3, r4, r5, pc}
 80125ee:	bf00      	nop
 80125f0:	24002fdc 	.word	0x24002fdc
 80125f4:	24003210 	.word	0x24003210
 80125f8:	0801c9d8 	.word	0x0801c9d8
 80125fc:	0801b688 	.word	0x0801b688
 8012600:	0801ca44 	.word	0x0801ca44

08012604 <diagnostic_log_data_i16.part.0>:
 8012604:	4a05      	ldr	r2, [pc, #20]	@ (801261c <diagnostic_log_data_i16.part.0+0x18>)
 8012606:	2002      	movs	r0, #2
 8012608:	4b05      	ldr	r3, [pc, #20]	@ (8012620 <diagnostic_log_data_i16.part.0+0x1c>)
 801260a:	4906      	ldr	r1, [pc, #24]	@ (8012624 <diagnostic_log_data_i16.part.0+0x20>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	b410      	push	{r4}
 8012610:	6914      	ldr	r4, [r2, #16]
 8012612:	4a05      	ldr	r2, [pc, #20]	@ (8012628 <diagnostic_log_data_i16.part.0+0x24>)
 8012614:	46a4      	mov	ip, r4
 8012616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801261a:	4760      	bx	ip
 801261c:	24003210 	.word	0x24003210
 8012620:	24002fdc 	.word	0x24002fdc
 8012624:	0801c9d8 	.word	0x0801c9d8
 8012628:	0801b688 	.word	0x0801b688

0801262c <diagnostic_log_data_u8>:
 801262c:	4b13      	ldr	r3, [pc, #76]	@ (801267c <diagnostic_log_data_u8+0x50>)
 801262e:	4a14      	ldr	r2, [pc, #80]	@ (8012680 <diagnostic_log_data_u8+0x54>)
 8012630:	b570      	push	{r4, r5, r6, lr}
 8012632:	4606      	mov	r6, r0
 8012634:	460d      	mov	r5, r1
 8012636:	6812      	ldr	r2, [r2, #0]
 8012638:	cb03      	ldmia	r3!, {r0, r1}
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	6010      	str	r0, [r2, #0]
 801263e:	7213      	strb	r3, [r2, #8]
 8012640:	6051      	str	r1, [r2, #4]
 8012642:	b18d      	cbz	r5, 8012668 <diagnostic_log_data_u8+0x3c>
 8012644:	4435      	add	r5, r6
 8012646:	1e74      	subs	r4, r6, #1
 8012648:	2209      	movs	r2, #9
 801264a:	f1c6 0601 	rsb	r6, r6, #1
 801264e:	3d01      	subs	r5, #1
 8012650:	2116      	movs	r1, #22
 8012652:	1930      	adds	r0, r6, r4
 8012654:	f7ff ffaa 	bl	80125ac <adl_data_new_line_test>
 8012658:	4601      	mov	r1, r0
 801265a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801265e:	f7ff fedb 	bl	8012418 <adl_add_value_to_buffer>
 8012662:	4602      	mov	r2, r0
 8012664:	42ac      	cmp	r4, r5
 8012666:	d1f3      	bne.n	8012650 <diagnostic_log_data_u8+0x24>
 8012668:	f7fc fe8c 	bl	800f384 <acc_rss_integration_log_level>
 801266c:	2801      	cmp	r0, #1
 801266e:	d903      	bls.n	8012678 <diagnostic_log_data_u8+0x4c>
 8012670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012674:	f7ff bfc6 	b.w	8012604 <diagnostic_log_data_i16.part.0>
 8012678:	bd70      	pop	{r4, r5, r6, pc}
 801267a:	bf00      	nop
 801267c:	0801ca44 	.word	0x0801ca44
 8012680:	24002fdc 	.word	0x24002fdc

08012684 <diagnostic_log_data_i16>:
 8012684:	4b1a      	ldr	r3, [pc, #104]	@ (80126f0 <diagnostic_log_data_i16+0x6c>)
 8012686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801268a:	4e1a      	ldr	r6, [pc, #104]	@ (80126f4 <diagnostic_log_data_i16+0x70>)
 801268c:	4604      	mov	r4, r0
 801268e:	460d      	mov	r5, r1
 8012690:	6832      	ldr	r2, [r6, #0]
 8012692:	cb03      	ldmia	r3!, {r0, r1}
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	6010      	str	r0, [r2, #0]
 8012698:	7213      	strb	r3, [r2, #8]
 801269a:	6051      	str	r1, [r2, #4]
 801269c:	b1f5      	cbz	r5, 80126dc <diagnostic_log_data_i16+0x58>
 801269e:	3c02      	subs	r4, #2
 80126a0:	f04f 0800 	mov.w	r8, #0
 80126a4:	2209      	movs	r2, #9
 80126a6:	272d      	movs	r7, #45	@ 0x2d
 80126a8:	210c      	movs	r1, #12
 80126aa:	4640      	mov	r0, r8
 80126ac:	f7ff ff7e 	bl	80125ac <adl_data_new_line_test>
 80126b0:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 80126b4:	f108 0801 	add.w	r8, r8, #1
 80126b8:	4601      	mov	r1, r0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	da04      	bge.n	80126c8 <diagnostic_log_data_i16+0x44>
 80126be:	6833      	ldr	r3, [r6, #0]
 80126c0:	3101      	adds	r1, #1
 80126c2:	541f      	strb	r7, [r3, r0]
 80126c4:	f9b4 3000 	ldrsh.w	r3, [r4]
 80126c8:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80126cc:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80126d0:	b280      	uxth	r0, r0
 80126d2:	f7ff fea1 	bl	8012418 <adl_add_value_to_buffer>
 80126d6:	4545      	cmp	r5, r8
 80126d8:	4602      	mov	r2, r0
 80126da:	d1e5      	bne.n	80126a8 <diagnostic_log_data_i16+0x24>
 80126dc:	f7fc fe52 	bl	800f384 <acc_rss_integration_log_level>
 80126e0:	2801      	cmp	r0, #1
 80126e2:	d903      	bls.n	80126ec <diagnostic_log_data_i16+0x68>
 80126e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126e8:	f7ff bf8c 	b.w	8012604 <diagnostic_log_data_i16.part.0>
 80126ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126f0:	0801ca44 	.word	0x0801ca44
 80126f4:	24002fdc 	.word	0x24002fdc

080126f8 <diagnostic_log_data_u16>:
 80126f8:	4b12      	ldr	r3, [pc, #72]	@ (8012744 <diagnostic_log_data_u16+0x4c>)
 80126fa:	4a13      	ldr	r2, [pc, #76]	@ (8012748 <diagnostic_log_data_u16+0x50>)
 80126fc:	b570      	push	{r4, r5, r6, lr}
 80126fe:	4605      	mov	r5, r0
 8012700:	460e      	mov	r6, r1
 8012702:	6812      	ldr	r2, [r2, #0]
 8012704:	cb03      	ldmia	r3!, {r0, r1}
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	6010      	str	r0, [r2, #0]
 801270a:	7213      	strb	r3, [r2, #8]
 801270c:	6051      	str	r1, [r2, #4]
 801270e:	b17e      	cbz	r6, 8012730 <diagnostic_log_data_u16+0x38>
 8012710:	3d02      	subs	r5, #2
 8012712:	2400      	movs	r4, #0
 8012714:	2209      	movs	r2, #9
 8012716:	210f      	movs	r1, #15
 8012718:	4620      	mov	r0, r4
 801271a:	3401      	adds	r4, #1
 801271c:	f7ff ff46 	bl	80125ac <adl_data_new_line_test>
 8012720:	4601      	mov	r1, r0
 8012722:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 8012726:	f7ff fe77 	bl	8012418 <adl_add_value_to_buffer>
 801272a:	42a6      	cmp	r6, r4
 801272c:	4602      	mov	r2, r0
 801272e:	d1f2      	bne.n	8012716 <diagnostic_log_data_u16+0x1e>
 8012730:	f7fc fe28 	bl	800f384 <acc_rss_integration_log_level>
 8012734:	2801      	cmp	r0, #1
 8012736:	d903      	bls.n	8012740 <diagnostic_log_data_u16+0x48>
 8012738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801273c:	f7ff bf62 	b.w	8012604 <diagnostic_log_data_i16.part.0>
 8012740:	bd70      	pop	{r4, r5, r6, pc}
 8012742:	bf00      	nop
 8012744:	0801ca44 	.word	0x0801ca44
 8012748:	24002fdc 	.word	0x24002fdc

0801274c <diagnostic_log_data_u32>:
 801274c:	4b12      	ldr	r3, [pc, #72]	@ (8012798 <diagnostic_log_data_u32+0x4c>)
 801274e:	4a13      	ldr	r2, [pc, #76]	@ (801279c <diagnostic_log_data_u32+0x50>)
 8012750:	b570      	push	{r4, r5, r6, lr}
 8012752:	4605      	mov	r5, r0
 8012754:	460e      	mov	r6, r1
 8012756:	6812      	ldr	r2, [r2, #0]
 8012758:	cb03      	ldmia	r3!, {r0, r1}
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	6010      	str	r0, [r2, #0]
 801275e:	7213      	strb	r3, [r2, #8]
 8012760:	6051      	str	r1, [r2, #4]
 8012762:	b17e      	cbz	r6, 8012784 <diagnostic_log_data_u32+0x38>
 8012764:	3d04      	subs	r5, #4
 8012766:	2400      	movs	r4, #0
 8012768:	2209      	movs	r2, #9
 801276a:	2108      	movs	r1, #8
 801276c:	4620      	mov	r0, r4
 801276e:	3401      	adds	r4, #1
 8012770:	f7ff ff1c 	bl	80125ac <adl_data_new_line_test>
 8012774:	4601      	mov	r1, r0
 8012776:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801277a:	f7ff fe4d 	bl	8012418 <adl_add_value_to_buffer>
 801277e:	42a6      	cmp	r6, r4
 8012780:	4602      	mov	r2, r0
 8012782:	d1f2      	bne.n	801276a <diagnostic_log_data_u32+0x1e>
 8012784:	f7fc fdfe 	bl	800f384 <acc_rss_integration_log_level>
 8012788:	2801      	cmp	r0, #1
 801278a:	d903      	bls.n	8012794 <diagnostic_log_data_u32+0x48>
 801278c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012790:	f7ff bf38 	b.w	8012604 <diagnostic_log_data_i16.part.0>
 8012794:	bd70      	pop	{r4, r5, r6, pc}
 8012796:	bf00      	nop
 8012798:	0801ca44 	.word	0x0801ca44
 801279c:	24002fdc 	.word	0x24002fdc

080127a0 <diagnostic_log_data_i8>:
 80127a0:	4b1b      	ldr	r3, [pc, #108]	@ (8012810 <diagnostic_log_data_i8+0x70>)
 80127a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a6:	4e1b      	ldr	r6, [pc, #108]	@ (8012814 <diagnostic_log_data_i8+0x74>)
 80127a8:	4605      	mov	r5, r0
 80127aa:	460c      	mov	r4, r1
 80127ac:	6832      	ldr	r2, [r6, #0]
 80127ae:	cb03      	ldmia	r3!, {r0, r1}
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	6010      	str	r0, [r2, #0]
 80127b4:	7213      	strb	r3, [r2, #8]
 80127b6:	6051      	str	r1, [r2, #4]
 80127b8:	b304      	cbz	r4, 80127fc <diagnostic_log_data_i8+0x5c>
 80127ba:	442c      	add	r4, r5
 80127bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80127c0:	2209      	movs	r2, #9
 80127c2:	f1c5 0501 	rsb	r5, r5, #1
 80127c6:	3c01      	subs	r4, #1
 80127c8:	272d      	movs	r7, #45	@ 0x2d
 80127ca:	2112      	movs	r1, #18
 80127cc:	eb05 0008 	add.w	r0, r5, r8
 80127d0:	f7ff feec 	bl	80125ac <adl_data_new_line_test>
 80127d4:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 80127d8:	4601      	mov	r1, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	da04      	bge.n	80127e8 <diagnostic_log_data_i8+0x48>
 80127de:	6833      	ldr	r3, [r6, #0]
 80127e0:	3101      	adds	r1, #1
 80127e2:	541f      	strb	r7, [r3, r0]
 80127e4:	f998 3000 	ldrsb.w	r3, [r8]
 80127e8:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80127ec:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80127f0:	b2c0      	uxtb	r0, r0
 80127f2:	f7ff fe11 	bl	8012418 <adl_add_value_to_buffer>
 80127f6:	45a0      	cmp	r8, r4
 80127f8:	4602      	mov	r2, r0
 80127fa:	d1e6      	bne.n	80127ca <diagnostic_log_data_i8+0x2a>
 80127fc:	f7fc fdc2 	bl	800f384 <acc_rss_integration_log_level>
 8012800:	2801      	cmp	r0, #1
 8012802:	d903      	bls.n	801280c <diagnostic_log_data_i8+0x6c>
 8012804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012808:	f7ff befc 	b.w	8012604 <diagnostic_log_data_i16.part.0>
 801280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012810:	0801ca44 	.word	0x0801ca44
 8012814:	24002fdc 	.word	0x24002fdc

08012818 <diagnostic_log_data_i32>:
 8012818:	4b19      	ldr	r3, [pc, #100]	@ (8012880 <diagnostic_log_data_i32+0x68>)
 801281a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801281e:	4e19      	ldr	r6, [pc, #100]	@ (8012884 <diagnostic_log_data_i32+0x6c>)
 8012820:	4604      	mov	r4, r0
 8012822:	460d      	mov	r5, r1
 8012824:	6832      	ldr	r2, [r6, #0]
 8012826:	cb03      	ldmia	r3!, {r0, r1}
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	6010      	str	r0, [r2, #0]
 801282c:	7213      	strb	r3, [r2, #8]
 801282e:	6051      	str	r1, [r2, #4]
 8012830:	b1e5      	cbz	r5, 801286c <diagnostic_log_data_i32+0x54>
 8012832:	3c04      	subs	r4, #4
 8012834:	f04f 0800 	mov.w	r8, #0
 8012838:	2209      	movs	r2, #9
 801283a:	272d      	movs	r7, #45	@ 0x2d
 801283c:	2107      	movs	r1, #7
 801283e:	4640      	mov	r0, r8
 8012840:	f7ff feb4 	bl	80125ac <adl_data_new_line_test>
 8012844:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8012848:	f108 0801 	add.w	r8, r8, #1
 801284c:	4601      	mov	r1, r0
 801284e:	2b00      	cmp	r3, #0
 8012850:	da03      	bge.n	801285a <diagnostic_log_data_i32+0x42>
 8012852:	6833      	ldr	r3, [r6, #0]
 8012854:	3101      	adds	r1, #1
 8012856:	541f      	strb	r7, [r3, r0]
 8012858:	6823      	ldr	r3, [r4, #0]
 801285a:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 801285e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8012862:	f7ff fdd9 	bl	8012418 <adl_add_value_to_buffer>
 8012866:	4545      	cmp	r5, r8
 8012868:	4602      	mov	r2, r0
 801286a:	d1e7      	bne.n	801283c <diagnostic_log_data_i32+0x24>
 801286c:	f7fc fd8a 	bl	800f384 <acc_rss_integration_log_level>
 8012870:	2801      	cmp	r0, #1
 8012872:	d903      	bls.n	801287c <diagnostic_log_data_i32+0x64>
 8012874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012878:	f7ff bec4 	b.w	8012604 <diagnostic_log_data_i16.part.0>
 801287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012880:	0801ca44 	.word	0x0801ca44
 8012884:	24002fdc 	.word	0x24002fdc

08012888 <acc_diagnostic_log_enable>:
 8012888:	b920      	cbnz	r0, 8012894 <acc_diagnostic_log_enable+0xc>
 801288a:	4a13      	ldr	r2, [pc, #76]	@ (80128d8 <acc_diagnostic_log_enable+0x50>)
 801288c:	4b13      	ldr	r3, [pc, #76]	@ (80128dc <acc_diagnostic_log_enable+0x54>)
 801288e:	6010      	str	r0, [r2, #0]
 8012890:	6018      	str	r0, [r3, #0]
 8012892:	4770      	bx	lr
 8012894:	4911      	ldr	r1, [pc, #68]	@ (80128dc <acc_diagnostic_log_enable+0x54>)
 8012896:	4812      	ldr	r0, [pc, #72]	@ (80128e0 <acc_diagnostic_log_enable+0x58>)
 8012898:	4b0f      	ldr	r3, [pc, #60]	@ (80128d8 <acc_diagnostic_log_enable+0x50>)
 801289a:	4a12      	ldr	r2, [pc, #72]	@ (80128e4 <acc_diagnostic_log_enable+0x5c>)
 801289c:	b510      	push	{r4, lr}
 801289e:	6008      	str	r0, [r1, #0]
 80128a0:	601a      	str	r2, [r3, #0]
 80128a2:	f7fc fd6f 	bl	800f384 <acc_rss_integration_log_level>
 80128a6:	2801      	cmp	r0, #1
 80128a8:	d905      	bls.n	80128b6 <acc_diagnostic_log_enable+0x2e>
 80128aa:	4b0f      	ldr	r3, [pc, #60]	@ (80128e8 <acc_diagnostic_log_enable+0x60>)
 80128ac:	2002      	movs	r0, #2
 80128ae:	4a0f      	ldr	r2, [pc, #60]	@ (80128ec <acc_diagnostic_log_enable+0x64>)
 80128b0:	691b      	ldr	r3, [r3, #16]
 80128b2:	490f      	ldr	r1, [pc, #60]	@ (80128f0 <acc_diagnostic_log_enable+0x68>)
 80128b4:	4798      	blx	r3
 80128b6:	f7fc fd65 	bl	800f384 <acc_rss_integration_log_level>
 80128ba:	2801      	cmp	r0, #1
 80128bc:	d800      	bhi.n	80128c0 <acc_diagnostic_log_enable+0x38>
 80128be:	bd10      	pop	{r4, pc}
 80128c0:	4b09      	ldr	r3, [pc, #36]	@ (80128e8 <acc_diagnostic_log_enable+0x60>)
 80128c2:	691c      	ldr	r4, [r3, #16]
 80128c4:	f7ff f896 	bl	80119f4 <acc_version_get>
 80128c8:	4a0a      	ldr	r2, [pc, #40]	@ (80128f4 <acc_diagnostic_log_enable+0x6c>)
 80128ca:	4603      	mov	r3, r0
 80128cc:	46a4      	mov	ip, r4
 80128ce:	2002      	movs	r0, #2
 80128d0:	4907      	ldr	r1, [pc, #28]	@ (80128f0 <acc_diagnostic_log_enable+0x68>)
 80128d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128d6:	4760      	bx	ip
 80128d8:	24002fdc 	.word	0x24002fdc
 80128dc:	24003044 	.word	0x24003044
 80128e0:	0801ca7c 	.word	0x0801ca7c
 80128e4:	24002fe0 	.word	0x24002fe0
 80128e8:	24003210 	.word	0x24003210
 80128ec:	0801ca50 	.word	0x0801ca50
 80128f0:	0801c9d8 	.word	0x0801c9d8
 80128f4:	0801ca68 	.word	0x0801ca68

080128f8 <acc_diagnostic_log_set_scope>:
 80128f8:	4b02      	ldr	r3, [pc, #8]	@ (8012904 <acc_diagnostic_log_set_scope+0xc>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	b10b      	cbz	r3, 8012902 <acc_diagnostic_log_set_scope+0xa>
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4718      	bx	r3
 8012902:	4770      	bx	lr
 8012904:	24003044 	.word	0x24003044

08012908 <acc_diagnostic_log_array>:
 8012908:	4b02      	ldr	r3, [pc, #8]	@ (8012914 <acc_diagnostic_log_array+0xc>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	b10b      	cbz	r3, 8012912 <acc_diagnostic_log_array+0xa>
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	4718      	bx	r3
 8012912:	4770      	bx	lr
 8012914:	24003044 	.word	0x24003044

08012918 <acc_diagnostic_log_scalar>:
 8012918:	4b02      	ldr	r3, [pc, #8]	@ (8012924 <acc_diagnostic_log_scalar+0xc>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	b10b      	cbz	r3, 8012922 <acc_diagnostic_log_scalar+0xa>
 801291e:	695b      	ldr	r3, [r3, #20]
 8012920:	4718      	bx	r3
 8012922:	4770      	bx	lr
 8012924:	24003044 	.word	0x24003044

08012928 <acc_diagnostic_log_data_u16>:
 8012928:	4b02      	ldr	r3, [pc, #8]	@ (8012934 <acc_diagnostic_log_data_u16+0xc>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	b10b      	cbz	r3, 8012932 <acc_diagnostic_log_data_u16+0xa>
 801292e:	6a1b      	ldr	r3, [r3, #32]
 8012930:	4718      	bx	r3
 8012932:	4770      	bx	lr
 8012934:	24003044 	.word	0x24003044

08012938 <acc_diagnostic_log_data_i16>:
 8012938:	4b02      	ldr	r3, [pc, #8]	@ (8012944 <acc_diagnostic_log_data_i16+0xc>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	b10b      	cbz	r3, 8012942 <acc_diagnostic_log_data_i16+0xa>
 801293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012940:	4718      	bx	r3
 8012942:	4770      	bx	lr
 8012944:	24003044 	.word	0x24003044

08012948 <acc_image_a121_r1a_cal_session_get>:
 8012948:	4800      	ldr	r0, [pc, #0]	@ (801294c <acc_image_a121_r1a_cal_session_get+0x4>)
 801294a:	4770      	bx	lr
 801294c:	0801caac 	.word	0x0801caac

08012950 <acc_image_a121_r1a_cal_session_param_table_get>:
 8012950:	4800      	ldr	r0, [pc, #0]	@ (8012954 <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 8012952:	4770      	bx	lr
 8012954:	0801e140 	.word	0x0801e140

08012958 <acc_alg_comp_iq_imb>:
 8012958:	b430      	push	{r4, r5}
 801295a:	8815      	ldrh	r5, [r2, #0]
 801295c:	9c02      	ldr	r4, [sp, #8]
 801295e:	f005 021f 	and.w	r2, r5, #31
 8012962:	3230      	adds	r2, #48	@ 0x30
 8012964:	fb00 f002 	mul.w	r0, r0, r2
 8012968:	0aaa      	lsrs	r2, r5, #10
 801296a:	f3c5 1544 	ubfx	r5, r5, #5, #5
 801296e:	3a20      	subs	r2, #32
 8012970:	2800      	cmp	r0, #0
 8012972:	f105 0530 	add.w	r5, r5, #48	@ 0x30
 8012976:	fb01 f202 	mul.w	r2, r1, r2
 801297a:	bfb8      	it	lt
 801297c:	303f      	addlt	r0, #63	@ 0x3f
 801297e:	fb01 f105 	mul.w	r1, r1, r5
 8012982:	2a00      	cmp	r2, #0
 8012984:	ea4f 10a0 	mov.w	r0, r0, asr #6
 8012988:	bfb8      	it	lt
 801298a:	321f      	addlt	r2, #31
 801298c:	2900      	cmp	r1, #0
 801298e:	bfb8      	it	lt
 8012990:	313f      	addlt	r1, #63	@ 0x3f
 8012992:	eb00 1062 	add.w	r0, r0, r2, asr #5
 8012996:	1189      	asrs	r1, r1, #6
 8012998:	8018      	strh	r0, [r3, #0]
 801299a:	8021      	strh	r1, [r4, #0]
 801299c:	bc30      	pop	{r4, r5}
 801299e:	4770      	bx	lr

080129a0 <acc_alg_iq_imb_comp_to_fix_point>:
 80129a0:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 80129a4:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8012a7c <acc_alg_iq_imb_comp_to_fix_point+0xdc>
 80129a8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80129ac:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8012a80 <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 80129b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80129b4:	ee31 1a67 	vsub.f32	s2, s2, s15
 80129b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80129bc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80129c0:	ee21 1a07 	vmul.f32	s2, s2, s14
 80129c4:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80129c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80129cc:	ee70 0a86 	vadd.f32	s1, s1, s12
 80129d0:	ee31 1a27 	vadd.f32	s2, s2, s15
 80129d4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80129d8:	ee60 0aa6 	vmul.f32	s1, s1, s13
 80129dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e0:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80129e4:	dc20      	bgt.n	8012a28 <acc_alg_iq_imb_comp_to_fix_point+0x88>
 80129e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	d536      	bpl.n	8012a5e <acc_alg_iq_imb_comp_to_fix_point+0xbe>
 80129f0:	2300      	movs	r3, #0
 80129f2:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8012a84 <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 80129f6:	eef4 0ae7 	vcmpe.f32	s1, s15
 80129fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129fe:	dd1b      	ble.n	8012a38 <acc_alg_iq_imb_comp_to_fix_point+0x98>
 8012a00:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 8012a04:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 8012a08:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 8012a0c:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8012a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a14:	dc1e      	bgt.n	8012a54 <acc_alg_iq_imb_comp_to_fix_point+0xb4>
 8012a16:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8012a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1e:	d524      	bpl.n	8012a6a <acc_alg_iq_imb_comp_to_fix_point+0xca>
 8012a20:	2200      	movs	r2, #0
 8012a22:	4313      	orrs	r3, r2
 8012a24:	8003      	strh	r3, [r0, #0]
 8012a26:	4770      	bx	lr
 8012a28:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8012a84 <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 8012a2c:	231f      	movs	r3, #31
 8012a2e:	eef4 0ae7 	vcmpe.f32	s1, s15
 8012a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a36:	dce3      	bgt.n	8012a00 <acc_alg_iq_imb_comp_to_fix_point+0x60>
 8012a38:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8012a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a40:	d4e2      	bmi.n	8012a08 <acc_alg_iq_imb_comp_to_fix_point+0x68>
 8012a42:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 8012a46:	ee10 2a90 	vmov	r2, s1
 8012a4a:	b292      	uxth	r2, r2
 8012a4c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8012a50:	b21b      	sxth	r3, r3
 8012a52:	e7d9      	b.n	8012a08 <acc_alg_iq_imb_comp_to_fix_point+0x68>
 8012a54:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8012a58:	4313      	orrs	r3, r2
 8012a5a:	8003      	strh	r3, [r0, #0]
 8012a5c:	4770      	bx	lr
 8012a5e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012a62:	ee10 3a10 	vmov	r3, s0
 8012a66:	b21b      	sxth	r3, r3
 8012a68:	e7c3      	b.n	80129f2 <acc_alg_iq_imb_comp_to_fix_point+0x52>
 8012a6a:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 8012a6e:	ee17 2a90 	vmov	r2, s15
 8012a72:	f342 020a 	sbfx	r2, r2, #0, #11
 8012a76:	0152      	lsls	r2, r2, #5
 8012a78:	e7d3      	b.n	8012a22 <acc_alg_iq_imb_comp_to_fix_point+0x82>
 8012a7a:	bf00      	nop
 8012a7c:	42800000 	.word	0x42800000
 8012a80:	42000000 	.word	0x42000000
 8012a84:	427c0000 	.word	0x427c0000

08012a88 <element_frame_reset>:
 8012a88:	6800      	ldr	r0, [r0, #0]
 8012a8a:	68c3      	ldr	r3, [r0, #12]
 8012a8c:	4718      	bx	r3
 8012a8e:	bf00      	nop

08012a90 <element_frame_callback>:
 8012a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a92:	4614      	mov	r4, r2
 8012a94:	460f      	mov	r7, r1
 8012a96:	4601      	mov	r1, r0
 8012a98:	e9d2 2505 	ldrd	r2, r5, [r2, #20]
 8012a9c:	782b      	ldrb	r3, [r5, #0]
 8012a9e:	8868      	ldrh	r0, [r5, #2]
 8012aa0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012aa4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8012aa8:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 8012aac:	0072      	lsls	r2, r6, #1
 8012aae:	f005 ff01 	bl	80188b4 <memmove>
 8012ab2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8012ab4:	8869      	ldrh	r1, [r5, #2]
 8012ab6:	7813      	ldrb	r3, [r2, #0]
 8012ab8:	440e      	add	r6, r1
 8012aba:	806e      	strh	r6, [r5, #2]
 8012abc:	b903      	cbnz	r3, 8012ac0 <element_frame_callback+0x30>
 8012abe:	793b      	ldrb	r3, [r7, #4]
 8012ac0:	7013      	strb	r3, [r2, #0]
 8012ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ac4 <element_frame_event>:
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8012ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012acc:	6987      	ldr	r7, [r0, #24]
 8012ace:	4604      	mov	r4, r0
 8012ad0:	461d      	mov	r5, r3
 8012ad2:	f100 084c 	add.w	r8, r0, #76	@ 0x4c
 8012ad6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012ada:	807b      	strh	r3, [r7, #2]
 8012adc:	7013      	strb	r3, [r2, #0]
 8012ade:	f858 6b04 	ldr.w	r6, [r8], #4
 8012ae2:	4649      	mov	r1, r9
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	b12e      	cbz	r6, 8012af4 <element_frame_event+0x30>
 8012ae8:	f000 fb12 	bl	8013110 <acc_pipeline_subsweep_prepare_memory>
 8012aec:	4630      	mov	r0, r6
 8012aee:	703d      	strb	r5, [r7, #0]
 8012af0:	f000 fb26 	bl	8013140 <acc_pipeline_subsweep_produce>
 8012af4:	3501      	adds	r5, #1
 8012af6:	b2ed      	uxtb	r5, r5
 8012af8:	2d04      	cmp	r5, #4
 8012afa:	d1f0      	bne.n	8012ade <element_frame_event+0x1a>
 8012afc:	6820      	ldr	r0, [r4, #0]
 8012afe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b02:	6843      	ldr	r3, [r0, #4]
 8012b04:	4718      	bx	r3
 8012b06:	bf00      	nop

08012b08 <element_frame_validate>:
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	6980      	ldr	r0, [r0, #24]
 8012b0e:	b178      	cbz	r0, 8012b30 <element_frame_validate+0x28>
 8012b10:	69e3      	ldr	r3, [r4, #28]
 8012b12:	b143      	cbz	r3, 8012b26 <element_frame_validate+0x1e>
 8012b14:	f7fc fc36 	bl	800f384 <acc_rss_integration_log_level>
 8012b18:	b128      	cbz	r0, 8012b26 <element_frame_validate+0x1e>
 8012b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8012b54 <element_frame_validate+0x4c>)
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8012b58 <element_frame_validate+0x50>)
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	490e      	ldr	r1, [pc, #56]	@ (8012b5c <element_frame_validate+0x54>)
 8012b24:	4798      	blx	r3
 8012b26:	6820      	ldr	r0, [r4, #0]
 8012b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b2c:	6883      	ldr	r3, [r0, #8]
 8012b2e:	4718      	bx	r3
 8012b30:	4d08      	ldr	r5, [pc, #32]	@ (8012b54 <element_frame_validate+0x4c>)
 8012b32:	4a0b      	ldr	r2, [pc, #44]	@ (8012b60 <element_frame_validate+0x58>)
 8012b34:	692b      	ldr	r3, [r5, #16]
 8012b36:	4909      	ldr	r1, [pc, #36]	@ (8012b5c <element_frame_validate+0x54>)
 8012b38:	4798      	blx	r3
 8012b3a:	69e3      	ldr	r3, [r4, #28]
 8012b3c:	b13b      	cbz	r3, 8012b4e <element_frame_validate+0x46>
 8012b3e:	f7fc fc21 	bl	800f384 <acc_rss_integration_log_level>
 8012b42:	b120      	cbz	r0, 8012b4e <element_frame_validate+0x46>
 8012b44:	692b      	ldr	r3, [r5, #16]
 8012b46:	2001      	movs	r0, #1
 8012b48:	4a03      	ldr	r2, [pc, #12]	@ (8012b58 <element_frame_validate+0x50>)
 8012b4a:	4904      	ldr	r1, [pc, #16]	@ (8012b5c <element_frame_validate+0x54>)
 8012b4c:	4798      	blx	r3
 8012b4e:	2000      	movs	r0, #0
 8012b50:	bd70      	pop	{r4, r5, r6, pc}
 8012b52:	bf00      	nop
 8012b54:	24003210 	.word	0x24003210
 8012b58:	0801e450 	.word	0x0801e450
 8012b5c:	0801e440 	.word	0x0801e440
 8012b60:	0801e424 	.word	0x0801e424

08012b64 <acc_element_frame_init>:
 8012b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b68:	460c      	mov	r4, r1
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	4b33      	ldr	r3, [pc, #204]	@ (8012c3c <acc_element_frame_init+0xd8>)
 8012b6e:	b087      	sub	sp, #28
 8012b70:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 8012b74:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8012b78:	4d31      	ldr	r5, [pc, #196]	@ (8012c40 <acc_element_frame_init+0xdc>)
 8012b7a:	4932      	ldr	r1, [pc, #200]	@ (8012c44 <acc_element_frame_init+0xe0>)
 8012b7c:	6045      	str	r5, [r0, #4]
 8012b7e:	f8a0 e038 	strh.w	lr, [r0, #56]	@ 0x38
 8012b82:	f8a0 c03a 	strh.w	ip, [r0, #58]	@ 0x3a
 8012b86:	e9c0 1302 	strd	r1, r3, [r0, #8]
 8012b8a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8012b8e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8012b92:	79a3      	ldrb	r3, [r4, #6]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d04d      	beq.n	8012c34 <acc_element_frame_init+0xd0>
 8012b98:	4606      	mov	r6, r0
 8012b9a:	4691      	mov	r9, r2
 8012b9c:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8012c54 <acc_element_frame_init+0xf0>
 8012ba0:	4615      	mov	r5, r2
 8012ba2:	e008      	b.n	8012bb6 <acc_element_frame_init+0x52>
 8012ba4:	79a3      	ldrb	r3, [r4, #6]
 8012ba6:	fa5f f589 	uxtb.w	r5, r9
 8012baa:	42ab      	cmp	r3, r5
 8012bac:	d942      	bls.n	8012c34 <acc_element_frame_init+0xd0>
 8012bae:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 8012bb2:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8012bb6:	eb04 0745 	add.w	r7, r4, r5, lsl #1
 8012bba:	88a0      	ldrh	r0, [r4, #4]
 8012bbc:	69e1      	ldr	r1, [r4, #28]
 8012bbe:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8012bc2:	89bb      	ldrh	r3, [r7, #12]
 8012bc4:	f109 0901 	add.w	r9, r9, #1
 8012bc8:	8abf      	ldrh	r7, [r7, #20]
 8012bca:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8012bce:	8793      	strh	r3, [r2, #60]	@ 0x3c
 8012bd0:	4403      	add	r3, r0
 8012bd2:	f8a2 7044 	strh.w	r7, [r2, #68]	@ 0x44
 8012bd6:	4668      	mov	r0, sp
 8012bd8:	6822      	ldr	r2, [r4, #0]
 8012bda:	f8ad 700e 	strh.w	r7, [sp, #14]
 8012bde:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012be2:	f8ad e010 	strh.w	lr, [sp, #16]
 8012be6:	f8ad c012 	strh.w	ip, [sp, #18]
 8012bea:	9202      	str	r2, [sp, #8]
 8012bec:	9105      	str	r1, [sp, #20]
 8012bee:	e9cd 8600 	strd	r8, r6, [sp]
 8012bf2:	f000 fa1b 	bl	801302c <acc_pipeline_subsweep_assemble>
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8012bfc:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	d1d0      	bne.n	8012ba4 <acc_element_frame_init+0x40>
 8012c02:	4b11      	ldr	r3, [pc, #68]	@ (8012c48 <acc_element_frame_init+0xe4>)
 8012c04:	4a11      	ldr	r2, [pc, #68]	@ (8012c4c <acc_element_frame_init+0xe8>)
 8012c06:	691b      	ldr	r3, [r3, #16]
 8012c08:	4911      	ldr	r1, [pc, #68]	@ (8012c50 <acc_element_frame_init+0xec>)
 8012c0a:	4798      	blx	r3
 8012c0c:	b175      	cbz	r5, 8012c2c <acc_element_frame_init+0xc8>
 8012c0e:	3d01      	subs	r5, #1
 8012c10:	f106 0448 	add.w	r4, r6, #72	@ 0x48
 8012c14:	b2ed      	uxtb	r5, r5
 8012c16:	f105 0313 	add.w	r3, r5, #19
 8012c1a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8012c1e:	6830      	ldr	r0, [r6, #0]
 8012c20:	f000 fa6a 	bl	80130f8 <acc_pipeline_subsweep_disassemble>
 8012c24:	f846 7904 	str.w	r7, [r6], #-4
 8012c28:	42b4      	cmp	r4, r6
 8012c2a:	d1f8      	bne.n	8012c1e <acc_element_frame_init+0xba>
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	b007      	add	sp, #28
 8012c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c34:	2001      	movs	r0, #1
 8012c36:	b007      	add	sp, #28
 8012c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c3c:	08012a89 	.word	0x08012a89
 8012c40:	08012ac5 	.word	0x08012ac5
 8012c44:	08012b09 	.word	0x08012b09
 8012c48:	24003210 	.word	0x24003210
 8012c4c:	0801e460 	.word	0x0801e460
 8012c50:	0801e440 	.word	0x0801e440
 8012c54:	08012a91 	.word	0x08012a91

08012c58 <acc_element_frame_release>:
 8012c58:	b178      	cbz	r0, 8012c7a <acc_element_frame_release+0x22>
 8012c5a:	b570      	push	{r4, r5, r6, lr}
 8012c5c:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 8012c60:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 8012c64:	2600      	movs	r6, #0
 8012c66:	f854 0b04 	ldr.w	r0, [r4], #4
 8012c6a:	b118      	cbz	r0, 8012c74 <acc_element_frame_release+0x1c>
 8012c6c:	f000 fa44 	bl	80130f8 <acc_pipeline_subsweep_disassemble>
 8012c70:	f844 6c04 	str.w	r6, [r4, #-4]
 8012c74:	42ac      	cmp	r4, r5
 8012c76:	d1f6      	bne.n	8012c66 <acc_element_frame_release+0xe>
 8012c78:	bd70      	pop	{r4, r5, r6, pc}
 8012c7a:	4770      	bx	lr

08012c7c <element_frame_aux_reset>:
 8012c7c:	6800      	ldr	r0, [r0, #0]
 8012c7e:	68c3      	ldr	r3, [r0, #12]
 8012c80:	4718      	bx	r3
 8012c82:	bf00      	nop

08012c84 <element_frame_aux_validate>:
 8012c84:	6800      	ldr	r0, [r0, #0]
 8012c86:	6883      	ldr	r3, [r0, #8]
 8012c88:	4718      	bx	r3
 8012c8a:	bf00      	nop

08012c8c <element_frame_aux_event>:
 8012c8c:	b570      	push	{r4, r5, r6, lr}
 8012c8e:	6902      	ldr	r2, [r0, #16]
 8012c90:	4604      	mov	r4, r0
 8012c92:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8012c96:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 8012c9a:	2b03      	cmp	r3, #3
 8012c9c:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8012c9e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 8012ca2:	bf08      	it	eq
 8012ca4:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 8012ca8:	f7ff fbae 	bl	8012408 <acc_alg_temp>
 8012cac:	6923      	ldr	r3, [r4, #16]
 8012cae:	8028      	strh	r0, [r5, #0]
 8012cb0:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8012cb2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8012cb6:	b362      	cbz	r2, 8012d12 <element_frame_aux_event+0x86>
 8012cb8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8012cbc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8012cc0:	2a01      	cmp	r2, #1
 8012cc2:	d926      	bls.n	8012d12 <element_frame_aux_event+0x86>
 8012cc4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8012cc6:	2101      	movs	r1, #1
 8012cc8:	7011      	strb	r1, [r2, #0]
 8012cca:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8012ccc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012cce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8012cd2:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8012cd4:	f1a2 0201 	sub.w	r2, r2, #1
 8012cd8:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 8012cda:	fab2 f282 	clz	r2, r2
 8012cde:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8012ce2:	0952      	lsrs	r2, r2, #5
 8012ce4:	702a      	strb	r2, [r5, #0]
 8012ce6:	880d      	ldrh	r5, [r1, #0]
 8012ce8:	f7ff fb8e 	bl	8012408 <acc_alg_temp>
 8012cec:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8012cf0:	1a2d      	subs	r5, r5, r0
 8012cf2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8012cf4:	6820      	ldr	r0, [r4, #0]
 8012cf6:	b22d      	sxth	r5, r5
 8012cf8:	6842      	ldr	r2, [r0, #4]
 8012cfa:	2d00      	cmp	r5, #0
 8012cfc:	bfb8      	it	lt
 8012cfe:	426d      	neglt	r5, r5
 8012d00:	b22d      	sxth	r5, r5
 8012d02:	42ab      	cmp	r3, r5
 8012d04:	bfac      	ite	ge
 8012d06:	2500      	movge	r5, #0
 8012d08:	2501      	movlt	r5, #1
 8012d0a:	700d      	strb	r5, [r1, #0]
 8012d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d10:	4710      	bx	r2
 8012d12:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8012d14:	2100      	movs	r1, #0
 8012d16:	7011      	strb	r1, [r2, #0]
 8012d18:	e7d7      	b.n	8012cca <element_frame_aux_event+0x3e>
 8012d1a:	bf00      	nop

08012d1c <acc_element_frame_aux_init>:
 8012d1c:	b430      	push	{r4, r5}
 8012d1e:	4603      	mov	r3, r0
 8012d20:	4c0d      	ldr	r4, [pc, #52]	@ (8012d58 <acc_element_frame_aux_init+0x3c>)
 8012d22:	4a0e      	ldr	r2, [pc, #56]	@ (8012d5c <acc_element_frame_aux_init+0x40>)
 8012d24:	2001      	movs	r0, #1
 8012d26:	4d0e      	ldr	r5, [pc, #56]	@ (8012d60 <acc_element_frame_aux_init+0x44>)
 8012d28:	605c      	str	r4, [r3, #4]
 8012d2a:	880c      	ldrh	r4, [r1, #0]
 8012d2c:	609a      	str	r2, [r3, #8]
 8012d2e:	884a      	ldrh	r2, [r1, #2]
 8012d30:	60dd      	str	r5, [r3, #12]
 8012d32:	888d      	ldrh	r5, [r1, #4]
 8012d34:	875c      	strh	r4, [r3, #58]	@ 0x3a
 8012d36:	88cc      	ldrh	r4, [r1, #6]
 8012d38:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8012d3a:	890a      	ldrh	r2, [r1, #8]
 8012d3c:	87dd      	strh	r5, [r3, #62]	@ 0x3e
 8012d3e:	f8a3 4040 	strh.w	r4, [r3, #64]	@ 0x40
 8012d42:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 8012d46:	7b0a      	ldrb	r2, [r1, #12]
 8012d48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8012d4c:	894a      	ldrh	r2, [r1, #10]
 8012d4e:	bc30      	pop	{r4, r5}
 8012d50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop
 8012d58:	08012c8d 	.word	0x08012c8d
 8012d5c:	08012c85 	.word	0x08012c85
 8012d60:	08012c7d 	.word	0x08012c7d

08012d64 <acc_element_frame_aux_release>:
 8012d64:	4770      	bx	lr
 8012d66:	bf00      	nop

08012d68 <sink_a121_callback_consume>:
 8012d68:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 8012d6c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8012d6e:	6900      	ldr	r0, [r0, #16]
 8012d70:	4718      	bx	r3
 8012d72:	bf00      	nop

08012d74 <sink_a121_callback_reset>:
 8012d74:	4770      	bx	lr
 8012d76:	bf00      	nop

08012d78 <sink_a121_callback_validate>:
 8012d78:	6983      	ldr	r3, [r0, #24]
 8012d7a:	b510      	push	{r4, lr}
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	b1bb      	cbz	r3, 8012db0 <sink_a121_callback_validate+0x38>
 8012d80:	f7fc fb00 	bl	800f384 <acc_rss_integration_log_level>
 8012d84:	b948      	cbnz	r0, 8012d9a <sink_a121_callback_validate+0x22>
 8012d86:	6963      	ldr	r3, [r4, #20]
 8012d88:	b183      	cbz	r3, 8012dac <sink_a121_callback_validate+0x34>
 8012d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8012db8 <sink_a121_callback_validate+0x40>)
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8012dbc <sink_a121_callback_validate+0x44>)
 8012d90:	691b      	ldr	r3, [r3, #16]
 8012d92:	490b      	ldr	r1, [pc, #44]	@ (8012dc0 <sink_a121_callback_validate+0x48>)
 8012d94:	4798      	blx	r3
 8012d96:	2000      	movs	r0, #0
 8012d98:	bd10      	pop	{r4, pc}
 8012d9a:	4b07      	ldr	r3, [pc, #28]	@ (8012db8 <sink_a121_callback_validate+0x40>)
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	4a09      	ldr	r2, [pc, #36]	@ (8012dc4 <sink_a121_callback_validate+0x4c>)
 8012da0:	691b      	ldr	r3, [r3, #16]
 8012da2:	4907      	ldr	r1, [pc, #28]	@ (8012dc0 <sink_a121_callback_validate+0x48>)
 8012da4:	4798      	blx	r3
 8012da6:	6963      	ldr	r3, [r4, #20]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d1ee      	bne.n	8012d8a <sink_a121_callback_validate+0x12>
 8012dac:	2001      	movs	r0, #1
 8012dae:	bd10      	pop	{r4, pc}
 8012db0:	69c3      	ldr	r3, [r0, #28]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d1e4      	bne.n	8012d80 <sink_a121_callback_validate+0x8>
 8012db6:	e7e6      	b.n	8012d86 <sink_a121_callback_validate+0xe>
 8012db8:	24003210 	.word	0x24003210
 8012dbc:	0801e4bc 	.word	0x0801e4bc
 8012dc0:	0801e4a0 	.word	0x0801e4a0
 8012dc4:	0801e484 	.word	0x0801e484

08012dc8 <acc_element_sink_a121_callback_init>:
 8012dc8:	b410      	push	{r4}
 8012dca:	4a05      	ldr	r2, [pc, #20]	@ (8012de0 <acc_element_sink_a121_callback_init+0x18>)
 8012dcc:	4c05      	ldr	r4, [pc, #20]	@ (8012de4 <acc_element_sink_a121_callback_init+0x1c>)
 8012dce:	4b06      	ldr	r3, [pc, #24]	@ (8012de8 <acc_element_sink_a121_callback_init+0x20>)
 8012dd0:	6401      	str	r1, [r0, #64]	@ 0x40
 8012dd2:	60c3      	str	r3, [r0, #12]
 8012dd4:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8012dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	08012d79 	.word	0x08012d79
 8012de4:	08012d69 	.word	0x08012d69
 8012de8:	08012d75 	.word	0x08012d75

08012dec <patch_program_parameters>:
 8012dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df0:	f640 17de 	movw	r7, #2526	@ 0x9de
 8012df4:	469a      	mov	sl, r3
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4690      	mov	r8, r2
 8012dfa:	1abf      	subs	r7, r7, r2
 8012dfc:	b083      	sub	sp, #12
 8012dfe:	4605      	mov	r5, r0
 8012e00:	4689      	mov	r9, r1
 8012e02:	42bb      	cmp	r3, r7
 8012e04:	f04f 0400 	mov.w	r4, #0
 8012e08:	f1a5 0502 	sub.w	r5, r5, #2
 8012e0c:	bf94      	ite	ls
 8012e0e:	b29f      	uxthls	r7, r3
 8012e10:	b2bf      	uxthhi	r7, r7
 8012e12:	f000 f9a1 	bl	8013158 <acc_image_a121_r1a_meas_session_get>
 8012e16:	4649      	mov	r1, r9
 8012e18:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8012e1c:	087a      	lsrs	r2, r7, #1
 8012e1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012e22:	f7ff f8b1 	bl	8011f88 <acc_confprogram_copy>
 8012e26:	f000 f99f 	bl	8013168 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 8012e2a:	1e46      	subs	r6, r0, #1
 8012e2c:	3401      	adds	r4, #1
 8012e2e:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 8012e32:	f000 f995 	bl	8013160 <acc_image_a121_r1a_meas_session_param_table_get>
 8012e36:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 8012e3a:	b2a4      	uxth	r4, r4
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	9101      	str	r1, [sp, #4]
 8012e40:	463a      	mov	r2, r7
 8012e42:	4641      	mov	r1, r8
 8012e44:	4648      	mov	r0, r9
 8012e46:	f8cd b000 	str.w	fp, [sp]
 8012e4a:	f7fe ffcd 	bl	8011de8 <acc_confprogram_patch_offset>
 8012e4e:	2ce1      	cmp	r4, #225	@ 0xe1
 8012e50:	d801      	bhi.n	8012e56 <patch_program_parameters+0x6a>
 8012e52:	2800      	cmp	r0, #0
 8012e54:	d1ea      	bne.n	8012e2c <patch_program_parameters+0x40>
 8012e56:	f8ca 7000 	str.w	r7, [sl]
 8012e5a:	b003      	add	sp, #12
 8012e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e60 <get_parameter_patch_range.constprop.0>:
 8012e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	4606      	mov	r6, r0
 8012e66:	460d      	mov	r5, r1
 8012e68:	b085      	sub	sp, #20
 8012e6a:	4693      	mov	fp, r2
 8012e6c:	469a      	mov	sl, r3
 8012e6e:	3e02      	subs	r6, #2
 8012e70:	f000 f97a 	bl	8013168 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 8012e74:	3d02      	subs	r5, #2
 8012e76:	4604      	mov	r4, r0
 8012e78:	2700      	movs	r7, #0
 8012e7a:	f640 18de 	movw	r8, #2526	@ 0x9de
 8012e7e:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 8012e82:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 8012e86:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d013      	beq.n	8012eb6 <get_parameter_patch_range.constprop.0+0x56>
 8012e8e:	7821      	ldrb	r1, [r4, #0]
 8012e90:	9101      	str	r1, [sp, #4]
 8012e92:	f000 f965 	bl	8013160 <acc_image_a121_r1a_meas_session_param_table_get>
 8012e96:	f10d 030e 	add.w	r3, sp, #14
 8012e9a:	aa03      	add	r2, sp, #12
 8012e9c:	9901      	ldr	r1, [sp, #4]
 8012e9e:	f7ff f887 	bl	8011fb0 <acc_confprogram_get_parameter_patch_range>
 8012ea2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012ea6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012eaa:	4590      	cmp	r8, r2
 8012eac:	bf28      	it	cs
 8012eae:	4690      	movcs	r8, r2
 8012eb0:	429f      	cmp	r7, r3
 8012eb2:	bf38      	it	cc
 8012eb4:	461f      	movcc	r7, r3
 8012eb6:	3401      	adds	r4, #1
 8012eb8:	454c      	cmp	r4, r9
 8012eba:	d1e2      	bne.n	8012e82 <get_parameter_patch_range.constprop.0+0x22>
 8012ebc:	f8ab 8000 	strh.w	r8, [fp]
 8012ec0:	f8aa 7000 	strh.w	r7, [sl]
 8012ec4:	b005      	add	sp, #20
 8012ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eca:	bf00      	nop

08012ecc <acc_cpd_a121_meas_session_load_program>:
 8012ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed0:	4688      	mov	r8, r1
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	4607      	mov	r7, r0
 8012ed6:	2400      	movs	r4, #0
 8012ed8:	4611      	mov	r1, r2
 8012eda:	4640      	mov	r0, r8
 8012edc:	aa01      	add	r2, sp, #4
 8012ede:	4699      	mov	r9, r3
 8012ee0:	ab02      	add	r3, sp, #8
 8012ee2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012ee6:	f7fc ff07 	bl	800fcf8 <acc_sensor_a121_prepare_load_confmem>
 8012eea:	4638      	mov	r0, r7
 8012eec:	f7fc ffb0 	bl	800fe50 <acc_sensor_protocol_a121_prepare_load>
 8012ef0:	4605      	mov	r5, r0
 8012ef2:	b1b8      	cbz	r0, 8012f24 <acc_cpd_a121_meas_session_load_program+0x58>
 8012ef4:	9e02      	ldr	r6, [sp, #8]
 8012ef6:	f640 1add 	movw	sl, #2525	@ 0x9dd
 8012efa:	4622      	mov	r2, r4
 8012efc:	ab03      	add	r3, sp, #12
 8012efe:	9901      	ldr	r1, [sp, #4]
 8012f00:	4648      	mov	r0, r9
 8012f02:	9603      	str	r6, [sp, #12]
 8012f04:	f7ff ff72 	bl	8012dec <patch_program_parameters>
 8012f08:	0861      	lsrs	r1, r4, #1
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	9b03      	ldr	r3, [sp, #12]
 8012f0e:	4642      	mov	r2, r8
 8012f10:	4638      	mov	r0, r7
 8012f12:	f7fc ff09 	bl	800fd28 <acc_sensor_a121_load_confmem>
 8012f16:	9e02      	ldr	r6, [sp, #8]
 8012f18:	4434      	add	r4, r6
 8012f1a:	b2a4      	uxth	r4, r4
 8012f1c:	4554      	cmp	r4, sl
 8012f1e:	d801      	bhi.n	8012f24 <acc_cpd_a121_meas_session_load_program+0x58>
 8012f20:	2d00      	cmp	r5, #0
 8012f22:	d1ea      	bne.n	8012efa <acc_cpd_a121_meas_session_load_program+0x2e>
 8012f24:	4628      	mov	r0, r5
 8012f26:	b004      	add	sp, #16
 8012f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012f2c <acc_cpd_a121_meas_session_run_program>:
 8012f2c:	2115      	movs	r1, #21
 8012f2e:	f7fc bfe5 	b.w	800fefc <acc_sensor_protocol_a121_run_program>
 8012f32:	bf00      	nop

08012f34 <acc_cpd_a121_meas_session_is_patch_needed>:
 8012f34:	b500      	push	{lr}
 8012f36:	b083      	sub	sp, #12
 8012f38:	f10d 0306 	add.w	r3, sp, #6
 8012f3c:	aa01      	add	r2, sp, #4
 8012f3e:	f7ff ff8f 	bl	8012e60 <get_parameter_patch_range.constprop.0>
 8012f42:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012f46:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012f4a:	4298      	cmp	r0, r3
 8012f4c:	bf34      	ite	cc
 8012f4e:	2000      	movcc	r0, #0
 8012f50:	2001      	movcs	r0, #1
 8012f52:	b003      	add	sp, #12
 8012f54:	f85d fb04 	ldr.w	pc, [sp], #4

08012f58 <acc_cpd_a121_meas_session_update_program>:
 8012f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f5c:	b085      	sub	sp, #20
 8012f5e:	4688      	mov	r8, r1
 8012f60:	4693      	mov	fp, r2
 8012f62:	461c      	mov	r4, r3
 8012f64:	4607      	mov	r7, r0
 8012f66:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8012f6a:	f7fc ffb3 	bl	800fed4 <acc_sensor_protocol_a121_is_ready_to_update>
 8012f6e:	b198      	cbz	r0, 8012f98 <acc_cpd_a121_meas_session_update_program+0x40>
 8012f70:	4620      	mov	r0, r4
 8012f72:	4649      	mov	r1, r9
 8012f74:	ab03      	add	r3, sp, #12
 8012f76:	aa02      	add	r2, sp, #8
 8012f78:	f7ff ff72 	bl	8012e60 <get_parameter_patch_range.constprop.0>
 8012f7c:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8012f80:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8012f84:	4554      	cmp	r4, sl
 8012f86:	d91c      	bls.n	8012fc2 <acc_cpd_a121_meas_session_update_program+0x6a>
 8012f88:	2501      	movs	r5, #1
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	f7fd f984 	bl	8010298 <acc_sensor_protocol_a121_reconfigure>
 8012f90:	4628      	mov	r0, r5
 8012f92:	b005      	add	sp, #20
 8012f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f98:	4638      	mov	r0, r7
 8012f9a:	f7fd f967 	bl	801026c <acc_sensor_protocol_a121_is_hibernate>
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	d1e5      	bne.n	8012f70 <acc_cpd_a121_meas_session_update_program+0x18>
 8012fa4:	f7fc f9ee 	bl	800f384 <acc_rss_integration_log_level>
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	d0f1      	beq.n	8012f90 <acc_cpd_a121_meas_session_update_program+0x38>
 8012fac:	4918      	ldr	r1, [pc, #96]	@ (8013010 <acc_cpd_a121_meas_session_update_program+0xb8>)
 8012fae:	463b      	mov	r3, r7
 8012fb0:	4a18      	ldr	r2, [pc, #96]	@ (8013014 <acc_cpd_a121_meas_session_update_program+0xbc>)
 8012fb2:	2001      	movs	r0, #1
 8012fb4:	690c      	ldr	r4, [r1, #16]
 8012fb6:	4918      	ldr	r1, [pc, #96]	@ (8013018 <acc_cpd_a121_meas_session_update_program+0xc0>)
 8012fb8:	47a0      	blx	r4
 8012fba:	4628      	mov	r0, r5
 8012fbc:	b005      	add	sp, #20
 8012fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc2:	f10a 0602 	add.w	r6, sl, #2
 8012fc6:	ab02      	add	r3, sp, #8
 8012fc8:	4659      	mov	r1, fp
 8012fca:	aa01      	add	r2, sp, #4
 8012fcc:	1b36      	subs	r6, r6, r4
 8012fce:	4640      	mov	r0, r8
 8012fd0:	f7fc fe92 	bl	800fcf8 <acc_sensor_a121_prepare_load_confmem>
 8012fd4:	9b02      	ldr	r3, [sp, #8]
 8012fd6:	b2b6      	uxth	r6, r6
 8012fd8:	429e      	cmp	r6, r3
 8012fda:	bf28      	it	cs
 8012fdc:	461e      	movcs	r6, r3
 8012fde:	9602      	str	r6, [sp, #8]
 8012fe0:	e004      	b.n	8012fec <acc_cpd_a121_meas_session_update_program+0x94>
 8012fe2:	9e02      	ldr	r6, [sp, #8]
 8012fe4:	4434      	add	r4, r6
 8012fe6:	b2a4      	uxth	r4, r4
 8012fe8:	4554      	cmp	r4, sl
 8012fea:	d8ce      	bhi.n	8012f8a <acc_cpd_a121_meas_session_update_program+0x32>
 8012fec:	ab03      	add	r3, sp, #12
 8012fee:	4622      	mov	r2, r4
 8012ff0:	9901      	ldr	r1, [sp, #4]
 8012ff2:	4648      	mov	r0, r9
 8012ff4:	9603      	str	r6, [sp, #12]
 8012ff6:	f7ff fef9 	bl	8012dec <patch_program_parameters>
 8012ffa:	4605      	mov	r5, r0
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d0f0      	beq.n	8012fe2 <acc_cpd_a121_meas_session_update_program+0x8a>
 8013000:	9b03      	ldr	r3, [sp, #12]
 8013002:	4642      	mov	r2, r8
 8013004:	0861      	lsrs	r1, r4, #1
 8013006:	4638      	mov	r0, r7
 8013008:	f7fc fe8e 	bl	800fd28 <acc_sensor_a121_load_confmem>
 801300c:	e7e9      	b.n	8012fe2 <acc_cpd_a121_meas_session_update_program+0x8a>
 801300e:	bf00      	nop
 8013010:	24003210 	.word	0x24003210
 8013014:	0801e4e4 	.word	0x0801e4e4
 8013018:	0801e508 	.word	0x0801e508

0801301c <acc_cpd_a121_meas_session_transfer_data>:
 801301c:	b410      	push	{r4}
 801301e:	460c      	mov	r4, r1
 8013020:	4611      	mov	r1, r2
 8013022:	4622      	mov	r2, r4
 8013024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013028:	f7fc bea8 	b.w	800fd7c <acc_sensor_a121_buffer_processed_read>

0801302c <acc_pipeline_subsweep_assemble>:
 801302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801302e:	2333      	movs	r3, #51	@ 0x33
 8013030:	b085      	sub	sp, #20
 8013032:	4605      	mov	r5, r0
 8013034:	4a2d      	ldr	r2, [pc, #180]	@ (80130ec <acc_pipeline_subsweep_assemble+0xc0>)
 8013036:	21e8      	movs	r1, #232	@ 0xe8
 8013038:	2001      	movs	r0, #1
 801303a:	f7fc f973 	bl	800f324 <acc_rss_integration_mem_calloc_debug>
 801303e:	4604      	mov	r4, r0
 8013040:	2800      	cmp	r0, #0
 8013042:	d041      	beq.n	80130c8 <acc_pipeline_subsweep_assemble+0x9c>
 8013044:	68aa      	ldr	r2, [r5, #8]
 8013046:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 801304a:	8a2b      	ldrh	r3, [r5, #16]
 801304c:	f100 0694 	add.w	r6, r0, #148	@ 0x94
 8013050:	89a9      	ldrh	r1, [r5, #12]
 8013052:	4638      	mov	r0, r7
 8013054:	9200      	str	r2, [sp, #0]
 8013056:	f8ad 3006 	strh.w	r3, [sp, #6]
 801305a:	8a6a      	ldrh	r2, [r5, #18]
 801305c:	696b      	ldr	r3, [r5, #20]
 801305e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013062:	4669      	mov	r1, sp
 8013064:	f8ad 2008 	strh.w	r2, [sp, #8]
 8013068:	9303      	str	r3, [sp, #12]
 801306a:	f000 f975 	bl	8013358 <acc_element_phase_enhancement_init>
 801306e:	6829      	ldr	r1, [r5, #0]
 8013070:	4630      	mov	r0, r6
 8013072:	f7ff fea9 	bl	8012dc8 <acc_element_sink_a121_callback_init>
 8013076:	89e9      	ldrh	r1, [r5, #14]
 8013078:	686a      	ldr	r2, [r5, #4]
 801307a:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 801307e:	89a8      	ldrh	r0, [r5, #12]
 8013080:	0049      	lsls	r1, r1, #1
 8013082:	2500      	movs	r5, #0
 8013084:	f8c4 20d0 	str.w	r2, [r4, #208]	@ 0xd0
 8013088:	f104 02e4 	add.w	r2, r4, #228	@ 0xe4
 801308c:	6263      	str	r3, [r4, #36]	@ 0x24
 801308e:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
 8013092:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 8013096:	f8c4 10dc 	str.w	r1, [r4, #220]	@ 0xdc
 801309a:	4639      	mov	r1, r7
 801309c:	f8a4 0092 	strh.w	r0, [r4, #146]	@ 0x92
 80130a0:	f8a4 00d8 	strh.w	r0, [r4, #216]	@ 0xd8
 80130a4:	4620      	mov	r0, r4
 80130a6:	8725      	strh	r5, [r4, #56]	@ 0x38
 80130a8:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 80130ac:	f7fe ffb2 	bl	8012014 <acc_element_connect>
 80130b0:	4631      	mov	r1, r6
 80130b2:	4638      	mov	r0, r7
 80130b4:	f7fe ffae 	bl	8012014 <acc_element_connect>
 80130b8:	6820      	ldr	r0, [r4, #0]
 80130ba:	6883      	ldr	r3, [r0, #8]
 80130bc:	4798      	blx	r3
 80130be:	4605      	mov	r5, r0
 80130c0:	b128      	cbz	r0, 80130ce <acc_pipeline_subsweep_assemble+0xa2>
 80130c2:	6820      	ldr	r0, [r4, #0]
 80130c4:	68c3      	ldr	r3, [r0, #12]
 80130c6:	4798      	blx	r3
 80130c8:	4620      	mov	r0, r4
 80130ca:	b005      	add	sp, #20
 80130cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130ce:	4b08      	ldr	r3, [pc, #32]	@ (80130f0 <acc_pipeline_subsweep_assemble+0xc4>)
 80130d0:	4a08      	ldr	r2, [pc, #32]	@ (80130f4 <acc_pipeline_subsweep_assemble+0xc8>)
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	4905      	ldr	r1, [pc, #20]	@ (80130ec <acc_pipeline_subsweep_assemble+0xc0>)
 80130d6:	4798      	blx	r3
 80130d8:	4638      	mov	r0, r7
 80130da:	f000 f96f 	bl	80133bc <acc_element_phase_enhancement_release>
 80130de:	4620      	mov	r0, r4
 80130e0:	462c      	mov	r4, r5
 80130e2:	f7fc f93b 	bl	800f35c <acc_rss_integration_mem_free>
 80130e6:	4620      	mov	r0, r4
 80130e8:	b005      	add	sp, #20
 80130ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130ec:	0801e520 	.word	0x0801e520
 80130f0:	24003210 	.word	0x24003210
 80130f4:	0801bea0 	.word	0x0801bea0

080130f8 <acc_pipeline_subsweep_disassemble>:
 80130f8:	b148      	cbz	r0, 801310e <acc_pipeline_subsweep_disassemble+0x16>
 80130fa:	b510      	push	{r4, lr}
 80130fc:	4604      	mov	r4, r0
 80130fe:	303c      	adds	r0, #60	@ 0x3c
 8013100:	f000 f95c 	bl	80133bc <acc_element_phase_enhancement_release>
 8013104:	4620      	mov	r0, r4
 8013106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801310a:	f7fc b927 	b.w	800f35c <acc_rss_integration_mem_free>
 801310e:	4770      	bx	lr

08013110 <acc_pipeline_subsweep_prepare_memory>:
 8013110:	b430      	push	{r4, r5}
 8013112:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 8013116:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 801311a:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801311c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8013120:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 8013124:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8013128:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801312c:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8013130:	6144      	str	r4, [r0, #20]
 8013132:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 8013136:	bc30      	pop	{r4, r5}
 8013138:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 801313c:	4770      	bx	lr
 801313e:	bf00      	nop

08013140 <acc_pipeline_subsweep_produce>:
 8013140:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 8013144:	2100      	movs	r1, #0
 8013146:	6803      	ldr	r3, [r0, #0]
 8013148:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 801314c:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 8013150:	4618      	mov	r0, r3
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	4718      	bx	r3
 8013156:	bf00      	nop

08013158 <acc_image_a121_r1a_meas_session_get>:
 8013158:	4800      	ldr	r0, [pc, #0]	@ (801315c <acc_image_a121_r1a_meas_session_get+0x4>)
 801315a:	4770      	bx	lr
 801315c:	0801e534 	.word	0x0801e534

08013160 <acc_image_a121_r1a_meas_session_param_table_get>:
 8013160:	4800      	ldr	r0, [pc, #0]	@ (8013164 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 8013162:	4770      	bx	lr
 8013164:	0801f8f0 	.word	0x0801f8f0

08013168 <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 8013168:	4800      	ldr	r0, [pc, #0]	@ (801316c <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 801316a:	4770      	bx	lr
 801316c:	08020698 	.word	0x08020698

08013170 <element_phase_enhancement_reset>:
 8013170:	6800      	ldr	r0, [r0, #0]
 8013172:	68c3      	ldr	r3, [r0, #12]
 8013174:	4718      	bx	r3
 8013176:	bf00      	nop

08013178 <element_phase_enhancement_validate>:
 8013178:	6800      	ldr	r0, [r0, #0]
 801317a:	6883      	ldr	r3, [r0, #8]
 801317c:	4718      	bx	r3
 801317e:	bf00      	nop

08013180 <element_phase_enhancement_event>:
 8013180:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8013184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013188:	4683      	mov	fp, r0
 801318a:	ed2d 8b04 	vpush	{d8-d9}
 801318e:	b089      	sub	sp, #36	@ 0x24
 8013190:	2b00      	cmp	r3, #0
 8013192:	f000 80d4 	beq.w	801333e <element_phase_enhancement_event+0x1be>
 8013196:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 8013198:	6904      	ldr	r4, [r0, #16]
 801319a:	0052      	lsls	r2, r2, #1
 801319c:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 801319e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80131a2:	9202      	str	r2, [sp, #8]
 80131a4:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
 80131a6:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 80131aa:	9206      	str	r2, [sp, #24]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	f000 80c6 	beq.w	801333e <element_phase_enhancement_event+0x1be>
 80131b2:	2300      	movs	r3, #0
 80131b4:	010a      	lsls	r2, r1, #4
 80131b6:	eddf 8a66 	vldr	s17, [pc, #408]	@ 8013350 <element_phase_enhancement_event+0x1d0>
 80131ba:	469a      	mov	sl, r3
 80131bc:	9303      	str	r3, [sp, #12]
 80131be:	9207      	str	r2, [sp, #28]
 80131c0:	f8db 2048 	ldr.w	r2, [fp, #72]	@ 0x48
 80131c4:	2118      	movs	r1, #24
 80131c6:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
 80131ca:	f8bb 004e 	ldrh.w	r0, [fp, #78]	@ 0x4e
 80131ce:	4413      	add	r3, r2
 80131d0:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 80131d4:	fb06 3600 	mla	r6, r6, r0, r3
 80131d8:	4630      	mov	r0, r6
 80131da:	f7fd fe59 	bl	8010e90 <acc_translation_a121_point_in_coarse>
 80131de:	2118      	movs	r1, #24
 80131e0:	4605      	mov	r5, r0
 80131e2:	4630      	mov	r0, r6
 80131e4:	f7fd fe46 	bl	8010e74 <acc_translation_a121_point_to_coarse>
 80131e8:	9b07      	ldr	r3, [sp, #28]
 80131ea:	0400      	lsls	r0, r0, #16
 80131ec:	fb80 6703 	smull	r6, r7, r0, r3
 80131f0:	2e00      	cmp	r6, #0
 80131f2:	f177 0300 	sbcs.w	r3, r7, #0
 80131f6:	da04      	bge.n	8013202 <element_phase_enhancement_event+0x82>
 80131f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80131fc:	18f6      	adds	r6, r6, r3
 80131fe:	f147 0700 	adc.w	r7, r7, #0
 8013202:	9b06      	ldr	r3, [sp, #24]
 8013204:	0c32      	lsrs	r2, r6, #16
 8013206:	441d      	add	r5, r3
 8013208:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 801320c:	f934 1015 	ldrsh.w	r1, [r4, r5, lsl #1]
 8013210:	eba2 1201 	sub.w	r2, r2, r1, lsl #4
 8013214:	ee07 2a90 	vmov	s15, r2
 8013218:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 801321c:	ee29 9a28 	vmul.f32	s18, s18, s17
 8013220:	eeb0 0a49 	vmov.f32	s0, s18
 8013224:	f007 ff6c 	bl	801b100 <cosf>
 8013228:	eeb0 8a40 	vmov.f32	s16, s0
 801322c:	eeb0 0a49 	vmov.f32	s0, s18
 8013230:	f007 fea2 	bl	801af78 <sinf>
 8013234:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 8013238:	f1b9 0f00 	cmp.w	r9, #0
 801323c:	d074      	beq.n	8013328 <element_phase_enhancement_event+0x1a8>
 801323e:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 8013242:	2000      	movs	r0, #0
 8013244:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 8013248:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801324c:	f8cd b014 	str.w	fp, [sp, #20]
 8013250:	4605      	mov	r5, r0
 8013252:	f893 8000 	ldrb.w	r8, [r3]
 8013256:	4693      	mov	fp, r2
 8013258:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8013354 <element_phase_enhancement_event+0x1d4>
 801325c:	9304      	str	r3, [sp, #16]
 801325e:	9001      	str	r0, [sp, #4]
 8013260:	9b01      	ldr	r3, [sp, #4]
 8013262:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8013266:	9a02      	ldr	r2, [sp, #8]
 8013268:	3501      	adds	r5, #1
 801326a:	eb0a 0353 	add.w	r3, sl, r3, lsr #1
 801326e:	fa1f fe85 	uxth.w	lr, r5
 8013272:	b29b      	uxth	r3, r3
 8013274:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013278:	5ee2      	ldrsh	r2, [r4, r3]
 801327a:	18e6      	adds	r6, r4, r3
 801327c:	ee07 2a90 	vmov	s15, r2
 8013280:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8013284:	ee06 2a90 	vmov	s13, r2
 8013288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801328c:	9a01      	ldr	r2, [sp, #4]
 801328e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013292:	ee27 7a88 	vmul.f32	s14, s15, s16
 8013296:	445a      	add	r2, fp
 8013298:	ee67 7a80 	vmul.f32	s15, s15, s0
 801329c:	ee66 5a80 	vmul.f32	s11, s13, s0
 80132a0:	9201      	str	r2, [sp, #4]
 80132a2:	ee66 6a88 	vmul.f32	s13, s13, s16
 80132a6:	ee37 7a65 	vsub.f32	s14, s14, s11
 80132aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80132ae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80132b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80132ba:	bf4c      	ite	mi
 80132bc:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 80132c0:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 80132c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80132cc:	bf4c      	ite	mi
 80132ce:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 80132d2:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 80132d6:	ee17 1a10 	vmov	r1, s14
 80132da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132de:	4561      	cmp	r1, ip
 80132e0:	bfb8      	it	lt
 80132e2:	4661      	movlt	r1, ip
 80132e4:	ee17 2a90 	vmov	r2, s15
 80132e8:	4562      	cmp	r2, ip
 80132ea:	bfb8      	it	lt
 80132ec:	4662      	movlt	r2, ip
 80132ee:	4281      	cmp	r1, r0
 80132f0:	bfa8      	it	ge
 80132f2:	4601      	movge	r1, r0
 80132f4:	4282      	cmp	r2, r0
 80132f6:	bfa8      	it	ge
 80132f8:	4602      	movge	r2, r0
 80132fa:	f1b8 0f00 	cmp.w	r8, #0
 80132fe:	d10b      	bne.n	8013318 <element_phase_enhancement_event+0x198>
 8013300:	ee17 7a90 	vmov	r7, s15
 8013304:	ee17 0a10 	vmov	r0, s14
 8013308:	4288      	cmp	r0, r1
 801330a:	bf08      	it	eq
 801330c:	4297      	cmpeq	r7, r2
 801330e:	bf14      	ite	ne
 8013310:	f04f 0801 	movne.w	r8, #1
 8013314:	f04f 0800 	moveq.w	r8, #0
 8013318:	45f1      	cmp	r9, lr
 801331a:	52e1      	strh	r1, [r4, r3]
 801331c:	8072      	strh	r2, [r6, #2]
 801331e:	d89f      	bhi.n	8013260 <element_phase_enhancement_event+0xe0>
 8013320:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 8013324:	f883 8000 	strb.w	r8, [r3]
 8013328:	9b03      	ldr	r3, [sp, #12]
 801332a:	3301      	adds	r3, #1
 801332c:	461a      	mov	r2, r3
 801332e:	9303      	str	r3, [sp, #12]
 8013330:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 8013334:	fa1f fa82 	uxth.w	sl, r2
 8013338:	4553      	cmp	r3, sl
 801333a:	f63f af41 	bhi.w	80131c0 <element_phase_enhancement_event+0x40>
 801333e:	f8db 0000 	ldr.w	r0, [fp]
 8013342:	6843      	ldr	r3, [r0, #4]
 8013344:	b009      	add	sp, #36	@ 0x24
 8013346:	ecbd 8b04 	vpop	{d8-d9}
 801334a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334e:	4718      	bx	r3
 8013350:	37800000 	.word	0x37800000
 8013354:	ffff8000 	.word	0xffff8000

08013358 <acc_element_phase_enhancement_init>:
 8013358:	b570      	push	{r4, r5, r6, lr}
 801335a:	4b15      	ldr	r3, [pc, #84]	@ (80133b0 <acc_element_phase_enhancement_init+0x58>)
 801335c:	4604      	mov	r4, r0
 801335e:	460d      	mov	r5, r1
 8013360:	b082      	sub	sp, #8
 8013362:	6063      	str	r3, [r4, #4]
 8013364:	4a13      	ldr	r2, [pc, #76]	@ (80133b4 <acc_element_phase_enhancement_init+0x5c>)
 8013366:	a901      	add	r1, sp, #4
 8013368:	68eb      	ldr	r3, [r5, #12]
 801336a:	4813      	ldr	r0, [pc, #76]	@ (80133b8 <acc_element_phase_enhancement_init+0x60>)
 801336c:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8013370:	7bd8      	ldrb	r0, [r3, #15]
 8013372:	f7fd f9a9 	bl	80106c8 <acc_translation_a121_profile_to_start_point_offset>
 8013376:	882a      	ldrh	r2, [r5, #0]
 8013378:	68eb      	ldr	r3, [r5, #12]
 801337a:	8869      	ldrh	r1, [r5, #2]
 801337c:	8762      	strh	r2, [r4, #58]	@ 0x3a
 801337e:	88aa      	ldrh	r2, [r5, #4]
 8013380:	88ee      	ldrh	r6, [r5, #6]
 8013382:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 8013384:	8929      	ldrh	r1, [r5, #8]
 8013386:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8013388:	7b1a      	ldrb	r2, [r3, #12]
 801338a:	681d      	ldr	r5, [r3, #0]
 801338c:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 8013390:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8013394:	9901      	ldr	r1, [sp, #4]
 8013396:	88da      	ldrh	r2, [r3, #6]
 8013398:	889b      	ldrh	r3, [r3, #4]
 801339a:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 801339e:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 80133a2:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 80133a6:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 80133aa:	b002      	add	sp, #8
 80133ac:	bd70      	pop	{r4, r5, r6, pc}
 80133ae:	bf00      	nop
 80133b0:	08013181 	.word	0x08013181
 80133b4:	08013171 	.word	0x08013171
 80133b8:	08013179 	.word	0x08013179

080133bc <acc_element_phase_enhancement_release>:
 80133bc:	4770      	bx	lr
 80133be:	bf00      	nop

080133c0 <copy_json>:
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d036      	beq.n	8013432 <copy_json+0x72>
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	6884      	ldr	r4, [r0, #8]
 80133c8:	460d      	mov	r5, r1
 80133ca:	b19c      	cbz	r4, 80133f4 <copy_json+0x34>
 80133cc:	4620      	mov	r0, r4
 80133ce:	f003 fbd5 	bl	8016b7c <cJSON_IsBool>
 80133d2:	4603      	mov	r3, r0
 80133d4:	4620      	mov	r0, r4
 80133d6:	b17b      	cbz	r3, 80133f8 <copy_json+0x38>
 80133d8:	68e2      	ldr	r2, [r4, #12]
 80133da:	4628      	mov	r0, r5
 80133dc:	6a21      	ldr	r1, [r4, #32]
 80133de:	f1a2 0202 	sub.w	r2, r2, #2
 80133e2:	fab2 f282 	clz	r2, r2
 80133e6:	0952      	lsrs	r2, r2, #5
 80133e8:	f003 fc78 	bl	8016cdc <add_json_bool_value>
 80133ec:	b180      	cbz	r0, 8013410 <copy_json+0x50>
 80133ee:	6824      	ldr	r4, [r4, #0]
 80133f0:	2c00      	cmp	r4, #0
 80133f2:	d1eb      	bne.n	80133cc <copy_json+0xc>
 80133f4:	2001      	movs	r0, #1
 80133f6:	bd38      	pop	{r3, r4, r5, pc}
 80133f8:	f003 fbd0 	bl	8016b9c <cJSON_IsString>
 80133fc:	4603      	mov	r3, r0
 80133fe:	4620      	mov	r0, r4
 8013400:	b143      	cbz	r3, 8013414 <copy_json+0x54>
 8013402:	6922      	ldr	r2, [r4, #16]
 8013404:	4628      	mov	r0, r5
 8013406:	6a21      	ldr	r1, [r4, #32]
 8013408:	f003 fc70 	bl	8016cec <add_json_string_value>
 801340c:	2800      	cmp	r0, #0
 801340e:	d1ee      	bne.n	80133ee <copy_json+0x2e>
 8013410:	2000      	movs	r0, #0
 8013412:	bd38      	pop	{r3, r4, r5, pc}
 8013414:	f003 fbba 	bl	8016b8c <cJSON_IsNumber>
 8013418:	4603      	mov	r3, r0
 801341a:	4628      	mov	r0, r5
 801341c:	2b00      	cmp	r3, #0
 801341e:	d0f7      	beq.n	8013410 <copy_json+0x50>
 8013420:	6a21      	ldr	r1, [r4, #32]
 8013422:	ed94 0b06 	vldr	d0, [r4, #24]
 8013426:	f003 fb43 	bl	8016ab0 <cJSON_AddNumberToObject>
 801342a:	3800      	subs	r0, #0
 801342c:	bf18      	it	ne
 801342e:	2001      	movne	r0, #1
 8013430:	e7dc      	b.n	80133ec <copy_json+0x2c>
 8013432:	2001      	movs	r0, #1
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop

08013438 <acc_exploration_server_init>:
 8013438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801343a:	4f09      	ldr	r7, [pc, #36]	@ (8013460 <acc_exploration_server_init+0x28>)
 801343c:	4614      	mov	r4, r2
 801343e:	4e09      	ldr	r6, [pc, #36]	@ (8013464 <acc_exploration_server_init+0x2c>)
 8013440:	b28a      	uxth	r2, r1
 8013442:	8039      	strh	r1, [r7, #0]
 8013444:	2100      	movs	r1, #0
 8013446:	461d      	mov	r5, r3
 8013448:	6030      	str	r0, [r6, #0]
 801344a:	f005 fa4d 	bl	80188e8 <memset>
 801344e:	4b06      	ldr	r3, [pc, #24]	@ (8013468 <acc_exploration_server_init+0x30>)
 8013450:	4629      	mov	r1, r5
 8013452:	4806      	ldr	r0, [pc, #24]	@ (801346c <acc_exploration_server_init+0x34>)
 8013454:	601c      	str	r4, [r3, #0]
 8013456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801345a:	f000 bfcd 	b.w	80143f8 <acc_exploration_server_system_init>
 801345e:	bf00      	nop
 8013460:	24003060 	.word	0x24003060
 8013464:	2400305c 	.word	0x2400305c
 8013468:	24003058 	.word	0x24003058
 801346c:	24003068 	.word	0x24003068

08013470 <acc_exploration_server_write_json>:
 8013470:	b538      	push	{r3, r4, r5, lr}
 8013472:	4605      	mov	r5, r0
 8013474:	4608      	mov	r0, r1
 8013476:	f003 fa69 	bl	801694c <cJSON_PrintUnformatted>
 801347a:	4604      	mov	r4, r0
 801347c:	b158      	cbz	r0, 8013496 <acc_exploration_server_write_json+0x26>
 801347e:	f7ec ff8f 	bl	80003a0 <strlen>
 8013482:	230a      	movs	r3, #10
 8013484:	4601      	mov	r1, r0
 8013486:	4620      	mov	r0, r4
 8013488:	5463      	strb	r3, [r4, r1]
 801348a:	3101      	adds	r1, #1
 801348c:	47a8      	blx	r5
 801348e:	4620      	mov	r0, r4
 8013490:	f003 fb9c 	bl	8016bcc <cJSON_free>
 8013494:	2001      	movs	r0, #1
 8013496:	bd38      	pop	{r3, r4, r5, pc}

08013498 <send_status>:
 8013498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801349a:	4607      	mov	r7, r0
 801349c:	460d      	mov	r5, r1
 801349e:	4616      	mov	r6, r2
 80134a0:	f003 fb60 	bl	8016b64 <cJSON_CreateObject>
 80134a4:	4604      	mov	r4, r0
 80134a6:	b1f0      	cbz	r0, 80134e6 <send_status+0x4e>
 80134a8:	462a      	mov	r2, r5
 80134aa:	491f      	ldr	r1, [pc, #124]	@ (8013528 <send_status+0x90>)
 80134ac:	f003 fc1e 	bl	8016cec <add_json_string_value>
 80134b0:	bb20      	cbnz	r0, 80134fc <send_status+0x64>
 80134b2:	4d1e      	ldr	r5, [pc, #120]	@ (801352c <send_status+0x94>)
 80134b4:	2000      	movs	r0, #0
 80134b6:	4b1e      	ldr	r3, [pc, #120]	@ (8013530 <send_status+0x98>)
 80134b8:	692f      	ldr	r7, [r5, #16]
 80134ba:	4a1e      	ldr	r2, [pc, #120]	@ (8013534 <send_status+0x9c>)
 80134bc:	491e      	ldr	r1, [pc, #120]	@ (8013538 <send_status+0xa0>)
 80134be:	47b8      	blx	r7
 80134c0:	b1d6      	cbz	r6, 80134f8 <send_status+0x60>
 80134c2:	4632      	mov	r2, r6
 80134c4:	491d      	ldr	r1, [pc, #116]	@ (801353c <send_status+0xa4>)
 80134c6:	4620      	mov	r0, r4
 80134c8:	f003 fc10 	bl	8016cec <add_json_string_value>
 80134cc:	b9a0      	cbnz	r0, 80134f8 <send_status+0x60>
 80134ce:	2000      	movs	r0, #0
 80134d0:	692e      	ldr	r6, [r5, #16]
 80134d2:	4b17      	ldr	r3, [pc, #92]	@ (8013530 <send_status+0x98>)
 80134d4:	4a17      	ldr	r2, [pc, #92]	@ (8013534 <send_status+0x9c>)
 80134d6:	4605      	mov	r5, r0
 80134d8:	4917      	ldr	r1, [pc, #92]	@ (8013538 <send_status+0xa0>)
 80134da:	47b0      	blx	r6
 80134dc:	4620      	mov	r0, r4
 80134de:	f002 ffb3 	bl	8016448 <cJSON_Delete>
 80134e2:	4628      	mov	r0, r5
 80134e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134e6:	4a11      	ldr	r2, [pc, #68]	@ (801352c <send_status+0x94>)
 80134e8:	4605      	mov	r5, r0
 80134ea:	4b15      	ldr	r3, [pc, #84]	@ (8013540 <send_status+0xa8>)
 80134ec:	6914      	ldr	r4, [r2, #16]
 80134ee:	4912      	ldr	r1, [pc, #72]	@ (8013538 <send_status+0xa0>)
 80134f0:	4a10      	ldr	r2, [pc, #64]	@ (8013534 <send_status+0x9c>)
 80134f2:	47a0      	blx	r4
 80134f4:	4628      	mov	r0, r5
 80134f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f8:	2500      	movs	r5, #0
 80134fa:	e7ef      	b.n	80134dc <send_status+0x44>
 80134fc:	2200      	movs	r2, #0
 80134fe:	4911      	ldr	r1, [pc, #68]	@ (8013544 <send_status+0xac>)
 8013500:	4620      	mov	r0, r4
 8013502:	f003 fbdb 	bl	8016cbc <add_json_int_value>
 8013506:	2800      	cmp	r0, #0
 8013508:	d0d3      	beq.n	80134b2 <send_status+0x1a>
 801350a:	b13e      	cbz	r6, 801351c <send_status+0x84>
 801350c:	4632      	mov	r2, r6
 801350e:	490b      	ldr	r1, [pc, #44]	@ (801353c <send_status+0xa4>)
 8013510:	4620      	mov	r0, r4
 8013512:	f003 fbeb 	bl	8016cec <add_json_string_value>
 8013516:	b908      	cbnz	r0, 801351c <send_status+0x84>
 8013518:	4d04      	ldr	r5, [pc, #16]	@ (801352c <send_status+0x94>)
 801351a:	e7d8      	b.n	80134ce <send_status+0x36>
 801351c:	4638      	mov	r0, r7
 801351e:	4621      	mov	r1, r4
 8013520:	f7ff ffa6 	bl	8013470 <acc_exploration_server_write_json>
 8013524:	4605      	mov	r5, r0
 8013526:	e7d9      	b.n	80134dc <send_status+0x44>
 8013528:	0802077c 	.word	0x0802077c
 801352c:	24003210 	.word	0x24003210
 8013530:	08020cf4 	.word	0x08020cf4
 8013534:	0801b688 	.word	0x0801b688
 8013538:	08020784 	.word	0x08020784
 801353c:	080207ac 	.word	0x080207ac
 8013540:	08020ce0 	.word	0x08020ce0
 8013544:	0802079c 	.word	0x0802079c

08013548 <send_error>:
 8013548:	4b08      	ldr	r3, [pc, #32]	@ (801356c <send_error+0x24>)
 801354a:	4a09      	ldr	r2, [pc, #36]	@ (8013570 <send_error+0x28>)
 801354c:	b570      	push	{r4, r5, r6, lr}
 801354e:	4605      	mov	r5, r0
 8013550:	460c      	mov	r4, r1
 8013552:	691e      	ldr	r6, [r3, #16]
 8013554:	2000      	movs	r0, #0
 8013556:	460b      	mov	r3, r1
 8013558:	4906      	ldr	r1, [pc, #24]	@ (8013574 <send_error+0x2c>)
 801355a:	47b0      	blx	r6
 801355c:	4622      	mov	r2, r4
 801355e:	4628      	mov	r0, r5
 8013560:	4905      	ldr	r1, [pc, #20]	@ (8013578 <send_error+0x30>)
 8013562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013566:	f7ff bf97 	b.w	8013498 <send_status>
 801356a:	bf00      	nop
 801356c:	24003210 	.word	0x24003210
 8013570:	080207b4 	.word	0x080207b4
 8013574:	08020784 	.word	0x08020784
 8013578:	08021244 	.word	0x08021244

0801357c <acc_exploration_server_process>:
 801357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013580:	fab2 f482 	clz	r4, r2
 8013584:	0964      	lsrs	r4, r4, #5
 8013586:	ed2d 8b02 	vpush	{d8}
 801358a:	2900      	cmp	r1, #0
 801358c:	bf08      	it	eq
 801358e:	2401      	moveq	r4, #1
 8013590:	b099      	sub	sp, #100	@ 0x64
 8013592:	9200      	str	r2, [sp, #0]
 8013594:	b134      	cbz	r4, 80135a4 <acc_exploration_server_process+0x28>
 8013596:	2400      	movs	r4, #0
 8013598:	4620      	mov	r0, r4
 801359a:	b019      	add	sp, #100	@ 0x64
 801359c:	ecbd 8b02 	vpop	{d8}
 80135a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135a4:	4ba6      	ldr	r3, [pc, #664]	@ (8013840 <acc_exploration_server_process+0x2c4>)
 80135a6:	4688      	mov	r8, r1
 80135a8:	700c      	strb	r4, [r1, #0]
 80135aa:	4683      	mov	fp, r0
 80135ac:	881e      	ldrh	r6, [r3, #0]
 80135ae:	6014      	str	r4, [r2, #0]
 80135b0:	9406      	str	r4, [sp, #24]
 80135b2:	b33e      	cbz	r6, 8013604 <acc_exploration_server_process+0x88>
 80135b4:	4ba3      	ldr	r3, [pc, #652]	@ (8013844 <acc_exploration_server_process+0x2c8>)
 80135b6:	2501      	movs	r5, #1
 80135b8:	46a4      	mov	ip, r4
 80135ba:	46a2      	mov	sl, r4
 80135bc:	681a      	ldr	r2, [r3, #0]
 80135be:	4ba2      	ldr	r3, [pc, #648]	@ (8013848 <acc_exploration_server_process+0x2cc>)
 80135c0:	18b0      	adds	r0, r6, r2
 80135c2:	eba5 0902 	sub.w	r9, r5, r2
 80135c6:	f8b3 e000 	ldrh.w	lr, [r3]
 80135ca:	4613      	mov	r3, r2
 80135cc:	e00e      	b.n	80135ec <acc_exploration_server_process+0x70>
 80135ce:	290a      	cmp	r1, #10
 80135d0:	d022      	beq.n	8013618 <acc_exploration_server_process+0x9c>
 80135d2:	42b7      	cmp	r7, r6
 80135d4:	d107      	bne.n	80135e6 <acc_exploration_server_process+0x6a>
 80135d6:	2500      	movs	r5, #0
 80135d8:	499c      	ldr	r1, [pc, #624]	@ (801384c <acc_exploration_server_process+0x2d0>)
 80135da:	f04f 0c01 	mov.w	ip, #1
 80135de:	46ae      	mov	lr, r5
 80135e0:	9106      	str	r1, [sp, #24]
 80135e2:	f883 a000 	strb.w	sl, [r3]
 80135e6:	3301      	adds	r3, #1
 80135e8:	4298      	cmp	r0, r3
 80135ea:	d004      	beq.n	80135f6 <acc_exploration_server_process+0x7a>
 80135ec:	7819      	ldrb	r1, [r3, #0]
 80135ee:	eb09 0703 	add.w	r7, r9, r3
 80135f2:	2900      	cmp	r1, #0
 80135f4:	d1eb      	bne.n	80135ce <acc_exploration_server_process+0x52>
 80135f6:	f1bc 0f00 	cmp.w	ip, #0
 80135fa:	d002      	beq.n	8013602 <acc_exploration_server_process+0x86>
 80135fc:	4b92      	ldr	r3, [pc, #584]	@ (8013848 <acc_exploration_server_process+0x2cc>)
 80135fe:	f8a3 e000 	strh.w	lr, [r3]
 8013602:	b30d      	cbz	r5, 8013648 <acc_exploration_server_process+0xcc>
 8013604:	4d92      	ldr	r5, [pc, #584]	@ (8013850 <acc_exploration_server_process+0x2d4>)
 8013606:	782b      	ldrb	r3, [r5, #0]
 8013608:	bb63      	cbnz	r3, 8013664 <acc_exploration_server_process+0xe8>
 801360a:	2401      	movs	r4, #1
 801360c:	4620      	mov	r0, r4
 801360e:	b019      	add	sp, #100	@ 0x64
 8013610:	ecbd 8b02 	vpop	{d8}
 8013614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013618:	2100      	movs	r1, #0
 801361a:	1e56      	subs	r6, r2, #1
 801361c:	3801      	subs	r0, #1
 801361e:	f1c2 0201 	rsb	r2, r2, #1
 8013622:	7019      	strb	r1, [r3, #0]
 8013624:	4b88      	ldr	r3, [pc, #544]	@ (8013848 <acc_exploration_server_process+0x2cc>)
 8013626:	8019      	strh	r1, [r3, #0]
 8013628:	1997      	adds	r7, r2, r6
 801362a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 801362e:	b11b      	cbz	r3, 8013638 <acc_exploration_server_process+0xbc>
 8013630:	2b7b      	cmp	r3, #123	@ 0x7b
 8013632:	d060      	beq.n	80136f6 <acc_exploration_server_process+0x17a>
 8013634:	42b0      	cmp	r0, r6
 8013636:	d1f7      	bne.n	8013628 <acc_exploration_server_process+0xac>
 8013638:	4b86      	ldr	r3, [pc, #536]	@ (8013854 <acc_exploration_server_process+0x2d8>)
 801363a:	2000      	movs	r0, #0
 801363c:	4a86      	ldr	r2, [pc, #536]	@ (8013858 <acc_exploration_server_process+0x2dc>)
 801363e:	691b      	ldr	r3, [r3, #16]
 8013640:	4986      	ldr	r1, [pc, #536]	@ (801385c <acc_exploration_server_process+0x2e0>)
 8013642:	4798      	blx	r3
 8013644:	2d00      	cmp	r5, #0
 8013646:	d1dd      	bne.n	8013604 <acc_exploration_server_process+0x88>
 8013648:	4d81      	ldr	r5, [pc, #516]	@ (8013850 <acc_exploration_server_process+0x2d4>)
 801364a:	f8db 0000 	ldr.w	r0, [fp]
 801364e:	9906      	ldr	r1, [sp, #24]
 8013650:	f7ff ff7a 	bl	8013548 <send_error>
 8013654:	2300      	movs	r3, #0
 8013656:	4620      	mov	r0, r4
 8013658:	702b      	strb	r3, [r5, #0]
 801365a:	b019      	add	sp, #100	@ 0x64
 801365c:	ecbd 8b02 	vpop	{d8}
 8013660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013664:	4f7e      	ldr	r7, [pc, #504]	@ (8013860 <acc_exploration_server_process+0x2e4>)
 8013666:	2301      	movs	r3, #1
 8013668:	f897 9000 	ldrb.w	r9, [r7]
 801366c:	f888 3000 	strb.w	r3, [r8]
 8013670:	f1b9 0f00 	cmp.w	r9, #0
 8013674:	f040 80cf 	bne.w	8013816 <acc_exploration_server_process+0x29a>
 8013678:	4e7a      	ldr	r6, [pc, #488]	@ (8013864 <acc_exploration_server_process+0x2e8>)
 801367a:	6833      	ldr	r3, [r6, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	f300 80b4 	bgt.w	80137ea <acc_exploration_server_process+0x26e>
 8013682:	4b79      	ldr	r3, [pc, #484]	@ (8013868 <acc_exploration_server_process+0x2ec>)
 8013684:	a906      	add	r1, sp, #24
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	bf14      	ite	ne
 801368c:	4658      	movne	r0, fp
 801368e:	2000      	moveq	r0, #0
 8013690:	f001 f966 	bl	8014960 <acc_exploration_server_system_read_data_frames>
 8013694:	4606      	mov	r6, r0
 8013696:	2800      	cmp	r0, #0
 8013698:	f000 8104 	beq.w	80138a4 <acc_exploration_server_process+0x328>
 801369c:	4a73      	ldr	r2, [pc, #460]	@ (801386c <acc_exploration_server_process+0x2f0>)
 801369e:	6813      	ldr	r3, [r2, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f040 8182 	bne.w	80139aa <acc_exploration_server_process+0x42e>
 80136a6:	4e6f      	ldr	r6, [pc, #444]	@ (8013864 <acc_exploration_server_process+0x2e8>)
 80136a8:	4b71      	ldr	r3, [pc, #452]	@ (8013870 <acc_exploration_server_process+0x2f4>)
 80136aa:	6832      	ldr	r2, [r6, #0]
 80136ac:	f8d3 a000 	ldr.w	sl, [r3]
 80136b0:	9201      	str	r2, [sp, #4]
 80136b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80136b6:	4798      	blx	r3
 80136b8:	9b01      	ldr	r3, [sp, #4]
 80136ba:	6832      	ldr	r2, [r6, #0]
 80136bc:	1a18      	subs	r0, r3, r0
 80136be:	4450      	add	r0, sl
 80136c0:	4290      	cmp	r0, r2
 80136c2:	bfac      	ite	ge
 80136c4:	2100      	movge	r1, #0
 80136c6:	2101      	movlt	r1, #1
 80136c8:	2800      	cmp	r0, #0
 80136ca:	bfd8      	it	le
 80136cc:	2100      	movle	r1, #0
 80136ce:	b111      	cbz	r1, 80136d6 <acc_exploration_server_process+0x15a>
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	f300 81aa 	bgt.w	8013a2a <acc_exploration_server_process+0x4ae>
 80136d6:	2300      	movs	r3, #0
 80136d8:	9a00      	ldr	r2, [sp, #0]
 80136da:	6013      	str	r3, [r2, #0]
 80136dc:	2c00      	cmp	r4, #0
 80136de:	d094      	beq.n	801360a <acc_exploration_server_process+0x8e>
 80136e0:	2600      	movs	r6, #0
 80136e2:	f8db 0000 	ldr.w	r0, [fp]
 80136e6:	4a63      	ldr	r2, [pc, #396]	@ (8013874 <acc_exploration_server_process+0x2f8>)
 80136e8:	4963      	ldr	r1, [pc, #396]	@ (8013878 <acc_exploration_server_process+0x2fc>)
 80136ea:	702e      	strb	r6, [r5, #0]
 80136ec:	f7ff fed4 	bl	8013498 <send_status>
 80136f0:	f888 6000 	strb.w	r6, [r8]
 80136f4:	e750      	b.n	8013598 <acc_exploration_server_process+0x1c>
 80136f6:	2f00      	cmp	r7, #0
 80136f8:	d163      	bne.n	80137c2 <acc_exploration_server_process+0x246>
 80136fa:	2d00      	cmp	r5, #0
 80136fc:	d0a4      	beq.n	8013648 <acc_exploration_server_process+0xcc>
 80136fe:	4b51      	ldr	r3, [pc, #324]	@ (8013844 <acc_exploration_server_process+0x2c8>)
 8013700:	6818      	ldr	r0, [r3, #0]
 8013702:	f003 f91f 	bl	8016944 <cJSON_Parse>
 8013706:	4681      	mov	r9, r0
 8013708:	2800      	cmp	r0, #0
 801370a:	f000 80e3 	beq.w	80138d4 <acc_exploration_server_process+0x358>
 801370e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013712:	b103      	cbz	r3, 8013716 <acc_exploration_server_process+0x19a>
 8013714:	4798      	blx	r3
 8013716:	2300      	movs	r3, #0
 8013718:	aa07      	add	r2, sp, #28
 801371a:	4958      	ldr	r1, [pc, #352]	@ (801387c <acc_exploration_server_process+0x300>)
 801371c:	4648      	mov	r0, r9
 801371e:	9307      	str	r3, [sp, #28]
 8013720:	f003 fa9a 	bl	8016c58 <get_json_string_value>
 8013724:	2800      	cmp	r0, #0
 8013726:	d17e      	bne.n	8013826 <acc_exploration_server_process+0x2aa>
 8013728:	9f07      	ldr	r7, [sp, #28]
 801372a:	2f00      	cmp	r7, #0
 801372c:	f000 8138 	beq.w	80139a0 <acc_exploration_server_process+0x424>
 8013730:	4953      	ldr	r1, [pc, #332]	@ (8013880 <acc_exploration_server_process+0x304>)
 8013732:	4638      	mov	r0, r7
 8013734:	f7ec fdd4 	bl	80002e0 <strcmp>
 8013738:	4606      	mov	r6, r0
 801373a:	2800      	cmp	r0, #0
 801373c:	f000 80f8 	beq.w	8013930 <acc_exploration_server_process+0x3b4>
 8013740:	4950      	ldr	r1, [pc, #320]	@ (8013884 <acc_exploration_server_process+0x308>)
 8013742:	4638      	mov	r0, r7
 8013744:	f7ec fdcc 	bl	80002e0 <strcmp>
 8013748:	4606      	mov	r6, r0
 801374a:	2800      	cmp	r0, #0
 801374c:	f000 8159 	beq.w	8013a02 <acc_exploration_server_process+0x486>
 8013750:	494d      	ldr	r1, [pc, #308]	@ (8013888 <acc_exploration_server_process+0x30c>)
 8013752:	4638      	mov	r0, r7
 8013754:	f7ec fdc4 	bl	80002e0 <strcmp>
 8013758:	2800      	cmp	r0, #0
 801375a:	f040 80ce 	bne.w	80138fa <acc_exploration_server_process+0x37e>
 801375e:	4d3c      	ldr	r5, [pc, #240]	@ (8013850 <acc_exploration_server_process+0x2d4>)
 8013760:	782b      	ldrb	r3, [r5, #0]
 8013762:	2b00      	cmp	r3, #0
 8013764:	f040 8164 	bne.w	8013a30 <acc_exploration_server_process+0x4b4>
 8013768:	2101      	movs	r1, #1
 801376a:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 8013860 <acc_exploration_server_process+0x2e4>
 801376e:	4e3e      	ldr	r6, [pc, #248]	@ (8013868 <acc_exploration_server_process+0x2ec>)
 8013770:	aa08      	add	r2, sp, #32
 8013772:	4f3e      	ldr	r7, [pc, #248]	@ (801386c <acc_exploration_server_process+0x2f0>)
 8013774:	4648      	mov	r0, r9
 8013776:	f88c 1000 	strb.w	r1, [ip]
 801377a:	7031      	strb	r1, [r6, #0]
 801377c:	4943      	ldr	r1, [pc, #268]	@ (801388c <acc_exploration_server_process+0x310>)
 801377e:	9308      	str	r3, [sp, #32]
 8013780:	603b      	str	r3, [r7, #0]
 8013782:	f003 fa31 	bl	8016be8 <get_json_int_value>
 8013786:	b118      	cbz	r0, 8013790 <acc_exploration_server_process+0x214>
 8013788:	9b08      	ldr	r3, [sp, #32]
 801378a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801378e:	603b      	str	r3, [r7, #0]
 8013790:	f10d 0217 	add.w	r2, sp, #23
 8013794:	493e      	ldr	r1, [pc, #248]	@ (8013890 <acc_exploration_server_process+0x314>)
 8013796:	4648      	mov	r0, r9
 8013798:	f003 fa4a 	bl	8016c30 <get_json_bool_value>
 801379c:	b110      	cbz	r0, 80137a4 <acc_exploration_server_process+0x228>
 801379e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80137a2:	7033      	strb	r3, [r6, #0]
 80137a4:	2301      	movs	r3, #1
 80137a6:	4a3b      	ldr	r2, [pc, #236]	@ (8013894 <acc_exploration_server_process+0x318>)
 80137a8:	493b      	ldr	r1, [pc, #236]	@ (8013898 <acc_exploration_server_process+0x31c>)
 80137aa:	f8db 0000 	ldr.w	r0, [fp]
 80137ae:	702b      	strb	r3, [r5, #0]
 80137b0:	f7ff fe72 	bl	8013498 <send_status>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	f040 8120 	bne.w	80139fa <acc_exploration_server_process+0x47e>
 80137ba:	4648      	mov	r0, r9
 80137bc:	f002 fe44 	bl	8016448 <cJSON_Delete>
 80137c0:	e748      	b.n	8013654 <acc_exploration_server_process+0xd8>
 80137c2:	4e24      	ldr	r6, [pc, #144]	@ (8013854 <acc_exploration_server_process+0x2d8>)
 80137c4:	2000      	movs	r0, #0
 80137c6:	4a35      	ldr	r2, [pc, #212]	@ (801389c <acc_exploration_server_process+0x320>)
 80137c8:	6933      	ldr	r3, [r6, #16]
 80137ca:	4924      	ldr	r1, [pc, #144]	@ (801385c <acc_exploration_server_process+0x2e0>)
 80137cc:	4798      	blx	r3
 80137ce:	4b1d      	ldr	r3, [pc, #116]	@ (8013844 <acc_exploration_server_process+0x2c8>)
 80137d0:	681e      	ldr	r6, [r3, #0]
 80137d2:	19f1      	adds	r1, r6, r7
 80137d4:	4608      	mov	r0, r1
 80137d6:	9101      	str	r1, [sp, #4]
 80137d8:	f7ec fde2 	bl	80003a0 <strlen>
 80137dc:	4602      	mov	r2, r0
 80137de:	9901      	ldr	r1, [sp, #4]
 80137e0:	4630      	mov	r0, r6
 80137e2:	3201      	adds	r2, #1
 80137e4:	f005 f866 	bl	80188b4 <memmove>
 80137e8:	e787      	b.n	80136fa <acc_exploration_server_process+0x17e>
 80137ea:	f001 fffd 	bl	80157e8 <acc_exploration_server_system_is_on_demand>
 80137ee:	b170      	cbz	r0, 801380e <acc_exploration_server_process+0x292>
 80137f0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80137f4:	4798      	blx	r3
 80137f6:	4a1e      	ldr	r2, [pc, #120]	@ (8013870 <acc_exploration_server_process+0x2f4>)
 80137f8:	6833      	ldr	r3, [r6, #0]
 80137fa:	f8d2 a000 	ldr.w	sl, [r2]
 80137fe:	9301      	str	r3, [sp, #4]
 8013800:	eba0 000a 	sub.w	r0, r0, sl
 8013804:	4298      	cmp	r0, r3
 8013806:	f2c0 8159 	blt.w	8013abc <acc_exploration_server_process+0x540>
 801380a:	4453      	add	r3, sl
 801380c:	6013      	str	r3, [r2, #0]
 801380e:	783b      	ldrb	r3, [r7, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	f43f af36 	beq.w	8013682 <acc_exploration_server_process+0x106>
 8013816:	f8db 3010 	ldr.w	r3, [fp, #16]
 801381a:	4798      	blx	r3
 801381c:	4a14      	ldr	r2, [pc, #80]	@ (8013870 <acc_exploration_server_process+0x2f4>)
 801381e:	2300      	movs	r3, #0
 8013820:	6010      	str	r0, [r2, #0]
 8013822:	703b      	strb	r3, [r7, #0]
 8013824:	e72d      	b.n	8013682 <acc_exploration_server_process+0x106>
 8013826:	f7fb fdad 	bl	800f384 <acc_rss_integration_log_level>
 801382a:	2801      	cmp	r0, #1
 801382c:	f67f af7c 	bls.w	8013728 <acc_exploration_server_process+0x1ac>
 8013830:	4e08      	ldr	r6, [pc, #32]	@ (8013854 <acc_exploration_server_process+0x2d8>)
 8013832:	2002      	movs	r0, #2
 8013834:	9b07      	ldr	r3, [sp, #28]
 8013836:	6936      	ldr	r6, [r6, #16]
 8013838:	4a19      	ldr	r2, [pc, #100]	@ (80138a0 <acc_exploration_server_process+0x324>)
 801383a:	4908      	ldr	r1, [pc, #32]	@ (801385c <acc_exploration_server_process+0x2e0>)
 801383c:	47b0      	blx	r6
 801383e:	e773      	b.n	8013728 <acc_exploration_server_process+0x1ac>
 8013840:	24003060 	.word	0x24003060
 8013844:	2400305c 	.word	0x2400305c
 8013848:	24003062 	.word	0x24003062
 801384c:	08020ad0 	.word	0x08020ad0
 8013850:	2400306c 	.word	0x2400306c
 8013854:	24003210 	.word	0x24003210
 8013858:	08020a34 	.word	0x08020a34
 801385c:	08020784 	.word	0x08020784
 8013860:	24003054 	.word	0x24003054
 8013864:	24003074 	.word	0x24003074
 8013868:	240001b4 	.word	0x240001b4
 801386c:	24003070 	.word	0x24003070
 8013870:	24003064 	.word	0x24003064
 8013874:	0802093c 	.word	0x0802093c
 8013878:	0802094c 	.word	0x0802094c
 801387c:	0801c298 	.word	0x0801c298
 8013880:	0802080c 	.word	0x0802080c
 8013884:	08020880 	.word	0x08020880
 8013888:	0802089c 	.word	0x0802089c
 801388c:	080208ac 	.word	0x080208ac
 8013890:	080208b8 	.word	0x080208b8
 8013894:	080208c4 	.word	0x080208c4
 8013898:	0801bd38 	.word	0x0801bd38
 801389c:	080207d4 	.word	0x080207d4
 80138a0:	080207fc 	.word	0x080207fc
 80138a4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80138a8:	4798      	blx	r3
 80138aa:	9b00      	ldr	r3, [sp, #0]
 80138ac:	601e      	str	r6, [r3, #0]
 80138ae:	f000 fe3b 	bl	8014528 <acc_exploration_server_system_destroy_session>
 80138b2:	9906      	ldr	r1, [sp, #24]
 80138b4:	f8db 0000 	ldr.w	r0, [fp]
 80138b8:	f7ff fe46 	bl	8013548 <send_error>
 80138bc:	4607      	mov	r7, r0
 80138be:	b9c0      	cbnz	r0, 80138f2 <acc_exploration_server_process+0x376>
 80138c0:	f8db 0000 	ldr.w	r0, [fp]
 80138c4:	4a9a      	ldr	r2, [pc, #616]	@ (8013b30 <acc_exploration_server_process+0x5b4>)
 80138c6:	499b      	ldr	r1, [pc, #620]	@ (8013b34 <acc_exploration_server_process+0x5b8>)
 80138c8:	702f      	strb	r7, [r5, #0]
 80138ca:	f7ff fde5 	bl	8013498 <send_status>
 80138ce:	f888 7000 	strb.w	r7, [r8]
 80138d2:	e6bf      	b.n	8013654 <acc_exploration_server_process+0xd8>
 80138d4:	4998      	ldr	r1, [pc, #608]	@ (8013b38 <acc_exploration_server_process+0x5bc>)
 80138d6:	f8db 0000 	ldr.w	r0, [fp]
 80138da:	f7ff fe35 	bl	8013548 <send_error>
 80138de:	f8db 3004 	ldr.w	r3, [fp, #4]
 80138e2:	4606      	mov	r6, r0
 80138e4:	b103      	cbz	r3, 80138e8 <acc_exploration_server_process+0x36c>
 80138e6:	4798      	blx	r3
 80138e8:	4d94      	ldr	r5, [pc, #592]	@ (8013b3c <acc_exploration_server_process+0x5c0>)
 80138ea:	2e00      	cmp	r6, #0
 80138ec:	f47f ae8b 	bne.w	8013606 <acc_exploration_server_process+0x8a>
 80138f0:	e6b0      	b.n	8013654 <acc_exploration_server_process+0xd8>
 80138f2:	f8db 0000 	ldr.w	r0, [fp]
 80138f6:	463c      	mov	r4, r7
 80138f8:	e6f5      	b.n	80136e6 <acc_exploration_server_process+0x16a>
 80138fa:	4991      	ldr	r1, [pc, #580]	@ (8013b40 <acc_exploration_server_process+0x5c4>)
 80138fc:	4638      	mov	r0, r7
 80138fe:	f005 f80d 	bl	801891c <strstr>
 8013902:	4606      	mov	r6, r0
 8013904:	2800      	cmp	r0, #0
 8013906:	d063      	beq.n	80139d0 <acc_exploration_server_process+0x454>
 8013908:	4d8c      	ldr	r5, [pc, #560]	@ (8013b3c <acc_exploration_server_process+0x5c0>)
 801390a:	2300      	movs	r3, #0
 801390c:	782e      	ldrb	r6, [r5, #0]
 801390e:	9308      	str	r3, [sp, #32]
 8013910:	2e00      	cmp	r6, #0
 8013912:	f000 8095 	beq.w	8013a40 <acc_exploration_server_process+0x4c4>
 8013916:	498b      	ldr	r1, [pc, #556]	@ (8013b44 <acc_exploration_server_process+0x5c8>)
 8013918:	f8db 0000 	ldr.w	r0, [fp]
 801391c:	f7ff fe14 	bl	8013548 <send_error>
 8013920:	4606      	mov	r6, r0
 8013922:	4648      	mov	r0, r9
 8013924:	f002 fd90 	bl	8016448 <cJSON_Delete>
 8013928:	2e00      	cmp	r6, #0
 801392a:	f47f ae6c 	bne.w	8013606 <acc_exploration_server_process+0x8a>
 801392e:	e691      	b.n	8013654 <acc_exploration_server_process+0xd8>
 8013930:	f003 f918 	bl	8016b64 <cJSON_CreateObject>
 8013934:	4607      	mov	r7, r0
 8013936:	2800      	cmp	r0, #0
 8013938:	d043      	beq.n	80139c2 <acc_exploration_server_process+0x446>
 801393a:	4a83      	ldr	r2, [pc, #524]	@ (8013b48 <acc_exploration_server_process+0x5cc>)
 801393c:	4983      	ldr	r1, [pc, #524]	@ (8013b4c <acc_exploration_server_process+0x5d0>)
 801393e:	f003 f9d5 	bl	8016cec <add_json_string_value>
 8013942:	2800      	cmp	r0, #0
 8013944:	f040 8126 	bne.w	8013b94 <acc_exploration_server_process+0x618>
 8013948:	4a81      	ldr	r2, [pc, #516]	@ (8013b50 <acc_exploration_server_process+0x5d4>)
 801394a:	2000      	movs	r0, #0
 801394c:	4b81      	ldr	r3, [pc, #516]	@ (8013b54 <acc_exploration_server_process+0x5d8>)
 801394e:	6915      	ldr	r5, [r2, #16]
 8013950:	4981      	ldr	r1, [pc, #516]	@ (8013b58 <acc_exploration_server_process+0x5dc>)
 8013952:	4a82      	ldr	r2, [pc, #520]	@ (8013b5c <acc_exploration_server_process+0x5e0>)
 8013954:	47a8      	blx	r5
 8013956:	4638      	mov	r0, r7
 8013958:	f002 fd76 	bl	8016448 <cJSON_Delete>
 801395c:	4648      	mov	r0, r9
 801395e:	4d77      	ldr	r5, [pc, #476]	@ (8013b3c <acc_exploration_server_process+0x5c0>)
 8013960:	f002 fd72 	bl	8016448 <cJSON_Delete>
 8013964:	e676      	b.n	8013654 <acc_exploration_server_process+0xd8>
 8013966:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801396a:	ee18 0a10 	vmov	r0, s16
 801396e:	4631      	mov	r1, r6
 8013970:	2b00      	cmp	r3, #0
 8013972:	f040 81a4 	bne.w	8013cbe <acc_exploration_server_process+0x742>
 8013976:	f002 fff1 	bl	801695c <cJSON_AddItemToArray>
 801397a:	f8da 3000 	ldr.w	r3, [sl]
 801397e:	429d      	cmp	r5, r3
 8013980:	f0c0 8172 	bcc.w	8013c68 <acc_exploration_server_process+0x6ec>
 8013984:	4644      	mov	r4, r8
 8013986:	e9dd b802 	ldrd	fp, r8, [sp, #8]
 801398a:	4639      	mov	r1, r7
 801398c:	f8db 0000 	ldr.w	r0, [fp]
 8013990:	f7ff fd6e 	bl	8013470 <acc_exploration_server_write_json>
 8013994:	4605      	mov	r5, r0
 8013996:	4638      	mov	r0, r7
 8013998:	f002 fd56 	bl	8016448 <cJSON_Delete>
 801399c:	2d00      	cmp	r5, #0
 801399e:	d0dd      	beq.n	801395c <acc_exploration_server_process+0x3e0>
 80139a0:	4648      	mov	r0, r9
 80139a2:	4d66      	ldr	r5, [pc, #408]	@ (8013b3c <acc_exploration_server_process+0x5c0>)
 80139a4:	f002 fd50 	bl	8016448 <cJSON_Delete>
 80139a8:	e62d      	b.n	8013606 <acc_exploration_server_process+0x8a>
 80139aa:	3b01      	subs	r3, #1
 80139ac:	4e6c      	ldr	r6, [pc, #432]	@ (8013b60 <acc_exploration_server_process+0x5e4>)
 80139ae:	496d      	ldr	r1, [pc, #436]	@ (8013b64 <acc_exploration_server_process+0x5e8>)
 80139b0:	fab3 f483 	clz	r4, r3
 80139b4:	6013      	str	r3, [r2, #0]
 80139b6:	6833      	ldr	r3, [r6, #0]
 80139b8:	0964      	lsrs	r4, r4, #5
 80139ba:	f8d1 a000 	ldr.w	sl, [r1]
 80139be:	9301      	str	r3, [sp, #4]
 80139c0:	e677      	b.n	80136b2 <acc_exploration_server_process+0x136>
 80139c2:	4a63      	ldr	r2, [pc, #396]	@ (8013b50 <acc_exploration_server_process+0x5d4>)
 80139c4:	4b68      	ldr	r3, [pc, #416]	@ (8013b68 <acc_exploration_server_process+0x5ec>)
 80139c6:	6915      	ldr	r5, [r2, #16]
 80139c8:	4963      	ldr	r1, [pc, #396]	@ (8013b58 <acc_exploration_server_process+0x5dc>)
 80139ca:	4a64      	ldr	r2, [pc, #400]	@ (8013b5c <acc_exploration_server_process+0x5e0>)
 80139cc:	47a8      	blx	r5
 80139ce:	e7c5      	b.n	801395c <acc_exploration_server_process+0x3e0>
 80139d0:	4966      	ldr	r1, [pc, #408]	@ (8013b6c <acc_exploration_server_process+0x5f0>)
 80139d2:	4638      	mov	r0, r7
 80139d4:	f7ec fc84 	bl	80002e0 <strcmp>
 80139d8:	2800      	cmp	r0, #0
 80139da:	d15d      	bne.n	8013a98 <acc_exploration_server_process+0x51c>
 80139dc:	4d57      	ldr	r5, [pc, #348]	@ (8013b3c <acc_exploration_server_process+0x5c0>)
 80139de:	782b      	ldrb	r3, [r5, #0]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f000 8190 	beq.w	8013d06 <acc_exploration_server_process+0x78a>
 80139e6:	7028      	strb	r0, [r5, #0]
 80139e8:	4a51      	ldr	r2, [pc, #324]	@ (8013b30 <acc_exploration_server_process+0x5b4>)
 80139ea:	4952      	ldr	r1, [pc, #328]	@ (8013b34 <acc_exploration_server_process+0x5b8>)
 80139ec:	f8db 0000 	ldr.w	r0, [fp]
 80139f0:	f7ff fd52 	bl	8013498 <send_status>
 80139f4:	2800      	cmp	r0, #0
 80139f6:	f43f aee0 	beq.w	80137ba <acc_exploration_server_process+0x23e>
 80139fa:	4648      	mov	r0, r9
 80139fc:	f002 fd24 	bl	8016448 <cJSON_Delete>
 8013a00:	e601      	b.n	8013606 <acc_exploration_server_process+0x8a>
 8013a02:	f003 f8af 	bl	8016b64 <cJSON_CreateObject>
 8013a06:	4607      	mov	r7, r0
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d0da      	beq.n	80139c2 <acc_exploration_server_process+0x446>
 8013a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8013b48 <acc_exploration_server_process+0x5cc>)
 8013a0e:	494f      	ldr	r1, [pc, #316]	@ (8013b4c <acc_exploration_server_process+0x5d0>)
 8013a10:	f003 f96c 	bl	8016cec <add_json_string_value>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	f040 8109 	bne.w	8013c2c <acc_exploration_server_process+0x6b0>
 8013a1a:	4a4d      	ldr	r2, [pc, #308]	@ (8013b50 <acc_exploration_server_process+0x5d4>)
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	4b4d      	ldr	r3, [pc, #308]	@ (8013b54 <acc_exploration_server_process+0x5d8>)
 8013a20:	6915      	ldr	r5, [r2, #16]
 8013a22:	494d      	ldr	r1, [pc, #308]	@ (8013b58 <acc_exploration_server_process+0x5dc>)
 8013a24:	4a4d      	ldr	r2, [pc, #308]	@ (8013b5c <acc_exploration_server_process+0x5e0>)
 8013a26:	47a8      	blx	r5
 8013a28:	e795      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013a2a:	9b00      	ldr	r3, [sp, #0]
 8013a2c:	6018      	str	r0, [r3, #0]
 8013a2e:	e655      	b.n	80136dc <acc_exploration_server_process+0x160>
 8013a30:	494f      	ldr	r1, [pc, #316]	@ (8013b70 <acc_exploration_server_process+0x5f4>)
 8013a32:	f8db 0000 	ldr.w	r0, [fp]
 8013a36:	f7ff fd87 	bl	8013548 <send_error>
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	d1dd      	bne.n	80139fa <acc_exploration_server_process+0x47e>
 8013a3e:	e6bc      	b.n	80137ba <acc_exploration_server_process+0x23e>
 8013a40:	4f4c      	ldr	r7, [pc, #304]	@ (8013b74 <acc_exploration_server_process+0x5f8>)
 8013a42:	f000 fd71 	bl	8014528 <acc_exploration_server_system_destroy_session>
 8013a46:	aa08      	add	r2, sp, #32
 8013a48:	4648      	mov	r0, r9
 8013a4a:	4639      	mov	r1, r7
 8013a4c:	f001 f9d0 	bl	8014df0 <acc_exploration_server_system_parse_configuration>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	f000 814f 	beq.w	8013cf4 <acc_exploration_server_process+0x778>
 8013a56:	ed97 7a00 	vldr	s14, [r7]
 8013a5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a62:	f340 814e 	ble.w	8013d02 <acc_exploration_server_process+0x786>
 8013a66:	eddb 7a05 	vldr	s15, [fp, #20]
 8013a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a76:	ee17 1a90 	vmov	r1, s15
 8013a7a:	4b39      	ldr	r3, [pc, #228]	@ (8013b60 <acc_exploration_server_process+0x5e4>)
 8013a7c:	f8db 0000 	ldr.w	r0, [fp]
 8013a80:	6019      	str	r1, [r3, #0]
 8013a82:	f000 fdbb 	bl	80145fc <acc_exploration_server_system_send_session_metadata>
 8013a86:	2800      	cmp	r0, #0
 8013a88:	d1b7      	bne.n	80139fa <acc_exploration_server_process+0x47e>
 8013a8a:	493b      	ldr	r1, [pc, #236]	@ (8013b78 <acc_exploration_server_process+0x5fc>)
 8013a8c:	f8db 0000 	ldr.w	r0, [fp]
 8013a90:	f7ff fd5a 	bl	8013548 <send_error>
 8013a94:	4606      	mov	r6, r0
 8013a96:	e744      	b.n	8013922 <acc_exploration_server_process+0x3a6>
 8013a98:	4938      	ldr	r1, [pc, #224]	@ (8013b7c <acc_exploration_server_process+0x600>)
 8013a9a:	4638      	mov	r0, r7
 8013a9c:	f7ec fc20 	bl	80002e0 <strcmp>
 8013aa0:	b9e0      	cbnz	r0, 8013adc <acc_exploration_server_process+0x560>
 8013aa2:	4d26      	ldr	r5, [pc, #152]	@ (8013b3c <acc_exploration_server_process+0x5c0>)
 8013aa4:	782b      	ldrb	r3, [r5, #0]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f000 8180 	beq.w	8013dac <acc_exploration_server_process+0x830>
 8013aac:	4934      	ldr	r1, [pc, #208]	@ (8013b80 <acc_exploration_server_process+0x604>)
 8013aae:	f8db 0000 	ldr.w	r0, [fp]
 8013ab2:	f7ff fd49 	bl	8013548 <send_error>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d19f      	bne.n	80139fa <acc_exploration_server_process+0x47e>
 8013aba:	e67e      	b.n	80137ba <acc_exploration_server_process+0x23e>
 8013abc:	783c      	ldrb	r4, [r7, #0]
 8013abe:	2c00      	cmp	r4, #0
 8013ac0:	f43f adf7 	beq.w	80136b2 <acc_exploration_server_process+0x136>
 8013ac4:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013ac8:	464c      	mov	r4, r9
 8013aca:	4798      	blx	r3
 8013acc:	6833      	ldr	r3, [r6, #0]
 8013ace:	4a25      	ldr	r2, [pc, #148]	@ (8013b64 <acc_exploration_server_process+0x5e8>)
 8013ad0:	4682      	mov	sl, r0
 8013ad2:	f887 9000 	strb.w	r9, [r7]
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	6010      	str	r0, [r2, #0]
 8013ada:	e5ea      	b.n	80136b2 <acc_exploration_server_process+0x136>
 8013adc:	4929      	ldr	r1, [pc, #164]	@ (8013b84 <acc_exploration_server_process+0x608>)
 8013ade:	4638      	mov	r0, r7
 8013ae0:	f7ec fbfe 	bl	80002e0 <strcmp>
 8013ae4:	b1b0      	cbz	r0, 8013b14 <acc_exploration_server_process+0x598>
 8013ae6:	4928      	ldr	r1, [pc, #160]	@ (8013b88 <acc_exploration_server_process+0x60c>)
 8013ae8:	4638      	mov	r0, r7
 8013aea:	f7ec fbf9 	bl	80002e0 <strcmp>
 8013aee:	2800      	cmp	r0, #0
 8013af0:	f000 8173 	beq.w	8013dda <acc_exploration_server_process+0x85e>
 8013af4:	4916      	ldr	r1, [pc, #88]	@ (8013b50 <acc_exploration_server_process+0x5d4>)
 8013af6:	4630      	mov	r0, r6
 8013af8:	463b      	mov	r3, r7
 8013afa:	4a24      	ldr	r2, [pc, #144]	@ (8013b8c <acc_exploration_server_process+0x610>)
 8013afc:	690d      	ldr	r5, [r1, #16]
 8013afe:	4916      	ldr	r1, [pc, #88]	@ (8013b58 <acc_exploration_server_process+0x5dc>)
 8013b00:	47a8      	blx	r5
 8013b02:	4923      	ldr	r1, [pc, #140]	@ (8013b90 <acc_exploration_server_process+0x614>)
 8013b04:	f8db 0000 	ldr.w	r0, [fp]
 8013b08:	f7ff fd1e 	bl	8013548 <send_error>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	f47f af47 	bne.w	80139a0 <acc_exploration_server_process+0x424>
 8013b12:	e723      	b.n	801395c <acc_exploration_server_process+0x3e0>
 8013b14:	462c      	mov	r4, r5
 8013b16:	4648      	mov	r0, r9
 8013b18:	f002 fc96 	bl	8016448 <cJSON_Delete>
 8013b1c:	2302      	movs	r3, #2
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f888 3000 	strb.w	r3, [r8]
 8013b24:	b019      	add	sp, #100	@ 0x64
 8013b26:	ecbd 8b02 	vpop	{d8}
 8013b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b2e:	bf00      	nop
 8013b30:	0802093c 	.word	0x0802093c
 8013b34:	0802094c 	.word	0x0802094c
 8013b38:	08020d08 	.word	0x08020d08
 8013b3c:	2400306c 	.word	0x2400306c
 8013b40:	080208ec 	.word	0x080208ec
 8013b44:	080208f4 	.word	0x080208f4
 8013b48:	0802081c 	.word	0x0802081c
 8013b4c:	0802077c 	.word	0x0802077c
 8013b50:	24003210 	.word	0x24003210
 8013b54:	08020cf4 	.word	0x08020cf4
 8013b58:	08020784 	.word	0x08020784
 8013b5c:	0801b688 	.word	0x0801b688
 8013b60:	24003074 	.word	0x24003074
 8013b64:	24003064 	.word	0x24003064
 8013b68:	08020ce0 	.word	0x08020ce0
 8013b6c:	08020918 	.word	0x08020918
 8013b70:	080208d8 	.word	0x080208d8
 8013b74:	240001b0 	.word	0x240001b0
 8013b78:	08020e10 	.word	0x08020e10
 8013b7c:	08020954 	.word	0x08020954
 8013b80:	08020968 	.word	0x08020968
 8013b84:	080209c0 	.word	0x080209c0
 8013b88:	080209d4 	.word	0x080209d4
 8013b8c:	08020a10 	.word	0x08020a10
 8013b90:	08020a24 	.word	0x08020a24
 8013b94:	4632      	mov	r2, r6
 8013b96:	49ad      	ldr	r1, [pc, #692]	@ (8013e4c <acc_exploration_server_process+0x8d0>)
 8013b98:	4638      	mov	r0, r7
 8013b9a:	f003 f88f 	bl	8016cbc <add_json_int_value>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	f43f aed2 	beq.w	8013948 <acc_exploration_server_process+0x3cc>
 8013ba4:	f002 ffde 	bl	8016b64 <cJSON_CreateObject>
 8013ba8:	4682      	mov	sl, r0
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d03b      	beq.n	8013c26 <acc_exploration_server_process+0x6aa>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	49a7      	ldr	r1, [pc, #668]	@ (8013e50 <acc_exploration_server_process+0x8d4>)
 8013bb2:	4638      	mov	r0, r7
 8013bb4:	f002 fedc 	bl	8016970 <cJSON_AddItemToObject>
 8013bb8:	f7fd ff1c 	bl	80119f4 <acc_version_get>
 8013bbc:	49a5      	ldr	r1, [pc, #660]	@ (8013e54 <acc_exploration_server_process+0x8d8>)
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	4650      	mov	r0, sl
 8013bc2:	f003 f893 	bl	8016cec <add_json_string_value>
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	f040 80a9 	bne.w	8013d1e <acc_exploration_server_process+0x7a2>
 8013bcc:	4ea2      	ldr	r6, [pc, #648]	@ (8013e58 <acc_exploration_server_process+0x8dc>)
 8013bce:	2000      	movs	r0, #0
 8013bd0:	4ba2      	ldr	r3, [pc, #648]	@ (8013e5c <acc_exploration_server_process+0x8e0>)
 8013bd2:	4aa3      	ldr	r2, [pc, #652]	@ (8013e60 <acc_exploration_server_process+0x8e4>)
 8013bd4:	6935      	ldr	r5, [r6, #16]
 8013bd6:	49a3      	ldr	r1, [pc, #652]	@ (8013e64 <acc_exploration_server_process+0x8e8>)
 8013bd8:	47a8      	blx	r5
 8013bda:	4ba3      	ldr	r3, [pc, #652]	@ (8013e68 <acc_exploration_server_process+0x8ec>)
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	b1ea      	cbz	r2, 8013c1c <acc_exploration_server_process+0x6a0>
 8013be0:	49a2      	ldr	r1, [pc, #648]	@ (8013e6c <acc_exploration_server_process+0x8f0>)
 8013be2:	4650      	mov	r0, sl
 8013be4:	f003 f882 	bl	8016cec <add_json_string_value>
 8013be8:	b9c0      	cbnz	r0, 8013c1c <acc_exploration_server_process+0x6a0>
 8013bea:	4a9d      	ldr	r2, [pc, #628]	@ (8013e60 <acc_exploration_server_process+0x8e4>)
 8013bec:	2000      	movs	r0, #0
 8013bee:	6935      	ldr	r5, [r6, #16]
 8013bf0:	4b9a      	ldr	r3, [pc, #616]	@ (8013e5c <acc_exploration_server_process+0x8e0>)
 8013bf2:	499c      	ldr	r1, [pc, #624]	@ (8013e64 <acc_exploration_server_process+0x8e8>)
 8013bf4:	47a8      	blx	r5
 8013bf6:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013bfa:	2a00      	cmp	r2, #0
 8013bfc:	f43f aeab 	beq.w	8013956 <acc_exploration_server_process+0x3da>
 8013c00:	4650      	mov	r0, sl
 8013c02:	499b      	ldr	r1, [pc, #620]	@ (8013e70 <acc_exploration_server_process+0x8f4>)
 8013c04:	f003 f85a 	bl	8016cbc <add_json_int_value>
 8013c08:	2800      	cmp	r0, #0
 8013c0a:	f47f aea4 	bne.w	8013956 <acc_exploration_server_process+0x3da>
 8013c0e:	6935      	ldr	r5, [r6, #16]
 8013c10:	2000      	movs	r0, #0
 8013c12:	4b92      	ldr	r3, [pc, #584]	@ (8013e5c <acc_exploration_server_process+0x8e0>)
 8013c14:	4a92      	ldr	r2, [pc, #584]	@ (8013e60 <acc_exploration_server_process+0x8e4>)
 8013c16:	4993      	ldr	r1, [pc, #588]	@ (8013e64 <acc_exploration_server_process+0x8e8>)
 8013c18:	47a8      	blx	r5
 8013c1a:	e69c      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013c1c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013c20:	2a00      	cmp	r2, #0
 8013c22:	d1ed      	bne.n	8013c00 <acc_exploration_server_process+0x684>
 8013c24:	e697      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013c26:	4a8c      	ldr	r2, [pc, #560]	@ (8013e58 <acc_exploration_server_process+0x8dc>)
 8013c28:	4b8c      	ldr	r3, [pc, #560]	@ (8013e5c <acc_exploration_server_process+0x8e0>)
 8013c2a:	e6f9      	b.n	8013a20 <acc_exploration_server_process+0x4a4>
 8013c2c:	4632      	mov	r2, r6
 8013c2e:	4987      	ldr	r1, [pc, #540]	@ (8013e4c <acc_exploration_server_process+0x8d0>)
 8013c30:	4638      	mov	r0, r7
 8013c32:	f003 f843 	bl	8016cbc <add_json_int_value>
 8013c36:	2800      	cmp	r0, #0
 8013c38:	f43f aeef 	beq.w	8013a1a <acc_exploration_server_process+0x49e>
 8013c3c:	f002 ff86 	bl	8016b4c <cJSON_CreateArray>
 8013c40:	ee08 0a10 	vmov	s16, r0
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d0ee      	beq.n	8013c26 <acc_exploration_server_process+0x6aa>
 8013c48:	f8df a240 	ldr.w	sl, [pc, #576]	@ 8013e8c <acc_exploration_server_process+0x910>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	4989      	ldr	r1, [pc, #548]	@ (8013e74 <acc_exploration_server_process+0x8f8>)
 8013c50:	4638      	mov	r0, r7
 8013c52:	f002 fe8d 	bl	8016970 <cJSON_AddItemToObject>
 8013c56:	f8da 3000 	ldr.w	r3, [sl]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f43f ae95 	beq.w	801398a <acc_exploration_server_process+0x40e>
 8013c60:	4635      	mov	r5, r6
 8013c62:	e9cd b802 	strd	fp, r8, [sp, #8]
 8013c66:	46a0      	mov	r8, r4
 8013c68:	f002 ff7c 	bl	8016b64 <cJSON_CreateObject>
 8013c6c:	3501      	adds	r5, #1
 8013c6e:	4606      	mov	r6, r0
 8013c70:	4628      	mov	r0, r5
 8013c72:	2e00      	cmp	r6, #0
 8013c74:	d034      	beq.n	8013ce0 <acc_exploration_server_process+0x764>
 8013c76:	f001 fdc9 	bl	801580c <acc_exploration_server_system_is_sensor_connected>
 8013c7a:	4683      	mov	fp, r0
 8013c7c:	497e      	ldr	r1, [pc, #504]	@ (8013e78 <acc_exploration_server_process+0x8fc>)
 8013c7e:	4630      	mov	r0, r6
 8013c80:	465a      	mov	r2, fp
 8013c82:	f003 f82b 	bl	8016cdc <add_json_bool_value>
 8013c86:	4604      	mov	r4, r0
 8013c88:	f1bb 0f00 	cmp.w	fp, #0
 8013c8c:	d01d      	beq.n	8013cca <acc_exploration_server_process+0x74e>
 8013c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8013e7c <acc_exploration_server_process+0x900>)
 8013c90:	2100      	movs	r1, #0
 8013c92:	2240      	movs	r2, #64	@ 0x40
 8013c94:	a808      	add	r0, sp, #32
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	9301      	str	r3, [sp, #4]
 8013c9a:	b1b3      	cbz	r3, 8013cca <acc_exploration_server_process+0x74e>
 8013c9c:	f004 fe24 	bl	80188e8 <memset>
 8013ca0:	aa08      	add	r2, sp, #32
 8013ca2:	2140      	movs	r1, #64	@ 0x40
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	9b01      	ldr	r3, [sp, #4]
 8013ca8:	4798      	blx	r3
 8013caa:	2c00      	cmp	r4, #0
 8013cac:	f47f ae5b 	bne.w	8013966 <acc_exploration_server_process+0x3ea>
 8013cb0:	4631      	mov	r1, r6
 8013cb2:	ee18 0a10 	vmov	r0, s16
 8013cb6:	4644      	mov	r4, r8
 8013cb8:	f002 fe50 	bl	801695c <cJSON_AddItemToArray>
 8013cbc:	e64b      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013cbe:	aa08      	add	r2, sp, #32
 8013cc0:	496f      	ldr	r1, [pc, #444]	@ (8013e80 <acc_exploration_server_process+0x904>)
 8013cc2:	4630      	mov	r0, r6
 8013cc4:	f003 f812 	bl	8016cec <add_json_string_value>
 8013cc8:	4604      	mov	r4, r0
 8013cca:	ee18 0a10 	vmov	r0, s16
 8013cce:	4631      	mov	r1, r6
 8013cd0:	f002 fe44 	bl	801695c <cJSON_AddItemToArray>
 8013cd4:	f8da 3000 	ldr.w	r3, [sl]
 8013cd8:	429d      	cmp	r5, r3
 8013cda:	d203      	bcs.n	8013ce4 <acc_exploration_server_process+0x768>
 8013cdc:	2c00      	cmp	r4, #0
 8013cde:	d1c3      	bne.n	8013c68 <acc_exploration_server_process+0x6ec>
 8013ce0:	4644      	mov	r4, r8
 8013ce2:	e638      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013ce4:	4623      	mov	r3, r4
 8013ce6:	4644      	mov	r4, r8
 8013ce8:	e9dd b802 	ldrd	fp, r8, [sp, #8]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	f47f ae4c 	bne.w	801398a <acc_exploration_server_process+0x40e>
 8013cf2:	e630      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013cf4:	9908      	ldr	r1, [sp, #32]
 8013cf6:	f8db 0000 	ldr.w	r0, [fp]
 8013cfa:	f7ff fc25 	bl	8013548 <send_error>
 8013cfe:	4606      	mov	r6, r0
 8013d00:	e60f      	b.n	8013922 <acc_exploration_server_process+0x3a6>
 8013d02:	4631      	mov	r1, r6
 8013d04:	e6b9      	b.n	8013a7a <acc_exploration_server_process+0x4fe>
 8013d06:	f7fb fb3d 	bl	800f384 <acc_rss_integration_log_level>
 8013d0a:	2801      	cmp	r0, #1
 8013d0c:	f67f ae6c 	bls.w	80139e8 <acc_exploration_server_process+0x46c>
 8013d10:	4b51      	ldr	r3, [pc, #324]	@ (8013e58 <acc_exploration_server_process+0x8dc>)
 8013d12:	2002      	movs	r0, #2
 8013d14:	4a5b      	ldr	r2, [pc, #364]	@ (8013e84 <acc_exploration_server_process+0x908>)
 8013d16:	691b      	ldr	r3, [r3, #16]
 8013d18:	4952      	ldr	r1, [pc, #328]	@ (8013e64 <acc_exploration_server_process+0x8e8>)
 8013d1a:	4798      	blx	r3
 8013d1c:	e664      	b.n	80139e8 <acc_exploration_server_process+0x46c>
 8013d1e:	f001 fd71 	bl	8015804 <acc_exploration_server_system_get_sensor_name>
 8013d22:	4959      	ldr	r1, [pc, #356]	@ (8013e88 <acc_exploration_server_process+0x90c>)
 8013d24:	4602      	mov	r2, r0
 8013d26:	4650      	mov	r0, sl
 8013d28:	f002 ffe0 	bl	8016cec <add_json_string_value>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	f43f af4d 	beq.w	8013bcc <acc_exploration_server_process+0x650>
 8013d32:	4b56      	ldr	r3, [pc, #344]	@ (8013e8c <acc_exploration_server_process+0x910>)
 8013d34:	4650      	mov	r0, sl
 8013d36:	4956      	ldr	r1, [pc, #344]	@ (8013e90 <acc_exploration_server_process+0x914>)
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	f002 ffbf 	bl	8016cbc <add_json_int_value>
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	f43f af44 	beq.w	8013bcc <acc_exploration_server_process+0x650>
 8013d44:	f8db 2014 	ldr.w	r2, [fp, #20]
 8013d48:	4650      	mov	r0, sl
 8013d4a:	4952      	ldr	r1, [pc, #328]	@ (8013e94 <acc_exploration_server_process+0x918>)
 8013d4c:	f002 ffb6 	bl	8016cbc <add_json_int_value>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	f43f af3b 	beq.w	8013bcc <acc_exploration_server_process+0x650>
 8013d56:	4b44      	ldr	r3, [pc, #272]	@ (8013e68 <acc_exploration_server_process+0x8ec>)
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	2a00      	cmp	r2, #0
 8013d5c:	f040 80d4 	bne.w	8013f08 <acc_exploration_server_process+0x98c>
 8013d60:	4b4d      	ldr	r3, [pc, #308]	@ (8013e98 <acc_exploration_server_process+0x91c>)
 8013d62:	681d      	ldr	r5, [r3, #0]
 8013d64:	b165      	cbz	r5, 8013d80 <acc_exploration_server_process+0x804>
 8013d66:	2240      	movs	r2, #64	@ 0x40
 8013d68:	2100      	movs	r1, #0
 8013d6a:	a808      	add	r0, sp, #32
 8013d6c:	f004 fdbc 	bl	80188e8 <memset>
 8013d70:	a908      	add	r1, sp, #32
 8013d72:	2040      	movs	r0, #64	@ 0x40
 8013d74:	47a8      	blx	r5
 8013d76:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	f040 80a2 	bne.w	8013ec4 <acc_exploration_server_process+0x948>
 8013d80:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013d84:	2a00      	cmp	r2, #0
 8013d86:	f040 80aa 	bne.w	8013ede <acc_exploration_server_process+0x962>
 8013d8a:	4b44      	ldr	r3, [pc, #272]	@ (8013e9c <acc_exploration_server_process+0x920>)
 8013d8c:	6818      	ldr	r0, [r3, #0]
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	f43f adfb 	beq.w	801398a <acc_exploration_server_process+0x40e>
 8013d94:	4651      	mov	r1, sl
 8013d96:	f7ff fb13 	bl	80133c0 <copy_json>
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	f47f adf5 	bne.w	801398a <acc_exploration_server_process+0x40e>
 8013da0:	4b2d      	ldr	r3, [pc, #180]	@ (8013e58 <acc_exploration_server_process+0x8dc>)
 8013da2:	4a3f      	ldr	r2, [pc, #252]	@ (8013ea0 <acc_exploration_server_process+0x924>)
 8013da4:	691b      	ldr	r3, [r3, #16]
 8013da6:	492f      	ldr	r1, [pc, #188]	@ (8013e64 <acc_exploration_server_process+0x8e8>)
 8013da8:	4798      	blx	r3
 8013daa:	e5d4      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013dac:	aa08      	add	r2, sp, #32
 8013dae:	493d      	ldr	r1, [pc, #244]	@ (8013ea4 <acc_exploration_server_process+0x928>)
 8013db0:	4648      	mov	r0, r9
 8013db2:	9308      	str	r3, [sp, #32]
 8013db4:	f002 ff18 	bl	8016be8 <get_json_int_value>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d032      	beq.n	8013e22 <acc_exploration_server_process+0x8a6>
 8013dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8013ea8 <acc_exploration_server_process+0x92c>)
 8013dbe:	493b      	ldr	r1, [pc, #236]	@ (8013eac <acc_exploration_server_process+0x930>)
 8013dc0:	f8db 0000 	ldr.w	r0, [fp]
 8013dc4:	f7ff fb68 	bl	8013498 <send_status>
 8013dc8:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013dcc:	4606      	mov	r6, r0
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	f43f ada7 	beq.w	8013922 <acc_exploration_server_process+0x3a6>
 8013dd4:	9808      	ldr	r0, [sp, #32]
 8013dd6:	4798      	blx	r3
 8013dd8:	e5a3      	b.n	8013922 <acc_exploration_server_process+0x3a6>
 8013dda:	4935      	ldr	r1, [pc, #212]	@ (8013eb0 <acc_exploration_server_process+0x934>)
 8013ddc:	4648      	mov	r0, r9
 8013dde:	f002 fdb9 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8013de2:	4605      	mov	r5, r0
 8013de4:	b320      	cbz	r0, 8013e30 <acc_exploration_server_process+0x8b4>
 8013de6:	f002 febd 	bl	8016b64 <cJSON_CreateObject>
 8013dea:	4601      	mov	r1, r0
 8013dec:	4628      	mov	r0, r5
 8013dee:	460d      	mov	r5, r1
 8013df0:	f7ff fae6 	bl	80133c0 <copy_json>
 8013df4:	2800      	cmp	r0, #0
 8013df6:	d07a      	beq.n	8013eee <acc_exploration_server_process+0x972>
 8013df8:	4e28      	ldr	r6, [pc, #160]	@ (8013e9c <acc_exploration_server_process+0x920>)
 8013dfa:	6830      	ldr	r0, [r6, #0]
 8013dfc:	b108      	cbz	r0, 8013e02 <acc_exploration_server_process+0x886>
 8013dfe:	f002 fb23 	bl	8016448 <cJSON_Delete>
 8013e02:	6035      	str	r5, [r6, #0]
 8013e04:	4a2b      	ldr	r2, [pc, #172]	@ (8013eb4 <acc_exploration_server_process+0x938>)
 8013e06:	4929      	ldr	r1, [pc, #164]	@ (8013eac <acc_exploration_server_process+0x930>)
 8013e08:	f8db 0000 	ldr.w	r0, [fp]
 8013e0c:	f7ff fb44 	bl	8013498 <send_status>
 8013e10:	4606      	mov	r6, r0
 8013e12:	4648      	mov	r0, r9
 8013e14:	4d28      	ldr	r5, [pc, #160]	@ (8013eb8 <acc_exploration_server_process+0x93c>)
 8013e16:	f002 fb17 	bl	8016448 <cJSON_Delete>
 8013e1a:	2e00      	cmp	r6, #0
 8013e1c:	f47f abf3 	bne.w	8013606 <acc_exploration_server_process+0x8a>
 8013e20:	e418      	b.n	8013654 <acc_exploration_server_process+0xd8>
 8013e22:	4926      	ldr	r1, [pc, #152]	@ (8013ebc <acc_exploration_server_process+0x940>)
 8013e24:	f8db 0000 	ldr.w	r0, [fp]
 8013e28:	f7ff fb8e 	bl	8013548 <send_error>
 8013e2c:	4606      	mov	r6, r0
 8013e2e:	e578      	b.n	8013922 <acc_exploration_server_process+0x3a6>
 8013e30:	4b09      	ldr	r3, [pc, #36]	@ (8013e58 <acc_exploration_server_process+0x8dc>)
 8013e32:	2000      	movs	r0, #0
 8013e34:	4a22      	ldr	r2, [pc, #136]	@ (8013ec0 <acc_exploration_server_process+0x944>)
 8013e36:	691b      	ldr	r3, [r3, #16]
 8013e38:	490a      	ldr	r1, [pc, #40]	@ (8013e64 <acc_exploration_server_process+0x8e8>)
 8013e3a:	4798      	blx	r3
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	f8db 0000 	ldr.w	r0, [fp]
 8013e42:	f7ff fb81 	bl	8013548 <send_error>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	d1dc      	bne.n	8013e04 <acc_exploration_server_process+0x888>
 8013e4a:	e587      	b.n	801395c <acc_exploration_server_process+0x3e0>
 8013e4c:	0802079c 	.word	0x0802079c
 8013e50:	08020810 	.word	0x08020810
 8013e54:	08020820 	.word	0x08020820
 8013e58:	24003210 	.word	0x24003210
 8013e5c:	08020ce0 	.word	0x08020ce0
 8013e60:	0801b688 	.word	0x0801b688
 8013e64:	08020784 	.word	0x08020784
 8013e68:	24003058 	.word	0x24003058
 8013e6c:	08020850 	.word	0x08020850
 8013e70:	0802085c 	.word	0x0802085c
 8013e74:	08020884 	.word	0x08020884
 8013e78:	08020890 	.word	0x08020890
 8013e7c:	24003048 	.word	0x24003048
 8013e80:	08020854 	.word	0x08020854
 8013e84:	08020928 	.word	0x08020928
 8013e88:	0801b8c4 	.word	0x0801b8c4
 8013e8c:	24003068 	.word	0x24003068
 8013e90:	0802082c 	.word	0x0802082c
 8013e94:	0802083c 	.word	0x0802083c
 8013e98:	2400304c 	.word	0x2400304c
 8013e9c:	24003050 	.word	0x24003050
 8013ea0:	0802086c 	.word	0x0802086c
 8013ea4:	080209b4 	.word	0x080209b4
 8013ea8:	08020990 	.word	0x08020990
 8013eac:	0802081c 	.word	0x0802081c
 8013eb0:	08021110 	.word	0x08021110
 8013eb4:	080209fc 	.word	0x080209fc
 8013eb8:	2400306c 	.word	0x2400306c
 8013ebc:	080209a0 	.word	0x080209a0
 8013ec0:	080209ec 	.word	0x080209ec
 8013ec4:	aa08      	add	r2, sp, #32
 8013ec6:	4915      	ldr	r1, [pc, #84]	@ (8013f1c <acc_exploration_server_process+0x9a0>)
 8013ec8:	4650      	mov	r0, sl
 8013eca:	f002 ff0f 	bl	8016cec <add_json_string_value>
 8013ece:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	b982      	cbnz	r2, 8013ef8 <acc_exploration_server_process+0x97c>
 8013ed6:	2d00      	cmp	r5, #0
 8013ed8:	f47f af57 	bne.w	8013d8a <acc_exploration_server_process+0x80e>
 8013edc:	e53b      	b.n	8013956 <acc_exploration_server_process+0x3da>
 8013ede:	4910      	ldr	r1, [pc, #64]	@ (8013f20 <acc_exploration_server_process+0x9a4>)
 8013ee0:	4650      	mov	r0, sl
 8013ee2:	f002 feeb 	bl	8016cbc <add_json_int_value>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	f47f af4f 	bne.w	8013d8a <acc_exploration_server_process+0x80e>
 8013eec:	e00a      	b.n	8013f04 <acc_exploration_server_process+0x988>
 8013eee:	4628      	mov	r0, r5
 8013ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8013f24 <acc_exploration_server_process+0x9a8>)
 8013ef2:	f002 faa9 	bl	8016448 <cJSON_Delete>
 8013ef6:	e7a1      	b.n	8013e3c <acc_exploration_server_process+0x8c0>
 8013ef8:	4909      	ldr	r1, [pc, #36]	@ (8013f20 <acc_exploration_server_process+0x9a4>)
 8013efa:	4650      	mov	r0, sl
 8013efc:	f002 fede 	bl	8016cbc <add_json_int_value>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d1e8      	bne.n	8013ed6 <acc_exploration_server_process+0x95a>
 8013f04:	4e08      	ldr	r6, [pc, #32]	@ (8013f28 <acc_exploration_server_process+0x9ac>)
 8013f06:	e682      	b.n	8013c0e <acc_exploration_server_process+0x692>
 8013f08:	4908      	ldr	r1, [pc, #32]	@ (8013f2c <acc_exploration_server_process+0x9b0>)
 8013f0a:	4650      	mov	r0, sl
 8013f0c:	f002 feee 	bl	8016cec <add_json_string_value>
 8013f10:	2800      	cmp	r0, #0
 8013f12:	f47f af25 	bne.w	8013d60 <acc_exploration_server_process+0x7e4>
 8013f16:	4e04      	ldr	r6, [pc, #16]	@ (8013f28 <acc_exploration_server_process+0x9ac>)
 8013f18:	e667      	b.n	8013bea <acc_exploration_server_process+0x66e>
 8013f1a:	bf00      	nop
 8013f1c:	08020854 	.word	0x08020854
 8013f20:	0802085c 	.word	0x0802085c
 8013f24:	08020cd0 	.word	0x08020cd0
 8013f28:	24003210 	.word	0x24003210
 8013f2c:	08020850 	.word	0x08020850

08013f30 <acc_exploration_server_send_log>:
 8013f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f34:	460e      	mov	r6, r1
 8013f36:	4607      	mov	r7, r0
 8013f38:	4690      	mov	r8, r2
 8013f3a:	4699      	mov	r9, r3
 8013f3c:	f002 fe12 	bl	8016b64 <cJSON_CreateObject>
 8013f40:	2e04      	cmp	r6, #4
 8013f42:	4605      	mov	r5, r0
 8013f44:	bf8c      	ite	hi
 8013f46:	2400      	movhi	r4, #0
 8013f48:	2401      	movls	r4, #1
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	bf08      	it	eq
 8013f4e:	2400      	moveq	r4, #0
 8013f50:	b194      	cbz	r4, 8013f78 <acc_exploration_server_send_log+0x48>
 8013f52:	4b20      	ldr	r3, [pc, #128]	@ (8013fd4 <acc_exploration_server_send_log+0xa4>)
 8013f54:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8013f58:	f001 fcf2 	bl	8015940 <acc_time_get>
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	4604      	mov	r4, r0
 8013f60:	491d      	ldr	r1, [pc, #116]	@ (8013fd8 <acc_exploration_server_send_log+0xa8>)
 8013f62:	4628      	mov	r0, r5
 8013f64:	f002 feaa 	bl	8016cbc <add_json_int_value>
 8013f68:	b958      	cbnz	r0, 8013f82 <acc_exploration_server_send_log+0x52>
 8013f6a:	2400      	movs	r4, #0
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	f002 fa6b 	bl	8016448 <cJSON_Delete>
 8013f72:	4620      	mov	r0, r4
 8013f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	d1f6      	bne.n	8013f6a <acc_exploration_server_send_log+0x3a>
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f82:	4a16      	ldr	r2, [pc, #88]	@ (8013fdc <acc_exploration_server_send_log+0xac>)
 8013f84:	4628      	mov	r0, r5
 8013f86:	4916      	ldr	r1, [pc, #88]	@ (8013fe0 <acc_exploration_server_send_log+0xb0>)
 8013f88:	f002 feb0 	bl	8016cec <add_json_string_value>
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d0ec      	beq.n	8013f6a <acc_exploration_server_send_log+0x3a>
 8013f90:	4622      	mov	r2, r4
 8013f92:	4914      	ldr	r1, [pc, #80]	@ (8013fe4 <acc_exploration_server_send_log+0xb4>)
 8013f94:	4628      	mov	r0, r5
 8013f96:	f002 fe81 	bl	8016c9c <add_json_uint32_value>
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d0e5      	beq.n	8013f6a <acc_exploration_server_send_log+0x3a>
 8013f9e:	4632      	mov	r2, r6
 8013fa0:	4911      	ldr	r1, [pc, #68]	@ (8013fe8 <acc_exploration_server_send_log+0xb8>)
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	f002 fea2 	bl	8016cec <add_json_string_value>
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	d0de      	beq.n	8013f6a <acc_exploration_server_send_log+0x3a>
 8013fac:	4642      	mov	r2, r8
 8013fae:	490f      	ldr	r1, [pc, #60]	@ (8013fec <acc_exploration_server_send_log+0xbc>)
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f002 fe9b 	bl	8016cec <add_json_string_value>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d0d7      	beq.n	8013f6a <acc_exploration_server_send_log+0x3a>
 8013fba:	464a      	mov	r2, r9
 8013fbc:	4907      	ldr	r1, [pc, #28]	@ (8013fdc <acc_exploration_server_send_log+0xac>)
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	f002 fe94 	bl	8016cec <add_json_string_value>
 8013fc4:	2800      	cmp	r0, #0
 8013fc6:	d0d0      	beq.n	8013f6a <acc_exploration_server_send_log+0x3a>
 8013fc8:	4638      	mov	r0, r7
 8013fca:	4629      	mov	r1, r5
 8013fcc:	f7ff fa50 	bl	8013470 <acc_exploration_server_write_json>
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	e7cb      	b.n	8013f6c <acc_exploration_server_send_log+0x3c>
 8013fd4:	08020aa8 	.word	0x08020aa8
 8013fd8:	0802079c 	.word	0x0802079c
 8013fdc:	08020a60 	.word	0x08020a60
 8013fe0:	0802077c 	.word	0x0802077c
 8013fe4:	08020a64 	.word	0x08020a64
 8013fe8:	08020a70 	.word	0x08020a70
 8013fec:	08020a78 	.word	0x08020a78

08013ff0 <set_tx_duration>:
 8013ff0:	b538      	push	{r3, r4, r5, lr}
 8013ff2:	460c      	mov	r4, r1
 8013ff4:	4605      	mov	r5, r0
 8013ff6:	4a04      	ldr	r2, [pc, #16]	@ (8014008 <set_tx_duration+0x18>)
 8013ff8:	2002      	movs	r0, #2
 8013ffa:	4904      	ldr	r1, [pc, #16]	@ (801400c <set_tx_duration+0x1c>)
 8013ffc:	4623      	mov	r3, r4
 8013ffe:	f7ee f8f3 	bl	80021e8 <acc_integration_log>
 8014002:	f8a5 404e 	strh.w	r4, [r5, #78]	@ 0x4e
 8014006:	bd38      	pop	{r3, r4, r5, pc}
 8014008:	08020e50 	.word	0x08020e50
 801400c:	08020e84 	.word	0x08020e84

08014010 <set_rx_duration>:
 8014010:	b538      	push	{r3, r4, r5, lr}
 8014012:	460c      	mov	r4, r1
 8014014:	4605      	mov	r5, r0
 8014016:	4a04      	ldr	r2, [pc, #16]	@ (8014028 <set_rx_duration+0x18>)
 8014018:	2002      	movs	r0, #2
 801401a:	4904      	ldr	r1, [pc, #16]	@ (801402c <set_rx_duration+0x1c>)
 801401c:	4623      	mov	r3, r4
 801401e:	f7ee f8e3 	bl	80021e8 <acc_integration_log>
 8014022:	f8a5 4050 	strh.w	r4, [r5, #80]	@ 0x50
 8014026:	bd38      	pop	{r3, r4, r5, pc}
 8014028:	08020ea4 	.word	0x08020ea4
 801402c:	08020e84 	.word	0x08020e84

08014030 <set_integrator_ctrl>:
 8014030:	b538      	push	{r3, r4, r5, lr}
 8014032:	460c      	mov	r4, r1
 8014034:	4605      	mov	r5, r0
 8014036:	4a04      	ldr	r2, [pc, #16]	@ (8014048 <set_integrator_ctrl+0x18>)
 8014038:	2002      	movs	r0, #2
 801403a:	4904      	ldr	r1, [pc, #16]	@ (801404c <set_integrator_ctrl+0x1c>)
 801403c:	4623      	mov	r3, r4
 801403e:	f7ee f8d3 	bl	80021e8 <acc_integration_log>
 8014042:	f8a5 4070 	strh.w	r4, [r5, #112]	@ 0x70
 8014046:	bd38      	pop	{r3, r4, r5, pc}
 8014048:	08020ed8 	.word	0x08020ed8
 801404c:	08020e84 	.word	0x08020e84

08014050 <set_integration_repeats>:
 8014050:	b538      	push	{r3, r4, r5, lr}
 8014052:	460c      	mov	r4, r1
 8014054:	4605      	mov	r5, r0
 8014056:	4a04      	ldr	r2, [pc, #16]	@ (8014068 <set_integration_repeats+0x18>)
 8014058:	2002      	movs	r0, #2
 801405a:	4904      	ldr	r1, [pc, #16]	@ (801406c <set_integration_repeats+0x1c>)
 801405c:	4623      	mov	r3, r4
 801405e:	f7ee f8c3 	bl	80021e8 <acc_integration_log>
 8014062:	f8a5 406e 	strh.w	r4, [r5, #110]	@ 0x6e
 8014066:	bd38      	pop	{r3, r4, r5, pc}
 8014068:	08020f10 	.word	0x08020f10
 801406c:	08020e84 	.word	0x08020e84

08014070 <set_rx_freq_ctrl>:
 8014070:	b538      	push	{r3, r4, r5, lr}
 8014072:	460c      	mov	r4, r1
 8014074:	4605      	mov	r5, r0
 8014076:	4a04      	ldr	r2, [pc, #16]	@ (8014088 <set_rx_freq_ctrl+0x18>)
 8014078:	2002      	movs	r0, #2
 801407a:	4904      	ldr	r1, [pc, #16]	@ (801408c <set_rx_freq_ctrl+0x1c>)
 801407c:	4623      	mov	r3, r4
 801407e:	f7ee f8b3 	bl	80021e8 <acc_integration_log>
 8014082:	822c      	strh	r4, [r5, #16]
 8014084:	bd38      	pop	{r3, r4, r5, pc}
 8014086:	bf00      	nop
 8014088:	08020f4c 	.word	0x08020f4c
 801408c:	08020e84 	.word	0x08020e84

08014090 <set_tx_freq_ctrl>:
 8014090:	b538      	push	{r3, r4, r5, lr}
 8014092:	460c      	mov	r4, r1
 8014094:	4605      	mov	r5, r0
 8014096:	4a04      	ldr	r2, [pc, #16]	@ (80140a8 <set_tx_freq_ctrl+0x18>)
 8014098:	2002      	movs	r0, #2
 801409a:	4904      	ldr	r1, [pc, #16]	@ (80140ac <set_tx_freq_ctrl+0x1c>)
 801409c:	4623      	mov	r3, r4
 801409e:	f7ee f8a3 	bl	80021e8 <acc_integration_log>
 80140a2:	826c      	strh	r4, [r5, #18]
 80140a4:	bd38      	pop	{r3, r4, r5, pc}
 80140a6:	bf00      	nop
 80140a8:	08020f80 	.word	0x08020f80
 80140ac:	08020e84 	.word	0x08020e84

080140b0 <parse_subsweep_config>:
 80140b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140b4:	b085      	sub	sp, #20
 80140b6:	460e      	mov	r6, r1
 80140b8:	4617      	mov	r7, r2
 80140ba:	497b      	ldr	r1, [pc, #492]	@ (80142a8 <parse_subsweep_config+0x1f8>)
 80140bc:	aa02      	add	r2, sp, #8
 80140be:	4698      	mov	r8, r3
 80140c0:	4604      	mov	r4, r0
 80140c2:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80140c6:	f002 fd8f 	bl	8016be8 <get_json_int_value>
 80140ca:	4605      	mov	r5, r0
 80140cc:	2800      	cmp	r0, #0
 80140ce:	f040 80bb 	bne.w	8014248 <parse_subsweep_config+0x198>
 80140d2:	aa02      	add	r2, sp, #8
 80140d4:	4975      	ldr	r1, [pc, #468]	@ (80142ac <parse_subsweep_config+0x1fc>)
 80140d6:	4620      	mov	r0, r4
 80140d8:	f002 fd86 	bl	8016be8 <get_json_int_value>
 80140dc:	2800      	cmp	r0, #0
 80140de:	f040 80ab 	bne.w	8014238 <parse_subsweep_config+0x188>
 80140e2:	aa02      	add	r2, sp, #8
 80140e4:	4972      	ldr	r1, [pc, #456]	@ (80142b0 <parse_subsweep_config+0x200>)
 80140e6:	4620      	mov	r0, r4
 80140e8:	f002 fd7e 	bl	8016be8 <get_json_int_value>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	f040 809b 	bne.w	8014228 <parse_subsweep_config+0x178>
 80140f2:	aa02      	add	r2, sp, #8
 80140f4:	496f      	ldr	r1, [pc, #444]	@ (80142b4 <parse_subsweep_config+0x204>)
 80140f6:	4620      	mov	r0, r4
 80140f8:	f002 fd76 	bl	8016be8 <get_json_int_value>
 80140fc:	2800      	cmp	r0, #0
 80140fe:	f040 808b 	bne.w	8014218 <parse_subsweep_config+0x168>
 8014102:	aa02      	add	r2, sp, #8
 8014104:	496c      	ldr	r1, [pc, #432]	@ (80142b8 <parse_subsweep_config+0x208>)
 8014106:	4620      	mov	r0, r4
 8014108:	f002 fd6e 	bl	8016be8 <get_json_int_value>
 801410c:	2800      	cmp	r0, #0
 801410e:	d17b      	bne.n	8014208 <parse_subsweep_config+0x158>
 8014110:	aa02      	add	r2, sp, #8
 8014112:	496a      	ldr	r1, [pc, #424]	@ (80142bc <parse_subsweep_config+0x20c>)
 8014114:	4620      	mov	r0, r4
 8014116:	f002 fd67 	bl	8016be8 <get_json_int_value>
 801411a:	2800      	cmp	r0, #0
 801411c:	d16c      	bne.n	80141f8 <parse_subsweep_config+0x148>
 801411e:	4968      	ldr	r1, [pc, #416]	@ (80142c0 <parse_subsweep_config+0x210>)
 8014120:	4620      	mov	r0, r4
 8014122:	f10d 0207 	add.w	r2, sp, #7
 8014126:	f002 fd83 	bl	8016c30 <get_json_bool_value>
 801412a:	2800      	cmp	r0, #0
 801412c:	d15c      	bne.n	80141e8 <parse_subsweep_config+0x138>
 801412e:	f10d 0207 	add.w	r2, sp, #7
 8014132:	4964      	ldr	r1, [pc, #400]	@ (80142c4 <parse_subsweep_config+0x214>)
 8014134:	4620      	mov	r0, r4
 8014136:	f002 fd7b 	bl	8016c30 <get_json_bool_value>
 801413a:	2800      	cmp	r0, #0
 801413c:	d14c      	bne.n	80141d8 <parse_subsweep_config+0x128>
 801413e:	f10d 0207 	add.w	r2, sp, #7
 8014142:	4961      	ldr	r1, [pc, #388]	@ (80142c8 <parse_subsweep_config+0x218>)
 8014144:	4620      	mov	r0, r4
 8014146:	f002 fd73 	bl	8016c30 <get_json_bool_value>
 801414a:	2800      	cmp	r0, #0
 801414c:	d13c      	bne.n	80141c8 <parse_subsweep_config+0x118>
 801414e:	4620      	mov	r0, r4
 8014150:	aa03      	add	r2, sp, #12
 8014152:	495e      	ldr	r1, [pc, #376]	@ (80142cc <parse_subsweep_config+0x21c>)
 8014154:	f002 fd80 	bl	8016c58 <get_json_string_value>
 8014158:	4604      	mov	r4, r0
 801415a:	2800      	cmp	r0, #0
 801415c:	d032      	beq.n	80141c4 <parse_subsweep_config+0x114>
 801415e:	9d03      	ldr	r5, [sp, #12]
 8014160:	495b      	ldr	r1, [pc, #364]	@ (80142d0 <parse_subsweep_config+0x220>)
 8014162:	4628      	mov	r0, r5
 8014164:	f7ec f8bc 	bl	80002e0 <strcmp>
 8014168:	2800      	cmp	r0, #0
 801416a:	d073      	beq.n	8014254 <parse_subsweep_config+0x1a4>
 801416c:	4959      	ldr	r1, [pc, #356]	@ (80142d4 <parse_subsweep_config+0x224>)
 801416e:	4628      	mov	r0, r5
 8014170:	f7ec f8b6 	bl	80002e0 <strcmp>
 8014174:	2800      	cmp	r0, #0
 8014176:	d07b      	beq.n	8014270 <parse_subsweep_config+0x1c0>
 8014178:	4957      	ldr	r1, [pc, #348]	@ (80142d8 <parse_subsweep_config+0x228>)
 801417a:	4628      	mov	r0, r5
 801417c:	f7ec f8b0 	bl	80002e0 <strcmp>
 8014180:	2800      	cmp	r0, #0
 8014182:	d06e      	beq.n	8014262 <parse_subsweep_config+0x1b2>
 8014184:	4955      	ldr	r1, [pc, #340]	@ (80142dc <parse_subsweep_config+0x22c>)
 8014186:	4628      	mov	r0, r5
 8014188:	f7ec f8aa 	bl	80002e0 <strcmp>
 801418c:	2800      	cmp	r0, #0
 801418e:	d07d      	beq.n	801428c <parse_subsweep_config+0x1dc>
 8014190:	4953      	ldr	r1, [pc, #332]	@ (80142e0 <parse_subsweep_config+0x230>)
 8014192:	4628      	mov	r0, r5
 8014194:	f7ec f8a4 	bl	80002e0 <strcmp>
 8014198:	2800      	cmp	r0, #0
 801419a:	d07e      	beq.n	801429a <parse_subsweep_config+0x1ea>
 801419c:	4628      	mov	r0, r5
 801419e:	4951      	ldr	r1, [pc, #324]	@ (80142e4 <parse_subsweep_config+0x234>)
 80141a0:	f7ec f89e 	bl	80002e0 <strcmp>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d06a      	beq.n	801427e <parse_subsweep_config+0x1ce>
 80141a8:	4b4f      	ldr	r3, [pc, #316]	@ (80142e8 <parse_subsweep_config+0x238>)
 80141aa:	4625      	mov	r5, r4
 80141ac:	2400      	movs	r4, #0
 80141ae:	f8c8 3000 	str.w	r3, [r8]
 80141b2:	f1b9 0f00 	cmp.w	r9, #0
 80141b6:	d001      	beq.n	80141bc <parse_subsweep_config+0x10c>
 80141b8:	f889 5000 	strb.w	r5, [r9]
 80141bc:	4620      	mov	r0, r4
 80141be:	b005      	add	sp, #20
 80141c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141c4:	2401      	movs	r4, #1
 80141c6:	e7f4      	b.n	80141b2 <parse_subsweep_config+0x102>
 80141c8:	4605      	mov	r5, r0
 80141ca:	463a      	mov	r2, r7
 80141cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80141d0:	4630      	mov	r0, r6
 80141d2:	f7f8 ff45 	bl	800d060 <acc_config_subsweep_phase_enhancement_set>
 80141d6:	e7ba      	b.n	801414e <parse_subsweep_config+0x9e>
 80141d8:	4605      	mov	r5, r0
 80141da:	463a      	mov	r2, r7
 80141dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80141e0:	4630      	mov	r0, r6
 80141e2:	f7f9 f863 	bl	800d2ac <acc_config_subsweep_enable_loopback_set>
 80141e6:	e7aa      	b.n	801413e <parse_subsweep_config+0x8e>
 80141e8:	4605      	mov	r5, r0
 80141ea:	463a      	mov	r2, r7
 80141ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80141f0:	4630      	mov	r0, r6
 80141f2:	f7f8 ff13 	bl	800d01c <acc_config_subsweep_enable_tx_set>
 80141f6:	e79a      	b.n	801412e <parse_subsweep_config+0x7e>
 80141f8:	4605      	mov	r5, r0
 80141fa:	463a      	mov	r2, r7
 80141fc:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8014200:	4630      	mov	r0, r6
 8014202:	f7f8 fee9 	bl	800cfd8 <acc_config_subsweep_receiver_gain_set>
 8014206:	e78a      	b.n	801411e <parse_subsweep_config+0x6e>
 8014208:	4605      	mov	r5, r0
 801420a:	463a      	mov	r2, r7
 801420c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014210:	4630      	mov	r0, r6
 8014212:	f7f8 febf 	bl	800cf94 <acc_config_subsweep_hwaas_set>
 8014216:	e77b      	b.n	8014110 <parse_subsweep_config+0x60>
 8014218:	4605      	mov	r5, r0
 801421a:	463a      	mov	r2, r7
 801421c:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8014220:	4630      	mov	r0, r6
 8014222:	f7f8 fe95 	bl	800cf50 <acc_config_subsweep_profile_set>
 8014226:	e76c      	b.n	8014102 <parse_subsweep_config+0x52>
 8014228:	4605      	mov	r5, r0
 801422a:	463a      	mov	r2, r7
 801422c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014230:	4630      	mov	r0, r6
 8014232:	f7f8 fe6b 	bl	800cf0c <acc_config_subsweep_step_length_set>
 8014236:	e75c      	b.n	80140f2 <parse_subsweep_config+0x42>
 8014238:	4605      	mov	r5, r0
 801423a:	463a      	mov	r2, r7
 801423c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014240:	4630      	mov	r0, r6
 8014242:	f7f8 fe41 	bl	800cec8 <acc_config_subsweep_num_points_set>
 8014246:	e74c      	b.n	80140e2 <parse_subsweep_config+0x32>
 8014248:	463a      	mov	r2, r7
 801424a:	9902      	ldr	r1, [sp, #8]
 801424c:	4630      	mov	r0, r6
 801424e:	f7f8 fe19 	bl	800ce84 <acc_config_subsweep_start_point_set>
 8014252:	e73e      	b.n	80140d2 <parse_subsweep_config+0x22>
 8014254:	4601      	mov	r1, r0
 8014256:	463a      	mov	r2, r7
 8014258:	4630      	mov	r0, r6
 801425a:	4625      	mov	r5, r4
 801425c:	f7f9 f848 	bl	800d2f0 <acc_config_subsweep_prf_set>
 8014260:	e7a7      	b.n	80141b2 <parse_subsweep_config+0x102>
 8014262:	463a      	mov	r2, r7
 8014264:	4630      	mov	r0, r6
 8014266:	2102      	movs	r1, #2
 8014268:	4625      	mov	r5, r4
 801426a:	f7f9 f841 	bl	800d2f0 <acc_config_subsweep_prf_set>
 801426e:	e7a0      	b.n	80141b2 <parse_subsweep_config+0x102>
 8014270:	463a      	mov	r2, r7
 8014272:	4630      	mov	r0, r6
 8014274:	2101      	movs	r1, #1
 8014276:	4625      	mov	r5, r4
 8014278:	f7f9 f83a 	bl	800d2f0 <acc_config_subsweep_prf_set>
 801427c:	e799      	b.n	80141b2 <parse_subsweep_config+0x102>
 801427e:	463a      	mov	r2, r7
 8014280:	4630      	mov	r0, r6
 8014282:	2105      	movs	r1, #5
 8014284:	4625      	mov	r5, r4
 8014286:	f7f9 f833 	bl	800d2f0 <acc_config_subsweep_prf_set>
 801428a:	e792      	b.n	80141b2 <parse_subsweep_config+0x102>
 801428c:	463a      	mov	r2, r7
 801428e:	4630      	mov	r0, r6
 8014290:	2103      	movs	r1, #3
 8014292:	4625      	mov	r5, r4
 8014294:	f7f9 f82c 	bl	800d2f0 <acc_config_subsweep_prf_set>
 8014298:	e78b      	b.n	80141b2 <parse_subsweep_config+0x102>
 801429a:	463a      	mov	r2, r7
 801429c:	4630      	mov	r0, r6
 801429e:	2104      	movs	r1, #4
 80142a0:	4625      	mov	r5, r4
 80142a2:	f7f9 f825 	bl	800d2f0 <acc_config_subsweep_prf_set>
 80142a6:	e784      	b.n	80141b2 <parse_subsweep_config+0x102>
 80142a8:	08020fb4 	.word	0x08020fb4
 80142ac:	0801c500 	.word	0x0801c500
 80142b0:	0801c4d8 	.word	0x0801c4d8
 80142b4:	0801c630 	.word	0x0801c630
 80142b8:	0801c5cc 	.word	0x0801c5cc
 80142bc:	0801c640 	.word	0x0801c640
 80142c0:	08020fc0 	.word	0x08020fc0
 80142c4:	08020fcc 	.word	0x08020fcc
 80142c8:	08020fdc 	.word	0x08020fdc
 80142cc:	0801c588 	.word	0x0801c588
 80142d0:	08020ff0 	.word	0x08020ff0
 80142d4:	08020ffc 	.word	0x08020ffc
 80142d8:	08021008 	.word	0x08021008
 80142dc:	08021014 	.word	0x08021014
 80142e0:	0802101c 	.word	0x0802101c
 80142e4:	08021024 	.word	0x08021024
 80142e8:	08020cbc 	.word	0x08020cbc

080142ec <acc_cpd_probes_callback>:
 80142ec:	7802      	ldrb	r2, [r0, #0]
 80142ee:	2a14      	cmp	r2, #20
 80142f0:	d001      	beq.n	80142f6 <acc_cpd_probes_callback+0xa>
 80142f2:	2001      	movs	r0, #1
 80142f4:	4770      	bx	lr
 80142f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142f8:	461e      	mov	r6, r3
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	b15b      	cbz	r3, 8014316 <acc_cpd_probes_callback+0x2a>
 80142fe:	460f      	mov	r7, r1
 8014300:	4635      	mov	r5, r6
 8014302:	2400      	movs	r4, #0
 8014304:	6869      	ldr	r1, [r5, #4]
 8014306:	4638      	mov	r0, r7
 8014308:	f855 3f08 	ldr.w	r3, [r5, #8]!
 801430c:	3401      	adds	r4, #1
 801430e:	4798      	blx	r3
 8014310:	6833      	ldr	r3, [r6, #0]
 8014312:	429c      	cmp	r4, r3
 8014314:	d3f6      	bcc.n	8014304 <acc_cpd_probes_callback+0x18>
 8014316:	2001      	movs	r0, #1
 8014318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801431a:	bf00      	nop

0801431c <group_item_sensor_wait_for_interrupt.isra.0.constprop.0>:
 801431c:	b570      	push	{r4, r5, r6, lr}
 801431e:	4604      	mov	r4, r0
 8014320:	6840      	ldr	r0, [r0, #4]
 8014322:	4e31      	ldr	r6, [pc, #196]	@ (80143e8 <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0xcc>)
 8014324:	ed2d 8b02 	vpush	{d8}
 8014328:	f7f8 ff02 	bl	800d130 <acc_config_sweep_rate_get>
 801432c:	eeb0 8a40 	vmov.f32	s16, s0
 8014330:	6860      	ldr	r0, [r4, #4]
 8014332:	f7f8 fecd 	bl	800d0d0 <acc_config_sweeps_per_frame_get>
 8014336:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433e:	dd47      	ble.n	80143d0 <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0xb4>
 8014340:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 8014344:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434c:	dd17      	ble.n	801437e <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0x62>
 801434e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80143ec <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0xd0>
 8014352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801435a:	ee17 1a90 	vmov	r1, s15
 801435e:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8014362:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436a:	dc0a      	bgt.n	8014382 <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0x66>
 801436c:	6820      	ldr	r0, [r4, #0]
 801436e:	f7ee f89f 	bl	80024b0 <acc_hal_integration_wait_for_sensor_interrupt>
 8014372:	4605      	mov	r5, r0
 8014374:	b1d0      	cbz	r0, 80143ac <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0x90>
 8014376:	4628      	mov	r0, r5
 8014378:	ecbd 8b02 	vpop	{d8}
 801437c:	bd70      	pop	{r4, r5, r6, pc}
 801437e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014386:	fb03 f000 	mul.w	r0, r3, r0
 801438a:	ee07 0a90 	vmov	s15, r0
 801438e:	6820      	ldr	r0, [r4, #0]
 8014390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014394:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8014398:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801439c:	ee17 3a10 	vmov	r3, s14
 80143a0:	4419      	add	r1, r3
 80143a2:	f7ee f885 	bl	80024b0 <acc_hal_integration_wait_for_sensor_interrupt>
 80143a6:	4605      	mov	r5, r0
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d1e4      	bne.n	8014376 <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0x5a>
 80143ac:	6823      	ldr	r3, [r4, #0]
 80143ae:	4a10      	ldr	r2, [pc, #64]	@ (80143f0 <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0xd4>)
 80143b0:	4910      	ldr	r1, [pc, #64]	@ (80143f4 <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0xd8>)
 80143b2:	f7ed ff19 	bl	80021e8 <acc_integration_log>
 80143b6:	6823      	ldr	r3, [r4, #0]
 80143b8:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 80143ba:	21c8      	movs	r1, #200	@ 0xc8
 80143bc:	fb01 2303 	mla	r3, r1, r3, r2
 80143c0:	f853 0cc8 	ldr.w	r0, [r3, #-200]
 80143c4:	f7f9 fa3e 	bl	800d844 <acc_sensor_status>
 80143c8:	4628      	mov	r0, r5
 80143ca:	ecbd 8b02 	vpop	{d8}
 80143ce:	bd70      	pop	{r4, r5, r6, pc}
 80143d0:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 80143d4:	ed94 8a09 	vldr	s16, [r4, #36]	@ 0x24
 80143d8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80143dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e0:	dcb5      	bgt.n	801434e <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0x32>
 80143e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80143e6:	e7bc      	b.n	8014362 <group_item_sensor_wait_for_interrupt.isra.0.constprop.0+0x46>
 80143e8:	24003078 	.word	0x24003078
 80143ec:	447a0000 	.word	0x447a0000
 80143f0:	0802102c 	.word	0x0802102c
 80143f4:	08020e84 	.word	0x08020e84

080143f8 <acc_exploration_server_system_init>:
 80143f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143fc:	4604      	mov	r4, r0
 80143fe:	4844      	ldr	r0, [pc, #272]	@ (8014510 <acc_exploration_server_system_init+0x118>)
 8014400:	460d      	mov	r5, r1
 8014402:	f001 fff1 	bl	80163e8 <cJSON_InitHooks>
 8014406:	f7ee f8ad 	bl	8002564 <acc_hal_rss_integration_get_implementation>
 801440a:	2800      	cmp	r0, #0
 801440c:	d077      	beq.n	80144fe <acc_exploration_server_system_init+0x106>
 801440e:	f7f8 fca3 	bl	800cd58 <acc_rss_hal_register>
 8014412:	4606      	mov	r6, r0
 8014414:	2800      	cmp	r0, #0
 8014416:	d06b      	beq.n	80144f0 <acc_exploration_server_system_init+0xf8>
 8014418:	4628      	mov	r0, r5
 801441a:	4d3e      	ldr	r5, [pc, #248]	@ (8014514 <acc_exploration_server_system_init+0x11c>)
 801441c:	f7f8 fcc0 	bl	800cda0 <acc_rss_set_log_level>
 8014420:	27c8      	movs	r7, #200	@ 0xc8
 8014422:	f7ee f897 	bl	8002554 <acc_hal_integration_sensor_count>
 8014426:	4603      	mov	r3, r0
 8014428:	2244      	movs	r2, #68	@ 0x44
 801442a:	2100      	movs	r1, #0
 801442c:	6023      	str	r3, [r4, #0]
 801442e:	4628      	mov	r0, r5
 8014430:	f004 fa5a 	bl	80188e8 <memset>
 8014434:	6823      	ldr	r3, [r4, #0]
 8014436:	fb07 f003 	mul.w	r0, r7, r3
 801443a:	e9c5 3300 	strd	r3, r3, [r5]
 801443e:	f7ee f93e 	bl	80026be <acc_integration_mem_alloc>
 8014442:	6328      	str	r0, [r5, #48]	@ 0x30
 8014444:	2800      	cmp	r0, #0
 8014446:	d04a      	beq.n	80144de <acc_exploration_server_system_init+0xe6>
 8014448:	682a      	ldr	r2, [r5, #0]
 801444a:	2100      	movs	r1, #0
 801444c:	fb07 f202 	mul.w	r2, r7, r2
 8014450:	f004 fa4a 	bl	80188e8 <memset>
 8014454:	6828      	ldr	r0, [r5, #0]
 8014456:	0080      	lsls	r0, r0, #2
 8014458:	f7ee f931 	bl	80026be <acc_integration_mem_alloc>
 801445c:	6368      	str	r0, [r5, #52]	@ 0x34
 801445e:	2800      	cmp	r0, #0
 8014460:	d03d      	beq.n	80144de <acc_exploration_server_system_init+0xe6>
 8014462:	682a      	ldr	r2, [r5, #0]
 8014464:	2100      	movs	r1, #0
 8014466:	0092      	lsls	r2, r2, #2
 8014468:	f004 fa3e 	bl	80188e8 <memset>
 801446c:	6828      	ldr	r0, [r5, #0]
 801446e:	f7ee f926 	bl	80026be <acc_integration_mem_alloc>
 8014472:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8014474:	b398      	cbz	r0, 80144de <acc_exploration_server_system_init+0xe6>
 8014476:	1d2c      	adds	r4, r5, #4
 8014478:	f105 072c 	add.w	r7, r5, #44	@ 0x2c
 801447c:	686b      	ldr	r3, [r5, #4]
 801447e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014482:	0098      	lsls	r0, r3, #2
 8014484:	f7ee f91b 	bl	80026be <acc_integration_mem_alloc>
 8014488:	2100      	movs	r1, #0
 801448a:	f844 0f04 	str.w	r0, [r4, #4]!
 801448e:	b330      	cbz	r0, 80144de <acc_exploration_server_system_init+0xe6>
 8014490:	686a      	ldr	r2, [r5, #4]
 8014492:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014496:	0092      	lsls	r2, r2, #2
 8014498:	f004 fa26 	bl	80188e8 <memset>
 801449c:	42bc      	cmp	r4, r7
 801449e:	d1ed      	bne.n	801447c <acc_exploration_server_system_init+0x84>
 80144a0:	682b      	ldr	r3, [r5, #0]
 80144a2:	b313      	cbz	r3, 80144ea <acc_exploration_server_system_init+0xf2>
 80144a4:	2400      	movs	r4, #0
 80144a6:	4627      	mov	r7, r4
 80144a8:	3401      	adds	r4, #1
 80144aa:	4620      	mov	r0, r4
 80144ac:	f7ed ff94 	bl	80023d8 <acc_hal_integration_sensor_supply_on>
 80144b0:	4620      	mov	r0, r4
 80144b2:	f7ed ffb1 	bl	8002418 <acc_hal_integration_sensor_enable>
 80144b6:	4620      	mov	r0, r4
 80144b8:	f8d5 803c 	ldr.w	r8, [r5, #60]	@ 0x3c
 80144bc:	f7f9 f9be 	bl	800d83c <acc_sensor_connected>
 80144c0:	4603      	mov	r3, r0
 80144c2:	4620      	mov	r0, r4
 80144c4:	f808 3007 	strb.w	r3, [r8, r7]
 80144c8:	f7ed ffcc 	bl	8002464 <acc_hal_integration_sensor_disable>
 80144cc:	4620      	mov	r0, r4
 80144ce:	f7ed ff93 	bl	80023f8 <acc_hal_integration_sensor_supply_off>
 80144d2:	682b      	ldr	r3, [r5, #0]
 80144d4:	429c      	cmp	r4, r3
 80144d6:	d3e6      	bcc.n	80144a6 <acc_exploration_server_system_init+0xae>
 80144d8:	4630      	mov	r0, r6
 80144da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144de:	2000      	movs	r0, #0
 80144e0:	4a0d      	ldr	r2, [pc, #52]	@ (8014518 <acc_exploration_server_system_init+0x120>)
 80144e2:	490e      	ldr	r1, [pc, #56]	@ (801451c <acc_exploration_server_system_init+0x124>)
 80144e4:	4606      	mov	r6, r0
 80144e6:	f7ed fe7f 	bl	80021e8 <acc_integration_log>
 80144ea:	4630      	mov	r0, r6
 80144ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f0:	4a0b      	ldr	r2, [pc, #44]	@ (8014520 <acc_exploration_server_system_init+0x128>)
 80144f2:	490a      	ldr	r1, [pc, #40]	@ (801451c <acc_exploration_server_system_init+0x124>)
 80144f4:	f7ed fe78 	bl	80021e8 <acc_integration_log>
 80144f8:	4630      	mov	r0, r6
 80144fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144fe:	4606      	mov	r6, r0
 8014500:	4a08      	ldr	r2, [pc, #32]	@ (8014524 <acc_exploration_server_system_init+0x12c>)
 8014502:	4906      	ldr	r1, [pc, #24]	@ (801451c <acc_exploration_server_system_init+0x124>)
 8014504:	f7ed fe70 	bl	80021e8 <acc_integration_log>
 8014508:	4630      	mov	r0, r6
 801450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801450e:	bf00      	nop
 8014510:	240001b8 	.word	0x240001b8
 8014514:	24003078 	.word	0x24003078
 8014518:	080210a0 	.word	0x080210a0
 801451c:	08020e84 	.word	0x08020e84
 8014520:	08021080 	.word	0x08021080
 8014524:	0802104c 	.word	0x0802104c

08014528 <acc_exploration_server_system_destroy_session>:
 8014528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801452c:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 80145f4 <acc_exploration_server_system_destroy_session+0xcc>
 8014530:	2002      	movs	r0, #2
 8014532:	4a2e      	ldr	r2, [pc, #184]	@ (80145ec <acc_exploration_server_system_destroy_session+0xc4>)
 8014534:	2700      	movs	r7, #0
 8014536:	492e      	ldr	r1, [pc, #184]	@ (80145f0 <acc_exploration_server_system_destroy_session+0xc8>)
 8014538:	f109 0a28 	add.w	sl, r9, #40	@ 0x28
 801453c:	f1a9 0808 	sub.w	r8, r9, #8
 8014540:	f7ed fe52 	bl	80021e8 <acc_integration_log>
 8014544:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014548:	b1f3      	cbz	r3, 8014588 <acc_exploration_server_system_destroy_session+0x60>
 801454a:	2500      	movs	r5, #0
 801454c:	462e      	mov	r6, r5
 801454e:	f8d9 4000 	ldr.w	r4, [r9]
 8014552:	3601      	adds	r6, #1
 8014554:	442c      	add	r4, r5
 8014556:	3544      	adds	r5, #68	@ 0x44
 8014558:	6860      	ldr	r0, [r4, #4]
 801455a:	b110      	cbz	r0, 8014562 <acc_exploration_server_system_destroy_session+0x3a>
 801455c:	f7f8 fc4a 	bl	800cdf4 <acc_config_destroy>
 8014560:	6067      	str	r7, [r4, #4]
 8014562:	68a0      	ldr	r0, [r4, #8]
 8014564:	b110      	cbz	r0, 801456c <acc_exploration_server_system_destroy_session+0x44>
 8014566:	f7ee f8b6 	bl	80026d6 <acc_integration_mem_free>
 801456a:	60a7      	str	r7, [r4, #8]
 801456c:	68e0      	ldr	r0, [r4, #12]
 801456e:	b110      	cbz	r0, 8014576 <acc_exploration_server_system_destroy_session+0x4e>
 8014570:	f7f8 ff42 	bl	800d3f8 <acc_processing_destroy>
 8014574:	60e7      	str	r7, [r4, #12]
 8014576:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014578:	b110      	cbz	r0, 8014580 <acc_exploration_server_system_destroy_session+0x58>
 801457a:	f7ee f8ac 	bl	80026d6 <acc_integration_mem_free>
 801457e:	63a7      	str	r7, [r4, #56]	@ 0x38
 8014580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014584:	42b3      	cmp	r3, r6
 8014586:	d8e2      	bhi.n	801454e <acc_exploration_server_system_destroy_session+0x26>
 8014588:	f109 0904 	add.w	r9, r9, #4
 801458c:	45ca      	cmp	sl, r9
 801458e:	d1d9      	bne.n	8014544 <acc_exploration_server_system_destroy_session+0x1c>
 8014590:	f8d8 3000 	ldr.w	r3, [r8]
 8014594:	b343      	cbz	r3, 80145e8 <acc_exploration_server_system_destroy_session+0xc0>
 8014596:	2500      	movs	r5, #0
 8014598:	2401      	movs	r4, #1
 801459a:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 80145f8 <acc_exploration_server_system_destroy_session+0xd0>
 801459e:	462e      	mov	r6, r5
 80145a0:	4f13      	ldr	r7, [pc, #76]	@ (80145f0 <acc_exploration_server_system_destroy_session+0xc8>)
 80145a2:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80145a6:	5958      	ldr	r0, [r3, r5]
 80145a8:	b1b8      	cbz	r0, 80145da <acc_exploration_server_system_destroy_session+0xb2>
 80145aa:	f7f8 ffbb 	bl	800d524 <acc_sensor_destroy>
 80145ae:	4620      	mov	r0, r4
 80145b0:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	@ 0x30
 80145b4:	1951      	adds	r1, r2, r5
 80145b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80145ba:	5156      	str	r6, [r2, r5]
 80145bc:	f881 60c4 	strb.w	r6, [r1, #196]	@ 0xc4
 80145c0:	f843 6c04 	str.w	r6, [r3, #-4]
 80145c4:	f7ed ff4e 	bl	8002464 <acc_hal_integration_sensor_disable>
 80145c8:	4620      	mov	r0, r4
 80145ca:	f7ed ff15 	bl	80023f8 <acc_hal_integration_sensor_supply_off>
 80145ce:	4623      	mov	r3, r4
 80145d0:	464a      	mov	r2, r9
 80145d2:	4639      	mov	r1, r7
 80145d4:	2002      	movs	r0, #2
 80145d6:	f7ed fe07 	bl	80021e8 <acc_integration_log>
 80145da:	f8d8 2000 	ldr.w	r2, [r8]
 80145de:	1c63      	adds	r3, r4, #1
 80145e0:	35c8      	adds	r5, #200	@ 0xc8
 80145e2:	42a2      	cmp	r2, r4
 80145e4:	461c      	mov	r4, r3
 80145e6:	d8dc      	bhi.n	80145a2 <acc_exploration_server_system_destroy_session+0x7a>
 80145e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ec:	080210c4 	.word	0x080210c4
 80145f0:	08020e84 	.word	0x08020e84
 80145f4:	24003080 	.word	0x24003080
 80145f8:	080210dc 	.word	0x080210dc

080145fc <acc_exploration_server_system_send_session_metadata>:
 80145fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014600:	ed2d 8b04 	vpush	{d8-d9}
 8014604:	b089      	sub	sp, #36	@ 0x24
 8014606:	460c      	mov	r4, r1
 8014608:	9005      	str	r0, [sp, #20]
 801460a:	f002 faab 	bl	8016b64 <cJSON_CreateObject>
 801460e:	4ab1      	ldr	r2, [pc, #708]	@ (80148d4 <acc_exploration_server_system_send_session_metadata+0x2d8>)
 8014610:	49b1      	ldr	r1, [pc, #708]	@ (80148d8 <acc_exploration_server_system_send_session_metadata+0x2dc>)
 8014612:	9004      	str	r0, [sp, #16]
 8014614:	f002 fb6a 	bl	8016cec <add_json_string_value>
 8014618:	b980      	cbnz	r0, 801463c <acc_exploration_server_system_send_session_metadata+0x40>
 801461a:	2400      	movs	r4, #0
 801461c:	4aaf      	ldr	r2, [pc, #700]	@ (80148dc <acc_exploration_server_system_send_session_metadata+0x2e0>)
 801461e:	49b0      	ldr	r1, [pc, #704]	@ (80148e0 <acc_exploration_server_system_send_session_metadata+0x2e4>)
 8014620:	4620      	mov	r0, r4
 8014622:	f7ed fde1 	bl	80021e8 <acc_integration_log>
 8014626:	9b04      	ldr	r3, [sp, #16]
 8014628:	b113      	cbz	r3, 8014630 <acc_exploration_server_system_send_session_metadata+0x34>
 801462a:	4618      	mov	r0, r3
 801462c:	f001 ff0c 	bl	8016448 <cJSON_Delete>
 8014630:	4620      	mov	r0, r4
 8014632:	b009      	add	sp, #36	@ 0x24
 8014634:	ecbd 8b04 	vpop	{d8-d9}
 8014638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463c:	4622      	mov	r2, r4
 801463e:	49a9      	ldr	r1, [pc, #676]	@ (80148e4 <acc_exploration_server_system_send_session_metadata+0x2e8>)
 8014640:	9804      	ldr	r0, [sp, #16]
 8014642:	f002 fb2b 	bl	8016c9c <add_json_uint32_value>
 8014646:	2800      	cmp	r0, #0
 8014648:	d0e7      	beq.n	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 801464a:	2200      	movs	r2, #0
 801464c:	49a6      	ldr	r1, [pc, #664]	@ (80148e8 <acc_exploration_server_system_send_session_metadata+0x2ec>)
 801464e:	9804      	ldr	r0, [sp, #16]
 8014650:	f002 fb34 	bl	8016cbc <add_json_int_value>
 8014654:	9002      	str	r0, [sp, #8]
 8014656:	2800      	cmp	r0, #0
 8014658:	d0df      	beq.n	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 801465a:	4ba4      	ldr	r3, [pc, #656]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	f040 80d3 	bne.w	801480a <acc_exploration_server_system_send_session_metadata+0x20e>
 8014664:	49a2      	ldr	r1, [pc, #648]	@ (80148f0 <acc_exploration_server_system_send_session_metadata+0x2f4>)
 8014666:	9804      	ldr	r0, [sp, #16]
 8014668:	f002 f9ca 	bl	8016a00 <cJSON_AddArrayToObject>
 801466c:	ee09 0a10 	vmov	s18, r0
 8014670:	2800      	cmp	r0, #0
 8014672:	d0d2      	beq.n	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 8014674:	2300      	movs	r3, #0
 8014676:	f8df a2ac 	ldr.w	sl, [pc, #684]	@ 8014924 <acc_exploration_server_system_send_session_metadata+0x328>
 801467a:	9301      	str	r3, [sp, #4]
 801467c:	4b9b      	ldr	r3, [pc, #620]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 801467e:	6858      	ldr	r0, [r3, #4]
 8014680:	b370      	cbz	r0, 80146e0 <acc_exploration_server_system_send_session_metadata+0xe4>
 8014682:	f8da 3000 	ldr.w	r3, [sl]
 8014686:	2200      	movs	r2, #0
 8014688:	e001      	b.n	801468e <acc_exploration_server_system_send_session_metadata+0x92>
 801468a:	4282      	cmp	r2, r0
 801468c:	d028      	beq.n	80146e0 <acc_exploration_server_system_send_session_metadata+0xe4>
 801468e:	6859      	ldr	r1, [r3, #4]
 8014690:	3201      	adds	r2, #1
 8014692:	3344      	adds	r3, #68	@ 0x44
 8014694:	2900      	cmp	r1, #0
 8014696:	d0f8      	beq.n	801468a <acc_exploration_server_system_send_session_metadata+0x8e>
 8014698:	f002 fa58 	bl	8016b4c <cJSON_CreateArray>
 801469c:	ee08 0a90 	vmov	s17, r0
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d0ba      	beq.n	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 80146a4:	ee18 2a90 	vmov	r2, s17
 80146a8:	4992      	ldr	r1, [pc, #584]	@ (80148f4 <acc_exploration_server_system_send_session_metadata+0x2f8>)
 80146aa:	ee19 0a10 	vmov	r0, s18
 80146ae:	f002 f95f 	bl	8016970 <cJSON_AddItemToObject>
 80146b2:	4b8e      	ldr	r3, [pc, #568]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 80146b4:	685a      	ldr	r2, [r3, #4]
 80146b6:	b19a      	cbz	r2, 80146e0 <acc_exploration_server_system_send_session_metadata+0xe4>
 80146b8:	f04f 0900 	mov.w	r9, #0
 80146bc:	4f8e      	ldr	r7, [pc, #568]	@ (80148f8 <acc_exploration_server_system_send_session_metadata+0x2fc>)
 80146be:	f8cd a00c 	str.w	sl, [sp, #12]
 80146c2:	9b03      	ldr	r3, [sp, #12]
 80146c4:	eb09 1509 	add.w	r5, r9, r9, lsl #4
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80146ce:	686b      	ldr	r3, [r5, #4]
 80146d0:	b993      	cbnz	r3, 80146f8 <acc_exploration_server_system_send_session_metadata+0xfc>
 80146d2:	f109 0901 	add.w	r9, r9, #1
 80146d6:	3544      	adds	r5, #68	@ 0x44
 80146d8:	454a      	cmp	r2, r9
 80146da:	d8f8      	bhi.n	80146ce <acc_exploration_server_system_send_session_metadata+0xd2>
 80146dc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80146e0:	9c02      	ldr	r4, [sp, #8]
 80146e2:	9b01      	ldr	r3, [sp, #4]
 80146e4:	f10a 0a04 	add.w	sl, sl, #4
 80146e8:	3301      	adds	r3, #1
 80146ea:	2b09      	cmp	r3, #9
 80146ec:	9301      	str	r3, [sp, #4]
 80146ee:	f300 8128 	bgt.w	8014942 <acc_exploration_server_system_send_session_metadata+0x346>
 80146f2:	2c00      	cmp	r4, #0
 80146f4:	d1c2      	bne.n	801467c <acc_exploration_server_system_send_session_metadata+0x80>
 80146f6:	e790      	b.n	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 80146f8:	4639      	mov	r1, r7
 80146fa:	ee18 0a90 	vmov	r0, s17
 80146fe:	f002 f95f 	bl	80169c0 <cJSON_AddObjectToObject>
 8014702:	4606      	mov	r6, r0
 8014704:	b180      	cbz	r0, 8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 8014706:	4b79      	ldr	r3, [pc, #484]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 8014708:	22c8      	movs	r2, #200	@ 0xc8
 801470a:	6828      	ldr	r0, [r5, #0]
 801470c:	a907      	add	r1, sp, #28
 801470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014710:	fb02 3000 	mla	r0, r2, r0, r3
 8014714:	38c4      	subs	r0, #196	@ 0xc4
 8014716:	f7f8 ffa7 	bl	800d668 <acc_sensor_get_cal_info>
 801471a:	4604      	mov	r4, r0
 801471c:	2001      	movs	r0, #1
 801471e:	f7f8 feff 	bl	800d520 <acc_processing_points_to_meter>
 8014722:	eeb0 8a40 	vmov.f32	s16, s0
 8014726:	bb64      	cbnz	r4, 8014782 <acc_exploration_server_system_send_session_metadata+0x186>
 8014728:	f04f 0800 	mov.w	r8, #0
 801472c:	46c3      	mov	fp, r8
 801472e:	4644      	mov	r4, r8
 8014730:	2600      	movs	r6, #0
 8014732:	6868      	ldr	r0, [r5, #4]
 8014734:	f7f8 fb8c 	bl	800ce50 <acc_config_num_subsweeps_get>
 8014738:	4602      	mov	r2, r0
 801473a:	b2f3      	uxtb	r3, r6
 801473c:	4639      	mov	r1, r7
 801473e:	4640      	mov	r0, r8
 8014740:	3601      	adds	r6, #1
 8014742:	429a      	cmp	r2, r3
 8014744:	eb05 0a43 	add.w	sl, r5, r3, lsl #1
 8014748:	d911      	bls.n	801476e <acc_exploration_server_system_send_session_metadata+0x172>
 801474a:	2c00      	cmp	r4, #0
 801474c:	f43f af65 	beq.w	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 8014750:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8014754:	f002 fab2 	bl	8016cbc <add_json_int_value>
 8014758:	4604      	mov	r4, r0
 801475a:	2800      	cmp	r0, #0
 801475c:	d0e9      	beq.n	8014732 <acc_exploration_server_system_send_session_metadata+0x136>
 801475e:	f8ba 201c 	ldrh.w	r2, [sl, #28]
 8014762:	4639      	mov	r1, r7
 8014764:	4658      	mov	r0, fp
 8014766:	f002 faa9 	bl	8016cbc <add_json_int_value>
 801476a:	4604      	mov	r4, r0
 801476c:	e7e1      	b.n	8014732 <acc_exploration_server_system_send_session_metadata+0x136>
 801476e:	4b5f      	ldr	r3, [pc, #380]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 8014770:	f109 0901 	add.w	r9, r9, #1
 8014774:	685a      	ldr	r2, [r3, #4]
 8014776:	454a      	cmp	r2, r9
 8014778:	f240 80ef 	bls.w	801495a <acc_exploration_server_system_send_session_metadata+0x35e>
 801477c:	2c00      	cmp	r4, #0
 801477e:	d1a0      	bne.n	80146c2 <acc_exploration_server_system_send_session_metadata+0xc6>
 8014780:	e74b      	b.n	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 8014782:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8014786:	4630      	mov	r0, r6
 8014788:	495c      	ldr	r1, [pc, #368]	@ (80148fc <acc_exploration_server_system_send_session_metadata+0x300>)
 801478a:	f002 fa97 	bl	8016cbc <add_json_int_value>
 801478e:	2800      	cmp	r0, #0
 8014790:	d0ca      	beq.n	8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 8014792:	8a2a      	ldrh	r2, [r5, #16]
 8014794:	4630      	mov	r0, r6
 8014796:	495a      	ldr	r1, [pc, #360]	@ (8014900 <acc_exploration_server_system_send_session_metadata+0x304>)
 8014798:	f002 fa90 	bl	8016cbc <add_json_int_value>
 801479c:	2800      	cmp	r0, #0
 801479e:	d0c3      	beq.n	8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 80147a0:	8a6a      	ldrh	r2, [r5, #18]
 80147a2:	4630      	mov	r0, r6
 80147a4:	4957      	ldr	r1, [pc, #348]	@ (8014904 <acc_exploration_server_system_send_session_metadata+0x308>)
 80147a6:	f002 fa89 	bl	8016cbc <add_json_int_value>
 80147aa:	2800      	cmp	r0, #0
 80147ac:	d0bc      	beq.n	8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 80147ae:	ed95 0a09 	vldr	s0, [r5, #36]	@ 0x24
 80147b2:	4630      	mov	r0, r6
 80147b4:	4954      	ldr	r1, [pc, #336]	@ (8014908 <acc_exploration_server_system_send_session_metadata+0x30c>)
 80147b6:	f002 fa5f 	bl	8016c78 <add_json_float_value>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d0b4      	beq.n	8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 80147be:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
 80147c2:	4630      	mov	r0, r6
 80147c4:	4951      	ldr	r1, [pc, #324]	@ (801490c <acc_exploration_server_system_send_session_metadata+0x310>)
 80147c6:	f002 fa89 	bl	8016cdc <add_json_bool_value>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d0ac      	beq.n	8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 80147ce:	eeb0 0a48 	vmov.f32	s0, s16
 80147d2:	494f      	ldr	r1, [pc, #316]	@ (8014910 <acc_exploration_server_system_send_session_metadata+0x314>)
 80147d4:	4630      	mov	r0, r6
 80147d6:	f002 fa4f 	bl	8016c78 <add_json_float_value>
 80147da:	4604      	mov	r4, r0
 80147dc:	2800      	cmp	r0, #0
 80147de:	d0a3      	beq.n	8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 80147e0:	f002 f9b4 	bl	8016b4c <cJSON_CreateArray>
 80147e4:	4680      	mov	r8, r0
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d09e      	beq.n	8014728 <acc_exploration_server_system_send_session_metadata+0x12c>
 80147ea:	4642      	mov	r2, r8
 80147ec:	4949      	ldr	r1, [pc, #292]	@ (8014914 <acc_exploration_server_system_send_session_metadata+0x318>)
 80147ee:	4630      	mov	r0, r6
 80147f0:	f002 f8be 	bl	8016970 <cJSON_AddItemToObject>
 80147f4:	f002 f9aa 	bl	8016b4c <cJSON_CreateArray>
 80147f8:	4683      	mov	fp, r0
 80147fa:	2800      	cmp	r0, #0
 80147fc:	d068      	beq.n	80148d0 <acc_exploration_server_system_send_session_metadata+0x2d4>
 80147fe:	4630      	mov	r0, r6
 8014800:	465a      	mov	r2, fp
 8014802:	4945      	ldr	r1, [pc, #276]	@ (8014918 <acc_exploration_server_system_send_session_metadata+0x31c>)
 8014804:	f002 f8b4 	bl	8016970 <cJSON_AddItemToObject>
 8014808:	e792      	b.n	8014730 <acc_exploration_server_system_send_session_metadata+0x134>
 801480a:	4944      	ldr	r1, [pc, #272]	@ (801491c <acc_exploration_server_system_send_session_metadata+0x320>)
 801480c:	9804      	ldr	r0, [sp, #16]
 801480e:	f002 f8f7 	bl	8016a00 <cJSON_AddArrayToObject>
 8014812:	4606      	mov	r6, r0
 8014814:	2800      	cmp	r0, #0
 8014816:	f43f af00 	beq.w	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 801481a:	f240 1081 	movw	r0, #385	@ 0x181
 801481e:	f7ed ff4e 	bl	80026be <acc_integration_mem_alloc>
 8014822:	4605      	mov	r5, r0
 8014824:	2800      	cmp	r0, #0
 8014826:	f43f aef8 	beq.w	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 801482a:	4b30      	ldr	r3, [pc, #192]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	f000 8090 	beq.w	8014954 <acc_exploration_server_system_send_session_metadata+0x358>
 8014834:	f8dd b008 	ldr.w	fp, [sp, #8]
 8014838:	2400      	movs	r4, #0
 801483a:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8014928 <acc_exploration_server_system_send_session_metadata+0x32c>
 801483e:	4f38      	ldr	r7, [pc, #224]	@ (8014920 <acc_exploration_server_system_send_session_metadata+0x324>)
 8014840:	4658      	mov	r0, fp
 8014842:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 801492c <acc_exploration_server_system_send_session_metadata+0x330>
 8014846:	e004      	b.n	8014852 <acc_exploration_server_system_send_session_metadata+0x256>
 8014848:	3401      	adds	r4, #1
 801484a:	4b28      	ldr	r3, [pc, #160]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	42a3      	cmp	r3, r4
 8014850:	d96e      	bls.n	8014930 <acc_exploration_server_system_send_session_metadata+0x334>
 8014852:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8014856:	4b25      	ldr	r3, [pc, #148]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 8014858:	fb09 f904 	mul.w	r9, r9, r4
 801485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801485e:	444b      	add	r3, r9
 8014860:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8014864:	2a00      	cmp	r2, #0
 8014866:	d0ef      	beq.n	8014848 <acc_exploration_server_system_send_session_metadata+0x24c>
 8014868:	1d18      	adds	r0, r3, #4
 801486a:	a907      	add	r1, sp, #28
 801486c:	f7f8 fefc 	bl	800d668 <acc_sensor_get_cal_info>
 8014870:	2800      	cmp	r0, #0
 8014872:	d0e9      	beq.n	8014848 <acc_exploration_server_system_send_session_metadata+0x24c>
 8014874:	4b1d      	ldr	r3, [pc, #116]	@ (80148ec <acc_exploration_server_system_send_session_metadata+0x2f0>)
 8014876:	462a      	mov	r2, r5
 8014878:	21c0      	movs	r1, #192	@ 0xc0
 801487a:	3401      	adds	r4, #1
 801487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801487e:	444b      	add	r3, r9
 8014880:	1d18      	adds	r0, r3, #4
 8014882:	f000 ffd1 	bl	8015828 <convert_uint2hexstr>
 8014886:	2300      	movs	r3, #0
 8014888:	f885 3180 	strb.w	r3, [r5, #384]	@ 0x180
 801488c:	f002 f96a 	bl	8016b64 <cJSON_CreateObject>
 8014890:	4681      	mov	r9, r0
 8014892:	2800      	cmp	r0, #0
 8014894:	d0d9      	beq.n	801484a <acc_exploration_server_system_send_session_metadata+0x24e>
 8014896:	4641      	mov	r1, r8
 8014898:	4622      	mov	r2, r4
 801489a:	f002 f9ff 	bl	8016c9c <add_json_uint32_value>
 801489e:	2800      	cmp	r0, #0
 80148a0:	d0d3      	beq.n	801484a <acc_exploration_server_system_send_session_metadata+0x24e>
 80148a2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80148a6:	4639      	mov	r1, r7
 80148a8:	4648      	mov	r0, r9
 80148aa:	f002 fa07 	bl	8016cbc <add_json_int_value>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d0cb      	beq.n	801484a <acc_exploration_server_system_send_session_metadata+0x24e>
 80148b2:	462a      	mov	r2, r5
 80148b4:	4651      	mov	r1, sl
 80148b6:	4648      	mov	r0, r9
 80148b8:	f002 fa18 	bl	8016cec <add_json_string_value>
 80148bc:	2800      	cmp	r0, #0
 80148be:	d0c4      	beq.n	801484a <acc_exploration_server_system_send_session_metadata+0x24e>
 80148c0:	4649      	mov	r1, r9
 80148c2:	4630      	mov	r0, r6
 80148c4:	f002 f84a 	bl	801695c <cJSON_AddItemToArray>
 80148c8:	3800      	subs	r0, #0
 80148ca:	bf18      	it	ne
 80148cc:	2001      	movne	r0, #1
 80148ce:	e7bc      	b.n	801484a <acc_exploration_server_system_send_session_metadata+0x24e>
 80148d0:	4604      	mov	r4, r0
 80148d2:	e72d      	b.n	8014730 <acc_exploration_server_system_send_session_metadata+0x134>
 80148d4:	0802081c 	.word	0x0802081c
 80148d8:	0802077c 	.word	0x0802077c
 80148dc:	0801be5c 	.word	0x0801be5c
 80148e0:	08020e84 	.word	0x08020e84
 80148e4:	080210f8 	.word	0x080210f8
 80148e8:	0802079c 	.word	0x0802079c
 80148ec:	24003078 	.word	0x24003078
 80148f0:	08021118 	.word	0x08021118
 80148f4:	080208d4 	.word	0x080208d4
 80148f8:	08021124 	.word	0x08021124
 80148fc:	0802112c 	.word	0x0802112c
 8014900:	08021144 	.word	0x08021144
 8014904:	08021158 	.word	0x08021158
 8014908:	0802116c 	.word	0x0802116c
 801490c:	0802117c 	.word	0x0802117c
 8014910:	0802118c 	.word	0x0802118c
 8014914:	080211a0 	.word	0x080211a0
 8014918:	080211b8 	.word	0x080211b8
 801491c:	08021104 	.word	0x08021104
 8014920:	08021138 	.word	0x08021138
 8014924:	24003080 	.word	0x24003080
 8014928:	0801b930 	.word	0x0801b930
 801492c:	0801bab4 	.word	0x0801bab4
 8014930:	4683      	mov	fp, r0
 8014932:	4628      	mov	r0, r5
 8014934:	f7ed fecf 	bl	80026d6 <acc_integration_mem_free>
 8014938:	f1bb 0f00 	cmp.w	fp, #0
 801493c:	f47f ae92 	bne.w	8014664 <acc_exploration_server_system_send_session_metadata+0x68>
 8014940:	e66b      	b.n	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 8014942:	2c00      	cmp	r4, #0
 8014944:	f43f ae69 	beq.w	801461a <acc_exploration_server_system_send_session_metadata+0x1e>
 8014948:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 801494c:	f7fe fd90 	bl	8013470 <acc_exploration_server_write_json>
 8014950:	4604      	mov	r4, r0
 8014952:	e668      	b.n	8014626 <acc_exploration_server_system_send_session_metadata+0x2a>
 8014954:	f7ed febf 	bl	80026d6 <acc_integration_mem_free>
 8014958:	e684      	b.n	8014664 <acc_exploration_server_system_send_session_metadata+0x68>
 801495a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801495e:	e6c0      	b.n	80146e2 <acc_exploration_server_system_send_session_metadata+0xe6>

08014960 <acc_exploration_server_system_read_data_frames>:
 8014960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014964:	f8df b424 	ldr.w	fp, [pc, #1060]	@ 8014d8c <acc_exploration_server_system_read_data_frames+0x42c>
 8014968:	2300      	movs	r3, #0
 801496a:	f06f 4a40 	mvn.w	sl, #3221225472	@ 0xc0000000
 801496e:	465f      	mov	r7, fp
 8014970:	f1ab 0508 	sub.w	r5, fp, #8
 8014974:	ed2d 8b02 	vpush	{d8}
 8014978:	b089      	sub	sp, #36	@ 0x24
 801497a:	f8cd b014 	str.w	fp, [sp, #20]
 801497e:	4683      	mov	fp, r0
 8014980:	9302      	str	r3, [sp, #8]
 8014982:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8014986:	686b      	ldr	r3, [r5, #4]
 8014988:	2b00      	cmp	r3, #0
 801498a:	f000 822b 	beq.w	8014de4 <acc_exploration_server_system_read_data_frames+0x484>
 801498e:	2600      	movs	r6, #0
 8014990:	f8df 83fc 	ldr.w	r8, [pc, #1020]	@ 8014d90 <acc_exploration_server_system_read_data_frames+0x430>
 8014994:	683a      	ldr	r2, [r7, #0]
 8014996:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 801499a:	4641      	mov	r1, r8
 801499c:	2014      	movs	r0, #20
 801499e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80149a2:	6863      	ldr	r3, [r4, #4]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	f000 8084 	beq.w	8014ab2 <acc_exploration_server_system_read_data_frames+0x152>
 80149aa:	68a2      	ldr	r2, [r4, #8]
 80149ac:	2a00      	cmp	r2, #0
 80149ae:	f000 8086 	beq.w	8014abe <acc_exploration_server_system_read_data_frames+0x15e>
 80149b2:	f7fd fb31 	bl	8012018 <acc_probes_register_callback>
 80149b6:	6822      	ldr	r2, [r4, #0]
 80149b8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80149ba:	1c73      	adds	r3, r6, #1
 80149bc:	eb02 0c0a 	add.w	ip, r2, sl
 80149c0:	6861      	ldr	r1, [r4, #4]
 80149c2:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 80149c6:	4288      	cmp	r0, r1
 80149c8:	d06d      	beq.n	8014aa6 <acc_exploration_server_system_read_data_frames+0x146>
 80149ca:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 80149ce:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 80149d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80149d4:	fb09 f202 	mul.w	r2, r9, r2
 80149d8:	f1a2 00c8 	sub.w	r0, r2, #200	@ 0xc8
 80149dc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80149de:	eb0c 0e00 	add.w	lr, ip, r0
 80149e2:	f85c 0000 	ldr.w	r0, [ip, r0]
 80149e6:	9200      	str	r2, [sp, #0]
 80149e8:	f10e 0204 	add.w	r2, lr, #4
 80149ec:	f7f8 fe5a 	bl	800d6a4 <acc_sensor_prepare>
 80149f0:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 80149f4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80149f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80149fa:	1859      	adds	r1, r3, r1
 80149fc:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d05f      	beq.n	8014ac4 <acc_exploration_server_system_read_data_frames+0x164>
 8014a04:	3601      	adds	r6, #1
 8014a06:	686b      	ldr	r3, [r5, #4]
 8014a08:	42b3      	cmp	r3, r6
 8014a0a:	d8c3      	bhi.n	8014994 <acc_exploration_server_system_read_data_frames+0x34>
 8014a0c:	f1bb 0f00 	cmp.w	fp, #0
 8014a10:	d06a      	beq.n	8014ae8 <acc_exploration_server_system_read_data_frames+0x188>
 8014a12:	686a      	ldr	r2, [r5, #4]
 8014a14:	2a00      	cmp	r2, #0
 8014a16:	d067      	beq.n	8014ae8 <acc_exploration_server_system_read_data_frames+0x188>
 8014a18:	f04f 0900 	mov.w	r9, #0
 8014a1c:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
 8014a20:	eb09 1409 	add.w	r4, r9, r9, lsl #4
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014a2a:	6863      	ldr	r3, [r4, #4]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	f000 814d 	beq.w	8014ccc <acc_exploration_server_system_read_data_frames+0x36c>
 8014a32:	6823      	ldr	r3, [r4, #0]
 8014a34:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014a36:	fb08 2303 	mla	r3, r8, r3, r2
 8014a3a:	f853 0cc8 	ldr.w	r0, [r3, #-200]
 8014a3e:	f7f8 fe8f 	bl	800d760 <acc_sensor_measure>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	f000 81a6 	beq.w	8014d94 <acc_exploration_server_system_read_data_frames+0x434>
 8014a48:	f109 0901 	add.w	r9, r9, #1
 8014a4c:	686a      	ldr	r2, [r5, #4]
 8014a4e:	454a      	cmp	r2, r9
 8014a50:	d8e6      	bhi.n	8014a20 <acc_exploration_server_system_read_data_frames+0xc0>
 8014a52:	2a00      	cmp	r2, #0
 8014a54:	d048      	beq.n	8014ae8 <acc_exploration_server_system_read_data_frames+0x188>
 8014a56:	f04f 0900 	mov.w	r9, #0
 8014a5a:	6839      	ldr	r1, [r7, #0]
 8014a5c:	eb09 1409 	add.w	r4, r9, r9, lsl #4
 8014a60:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8014a64:	6863      	ldr	r3, [r4, #4]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	f000 8137 	beq.w	8014cda <acc_exploration_server_system_read_data_frames+0x37a>
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	f7ff fc55 	bl	801431c <group_item_sensor_wait_for_interrupt.isra.0.constprop.0>
 8014a72:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014a76:	4606      	mov	r6, r0
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	f000 819f 	beq.w	8014dbc <acc_exploration_server_system_read_data_frames+0x45c>
 8014a7e:	4798      	blx	r3
 8014a80:	f109 0901 	add.w	r9, r9, #1
 8014a84:	686a      	ldr	r2, [r5, #4]
 8014a86:	6420      	str	r0, [r4, #64]	@ 0x40
 8014a88:	454a      	cmp	r2, r9
 8014a8a:	f240 819e 	bls.w	8014dca <acc_exploration_server_system_read_data_frames+0x46a>
 8014a8e:	2e00      	cmp	r6, #0
 8014a90:	d1e3      	bne.n	8014a5a <acc_exploration_server_system_read_data_frames+0xfa>
 8014a92:	4baf      	ldr	r3, [pc, #700]	@ (8014d50 <acc_exploration_server_system_read_data_frames+0x3f0>)
 8014a94:	2600      	movs	r6, #0
 8014a96:	9a03      	ldr	r2, [sp, #12]
 8014a98:	6013      	str	r3, [r2, #0]
 8014a9a:	4630      	mov	r0, r6
 8014a9c:	b009      	add	sp, #36	@ 0x24
 8014a9e:	ecbd 8b02 	vpop	{d8}
 8014aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa6:	686a      	ldr	r2, [r5, #4]
 8014aa8:	4293      	cmp	r3, r2
 8014aaa:	d2af      	bcs.n	8014a0c <acc_exploration_server_system_read_data_frames+0xac>
 8014aac:	683a      	ldr	r2, [r7, #0]
 8014aae:	461e      	mov	r6, r3
 8014ab0:	e771      	b.n	8014996 <acc_exploration_server_system_read_data_frames+0x36>
 8014ab2:	1c73      	adds	r3, r6, #1
 8014ab4:	6869      	ldr	r1, [r5, #4]
 8014ab6:	428b      	cmp	r3, r1
 8014ab8:	d2a8      	bcs.n	8014a0c <acc_exploration_server_system_read_data_frames+0xac>
 8014aba:	461e      	mov	r6, r3
 8014abc:	e76b      	b.n	8014996 <acc_exploration_server_system_read_data_frames+0x36>
 8014abe:	4611      	mov	r1, r2
 8014ac0:	2014      	movs	r0, #20
 8014ac2:	e776      	b.n	80149b2 <acc_exploration_server_system_read_data_frames+0x52>
 8014ac4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014ac6:	fb09 2903 	mla	r9, r9, r3, r2
 8014aca:	f859 0cc8 	ldr.w	r0, [r9, #-200]
 8014ace:	f7f8 feb9 	bl	800d844 <acc_sensor_status>
 8014ad2:	4b9f      	ldr	r3, [pc, #636]	@ (8014d50 <acc_exploration_server_system_read_data_frames+0x3f0>)
 8014ad4:	2600      	movs	r6, #0
 8014ad6:	9a03      	ldr	r2, [sp, #12]
 8014ad8:	6013      	str	r3, [r2, #0]
 8014ada:	e7de      	b.n	8014a9a <acc_exploration_server_system_read_data_frames+0x13a>
 8014adc:	f109 0901 	add.w	r9, r9, #1
 8014ae0:	3444      	adds	r4, #68	@ 0x44
 8014ae2:	4591      	cmp	r9, r2
 8014ae4:	f0c0 810a 	bcc.w	8014cfc <acc_exploration_server_system_read_data_frames+0x39c>
 8014ae8:	9b02      	ldr	r3, [sp, #8]
 8014aea:	2601      	movs	r6, #1
 8014aec:	2b08      	cmp	r3, #8
 8014aee:	bfcc      	ite	gt
 8014af0:	2300      	movgt	r3, #0
 8014af2:	2301      	movle	r3, #1
 8014af4:	9a02      	ldr	r2, [sp, #8]
 8014af6:	3704      	adds	r7, #4
 8014af8:	3201      	adds	r2, #1
 8014afa:	9202      	str	r2, [sp, #8]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	f47f af42 	bne.w	8014986 <acc_exploration_server_system_read_data_frames+0x26>
 8014b02:	f8dd b014 	ldr.w	fp, [sp, #20]
 8014b06:	2e00      	cmp	r6, #0
 8014b08:	d0e3      	beq.n	8014ad2 <acc_exploration_server_system_read_data_frames+0x172>
 8014b0a:	9305      	str	r3, [sp, #20]
 8014b0c:	9b04      	ldr	r3, [sp, #16]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d0c3      	beq.n	8014a9a <acc_exploration_server_system_read_data_frames+0x13a>
 8014b12:	681c      	ldr	r4, [r3, #0]
 8014b14:	f002 f826 	bl	8016b64 <cJSON_CreateObject>
 8014b18:	4607      	mov	r7, r0
 8014b1a:	9002      	str	r0, [sp, #8]
 8014b1c:	2800      	cmp	r0, #0
 8014b1e:	f000 8098 	beq.w	8014c52 <acc_exploration_server_system_read_data_frames+0x2f2>
 8014b22:	f002 f813 	bl	8016b4c <cJSON_CreateArray>
 8014b26:	4602      	mov	r2, r0
 8014b28:	9004      	str	r0, [sp, #16]
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	d03c      	beq.n	8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014b2e:	9b05      	ldr	r3, [sp, #20]
 8014b30:	46d8      	mov	r8, fp
 8014b32:	4988      	ldr	r1, [pc, #544]	@ (8014d54 <acc_exploration_server_system_read_data_frames+0x3f4>)
 8014b34:	4638      	mov	r0, r7
 8014b36:	469a      	mov	sl, r3
 8014b38:	f001 ff1a 	bl	8016970 <cJSON_AddItemToObject>
 8014b3c:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8014b40:	6868      	ldr	r0, [r5, #4]
 8014b42:	2800      	cmp	r0, #0
 8014b44:	d047      	beq.n	8014bd6 <acc_exploration_server_system_read_data_frames+0x276>
 8014b46:	f8d8 3000 	ldr.w	r3, [r8]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	e001      	b.n	8014b52 <acc_exploration_server_system_read_data_frames+0x1f2>
 8014b4e:	4282      	cmp	r2, r0
 8014b50:	d041      	beq.n	8014bd6 <acc_exploration_server_system_read_data_frames+0x276>
 8014b52:	6859      	ldr	r1, [r3, #4]
 8014b54:	3201      	adds	r2, #1
 8014b56:	3344      	adds	r3, #68	@ 0x44
 8014b58:	2900      	cmp	r1, #0
 8014b5a:	d0f8      	beq.n	8014b4e <acc_exploration_server_system_read_data_frames+0x1ee>
 8014b5c:	f001 fff6 	bl	8016b4c <cJSON_CreateArray>
 8014b60:	ee08 0a10 	vmov	s16, r0
 8014b64:	b300      	cbz	r0, 8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014b66:	497c      	ldr	r1, [pc, #496]	@ (8014d58 <acc_exploration_server_system_read_data_frames+0x3f8>)
 8014b68:	ee18 2a10 	vmov	r2, s16
 8014b6c:	9804      	ldr	r0, [sp, #16]
 8014b6e:	f001 feff 	bl	8016970 <cJSON_AddItemToObject>
 8014b72:	6869      	ldr	r1, [r5, #4]
 8014b74:	b379      	cbz	r1, 8014bd6 <acc_exploration_server_system_read_data_frames+0x276>
 8014b76:	f04f 0b00 	mov.w	fp, #0
 8014b7a:	4c78      	ldr	r4, [pc, #480]	@ (8014d5c <acc_exploration_server_system_read_data_frames+0x3fc>)
 8014b7c:	eb0b 170b 	add.w	r7, fp, fp, lsl #4
 8014b80:	f8d8 3000 	ldr.w	r3, [r8]
 8014b84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	b1fb      	cbz	r3, 8014bcc <acc_exploration_server_system_read_data_frames+0x26c>
 8014b8c:	f001 ffea 	bl	8016b64 <cJSON_CreateObject>
 8014b90:	4681      	mov	r9, r0
 8014b92:	b148      	cbz	r0, 8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014b94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014b96:	4972      	ldr	r1, [pc, #456]	@ (8014d60 <acc_exploration_server_system_read_data_frames+0x400>)
 8014b98:	f002 f880 	bl	8016c9c <add_json_uint32_value>
 8014b9c:	bb30      	cbnz	r0, 8014bec <acc_exploration_server_system_read_data_frames+0x28c>
 8014b9e:	4649      	mov	r1, r9
 8014ba0:	ee18 0a10 	vmov	r0, s16
 8014ba4:	f001 feda 	bl	801695c <cJSON_AddItemToArray>
 8014ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8014d64 <acc_exploration_server_system_read_data_frames+0x404>)
 8014baa:	2000      	movs	r0, #0
 8014bac:	496e      	ldr	r1, [pc, #440]	@ (8014d68 <acc_exploration_server_system_read_data_frames+0x408>)
 8014bae:	f7ed fb1b 	bl	80021e8 <acc_integration_log>
 8014bb2:	9802      	ldr	r0, [sp, #8]
 8014bb4:	f001 fc48 	bl	8016448 <cJSON_Delete>
 8014bb8:	2600      	movs	r6, #0
 8014bba:	4b6c      	ldr	r3, [pc, #432]	@ (8014d6c <acc_exploration_server_system_read_data_frames+0x40c>)
 8014bbc:	9a03      	ldr	r2, [sp, #12]
 8014bbe:	4630      	mov	r0, r6
 8014bc0:	6013      	str	r3, [r2, #0]
 8014bc2:	b009      	add	sp, #36	@ 0x24
 8014bc4:	ecbd 8b02 	vpop	{d8}
 8014bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bcc:	f10b 0b01 	add.w	fp, fp, #1
 8014bd0:	3744      	adds	r7, #68	@ 0x44
 8014bd2:	458b      	cmp	fp, r1
 8014bd4:	d3d8      	bcc.n	8014b88 <acc_exploration_server_system_read_data_frames+0x228>
 8014bd6:	4632      	mov	r2, r6
 8014bd8:	f10a 0a01 	add.w	sl, sl, #1
 8014bdc:	f108 0804 	add.w	r8, r8, #4
 8014be0:	f1ba 0f09 	cmp.w	sl, #9
 8014be4:	dc3a      	bgt.n	8014c5c <acc_exploration_server_system_read_data_frames+0x2fc>
 8014be6:	2a00      	cmp	r2, #0
 8014be8:	d1aa      	bne.n	8014b40 <acc_exploration_server_system_read_data_frames+0x1e0>
 8014bea:	e7dd      	b.n	8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014bec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014bf0:	4648      	mov	r0, r9
 8014bf2:	495f      	ldr	r1, [pc, #380]	@ (8014d70 <acc_exploration_server_system_read_data_frames+0x410>)
 8014bf4:	f002 f872 	bl	8016cdc <add_json_bool_value>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d0d0      	beq.n	8014b9e <acc_exploration_server_system_read_data_frames+0x23e>
 8014bfc:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8014c00:	4621      	mov	r1, r4
 8014c02:	4648      	mov	r0, r9
 8014c04:	f002 f85a 	bl	8016cbc <add_json_int_value>
 8014c08:	2800      	cmp	r0, #0
 8014c0a:	d0c8      	beq.n	8014b9e <acc_exploration_server_system_read_data_frames+0x23e>
 8014c0c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8014c10:	4648      	mov	r0, r9
 8014c12:	4958      	ldr	r1, [pc, #352]	@ (8014d74 <acc_exploration_server_system_read_data_frames+0x414>)
 8014c14:	f002 f862 	bl	8016cdc <add_json_bool_value>
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	d0c0      	beq.n	8014b9e <acc_exploration_server_system_read_data_frames+0x23e>
 8014c1c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8014c20:	4648      	mov	r0, r9
 8014c22:	4955      	ldr	r1, [pc, #340]	@ (8014d78 <acc_exploration_server_system_read_data_frames+0x418>)
 8014c24:	f10b 0b01 	add.w	fp, fp, #1
 8014c28:	f002 f858 	bl	8016cdc <add_json_bool_value>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	8a3a      	ldrh	r2, [r7, #16]
 8014c30:	4649      	mov	r1, r9
 8014c32:	461f      	mov	r7, r3
 8014c34:	9b05      	ldr	r3, [sp, #20]
 8014c36:	ee18 0a10 	vmov	r0, s16
 8014c3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014c3e:	9305      	str	r3, [sp, #20]
 8014c40:	f001 fe8c 	bl	801695c <cJSON_AddItemToArray>
 8014c44:	6869      	ldr	r1, [r5, #4]
 8014c46:	463a      	mov	r2, r7
 8014c48:	458b      	cmp	fp, r1
 8014c4a:	d2c5      	bcs.n	8014bd8 <acc_exploration_server_system_read_data_frames+0x278>
 8014c4c:	2f00      	cmp	r7, #0
 8014c4e:	d195      	bne.n	8014b7c <acc_exploration_server_system_read_data_frames+0x21c>
 8014c50:	e7aa      	b.n	8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014c52:	4a44      	ldr	r2, [pc, #272]	@ (8014d64 <acc_exploration_server_system_read_data_frames+0x404>)
 8014c54:	4944      	ldr	r1, [pc, #272]	@ (8014d68 <acc_exploration_server_system_read_data_frames+0x408>)
 8014c56:	f7ed fac7 	bl	80021e8 <acc_integration_log>
 8014c5a:	e7ad      	b.n	8014bb8 <acc_exploration_server_system_read_data_frames+0x258>
 8014c5c:	9c06      	ldr	r4, [sp, #24]
 8014c5e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8014c62:	2a00      	cmp	r2, #0
 8014c64:	d0a0      	beq.n	8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014c66:	4a45      	ldr	r2, [pc, #276]	@ (8014d7c <acc_exploration_server_system_read_data_frames+0x41c>)
 8014c68:	9802      	ldr	r0, [sp, #8]
 8014c6a:	4945      	ldr	r1, [pc, #276]	@ (8014d80 <acc_exploration_server_system_read_data_frames+0x420>)
 8014c6c:	f002 f83e 	bl	8016cec <add_json_string_value>
 8014c70:	2800      	cmp	r0, #0
 8014c72:	d099      	beq.n	8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014c74:	9a05      	ldr	r2, [sp, #20]
 8014c76:	4943      	ldr	r1, [pc, #268]	@ (8014d84 <acc_exploration_server_system_read_data_frames+0x424>)
 8014c78:	9802      	ldr	r0, [sp, #8]
 8014c7a:	f002 f81f 	bl	8016cbc <add_json_int_value>
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d092      	beq.n	8014ba8 <acc_exploration_server_system_read_data_frames+0x248>
 8014c82:	9902      	ldr	r1, [sp, #8]
 8014c84:	4620      	mov	r0, r4
 8014c86:	f7fe fbf3 	bl	8013470 <acc_exploration_server_write_json>
 8014c8a:	4606      	mov	r6, r0
 8014c8c:	2800      	cmp	r0, #0
 8014c8e:	d090      	beq.n	8014bb2 <acc_exploration_server_system_read_data_frames+0x252>
 8014c90:	4f3d      	ldr	r7, [pc, #244]	@ (8014d88 <acc_exploration_server_system_read_data_frames+0x428>)
 8014c92:	686b      	ldr	r3, [r5, #4]
 8014c94:	b193      	cbz	r3, 8014cbc <acc_exploration_server_system_read_data_frames+0x35c>
 8014c96:	f04f 0800 	mov.w	r8, #0
 8014c9a:	46c1      	mov	r9, r8
 8014c9c:	f8db 3000 	ldr.w	r3, [fp]
 8014ca0:	f109 0901 	add.w	r9, r9, #1
 8014ca4:	4443      	add	r3, r8
 8014ca6:	f108 0844 	add.w	r8, r8, #68	@ 0x44
 8014caa:	685a      	ldr	r2, [r3, #4]
 8014cac:	b11a      	cbz	r2, 8014cb6 <acc_exploration_server_system_read_data_frames+0x356>
 8014cae:	8a19      	ldrh	r1, [r3, #16]
 8014cb0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014cb2:	0089      	lsls	r1, r1, #2
 8014cb4:	47a0      	blx	r4
 8014cb6:	686b      	ldr	r3, [r5, #4]
 8014cb8:	4599      	cmp	r9, r3
 8014cba:	d3ef      	bcc.n	8014c9c <acc_exploration_server_system_read_data_frames+0x33c>
 8014cbc:	f10b 0b04 	add.w	fp, fp, #4
 8014cc0:	455f      	cmp	r7, fp
 8014cc2:	d1e6      	bne.n	8014c92 <acc_exploration_server_system_read_data_frames+0x332>
 8014cc4:	9802      	ldr	r0, [sp, #8]
 8014cc6:	f001 fbbf 	bl	8016448 <cJSON_Delete>
 8014cca:	e6e6      	b.n	8014a9a <acc_exploration_server_system_read_data_frames+0x13a>
 8014ccc:	f109 0901 	add.w	r9, r9, #1
 8014cd0:	3444      	adds	r4, #68	@ 0x44
 8014cd2:	454a      	cmp	r2, r9
 8014cd4:	f63f aea9 	bhi.w	8014a2a <acc_exploration_server_system_read_data_frames+0xca>
 8014cd8:	e6bb      	b.n	8014a52 <acc_exploration_server_system_read_data_frames+0xf2>
 8014cda:	f109 0901 	add.w	r9, r9, #1
 8014cde:	3444      	adds	r4, #68	@ 0x44
 8014ce0:	4591      	cmp	r9, r2
 8014ce2:	f4ff aebf 	bcc.w	8014a64 <acc_exploration_server_system_read_data_frames+0x104>
 8014ce6:	2a00      	cmp	r2, #0
 8014ce8:	f43f aefe 	beq.w	8014ae8 <acc_exploration_server_system_read_data_frames+0x188>
 8014cec:	f04f 0900 	mov.w	r9, #0
 8014cf0:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
 8014cf4:	eb09 1409 	add.w	r4, r9, r9, lsl #4
 8014cf8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8014cfc:	6863      	ldr	r3, [r4, #4]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	f43f aeec 	beq.w	8014adc <acc_exploration_server_system_read_data_frames+0x17c>
 8014d04:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8014d06:	6823      	ldr	r3, [r4, #0]
 8014d08:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8014d0a:	fb08 1303 	mla	r3, r8, r3, r1
 8014d0e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014d10:	f853 0cc8 	ldr.w	r0, [r3, #-200]
 8014d14:	f7f8 fd4c 	bl	800d7b0 <acc_sensor_read>
 8014d18:	4606      	mov	r6, r0
 8014d1a:	b180      	cbz	r0, 8014d3e <acc_exploration_server_system_read_data_frames+0x3de>
 8014d1c:	f104 022c 	add.w	r2, r4, #44	@ 0x2c
 8014d20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014d22:	68e0      	ldr	r0, [r4, #12]
 8014d24:	f109 0901 	add.w	r9, r9, #1
 8014d28:	f7f8 fb2a 	bl	800d380 <acc_processing_execute>
 8014d2c:	686a      	ldr	r2, [r5, #4]
 8014d2e:	454a      	cmp	r2, r9
 8014d30:	d952      	bls.n	8014dd8 <acc_exploration_server_system_read_data_frames+0x478>
 8014d32:	6839      	ldr	r1, [r7, #0]
 8014d34:	eb09 1409 	add.w	r4, r9, r9, lsl #4
 8014d38:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8014d3c:	e7de      	b.n	8014cfc <acc_exploration_server_system_read_data_frames+0x39c>
 8014d3e:	6823      	ldr	r3, [r4, #0]
 8014d40:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014d42:	fb08 2803 	mla	r8, r8, r3, r2
 8014d46:	f858 0cc8 	ldr.w	r0, [r8, #-200]
 8014d4a:	f7f8 fd7b 	bl	800d844 <acc_sensor_status>
 8014d4e:	e6c0      	b.n	8014ad2 <acc_exploration_server_system_read_data_frames+0x172>
 8014d50:	08020d84 	.word	0x08020d84
 8014d54:	080211d0 	.word	0x080211d0
 8014d58:	080208d4 	.word	0x080208d4
 8014d5c:	08021138 	.word	0x08021138
 8014d60:	080211dc 	.word	0x080211dc
 8014d64:	0801be5c 	.word	0x0801be5c
 8014d68:	08020e84 	.word	0x08020e84
 8014d6c:	08020df0 	.word	0x08020df0
 8014d70:	080211e4 	.word	0x080211e4
 8014d74:	080211f4 	.word	0x080211f4
 8014d78:	08021208 	.word	0x08021208
 8014d7c:	0802081c 	.word	0x0802081c
 8014d80:	0802077c 	.word	0x0802077c
 8014d84:	0802079c 	.word	0x0802079c
 8014d88:	240030a8 	.word	0x240030a8
 8014d8c:	24003080 	.word	0x24003080
 8014d90:	080142ed 	.word	0x080142ed
 8014d94:	6823      	ldr	r3, [r4, #0]
 8014d96:	4606      	mov	r6, r0
 8014d98:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014d9a:	fb08 2803 	mla	r8, r8, r3, r2
 8014d9e:	f858 0cc8 	ldr.w	r0, [r8, #-200]
 8014da2:	f7f8 fd4f 	bl	800d844 <acc_sensor_status>
 8014da6:	686b      	ldr	r3, [r5, #4]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	f47f ae92 	bne.w	8014ad2 <acc_exploration_server_system_read_data_frames+0x172>
 8014dae:	9b02      	ldr	r3, [sp, #8]
 8014db0:	2b08      	cmp	r3, #8
 8014db2:	bfcc      	ite	gt
 8014db4:	2300      	movgt	r3, #0
 8014db6:	f006 0301 	andle.w	r3, r6, #1
 8014dba:	e69b      	b.n	8014af4 <acc_exploration_server_system_read_data_frames+0x194>
 8014dbc:	f109 0901 	add.w	r9, r9, #1
 8014dc0:	686a      	ldr	r2, [r5, #4]
 8014dc2:	6423      	str	r3, [r4, #64]	@ 0x40
 8014dc4:	454a      	cmp	r2, r9
 8014dc6:	f63f ae62 	bhi.w	8014a8e <acc_exploration_server_system_read_data_frames+0x12e>
 8014dca:	2a00      	cmp	r2, #0
 8014dcc:	d0ef      	beq.n	8014dae <acc_exploration_server_system_read_data_frames+0x44e>
 8014dce:	2e00      	cmp	r6, #0
 8014dd0:	f43f ae7f 	beq.w	8014ad2 <acc_exploration_server_system_read_data_frames+0x172>
 8014dd4:	6839      	ldr	r1, [r7, #0]
 8014dd6:	e789      	b.n	8014cec <acc_exploration_server_system_read_data_frames+0x38c>
 8014dd8:	9b02      	ldr	r3, [sp, #8]
 8014dda:	2b08      	cmp	r3, #8
 8014ddc:	bfcc      	ite	gt
 8014dde:	2300      	movgt	r3, #0
 8014de0:	2301      	movle	r3, #1
 8014de2:	e687      	b.n	8014af4 <acc_exploration_server_system_read_data_frames+0x194>
 8014de4:	f1bb 0f00 	cmp.w	fp, #0
 8014de8:	f43f ae7e 	beq.w	8014ae8 <acc_exploration_server_system_read_data_frames+0x188>
 8014dec:	2601      	movs	r6, #1
 8014dee:	e7de      	b.n	8014dae <acc_exploration_server_system_read_data_frames+0x44e>

08014df0 <acc_exploration_server_system_parse_configuration>:
 8014df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df4:	4bb1      	ldr	r3, [pc, #708]	@ (80150bc <acc_exploration_server_system_parse_configuration+0x2cc>)
 8014df6:	4fb2      	ldr	r7, [pc, #712]	@ (80150c0 <acc_exploration_server_system_parse_configuration+0x2d0>)
 8014df8:	ed2d 8b02 	vpush	{d8}
 8014dfc:	b095      	sub	sp, #84	@ 0x54
 8014dfe:	f8d7 b030 	ldr.w	fp, [r7, #48]	@ 0x30
 8014e02:	600b      	str	r3, [r1, #0]
 8014e04:	ee08 0a10 	vmov	s16, r0
 8014e08:	910c      	str	r1, [sp, #48]	@ 0x30
 8014e0a:	49ae      	ldr	r1, [pc, #696]	@ (80150c4 <acc_exploration_server_system_parse_configuration+0x2d4>)
 8014e0c:	9203      	str	r2, [sp, #12]
 8014e0e:	f001 fee3 	bl	8016bd8 <is_json_node>
 8014e12:	2800      	cmp	r0, #0
 8014e14:	f040 8356 	bne.w	80154c4 <acc_exploration_server_system_parse_configuration+0x6d4>
 8014e18:	49ab      	ldr	r1, [pc, #684]	@ (80150c8 <acc_exploration_server_system_parse_configuration+0x2d8>)
 8014e1a:	ee18 0a10 	vmov	r0, s16
 8014e1e:	f001 fd99 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8014e22:	2800      	cmp	r0, #0
 8014e24:	d05e      	beq.n	8014ee4 <acc_exploration_server_system_parse_configuration+0xf4>
 8014e26:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8014e2a:	f1b8 0f00 	cmp.w	r8, #0
 8014e2e:	d059      	beq.n	8014ee4 <acc_exploration_server_system_parse_configuration+0xf4>
 8014e30:	2500      	movs	r5, #0
 8014e32:	f8df a2b4 	ldr.w	sl, [pc, #692]	@ 80150e8 <acc_exploration_server_system_parse_configuration+0x2f8>
 8014e36:	f8df 92d4 	ldr.w	r9, [pc, #724]	@ 801510c <acc_exploration_server_system_parse_configuration+0x31c>
 8014e3a:	4644      	mov	r4, r8
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
 8014e42:	f001 febb 	bl	8016bbc <cJSON_IsObject>
 8014e46:	aa12      	add	r2, sp, #72	@ 0x48
 8014e48:	4651      	mov	r1, sl
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	f000 83e8 	beq.w	8015620 <acc_exploration_server_system_parse_configuration+0x830>
 8014e50:	4620      	mov	r0, r4
 8014e52:	e9cd 5512 	strd	r5, r5, [sp, #72]	@ 0x48
 8014e56:	f001 fec7 	bl	8016be8 <get_json_int_value>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	aa13      	add	r2, sp, #76	@ 0x4c
 8014e5e:	4649      	mov	r1, r9
 8014e60:	4620      	mov	r0, r4
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	f000 83a2 	beq.w	80155ac <acc_exploration_server_system_parse_configuration+0x7bc>
 8014e68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	f340 839e 	ble.w	80155ac <acc_exploration_server_system_parse_configuration+0x7bc>
 8014e70:	683e      	ldr	r6, [r7, #0]
 8014e72:	429e      	cmp	r6, r3
 8014e74:	f0c0 839a 	bcc.w	80155ac <acc_exploration_server_system_parse_configuration+0x7bc>
 8014e78:	f001 feee 	bl	8016c58 <get_json_string_value>
 8014e7c:	22c0      	movs	r2, #192	@ 0xc0
 8014e7e:	b168      	cbz	r0, 8014e9c <acc_exploration_server_system_parse_configuration+0xac>
 8014e80:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	@ 0x48
 8014e84:	fb08 b101 	mla	r1, r8, r1, fp
 8014e88:	39c4      	subs	r1, #196	@ 0xc4
 8014e8a:	f000 fcfd 	bl	8015888 <convert_hexstr2uint>
 8014e8e:	b9c0      	cbnz	r0, 8014ec2 <acc_exploration_server_system_parse_configuration+0xd2>
 8014e90:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014e92:	2002      	movs	r0, #2
 8014e94:	4a8d      	ldr	r2, [pc, #564]	@ (80150cc <acc_exploration_server_system_parse_configuration+0x2dc>)
 8014e96:	498e      	ldr	r1, [pc, #568]	@ (80150d0 <acc_exploration_server_system_parse_configuration+0x2e0>)
 8014e98:	f7ed f9a6 	bl	80021e8 <acc_integration_log>
 8014e9c:	4b8d      	ldr	r3, [pc, #564]	@ (80150d4 <acc_exploration_server_system_parse_configuration+0x2e4>)
 8014e9e:	9a03      	ldr	r2, [sp, #12]
 8014ea0:	6013      	str	r3, [r2, #0]
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	ee18 0a10 	vmov	r0, s16
 8014ea8:	4a8b      	ldr	r2, [pc, #556]	@ (80150d8 <acc_exploration_server_system_parse_configuration+0x2e8>)
 8014eaa:	498c      	ldr	r1, [pc, #560]	@ (80150dc <acc_exploration_server_system_parse_configuration+0x2ec>)
 8014eac:	469a      	mov	sl, r3
 8014eae:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8014eb2:	f001 febd 	bl	8016c30 <get_json_bool_value>
 8014eb6:	4650      	mov	r0, sl
 8014eb8:	b015      	add	sp, #84	@ 0x54
 8014eba:	ecbd 8b02 	vpop	{d8}
 8014ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014ec4:	fb08 b000 	mla	r0, r8, r0, fp
 8014ec8:	38c4      	subs	r0, #196	@ 0xc4
 8014eca:	f7f8 fcbf 	bl	800d84c <acc_sensor_validate_calibration>
 8014ece:	2201      	movs	r2, #1
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d0dd      	beq.n	8014e90 <acc_exploration_server_system_parse_configuration+0xa0>
 8014ed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014ed6:	6824      	ldr	r4, [r4, #0]
 8014ed8:	fb08 b303 	mla	r3, r8, r3, fp
 8014edc:	f803 2c04 	strb.w	r2, [r3, #-4]
 8014ee0:	2c00      	cmp	r4, #0
 8014ee2:	d1ab      	bne.n	8014e3c <acc_exploration_server_system_parse_configuration+0x4c>
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	497d      	ldr	r1, [pc, #500]	@ (80150dc <acc_exploration_server_system_parse_configuration+0x2ec>)
 8014ee8:	4a7b      	ldr	r2, [pc, #492]	@ (80150d8 <acc_exploration_server_system_parse_configuration+0x2e8>)
 8014eea:	ee18 0a10 	vmov	r0, s16
 8014eee:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8014ef2:	f001 fe9d 	bl	8016c30 <get_json_bool_value>
 8014ef6:	497a      	ldr	r1, [pc, #488]	@ (80150e0 <acc_exploration_server_system_parse_configuration+0x2f0>)
 8014ef8:	ee18 0a10 	vmov	r0, s16
 8014efc:	f001 fd2a 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	f000 83a3 	beq.w	801564c <acc_exploration_server_system_parse_configuration+0x85c>
 8014f06:	6883      	ldr	r3, [r0, #8]
 8014f08:	9308      	str	r3, [sp, #32]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	f000 839e 	beq.w	801564c <acc_exploration_server_system_parse_configuration+0x85c>
 8014f10:	2301      	movs	r3, #1
 8014f12:	46da      	mov	sl, fp
 8014f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f16:	4b73      	ldr	r3, [pc, #460]	@ (80150e4 <acc_exploration_server_system_parse_configuration+0x2f4>)
 8014f18:	930d      	str	r3, [sp, #52]	@ 0x34
 8014f1a:	9307      	str	r3, [sp, #28]
 8014f1c:	9b08      	ldr	r3, [sp, #32]
 8014f1e:	689e      	ldr	r6, [r3, #8]
 8014f20:	2e00      	cmp	r6, #0
 8014f22:	d058      	beq.n	8014fd6 <acc_exploration_server_system_parse_configuration+0x1e6>
 8014f24:	2300      	movs	r3, #0
 8014f26:	46d3      	mov	fp, sl
 8014f28:	46b2      	mov	sl, r6
 8014f2a:	9304      	str	r3, [sp, #16]
 8014f2c:	9b04      	ldr	r3, [sp, #16]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	461a      	mov	r2, r3
 8014f32:	9304      	str	r3, [sp, #16]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	f200 810c 	bhi.w	8015154 <acc_exploration_server_system_parse_configuration+0x364>
 8014f3c:	9b07      	ldr	r3, [sp, #28]
 8014f3e:	4650      	mov	r0, sl
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	9302      	str	r3, [sp, #8]
 8014f44:	f001 fe3a 	bl	8016bbc <cJSON_IsObject>
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	d055      	beq.n	8014ff8 <acc_exploration_server_system_parse_configuration+0x208>
 8014f4c:	aa10      	add	r2, sp, #64	@ 0x40
 8014f4e:	4966      	ldr	r1, [pc, #408]	@ (80150e8 <acc_exploration_server_system_parse_configuration+0x2f8>)
 8014f50:	4650      	mov	r0, sl
 8014f52:	f001 fe49 	bl	8016be8 <get_json_int_value>
 8014f56:	2800      	cmp	r0, #0
 8014f58:	d045      	beq.n	8014fe6 <acc_exploration_server_system_parse_configuration+0x1f6>
 8014f5a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d042      	beq.n	8014fe6 <acc_exploration_server_system_parse_configuration+0x1f6>
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	4298      	cmp	r0, r3
 8014f64:	d83f      	bhi.n	8014fe6 <acc_exploration_server_system_parse_configuration+0x1f6>
 8014f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f68:	4403      	add	r3, r0
 8014f6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014f6e:	9306      	str	r3, [sp, #24]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d038      	beq.n	8014fe6 <acc_exploration_server_system_parse_configuration+0x1f6>
 8014f74:	9b04      	ldr	r3, [sp, #16]
 8014f76:	24c8      	movs	r4, #200	@ 0xc8
 8014f78:	9d02      	ldr	r5, [sp, #8]
 8014f7a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014f7e:	fb04 b200 	mla	r2, r4, r0, fp
 8014f82:	009b      	lsls	r3, r3, #2
 8014f84:	f1a3 0144 	sub.w	r1, r3, #68	@ 0x44
 8014f88:	f852 3cc8 	ldr.w	r3, [r2, #-200]
 8014f8c:	9105      	str	r1, [sp, #20]
 8014f8e:	5068      	str	r0, [r5, r1]
 8014f90:	440d      	add	r5, r1
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	f000 80bc 	beq.w	8015110 <acc_exploration_server_system_parse_configuration+0x320>
 8014f98:	2300      	movs	r3, #0
 8014f9a:	9306      	str	r3, [sp, #24]
 8014f9c:	4953      	ldr	r1, [pc, #332]	@ (80150ec <acc_exploration_server_system_parse_configuration+0x2fc>)
 8014f9e:	4650      	mov	r0, sl
 8014fa0:	f001 fcd8 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8014fa4:	4681      	mov	r9, r0
 8014fa6:	f001 fe09 	bl	8016bbc <cJSON_IsObject>
 8014faa:	bb50      	cbnz	r0, 8015002 <acc_exploration_server_system_parse_configuration+0x212>
 8014fac:	4b50      	ldr	r3, [pc, #320]	@ (80150f0 <acc_exploration_server_system_parse_configuration+0x300>)
 8014fae:	4604      	mov	r4, r0
 8014fb0:	9a03      	ldr	r2, [sp, #12]
 8014fb2:	6013      	str	r3, [r2, #0]
 8014fb4:	9b06      	ldr	r3, [sp, #24]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f000 83a5 	beq.w	8015706 <acc_exploration_server_system_parse_configuration+0x916>
 8014fbc:	9c02      	ldr	r4, [sp, #8]
 8014fbe:	9d05      	ldr	r5, [sp, #20]
 8014fc0:	5960      	ldr	r0, [r4, r5]
 8014fc2:	f7ed fa4f 	bl	8002464 <acc_hal_integration_sensor_disable>
 8014fc6:	5960      	ldr	r0, [r4, r5]
 8014fc8:	f7ed fa16 	bl	80023f8 <acc_hal_integration_sensor_supply_off>
 8014fcc:	f8da a000 	ldr.w	sl, [sl]
 8014fd0:	f1ba 0f00 	cmp.w	sl, #0
 8014fd4:	d1aa      	bne.n	8014f2c <acc_exploration_server_system_parse_configuration+0x13c>
 8014fd6:	f04f 0a00 	mov.w	sl, #0
 8014fda:	4650      	mov	r0, sl
 8014fdc:	b015      	add	sp, #84	@ 0x54
 8014fde:	ecbd 8b02 	vpop	{d8}
 8014fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fe6:	4b43      	ldr	r3, [pc, #268]	@ (80150f4 <acc_exploration_server_system_parse_configuration+0x304>)
 8014fe8:	9a03      	ldr	r2, [sp, #12]
 8014fea:	6013      	str	r3, [r2, #0]
 8014fec:	f8da a000 	ldr.w	sl, [sl]
 8014ff0:	f1ba 0f00 	cmp.w	sl, #0
 8014ff4:	d19a      	bne.n	8014f2c <acc_exploration_server_system_parse_configuration+0x13c>
 8014ff6:	e7ee      	b.n	8014fd6 <acc_exploration_server_system_parse_configuration+0x1e6>
 8014ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80150f8 <acc_exploration_server_system_parse_configuration+0x308>)
 8014ffa:	4935      	ldr	r1, [pc, #212]	@ (80150d0 <acc_exploration_server_system_parse_configuration+0x2e0>)
 8014ffc:	f7ed f8f4 	bl	80021e8 <acc_integration_log>
 8015000:	e7f4      	b.n	8014fec <acc_exploration_server_system_parse_configuration+0x1fc>
 8015002:	493e      	ldr	r1, [pc, #248]	@ (80150fc <acc_exploration_server_system_parse_configuration+0x30c>)
 8015004:	4648      	mov	r0, r9
 8015006:	f001 fe79 	bl	8016cfc <json_validate>
 801500a:	4604      	mov	r4, r0
 801500c:	2800      	cmp	r0, #0
 801500e:	f000 80ac 	beq.w	801516a <acc_exploration_server_system_parse_configuration+0x37a>
 8015012:	f7f7 fed7 	bl	800cdc4 <acc_config_create>
 8015016:	4680      	mov	r8, r0
 8015018:	2800      	cmp	r0, #0
 801501a:	f000 8298 	beq.w	801554e <acc_exploration_server_system_parse_configuration+0x75e>
 801501e:	4938      	ldr	r1, [pc, #224]	@ (8015100 <acc_exploration_server_system_parse_configuration+0x310>)
 8015020:	4648      	mov	r0, r9
 8015022:	f001 fc97 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8015026:	4606      	mov	r6, r0
 8015028:	f10d 003f 	add.w	r0, sp, #63	@ 0x3f
 801502c:	9b03      	ldr	r3, [sp, #12]
 801502e:	2200      	movs	r2, #0
 8015030:	4641      	mov	r1, r8
 8015032:	9000      	str	r0, [sp, #0]
 8015034:	4648      	mov	r0, r9
 8015036:	f7ff f83b 	bl	80140b0 <parse_subsweep_config>
 801503a:	4604      	mov	r4, r0
 801503c:	2800      	cmp	r0, #0
 801503e:	f000 8281 	beq.w	8015544 <acc_exploration_server_system_parse_configuration+0x754>
 8015042:	2e00      	cmp	r6, #0
 8015044:	f000 80a4 	beq.w	8015190 <acc_exploration_server_system_parse_configuration+0x3a0>
 8015048:	f89d 403f 	ldrb.w	r4, [sp, #63]	@ 0x3f
 801504c:	2c00      	cmp	r4, #0
 801504e:	f040 82b6 	bne.w	80155be <acc_exploration_server_system_parse_configuration+0x7ce>
 8015052:	68b6      	ldr	r6, [r6, #8]
 8015054:	2e00      	cmp	r6, #0
 8015056:	f000 82f0 	beq.w	801563a <acc_exploration_server_system_parse_configuration+0x84a>
 801505a:	ee08 9a90 	vmov	s17, r9
 801505e:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8015062:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015066:	46aa      	mov	sl, r5
 8015068:	4625      	mov	r5, r4
 801506a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801506c:	4925      	ldr	r1, [pc, #148]	@ (8015104 <acc_exploration_server_system_parse_configuration+0x314>)
 801506e:	4630      	mov	r0, r6
 8015070:	f001 fe44 	bl	8016cfc <json_validate>
 8015074:	4684      	mov	ip, r0
 8015076:	1c6c      	adds	r4, r5, #1
 8015078:	462a      	mov	r2, r5
 801507a:	4665      	mov	r5, ip
 801507c:	4630      	mov	r0, r6
 801507e:	464b      	mov	r3, r9
 8015080:	4641      	mov	r1, r8
 8015082:	b2e4      	uxtb	r4, r4
 8015084:	2d00      	cmp	r5, #0
 8015086:	f000 82a3 	beq.w	80155d0 <acc_exploration_server_system_parse_configuration+0x7e0>
 801508a:	2500      	movs	r5, #0
 801508c:	9500      	str	r5, [sp, #0]
 801508e:	4625      	mov	r5, r4
 8015090:	f7ff f80e 	bl	80140b0 <parse_subsweep_config>
 8015094:	2800      	cmp	r0, #0
 8015096:	f000 82a8 	beq.w	80155ea <acc_exploration_server_system_parse_configuration+0x7fa>
 801509a:	6836      	ldr	r6, [r6, #0]
 801509c:	2e00      	cmp	r6, #0
 801509e:	d06d      	beq.n	801517c <acc_exploration_server_system_parse_configuration+0x38c>
 80150a0:	2c04      	cmp	r4, #4
 80150a2:	d1e3      	bne.n	801506c <acc_exploration_server_system_parse_configuration+0x27c>
 80150a4:	4b18      	ldr	r3, [pc, #96]	@ (8015108 <acc_exploration_server_system_parse_configuration+0x318>)
 80150a6:	4640      	mov	r0, r8
 80150a8:	9a03      	ldr	r2, [sp, #12]
 80150aa:	4655      	mov	r5, sl
 80150ac:	6013      	str	r3, [r2, #0]
 80150ae:	e9dd a40a 	ldrd	sl, r4, [sp, #40]	@ 0x28
 80150b2:	f7f7 fe9f 	bl	800cdf4 <acc_config_destroy>
 80150b6:	2300      	movs	r3, #0
 80150b8:	606b      	str	r3, [r5, #4]
 80150ba:	e77b      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 80150bc:	bf800000 	.word	0xbf800000
 80150c0:	24003078 	.word	0x24003078
 80150c4:	08021218 	.word	0x08021218
 80150c8:	08021104 	.word	0x08021104
 80150cc:	08021354 	.word	0x08021354
 80150d0:	08020e84 	.word	0x08020e84
 80150d4:	08020aec 	.word	0x08020aec
 80150d8:	240030b8 	.word	0x240030b8
 80150dc:	08021224 	.word	0x08021224
 80150e0:	0802138c 	.word	0x0802138c
 80150e4:	24003080 	.word	0x24003080
 80150e8:	0801b930 	.word	0x0801b930
 80150ec:	08021270 	.word	0x08021270
 80150f0:	08020d1c 	.word	0x08020d1c
 80150f4:	08020bbc 	.word	0x08020bbc
 80150f8:	08021238 	.word	0x08021238
 80150fc:	080213d0 	.word	0x080213d0
 8015100:	08021290 	.word	0x08021290
 8015104:	080214a8 	.word	0x080214a8
 8015108:	08020e34 	.word	0x08020e34
 801510c:	0801bab4 	.word	0x0801bab4
 8015110:	f7ed f962 	bl	80023d8 <acc_hal_integration_sensor_supply_on>
 8015114:	9e02      	ldr	r6, [sp, #8]
 8015116:	9a05      	ldr	r2, [sp, #20]
 8015118:	58b0      	ldr	r0, [r6, r2]
 801511a:	f7ed f97d 	bl	8002418 <acc_hal_integration_sensor_enable>
 801511e:	9a05      	ldr	r2, [sp, #20]
 8015120:	49b8      	ldr	r1, [pc, #736]	@ (8015404 <acc_exploration_server_system_parse_configuration+0x614>)
 8015122:	2002      	movs	r0, #2
 8015124:	58b3      	ldr	r3, [r6, r2]
 8015126:	4ab8      	ldr	r2, [pc, #736]	@ (8015408 <acc_exploration_server_system_parse_configuration+0x618>)
 8015128:	f7ed f85e 	bl	80021e8 <acc_integration_log>
 801512c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801512e:	fb04 f600 	mul.w	r6, r4, r0
 8015132:	f7f8 fa19 	bl	800d568 <acc_sensor_create>
 8015136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015138:	3ec8      	subs	r6, #200	@ 0xc8
 801513a:	fb04 b403 	mla	r4, r4, r3, fp
 801513e:	f84b 0006 	str.w	r0, [fp, r6]
 8015142:	f854 3cc8 	ldr.w	r3, [r4, #-200]
 8015146:	2b00      	cmp	r3, #0
 8015148:	f47f af28 	bne.w	8014f9c <acc_exploration_server_system_parse_configuration+0x1ac>
 801514c:	4baf      	ldr	r3, [pc, #700]	@ (801540c <acc_exploration_server_system_parse_configuration+0x61c>)
 801514e:	9a03      	ldr	r2, [sp, #12]
 8015150:	6013      	str	r3, [r2, #0]
 8015152:	e733      	b.n	8014fbc <acc_exploration_server_system_parse_configuration+0x1cc>
 8015154:	f04f 0a00 	mov.w	sl, #0
 8015158:	4bad      	ldr	r3, [pc, #692]	@ (8015410 <acc_exploration_server_system_parse_configuration+0x620>)
 801515a:	9a03      	ldr	r2, [sp, #12]
 801515c:	4650      	mov	r0, sl
 801515e:	6013      	str	r3, [r2, #0]
 8015160:	b015      	add	sp, #84	@ 0x54
 8015162:	ecbd 8b02 	vpop	{d8}
 8015166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801516a:	4baa      	ldr	r3, [pc, #680]	@ (8015414 <acc_exploration_server_system_parse_configuration+0x624>)
 801516c:	9e03      	ldr	r6, [sp, #12]
 801516e:	49a5      	ldr	r1, [pc, #660]	@ (8015404 <acc_exploration_server_system_parse_configuration+0x614>)
 8015170:	4aa9      	ldr	r2, [pc, #676]	@ (8015418 <acc_exploration_server_system_parse_configuration+0x628>)
 8015172:	6033      	str	r3, [r6, #0]
 8015174:	f7ed f838 	bl	80021e8 <acc_integration_log>
 8015178:	606c      	str	r4, [r5, #4]
 801517a:	e71b      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 801517c:	4655      	mov	r5, sl
 801517e:	ee18 9a90 	vmov	r9, s17
 8015182:	4623      	mov	r3, r4
 8015184:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015188:	4619      	mov	r1, r3
 801518a:	4640      	mov	r0, r8
 801518c:	f7f7 fe4a 	bl	800ce24 <acc_config_num_subsweeps_set>
 8015190:	49a2      	ldr	r1, [pc, #648]	@ (801541c <acc_exploration_server_system_parse_configuration+0x62c>)
 8015192:	4648      	mov	r0, r9
 8015194:	aa12      	add	r2, sp, #72	@ 0x48
 8015196:	f001 fd37 	bl	8016c08 <get_json_float_value>
 801519a:	2800      	cmp	r0, #0
 801519c:	f040 8200 	bne.w	80155a0 <acc_exploration_server_system_parse_configuration+0x7b0>
 80151a0:	aa11      	add	r2, sp, #68	@ 0x44
 80151a2:	499f      	ldr	r1, [pc, #636]	@ (8015420 <acc_exploration_server_system_parse_configuration+0x630>)
 80151a4:	4648      	mov	r0, r9
 80151a6:	f001 fd1f 	bl	8016be8 <get_json_int_value>
 80151aa:	2800      	cmp	r0, #0
 80151ac:	f040 81f2 	bne.w	8015594 <acc_exploration_server_system_parse_configuration+0x7a4>
 80151b0:	aa12      	add	r2, sp, #72	@ 0x48
 80151b2:	499c      	ldr	r1, [pc, #624]	@ (8015424 <acc_exploration_server_system_parse_configuration+0x634>)
 80151b4:	4648      	mov	r0, r9
 80151b6:	f001 fd27 	bl	8016c08 <get_json_float_value>
 80151ba:	2800      	cmp	r0, #0
 80151bc:	f040 81e4 	bne.w	8015588 <acc_exploration_server_system_parse_configuration+0x798>
 80151c0:	4999      	ldr	r1, [pc, #612]	@ (8015428 <acc_exploration_server_system_parse_configuration+0x638>)
 80151c2:	4648      	mov	r0, r9
 80151c4:	f10d 023e 	add.w	r2, sp, #62	@ 0x3e
 80151c8:	f001 fd32 	bl	8016c30 <get_json_bool_value>
 80151cc:	2800      	cmp	r0, #0
 80151ce:	f040 81d5 	bne.w	801557c <acc_exploration_server_system_parse_configuration+0x78c>
 80151d2:	f10d 023e 	add.w	r2, sp, #62	@ 0x3e
 80151d6:	4995      	ldr	r1, [pc, #596]	@ (801542c <acc_exploration_server_system_parse_configuration+0x63c>)
 80151d8:	4648      	mov	r0, r9
 80151da:	f001 fd29 	bl	8016c30 <get_json_bool_value>
 80151de:	2800      	cmp	r0, #0
 80151e0:	f040 81c6 	bne.w	8015570 <acc_exploration_server_system_parse_configuration+0x780>
 80151e4:	f10d 023e 	add.w	r2, sp, #62	@ 0x3e
 80151e8:	4991      	ldr	r1, [pc, #580]	@ (8015430 <acc_exploration_server_system_parse_configuration+0x640>)
 80151ea:	4648      	mov	r0, r9
 80151ec:	f001 fd20 	bl	8016c30 <get_json_bool_value>
 80151f0:	2800      	cmp	r0, #0
 80151f2:	f040 81b7 	bne.w	8015564 <acc_exploration_server_system_parse_configuration+0x774>
 80151f6:	498f      	ldr	r1, [pc, #572]	@ (8015434 <acc_exploration_server_system_parse_configuration+0x644>)
 80151f8:	4648      	mov	r0, r9
 80151fa:	aa13      	add	r2, sp, #76	@ 0x4c
 80151fc:	f001 fd2c 	bl	8016c58 <get_json_string_value>
 8015200:	b1c8      	cbz	r0, 8015236 <acc_exploration_server_system_parse_configuration+0x446>
 8015202:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015204:	498c      	ldr	r1, [pc, #560]	@ (8015438 <acc_exploration_server_system_parse_configuration+0x648>)
 8015206:	4620      	mov	r0, r4
 8015208:	f7eb f86a 	bl	80002e0 <strcmp>
 801520c:	2800      	cmp	r0, #0
 801520e:	f000 81f8 	beq.w	8015602 <acc_exploration_server_system_parse_configuration+0x812>
 8015212:	498a      	ldr	r1, [pc, #552]	@ (801543c <acc_exploration_server_system_parse_configuration+0x64c>)
 8015214:	4620      	mov	r0, r4
 8015216:	f7eb f863 	bl	80002e0 <strcmp>
 801521a:	2800      	cmp	r0, #0
 801521c:	f000 81fb 	beq.w	8015616 <acc_exploration_server_system_parse_configuration+0x826>
 8015220:	4620      	mov	r0, r4
 8015222:	4987      	ldr	r1, [pc, #540]	@ (8015440 <acc_exploration_server_system_parse_configuration+0x650>)
 8015224:	f7eb f85c 	bl	80002e0 <strcmp>
 8015228:	2800      	cmp	r0, #0
 801522a:	f040 8208 	bne.w	801563e <acc_exploration_server_system_parse_configuration+0x84e>
 801522e:	2102      	movs	r1, #2
 8015230:	4640      	mov	r0, r8
 8015232:	f7f7 ffe1 	bl	800d1f8 <acc_config_inter_frame_idle_state_set>
 8015236:	4648      	mov	r0, r9
 8015238:	aa13      	add	r2, sp, #76	@ 0x4c
 801523a:	4982      	ldr	r1, [pc, #520]	@ (8015444 <acc_exploration_server_system_parse_configuration+0x654>)
 801523c:	f001 fd0c 	bl	8016c58 <get_json_string_value>
 8015240:	b1c8      	cbz	r0, 8015276 <acc_exploration_server_system_parse_configuration+0x486>
 8015242:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015244:	497c      	ldr	r1, [pc, #496]	@ (8015438 <acc_exploration_server_system_parse_configuration+0x648>)
 8015246:	4620      	mov	r0, r4
 8015248:	f7eb f84a 	bl	80002e0 <strcmp>
 801524c:	2800      	cmp	r0, #0
 801524e:	f000 81dd 	beq.w	801560c <acc_exploration_server_system_parse_configuration+0x81c>
 8015252:	497a      	ldr	r1, [pc, #488]	@ (801543c <acc_exploration_server_system_parse_configuration+0x64c>)
 8015254:	4620      	mov	r0, r4
 8015256:	f7eb f843 	bl	80002e0 <strcmp>
 801525a:	2800      	cmp	r0, #0
 801525c:	f000 81aa 	beq.w	80155b4 <acc_exploration_server_system_parse_configuration+0x7c4>
 8015260:	4620      	mov	r0, r4
 8015262:	4977      	ldr	r1, [pc, #476]	@ (8015440 <acc_exploration_server_system_parse_configuration+0x650>)
 8015264:	f7eb f83c 	bl	80002e0 <strcmp>
 8015268:	2800      	cmp	r0, #0
 801526a:	f040 8245 	bne.w	80156f8 <acc_exploration_server_system_parse_configuration+0x908>
 801526e:	2102      	movs	r1, #2
 8015270:	4640      	mov	r0, r8
 8015272:	f7f7 ffd7 	bl	800d224 <acc_config_inter_sweep_idle_state_set>
 8015276:	f04f 0900 	mov.w	r9, #0
 801527a:	4973      	ldr	r1, [pc, #460]	@ (8015448 <acc_exploration_server_system_parse_configuration+0x658>)
 801527c:	4650      	mov	r0, sl
 801527e:	f8c5 8004 	str.w	r8, [r5, #4]
 8015282:	f8c5 9008 	str.w	r9, [r5, #8]
 8015286:	f001 fb65 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 801528a:	4606      	mov	r6, r0
 801528c:	2800      	cmp	r0, #0
 801528e:	d046      	beq.n	801531e <acc_exploration_server_system_parse_configuration+0x52e>
 8015290:	496e      	ldr	r1, [pc, #440]	@ (801544c <acc_exploration_server_system_parse_configuration+0x65c>)
 8015292:	f001 fd33 	bl	8016cfc <json_validate>
 8015296:	4604      	mov	r4, r0
 8015298:	2800      	cmp	r0, #0
 801529a:	f000 810d 	beq.w	80154b8 <acc_exploration_server_system_parse_configuration+0x6c8>
 801529e:	2034      	movs	r0, #52	@ 0x34
 80152a0:	f7ed fa0d 	bl	80026be <acc_integration_mem_alloc>
 80152a4:	4680      	mov	r8, r0
 80152a6:	2800      	cmp	r0, #0
 80152a8:	f000 80fb 	beq.w	80154a2 <acc_exploration_server_system_parse_configuration+0x6b2>
 80152ac:	4b68      	ldr	r3, [pc, #416]	@ (8015450 <acc_exploration_server_system_parse_configuration+0x660>)
 80152ae:	4649      	mov	r1, r9
 80152b0:	2234      	movs	r2, #52	@ 0x34
 80152b2:	4c68      	ldr	r4, [pc, #416]	@ (8015454 <acc_exploration_server_system_parse_configuration+0x664>)
 80152b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80152b6:	f003 fb17 	bl	80188e8 <memset>
 80152ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80152bc:	f104 0928 	add.w	r9, r4, #40	@ 0x28
 80152c0:	950a      	str	r5, [sp, #40]	@ 0x28
 80152c2:	461d      	mov	r5, r3
 80152c4:	e003      	b.n	80152ce <acc_exploration_server_system_parse_configuration+0x4de>
 80152c6:	45a1      	cmp	r9, r4
 80152c8:	d01f      	beq.n	801530a <acc_exploration_server_system_parse_configuration+0x51a>
 80152ca:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80152ce:	aa13      	add	r2, sp, #76	@ 0x4c
 80152d0:	4629      	mov	r1, r5
 80152d2:	4630      	mov	r0, r6
 80152d4:	f001 fc88 	bl	8016be8 <get_json_int_value>
 80152d8:	2800      	cmp	r0, #0
 80152da:	d0f4      	beq.n	80152c6 <acc_exploration_server_system_parse_configuration+0x4d6>
 80152dc:	f8d8 0000 	ldr.w	r0, [r8]
 80152e0:	462b      	mov	r3, r5
 80152e2:	6861      	ldr	r1, [r4, #4]
 80152e4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80152e6:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 80152ea:	4a5b      	ldr	r2, [pc, #364]	@ (8015458 <acc_exploration_server_system_parse_configuration+0x668>)
 80152ec:	6081      	str	r1, [r0, #8]
 80152ee:	6045      	str	r5, [r0, #4]
 80152f0:	2002      	movs	r0, #2
 80152f2:	4944      	ldr	r1, [pc, #272]	@ (8015404 <acc_exploration_server_system_parse_configuration+0x614>)
 80152f4:	9500      	str	r5, [sp, #0]
 80152f6:	f7ec ff77 	bl	80021e8 <acc_integration_log>
 80152fa:	f8d8 3000 	ldr.w	r3, [r8]
 80152fe:	45a1      	cmp	r9, r4
 8015300:	f103 0301 	add.w	r3, r3, #1
 8015304:	f8c8 3000 	str.w	r3, [r8]
 8015308:	d1df      	bne.n	80152ca <acc_exploration_server_system_parse_configuration+0x4da>
 801530a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801530c:	2002      	movs	r0, #2
 801530e:	f8d8 3000 	ldr.w	r3, [r8]
 8015312:	493c      	ldr	r1, [pc, #240]	@ (8015404 <acc_exploration_server_system_parse_configuration+0x614>)
 8015314:	4a51      	ldr	r2, [pc, #324]	@ (801545c <acc_exploration_server_system_parse_configuration+0x66c>)
 8015316:	f7ec ff67 	bl	80021e8 <acc_integration_log>
 801531a:	f8c5 8008 	str.w	r8, [r5, #8]
 801531e:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 8015322:	6868      	ldr	r0, [r5, #4]
 8015324:	f7f7 fd1c 	bl	800cd60 <acc_rss_get_buffer_size>
 8015328:	4604      	mov	r4, r0
 801532a:	b918      	cbnz	r0, 8015334 <acc_exploration_server_system_parse_configuration+0x544>
 801532c:	4b4c      	ldr	r3, [pc, #304]	@ (8015460 <acc_exploration_server_system_parse_configuration+0x670>)
 801532e:	9a03      	ldr	r2, [sp, #12]
 8015330:	6013      	str	r3, [r2, #0]
 8015332:	e63f      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 8015334:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8015336:	f7ed f9c2 	bl	80026be <acc_integration_mem_alloc>
 801533a:	4604      	mov	r4, r0
 801533c:	63a8      	str	r0, [r5, #56]	@ 0x38
 801533e:	b920      	cbnz	r0, 801534a <acc_exploration_server_system_parse_configuration+0x55a>
 8015340:	4a48      	ldr	r2, [pc, #288]	@ (8015464 <acc_exploration_server_system_parse_configuration+0x674>)
 8015342:	4930      	ldr	r1, [pc, #192]	@ (8015404 <acc_exploration_server_system_parse_configuration+0x614>)
 8015344:	f7ec ff50 	bl	80021e8 <acc_integration_log>
 8015348:	e634      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 801534a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801534c:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
 8015350:	fb08 b906 	mla	r9, r8, r6, fp
 8015354:	f819 4c04 	ldrb.w	r4, [r9, #-4]
 8015358:	f1a9 09c8 	sub.w	r9, r9, #200	@ 0xc8
 801535c:	b19c      	cbz	r4, 8015386 <acc_exploration_server_system_parse_configuration+0x596>
 801535e:	f105 0110 	add.w	r1, r5, #16
 8015362:	6868      	ldr	r0, [r5, #4]
 8015364:	f7f8 f86c 	bl	800d440 <acc_processing_create>
 8015368:	60e8      	str	r0, [r5, #12]
 801536a:	2800      	cmp	r0, #0
 801536c:	f000 808b 	beq.w	8015486 <acc_exploration_server_system_parse_configuration+0x696>
 8015370:	9903      	ldr	r1, [sp, #12]
 8015372:	2000      	movs	r0, #0
 8015374:	f7ff faf4 	bl	8014960 <acc_exploration_server_system_read_data_frames>
 8015378:	9a06      	ldr	r2, [sp, #24]
 801537a:	f080 0301 	eor.w	r3, r0, #1
 801537e:	4604      	mov	r4, r0
 8015380:	401a      	ands	r2, r3
 8015382:	9206      	str	r2, [sp, #24]
 8015384:	e616      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 8015386:	f109 0904 	add.w	r9, r9, #4
 801538a:	22c0      	movs	r2, #192	@ 0xc0
 801538c:	4621      	mov	r1, r4
 801538e:	4648      	mov	r0, r9
 8015390:	f003 faaa 	bl	80188e8 <memset>
 8015394:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015398:	2b00      	cmp	r3, #0
 801539a:	d179      	bne.n	8015490 <acc_exploration_server_system_parse_configuration+0x6a0>
 801539c:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
 80153a0:	464a      	mov	r2, r9
 80153a2:	4630      	mov	r0, r6
 80153a4:	fb08 f000 	mul.w	r0, r8, r0
 80153a8:	6bee      	ldr	r6, [r5, #60]	@ 0x3c
 80153aa:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80153ac:	38c8      	subs	r0, #200	@ 0xc8
 80153ae:	eb0b 0100 	add.w	r1, fp, r0
 80153b2:	f85b 0000 	ldr.w	r0, [fp, r0]
 80153b6:	9600      	str	r6, [sp, #0]
 80153b8:	31c4      	adds	r1, #196	@ 0xc4
 80153ba:	f7f8 f91f 	bl	800d5fc <acc_sensor_calibrate>
 80153be:	2800      	cmp	r0, #0
 80153c0:	d052      	beq.n	8015468 <acc_exploration_server_system_parse_configuration+0x678>
 80153c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80153c4:	fb08 b303 	mla	r3, r8, r3, fp
 80153c8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80153cc:	b15b      	cbz	r3, 80153e6 <acc_exploration_server_system_parse_configuration+0x5f6>
 80153ce:	2000      	movs	r0, #0
 80153d0:	f7fd fa5a 	bl	8012888 <acc_diagnostic_log_enable>
 80153d4:	9c02      	ldr	r4, [sp, #8]
 80153d6:	9e05      	ldr	r6, [sp, #20]
 80153d8:	59a0      	ldr	r0, [r4, r6]
 80153da:	f7ed f843 	bl	8002464 <acc_hal_integration_sensor_disable>
 80153de:	59a0      	ldr	r0, [r4, r6]
 80153e0:	f7ed f81a 	bl	8002418 <acc_hal_integration_sensor_enable>
 80153e4:	e7bb      	b.n	801535e <acc_exploration_server_system_parse_configuration+0x56e>
 80153e6:	4628      	mov	r0, r5
 80153e8:	f7fe ff98 	bl	801431c <group_item_sensor_wait_for_interrupt.isra.0.constprop.0>
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d03b      	beq.n	8015468 <acc_exploration_server_system_parse_configuration+0x678>
 80153f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80153f2:	fb08 b200 	mla	r2, r8, r0, fp
 80153f6:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 80153fa:	3ac8      	subs	r2, #200	@ 0xc8
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d1e6      	bne.n	80153ce <acc_exploration_server_system_parse_configuration+0x5de>
 8015400:	3204      	adds	r2, #4
 8015402:	e7cf      	b.n	80153a4 <acc_exploration_server_system_parse_configuration+0x5b4>
 8015404:	08020e84 	.word	0x08020e84
 8015408:	0802124c 	.word	0x0802124c
 801540c:	08020d64 	.word	0x08020d64
 8015410:	08020b48 	.word	0x08020b48
 8015414:	08020abc 	.word	0x08020abc
 8015418:	08021268 	.word	0x08021268
 801541c:	0801c720 	.word	0x0801c720
 8015420:	0802129c 	.word	0x0802129c
 8015424:	0801c6e0 	.word	0x0801c6e0
 8015428:	080212b0 	.word	0x080212b0
 801542c:	080212c8 	.word	0x080212c8
 8015430:	0801c530 	.word	0x0801c530
 8015434:	0801c7b0 	.word	0x0801c7b0
 8015438:	080212dc 	.word	0x080212dc
 801543c:	080212e8 	.word	0x080212e8
 8015440:	080212f0 	.word	0x080212f0
 8015444:	0801c6a4 	.word	0x0801c6a4
 8015448:	0802137c 	.word	0x0802137c
 801544c:	08021470 	.word	0x08021470
 8015450:	0801bba8 	.word	0x0801bba8
 8015454:	08021500 	.word	0x08021500
 8015458:	0802130c 	.word	0x0802130c
 801545c:	0802132c 	.word	0x0802132c
 8015460:	08020da8 	.word	0x08020da8
 8015464:	0801be5c 	.word	0x0801be5c
 8015468:	2000      	movs	r0, #0
 801546a:	f7fd fa0d 	bl	8012888 <acc_diagnostic_log_enable>
 801546e:	9d02      	ldr	r5, [sp, #8]
 8015470:	9e05      	ldr	r6, [sp, #20]
 8015472:	4bb4      	ldr	r3, [pc, #720]	@ (8015744 <acc_exploration_server_system_parse_configuration+0x954>)
 8015474:	9a03      	ldr	r2, [sp, #12]
 8015476:	59a8      	ldr	r0, [r5, r6]
 8015478:	6013      	str	r3, [r2, #0]
 801547a:	f7ec fff3 	bl	8002464 <acc_hal_integration_sensor_disable>
 801547e:	59a8      	ldr	r0, [r5, r6]
 8015480:	f7ec ffca 	bl	8002418 <acc_hal_integration_sensor_enable>
 8015484:	e596      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 8015486:	4bb0      	ldr	r3, [pc, #704]	@ (8015748 <acc_exploration_server_system_parse_configuration+0x958>)
 8015488:	4604      	mov	r4, r0
 801548a:	9a03      	ldr	r2, [sp, #12]
 801548c:	6013      	str	r3, [r2, #0]
 801548e:	e591      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 8015490:	2001      	movs	r0, #1
 8015492:	f7fd f9f9 	bl	8012888 <acc_diagnostic_log_enable>
 8015496:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015498:	fb08 b906 	mla	r9, r8, r6, fp
 801549c:	f1a9 09c4 	sub.w	r9, r9, #196	@ 0xc4
 80154a0:	e77c      	b.n	801539c <acc_exploration_server_system_parse_configuration+0x5ac>
 80154a2:	4aaa      	ldr	r2, [pc, #680]	@ (801574c <acc_exploration_server_system_parse_configuration+0x95c>)
 80154a4:	49aa      	ldr	r1, [pc, #680]	@ (8015750 <acc_exploration_server_system_parse_configuration+0x960>)
 80154a6:	f7ec fe9f 	bl	80021e8 <acc_integration_log>
 80154aa:	f8c5 8008 	str.w	r8, [r5, #8]
 80154ae:	4ba9      	ldr	r3, [pc, #676]	@ (8015754 <acc_exploration_server_system_parse_configuration+0x964>)
 80154b0:	2400      	movs	r4, #0
 80154b2:	9a03      	ldr	r2, [sp, #12]
 80154b4:	6013      	str	r3, [r2, #0]
 80154b6:	e57d      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 80154b8:	4aa7      	ldr	r2, [pc, #668]	@ (8015758 <acc_exploration_server_system_parse_configuration+0x968>)
 80154ba:	49a5      	ldr	r1, [pc, #660]	@ (8015750 <acc_exploration_server_system_parse_configuration+0x960>)
 80154bc:	f7ec fe94 	bl	80021e8 <acc_integration_log>
 80154c0:	60ac      	str	r4, [r5, #8]
 80154c2:	e7f4      	b.n	80154ae <acc_exploration_server_system_parse_configuration+0x6be>
 80154c4:	aa13      	add	r2, sp, #76	@ 0x4c
 80154c6:	49a5      	ldr	r1, [pc, #660]	@ (801575c <acc_exploration_server_system_parse_configuration+0x96c>)
 80154c8:	ee18 0a10 	vmov	r0, s16
 80154cc:	f001 fbc4 	bl	8016c58 <get_json_string_value>
 80154d0:	2800      	cmp	r0, #0
 80154d2:	f43f aca1 	beq.w	8014e18 <acc_exploration_server_system_parse_configuration+0x28>
 80154d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80154d8:	49a1      	ldr	r1, [pc, #644]	@ (8015760 <acc_exploration_server_system_parse_configuration+0x970>)
 80154da:	4620      	mov	r0, r4
 80154dc:	f7ea ff00 	bl	80002e0 <strcmp>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	f000 80a6 	beq.w	8015632 <acc_exploration_server_system_parse_configuration+0x842>
 80154e6:	499f      	ldr	r1, [pc, #636]	@ (8015764 <acc_exploration_server_system_parse_configuration+0x974>)
 80154e8:	4620      	mov	r0, r4
 80154ea:	f7ea fef9 	bl	80002e0 <strcmp>
 80154ee:	2800      	cmp	r0, #0
 80154f0:	f000 80f8 	beq.w	80156e4 <acc_exploration_server_system_parse_configuration+0x8f4>
 80154f4:	499c      	ldr	r1, [pc, #624]	@ (8015768 <acc_exploration_server_system_parse_configuration+0x978>)
 80154f6:	4620      	mov	r0, r4
 80154f8:	f7ea fef2 	bl	80002e0 <strcmp>
 80154fc:	2800      	cmp	r0, #0
 80154fe:	f000 80a0 	beq.w	8015642 <acc_exploration_server_system_parse_configuration+0x852>
 8015502:	499a      	ldr	r1, [pc, #616]	@ (801576c <acc_exploration_server_system_parse_configuration+0x97c>)
 8015504:	4620      	mov	r0, r4
 8015506:	f7ea feeb 	bl	80002e0 <strcmp>
 801550a:	2800      	cmp	r0, #0
 801550c:	f000 8090 	beq.w	8015630 <acc_exploration_server_system_parse_configuration+0x840>
 8015510:	4620      	mov	r0, r4
 8015512:	4997      	ldr	r1, [pc, #604]	@ (8015770 <acc_exploration_server_system_parse_configuration+0x980>)
 8015514:	f7ea fee4 	bl	80002e0 <strcmp>
 8015518:	2800      	cmp	r0, #0
 801551a:	f000 80ef 	beq.w	80156fc <acc_exploration_server_system_parse_configuration+0x90c>
 801551e:	9a03      	ldr	r2, [sp, #12]
 8015520:	ee18 0a10 	vmov	r0, s16
 8015524:	4b93      	ldr	r3, [pc, #588]	@ (8015774 <acc_exploration_server_system_parse_configuration+0x984>)
 8015526:	f04f 0a00 	mov.w	sl, #0
 801552a:	4993      	ldr	r1, [pc, #588]	@ (8015778 <acc_exploration_server_system_parse_configuration+0x988>)
 801552c:	6013      	str	r3, [r2, #0]
 801552e:	f001 fa11 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8015532:	463a      	mov	r2, r7
 8015534:	ee18 0a10 	vmov	r0, s16
 8015538:	4990      	ldr	r1, [pc, #576]	@ (801577c <acc_exploration_server_system_parse_configuration+0x98c>)
 801553a:	f802 af40 	strb.w	sl, [r2, #64]!
 801553e:	f001 fb77 	bl	8016c30 <get_json_bool_value>
 8015542:	e4b8      	b.n	8014eb6 <acc_exploration_server_system_parse_configuration+0xc6>
 8015544:	4640      	mov	r0, r8
 8015546:	f7f7 fc55 	bl	800cdf4 <acc_config_destroy>
 801554a:	606c      	str	r4, [r5, #4]
 801554c:	e532      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 801554e:	9c03      	ldr	r4, [sp, #12]
 8015550:	4b8b      	ldr	r3, [pc, #556]	@ (8015780 <acc_exploration_server_system_parse_configuration+0x990>)
 8015552:	497f      	ldr	r1, [pc, #508]	@ (8015750 <acc_exploration_server_system_parse_configuration+0x960>)
 8015554:	6023      	str	r3, [r4, #0]
 8015556:	4604      	mov	r4, r0
 8015558:	4a8a      	ldr	r2, [pc, #552]	@ (8015784 <acc_exploration_server_system_parse_configuration+0x994>)
 801555a:	f7ec fe45 	bl	80021e8 <acc_integration_log>
 801555e:	f8c5 8004 	str.w	r8, [r5, #4]
 8015562:	e527      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 8015564:	f89d 103e 	ldrb.w	r1, [sp, #62]	@ 0x3e
 8015568:	4640      	mov	r0, r8
 801556a:	f7f7 fee3 	bl	800d334 <acc_config_subtract_in_buffer_set>
 801556e:	e642      	b.n	80151f6 <acc_exploration_server_system_parse_configuration+0x406>
 8015570:	f89d 103e 	ldrb.w	r1, [sp, #62]	@ 0x3e
 8015574:	4640      	mov	r0, r8
 8015576:	f7f7 fe6b 	bl	800d250 <acc_config_double_buffering_set>
 801557a:	e633      	b.n	80151e4 <acc_exploration_server_system_parse_configuration+0x3f4>
 801557c:	f89d 103e 	ldrb.w	r1, [sp, #62]	@ 0x3e
 8015580:	4640      	mov	r0, r8
 8015582:	f7f7 fdf1 	bl	800d168 <acc_config_continuous_sweep_mode_set>
 8015586:	e624      	b.n	80151d2 <acc_exploration_server_system_parse_configuration+0x3e2>
 8015588:	ed9d 0a12 	vldr	s0, [sp, #72]	@ 0x48
 801558c:	4640      	mov	r0, r8
 801558e:	f7f7 fdb9 	bl	800d104 <acc_config_sweep_rate_set>
 8015592:	e615      	b.n	80151c0 <acc_exploration_server_system_parse_configuration+0x3d0>
 8015594:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8015598:	4640      	mov	r0, r8
 801559a:	f7f7 fd83 	bl	800d0a4 <acc_config_sweeps_per_frame_set>
 801559e:	e607      	b.n	80151b0 <acc_exploration_server_system_parse_configuration+0x3c0>
 80155a0:	ed9d 0a12 	vldr	s0, [sp, #72]	@ 0x48
 80155a4:	4640      	mov	r0, r8
 80155a6:	f7f7 fdf5 	bl	800d194 <acc_config_frame_rate_set>
 80155aa:	e5f9      	b.n	80151a0 <acc_exploration_server_system_parse_configuration+0x3b0>
 80155ac:	4b76      	ldr	r3, [pc, #472]	@ (8015788 <acc_exploration_server_system_parse_configuration+0x998>)
 80155ae:	9a03      	ldr	r2, [sp, #12]
 80155b0:	6013      	str	r3, [r2, #0]
 80155b2:	e476      	b.n	8014ea2 <acc_exploration_server_system_parse_configuration+0xb2>
 80155b4:	2101      	movs	r1, #1
 80155b6:	4640      	mov	r0, r8
 80155b8:	f7f7 fe34 	bl	800d224 <acc_config_inter_sweep_idle_state_set>
 80155bc:	e65b      	b.n	8015276 <acc_exploration_server_system_parse_configuration+0x486>
 80155be:	4b73      	ldr	r3, [pc, #460]	@ (801578c <acc_exploration_server_system_parse_configuration+0x99c>)
 80155c0:	9a03      	ldr	r2, [sp, #12]
 80155c2:	2400      	movs	r4, #0
 80155c4:	4640      	mov	r0, r8
 80155c6:	6013      	str	r3, [r2, #0]
 80155c8:	f7f7 fc14 	bl	800cdf4 <acc_config_destroy>
 80155cc:	606c      	str	r4, [r5, #4]
 80155ce:	e4f1      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 80155d0:	4b60      	ldr	r3, [pc, #384]	@ (8015754 <acc_exploration_server_system_parse_configuration+0x964>)
 80155d2:	4666      	mov	r6, ip
 80155d4:	9a03      	ldr	r2, [sp, #12]
 80155d6:	4655      	mov	r5, sl
 80155d8:	4640      	mov	r0, r8
 80155da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80155de:	6013      	str	r3, [r2, #0]
 80155e0:	4664      	mov	r4, ip
 80155e2:	f7f7 fc07 	bl	800cdf4 <acc_config_destroy>
 80155e6:	606e      	str	r6, [r5, #4]
 80155e8:	e4e4      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 80155ea:	4603      	mov	r3, r0
 80155ec:	4640      	mov	r0, r8
 80155ee:	4655      	mov	r5, sl
 80155f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80155f4:	461c      	mov	r4, r3
 80155f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80155f8:	f7f7 fbfc 	bl	800cdf4 <acc_config_destroy>
 80155fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155fe:	606b      	str	r3, [r5, #4]
 8015600:	e4d8      	b.n	8014fb4 <acc_exploration_server_system_parse_configuration+0x1c4>
 8015602:	4601      	mov	r1, r0
 8015604:	4640      	mov	r0, r8
 8015606:	f7f7 fdf7 	bl	800d1f8 <acc_config_inter_frame_idle_state_set>
 801560a:	e614      	b.n	8015236 <acc_exploration_server_system_parse_configuration+0x446>
 801560c:	4601      	mov	r1, r0
 801560e:	4640      	mov	r0, r8
 8015610:	f7f7 fe08 	bl	800d224 <acc_config_inter_sweep_idle_state_set>
 8015614:	e62f      	b.n	8015276 <acc_exploration_server_system_parse_configuration+0x486>
 8015616:	2101      	movs	r1, #1
 8015618:	4640      	mov	r0, r8
 801561a:	f7f7 fded 	bl	800d1f8 <acc_config_inter_frame_idle_state_set>
 801561e:	e60a      	b.n	8015236 <acc_exploration_server_system_parse_configuration+0x446>
 8015620:	4a5b      	ldr	r2, [pc, #364]	@ (8015790 <acc_exploration_server_system_parse_configuration+0x9a0>)
 8015622:	494b      	ldr	r1, [pc, #300]	@ (8015750 <acc_exploration_server_system_parse_configuration+0x960>)
 8015624:	f7ec fde0 	bl	80021e8 <acc_integration_log>
 8015628:	4b5a      	ldr	r3, [pc, #360]	@ (8015794 <acc_exploration_server_system_parse_configuration+0x9a4>)
 801562a:	9a03      	ldr	r2, [sp, #12]
 801562c:	6013      	str	r3, [r2, #0]
 801562e:	e438      	b.n	8014ea2 <acc_exploration_server_system_parse_configuration+0xb2>
 8015630:	2003      	movs	r0, #3
 8015632:	f7f7 fbb5 	bl	800cda0 <acc_rss_set_log_level>
 8015636:	f7ff bbef 	b.w	8014e18 <acc_exploration_server_system_parse_configuration+0x28>
 801563a:	4633      	mov	r3, r6
 801563c:	e5a4      	b.n	8015188 <acc_exploration_server_system_parse_configuration+0x398>
 801563e:	4b56      	ldr	r3, [pc, #344]	@ (8015798 <acc_exploration_server_system_parse_configuration+0x9a8>)
 8015640:	e7be      	b.n	80155c0 <acc_exploration_server_system_parse_configuration+0x7d0>
 8015642:	2002      	movs	r0, #2
 8015644:	f7f7 fbac 	bl	800cda0 <acc_rss_set_log_level>
 8015648:	f7ff bbe6 	b.w	8014e18 <acc_exploration_server_system_parse_configuration+0x28>
 801564c:	2300      	movs	r3, #0
 801564e:	ee18 0a10 	vmov	r0, s16
 8015652:	4952      	ldr	r1, [pc, #328]	@ (801579c <acc_exploration_server_system_parse_configuration+0x9ac>)
 8015654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015656:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015658:	f001 fabe 	bl	8016bd8 <is_json_node>
 801565c:	bba8      	cbnz	r0, 80156ca <acc_exploration_server_system_parse_configuration+0x8da>
 801565e:	2301      	movs	r3, #1
 8015660:	9306      	str	r3, [sp, #24]
 8015662:	f8dd a018 	ldr.w	sl, [sp, #24]
 8015666:	e426      	b.n	8014eb6 <acc_exploration_server_system_parse_configuration+0xc6>
 8015668:	4b4d      	ldr	r3, [pc, #308]	@ (80157a0 <acc_exploration_server_system_parse_configuration+0x9b0>)
 801566a:	46a2      	mov	sl, r4
 801566c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801566e:	f04f 0800 	mov.w	r8, #0
 8015672:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8015676:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801567a:	f8c7 8038 	str.w	r8, [r7, #56]	@ 0x38
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	b1ab      	cbz	r3, 80156ae <acc_exploration_server_system_parse_configuration+0x8be>
 8015682:	2500      	movs	r5, #0
 8015684:	462e      	mov	r6, r5
 8015686:	f8d9 3000 	ldr.w	r3, [r9]
 801568a:	3601      	adds	r6, #1
 801568c:	442b      	add	r3, r5
 801568e:	3544      	adds	r5, #68	@ 0x44
 8015690:	6858      	ldr	r0, [r3, #4]
 8015692:	b148      	cbz	r0, 80156a8 <acc_exploration_server_system_parse_configuration+0x8b8>
 8015694:	f7f7 fd94 	bl	800d1c0 <acc_config_frame_rate_get>
 8015698:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801569c:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 80156a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a4:	f040 8084 	bne.w	80157b0 <acc_exploration_server_system_parse_configuration+0x9c0>
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	42b3      	cmp	r3, r6
 80156ac:	d8eb      	bhi.n	8015686 <acc_exploration_server_system_parse_configuration+0x896>
 80156ae:	f109 0904 	add.w	r9, r9, #4
 80156b2:	454c      	cmp	r4, r9
 80156b4:	d1e3      	bne.n	801567e <acc_exploration_server_system_parse_configuration+0x88e>
 80156b6:	2300      	movs	r3, #0
 80156b8:	ee18 0a10 	vmov	r0, s16
 80156bc:	4937      	ldr	r1, [pc, #220]	@ (801579c <acc_exploration_server_system_parse_configuration+0x9ac>)
 80156be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80156c0:	f001 fa8a 	bl	8016bd8 <is_json_node>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	f43f abf6 	beq.w	8014eb6 <acc_exploration_server_system_parse_configuration+0xc6>
 80156ca:	ee18 0a10 	vmov	r0, s16
 80156ce:	aa13      	add	r2, sp, #76	@ 0x4c
 80156d0:	4932      	ldr	r1, [pc, #200]	@ (801579c <acc_exploration_server_system_parse_configuration+0x9ac>)
 80156d2:	f001 fa99 	bl	8016c08 <get_json_float_value>
 80156d6:	4682      	mov	sl, r0
 80156d8:	b148      	cbz	r0, 80156ee <acc_exploration_server_system_parse_configuration+0x8fe>
 80156da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80156dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80156de:	6013      	str	r3, [r2, #0]
 80156e0:	f7ff bbe9 	b.w	8014eb6 <acc_exploration_server_system_parse_configuration+0xc6>
 80156e4:	2001      	movs	r0, #1
 80156e6:	f7f7 fb5b 	bl	800cda0 <acc_rss_set_log_level>
 80156ea:	f7ff bb95 	b.w	8014e18 <acc_exploration_server_system_parse_configuration+0x28>
 80156ee:	4b2d      	ldr	r3, [pc, #180]	@ (80157a4 <acc_exploration_server_system_parse_configuration+0x9b4>)
 80156f0:	9a03      	ldr	r2, [sp, #12]
 80156f2:	9006      	str	r0, [sp, #24]
 80156f4:	6013      	str	r3, [r2, #0]
 80156f6:	e7b4      	b.n	8015662 <acc_exploration_server_system_parse_configuration+0x872>
 80156f8:	4b2b      	ldr	r3, [pc, #172]	@ (80157a8 <acc_exploration_server_system_parse_configuration+0x9b8>)
 80156fa:	e761      	b.n	80155c0 <acc_exploration_server_system_parse_configuration+0x7d0>
 80156fc:	2004      	movs	r0, #4
 80156fe:	f7f7 fb4f 	bl	800cda0 <acc_rss_set_log_level>
 8015702:	f7ff bb89 	b.w	8014e18 <acc_exploration_server_system_parse_configuration+0x28>
 8015706:	f8da a000 	ldr.w	sl, [sl]
 801570a:	f1ba 0f00 	cmp.w	sl, #0
 801570e:	f47f ac0d 	bne.w	8014f2c <acc_exploration_server_system_parse_configuration+0x13c>
 8015712:	4656      	mov	r6, sl
 8015714:	46da      	mov	sl, fp
 8015716:	2c00      	cmp	r4, #0
 8015718:	f43f ac5d 	beq.w	8014fd6 <acc_exploration_server_system_parse_configuration+0x1e6>
 801571c:	9b08      	ldr	r3, [sp, #32]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	9308      	str	r3, [sp, #32]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d0a0      	beq.n	8015668 <acc_exploration_server_system_parse_configuration+0x878>
 8015726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015728:	9a07      	ldr	r2, [sp, #28]
 801572a:	3301      	adds	r3, #1
 801572c:	3204      	adds	r2, #4
 801572e:	2b0b      	cmp	r3, #11
 8015730:	9309      	str	r3, [sp, #36]	@ 0x24
 8015732:	9207      	str	r2, [sp, #28]
 8015734:	f47f abf2 	bne.w	8014f1c <acc_exploration_server_system_parse_configuration+0x12c>
 8015738:	4b1c      	ldr	r3, [pc, #112]	@ (80157ac <acc_exploration_server_system_parse_configuration+0x9bc>)
 801573a:	46b2      	mov	sl, r6
 801573c:	9a03      	ldr	r2, [sp, #12]
 801573e:	6013      	str	r3, [r2, #0]
 8015740:	f7ff bbb9 	b.w	8014eb6 <acc_exploration_server_system_parse_configuration+0xc6>
 8015744:	08020dd8 	.word	0x08020dd8
 8015748:	08020d40 	.word	0x08020d40
 801574c:	0801be5c 	.word	0x0801be5c
 8015750:	08020e84 	.word	0x08020e84
 8015754:	08020abc 	.word	0x08020abc
 8015758:	080212f8 	.word	0x080212f8
 801575c:	08021218 	.word	0x08021218
 8015760:	08020a80 	.word	0x08020a80
 8015764:	08020a88 	.word	0x08020a88
 8015768:	08020a90 	.word	0x08020a90
 801576c:	08020a98 	.word	0x08020a98
 8015770:	08020aa0 	.word	0x08020aa0
 8015774:	08020b10 	.word	0x08020b10
 8015778:	08021104 	.word	0x08021104
 801577c:	08021224 	.word	0x08021224
 8015780:	08020d30 	.word	0x08020d30
 8015784:	08021278 	.word	0x08021278
 8015788:	08020bbc 	.word	0x08020bbc
 801578c:	08020c10 	.word	0x08020c10
 8015790:	08021238 	.word	0x08021238
 8015794:	08020d08 	.word	0x08020d08
 8015798:	08020c6c 	.word	0x08020c6c
 801579c:	08021348 	.word	0x08021348
 80157a0:	24003080 	.word	0x24003080
 80157a4:	08020b2c 	.word	0x08020b2c
 80157a8:	08020c94 	.word	0x08020c94
 80157ac:	08020b68 	.word	0x08020b68
 80157b0:	ee18 0a10 	vmov	r0, s16
 80157b4:	4909      	ldr	r1, [pc, #36]	@ (80157dc <acc_exploration_server_system_parse_configuration+0x9ec>)
 80157b6:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 80157ba:	f001 fa0d 	bl	8016bd8 <is_json_node>
 80157be:	b948      	cbnz	r0, 80157d4 <acc_exploration_server_system_parse_configuration+0x9e4>
 80157c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	f43f ab77 	beq.w	8014eb6 <acc_exploration_server_system_parse_configuration+0xc6>
 80157c8:	4b05      	ldr	r3, [pc, #20]	@ (80157e0 <acc_exploration_server_system_parse_configuration+0x9f0>)
 80157ca:	4682      	mov	sl, r0
 80157cc:	9a03      	ldr	r2, [sp, #12]
 80157ce:	6013      	str	r3, [r2, #0]
 80157d0:	f7ff bb71 	b.w	8014eb6 <acc_exploration_server_system_parse_configuration+0xc6>
 80157d4:	4b03      	ldr	r3, [pc, #12]	@ (80157e4 <acc_exploration_server_system_parse_configuration+0x9f4>)
 80157d6:	9a03      	ldr	r2, [sp, #12]
 80157d8:	6013      	str	r3, [r2, #0]
 80157da:	e742      	b.n	8015662 <acc_exploration_server_system_parse_configuration+0x872>
 80157dc:	08021348 	.word	0x08021348
 80157e0:	08020b80 	.word	0x08020b80
 80157e4:	08020bd8 	.word	0x08020bd8

080157e8 <acc_exploration_server_system_is_on_demand>:
 80157e8:	4b05      	ldr	r3, [pc, #20]	@ (8015800 <acc_exploration_server_system_is_on_demand+0x18>)
 80157ea:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80157ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80157f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157f6:	bf0c      	ite	eq
 80157f8:	2001      	moveq	r0, #1
 80157fa:	2000      	movne	r0, #0
 80157fc:	4770      	bx	lr
 80157fe:	bf00      	nop
 8015800:	24003078 	.word	0x24003078

08015804 <acc_exploration_server_system_get_sensor_name>:
 8015804:	4800      	ldr	r0, [pc, #0]	@ (8015808 <acc_exploration_server_system_get_sensor_name+0x4>)
 8015806:	4770      	bx	lr
 8015808:	0801c070 	.word	0x0801c070

0801580c <acc_exploration_server_system_is_sensor_connected>:
 801580c:	b148      	cbz	r0, 8015822 <acc_exploration_server_system_is_sensor_connected+0x16>
 801580e:	4b05      	ldr	r3, [pc, #20]	@ (8015824 <acc_exploration_server_system_is_sensor_connected+0x18>)
 8015810:	681a      	ldr	r2, [r3, #0]
 8015812:	4282      	cmp	r2, r0
 8015814:	d304      	bcc.n	8015820 <acc_exploration_server_system_is_sensor_connected+0x14>
 8015816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015818:	4418      	add	r0, r3
 801581a:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 801581e:	4770      	bx	lr
 8015820:	2000      	movs	r0, #0
 8015822:	4770      	bx	lr
 8015824:	24003078 	.word	0x24003078

08015828 <convert_uint2hexstr>:
 8015828:	f8df c058 	ldr.w	ip, [pc, #88]	@ 8015884 <convert_uint2hexstr+0x5c>
 801582c:	b4f0      	push	{r4, r5, r6, r7}
 801582e:	4605      	mov	r5, r0
 8015830:	b086      	sub	sp, #24
 8015832:	4616      	mov	r6, r2
 8015834:	460f      	mov	r7, r1
 8015836:	ac01      	add	r4, sp, #4
 8015838:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801583c:	f8dc c000 	ldr.w	ip, [ip]
 8015840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015842:	f884 c000 	strb.w	ip, [r4]
 8015846:	b1c7      	cbz	r7, 801587a <convert_uint2hexstr+0x52>
 8015848:	19e9      	adds	r1, r5, r7
 801584a:	1cb0      	adds	r0, r6, #2
 801584c:	3d01      	subs	r5, #1
 801584e:	3901      	subs	r1, #1
 8015850:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8015854:	aa06      	add	r2, sp, #24
 8015856:	3002      	adds	r0, #2
 8015858:	f003 040f 	and.w	r4, r3, #15
 801585c:	eb02 1313 	add.w	r3, r2, r3, lsr #4
 8015860:	428d      	cmp	r5, r1
 8015862:	4414      	add	r4, r2
 8015864:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015868:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801586c:	f800 2c04 	strb.w	r2, [r0, #-4]
 8015870:	f800 3c03 	strb.w	r3, [r0, #-3]
 8015874:	d1ec      	bne.n	8015850 <convert_uint2hexstr+0x28>
 8015876:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 801587a:	2300      	movs	r3, #0
 801587c:	7033      	strb	r3, [r6, #0]
 801587e:	b006      	add	sp, #24
 8015880:	bcf0      	pop	{r4, r5, r6, r7}
 8015882:	4770      	bx	lr
 8015884:	08021530 	.word	0x08021530

08015888 <convert_hexstr2uint>:
 8015888:	b570      	push	{r4, r5, r6, lr}
 801588a:	4614      	mov	r4, r2
 801588c:	460d      	mov	r5, r1
 801588e:	4606      	mov	r6, r0
 8015890:	f7ea fd86 	bl	80003a0 <strlen>
 8015894:	ebb0 0f44 	cmp.w	r0, r4, lsl #1
 8015898:	d007      	beq.n	80158aa <convert_hexstr2uint+0x22>
 801589a:	4b26      	ldr	r3, [pc, #152]	@ (8015934 <convert_hexstr2uint+0xac>)
 801589c:	2000      	movs	r0, #0
 801589e:	4a26      	ldr	r2, [pc, #152]	@ (8015938 <convert_hexstr2uint+0xb0>)
 80158a0:	691b      	ldr	r3, [r3, #16]
 80158a2:	4926      	ldr	r1, [pc, #152]	@ (801593c <convert_hexstr2uint+0xb4>)
 80158a4:	4798      	blx	r3
 80158a6:	2000      	movs	r0, #0
 80158a8:	bd70      	pop	{r4, r5, r6, pc}
 80158aa:	2c00      	cmp	r4, #0
 80158ac:	d040      	beq.n	8015930 <convert_hexstr2uint+0xa8>
 80158ae:	442c      	add	r4, r5
 80158b0:	1cb0      	adds	r0, r6, #2
 80158b2:	1e69      	subs	r1, r5, #1
 80158b4:	3c01      	subs	r4, #1
 80158b6:	e01b      	b.n	80158f0 <convert_hexstr2uint+0x68>
 80158b8:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 80158bc:	2b05      	cmp	r3, #5
 80158be:	d821      	bhi.n	8015904 <convert_hexstr2uint+0x7c>
 80158c0:	f1a2 0357 	sub.w	r3, r2, #87	@ 0x57
 80158c4:	011b      	lsls	r3, r3, #4
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80158cc:	f1a5 0230 	sub.w	r2, r5, #48	@ 0x30
 80158d0:	b2d2      	uxtb	r2, r2
 80158d2:	2a09      	cmp	r2, #9
 80158d4:	d906      	bls.n	80158e4 <convert_hexstr2uint+0x5c>
 80158d6:	f1a5 0261 	sub.w	r2, r5, #97	@ 0x61
 80158da:	2a05      	cmp	r2, #5
 80158dc:	d81b      	bhi.n	8015916 <convert_hexstr2uint+0x8e>
 80158de:	f1a5 0257 	sub.w	r2, r5, #87	@ 0x57
 80158e2:	b2d2      	uxtb	r2, r2
 80158e4:	4313      	orrs	r3, r2
 80158e6:	3002      	adds	r0, #2
 80158e8:	f801 3f01 	strb.w	r3, [r1, #1]!
 80158ec:	42a1      	cmp	r1, r4
 80158ee:	d01f      	beq.n	8015930 <convert_hexstr2uint+0xa8>
 80158f0:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 80158f4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80158f8:	b2db      	uxtb	r3, r3
 80158fa:	2b09      	cmp	r3, #9
 80158fc:	d8dc      	bhi.n	80158b8 <convert_hexstr2uint+0x30>
 80158fe:	011b      	lsls	r3, r3, #4
 8015900:	b2db      	uxtb	r3, r3
 8015902:	e7e1      	b.n	80158c8 <convert_hexstr2uint+0x40>
 8015904:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8015908:	2b05      	cmp	r3, #5
 801590a:	d8c6      	bhi.n	801589a <convert_hexstr2uint+0x12>
 801590c:	f1a2 0337 	sub.w	r3, r2, #55	@ 0x37
 8015910:	011b      	lsls	r3, r3, #4
 8015912:	b2db      	uxtb	r3, r3
 8015914:	e7d8      	b.n	80158c8 <convert_hexstr2uint+0x40>
 8015916:	f1a5 0241 	sub.w	r2, r5, #65	@ 0x41
 801591a:	2a05      	cmp	r2, #5
 801591c:	d8bd      	bhi.n	801589a <convert_hexstr2uint+0x12>
 801591e:	f1a5 0237 	sub.w	r2, r5, #55	@ 0x37
 8015922:	3002      	adds	r0, #2
 8015924:	b2d2      	uxtb	r2, r2
 8015926:	4313      	orrs	r3, r2
 8015928:	f801 3f01 	strb.w	r3, [r1, #1]!
 801592c:	42a1      	cmp	r1, r4
 801592e:	d1df      	bne.n	80158f0 <convert_hexstr2uint+0x68>
 8015930:	2001      	movs	r0, #1
 8015932:	bd70      	pop	{r4, r5, r6, pc}
 8015934:	24003210 	.word	0x24003210
 8015938:	08021544 	.word	0x08021544
 801593c:	08021560 	.word	0x08021560

08015940 <acc_time_get>:
 8015940:	f7ec beb6 	b.w	80026b0 <acc_integration_get_time>

08015944 <parse_hex4>:
 8015944:	b470      	push	{r4, r5, r6}
 8015946:	2100      	movs	r1, #0
 8015948:	1e42      	subs	r2, r0, #1
 801594a:	1cc4      	adds	r4, r0, #3
 801594c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015950:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8015954:	f1a3 0641 	sub.w	r6, r3, #65	@ 0x41
 8015958:	b2c5      	uxtb	r5, r0
 801595a:	4408      	add	r0, r1
 801595c:	2d09      	cmp	r5, #9
 801595e:	d909      	bls.n	8015974 <parse_hex4+0x30>
 8015960:	f1a3 0057 	sub.w	r0, r3, #87	@ 0x57
 8015964:	2e05      	cmp	r6, #5
 8015966:	f1a3 0561 	sub.w	r5, r3, #97	@ 0x61
 801596a:	f1a3 0337 	sub.w	r3, r3, #55	@ 0x37
 801596e:	4408      	add	r0, r1
 8015970:	d806      	bhi.n	8015980 <parse_hex4+0x3c>
 8015972:	1858      	adds	r0, r3, r1
 8015974:	4294      	cmp	r4, r2
 8015976:	ea4f 1100 	mov.w	r1, r0, lsl #4
 801597a:	d1e7      	bne.n	801594c <parse_hex4+0x8>
 801597c:	bc70      	pop	{r4, r5, r6}
 801597e:	4770      	bx	lr
 8015980:	2d05      	cmp	r5, #5
 8015982:	d9f7      	bls.n	8015974 <parse_hex4+0x30>
 8015984:	2000      	movs	r0, #0
 8015986:	e7f9      	b.n	801597c <parse_hex4+0x38>

08015988 <buffer_skip_whitespace>:
 8015988:	b1d8      	cbz	r0, 80159c2 <buffer_skip_whitespace+0x3a>
 801598a:	6802      	ldr	r2, [r0, #0]
 801598c:	b1d2      	cbz	r2, 80159c4 <buffer_skip_whitespace+0x3c>
 801598e:	b410      	push	{r4}
 8015990:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8015994:	42a3      	cmp	r3, r4
 8015996:	d20c      	bcs.n	80159b2 <buffer_skip_whitespace+0x2a>
 8015998:	1e59      	subs	r1, r3, #1
 801599a:	440a      	add	r2, r1
 801599c:	e003      	b.n	80159a6 <buffer_skip_whitespace+0x1e>
 801599e:	3301      	adds	r3, #1
 80159a0:	429c      	cmp	r4, r3
 80159a2:	6083      	str	r3, [r0, #8]
 80159a4:	d008      	beq.n	80159b8 <buffer_skip_whitespace+0x30>
 80159a6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80159aa:	2920      	cmp	r1, #32
 80159ac:	d9f7      	bls.n	801599e <buffer_skip_whitespace+0x16>
 80159ae:	429c      	cmp	r4, r3
 80159b0:	d002      	beq.n	80159b8 <buffer_skip_whitespace+0x30>
 80159b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159b6:	4770      	bx	lr
 80159b8:	3c01      	subs	r4, #1
 80159ba:	6084      	str	r4, [r0, #8]
 80159bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159c0:	4770      	bx	lr
 80159c2:	4770      	bx	lr
 80159c4:	4610      	mov	r0, r2
 80159c6:	4770      	bx	lr

080159c8 <update_offset>:
 80159c8:	b150      	cbz	r0, 80159e0 <update_offset+0x18>
 80159ca:	b538      	push	{r3, r4, r5, lr}
 80159cc:	4604      	mov	r4, r0
 80159ce:	6800      	ldr	r0, [r0, #0]
 80159d0:	b128      	cbz	r0, 80159de <update_offset+0x16>
 80159d2:	68a5      	ldr	r5, [r4, #8]
 80159d4:	4428      	add	r0, r5
 80159d6:	f7ea fce3 	bl	80003a0 <strlen>
 80159da:	4428      	add	r0, r5
 80159dc:	60a0      	str	r0, [r4, #8]
 80159de:	bd38      	pop	{r3, r4, r5, pc}
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop

080159e4 <ensure>:
 80159e4:	b570      	push	{r4, r5, r6, lr}
 80159e6:	4604      	mov	r4, r0
 80159e8:	b300      	cbz	r0, 8015a2c <ensure+0x48>
 80159ea:	6806      	ldr	r6, [r0, #0]
 80159ec:	b1ce      	cbz	r6, 8015a22 <ensure+0x3e>
 80159ee:	6843      	ldr	r3, [r0, #4]
 80159f0:	b9cb      	cbnz	r3, 8015a26 <ensure+0x42>
 80159f2:	2900      	cmp	r1, #0
 80159f4:	db1a      	blt.n	8015a2c <ensure+0x48>
 80159f6:	3101      	adds	r1, #1
 80159f8:	68a2      	ldr	r2, [r4, #8]
 80159fa:	4411      	add	r1, r2
 80159fc:	428b      	cmp	r3, r1
 80159fe:	d218      	bcs.n	8015a32 <ensure+0x4e>
 8015a00:	6923      	ldr	r3, [r4, #16]
 8015a02:	b99b      	cbnz	r3, 8015a2c <ensure+0x48>
 8015a04:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8015a08:	d216      	bcs.n	8015a38 <ensure+0x54>
 8015a0a:	6a23      	ldr	r3, [r4, #32]
 8015a0c:	004d      	lsls	r5, r1, #1
 8015a0e:	b1d3      	cbz	r3, 8015a46 <ensure+0x62>
 8015a10:	4630      	mov	r0, r6
 8015a12:	4629      	mov	r1, r5
 8015a14:	4798      	blx	r3
 8015a16:	4606      	mov	r6, r0
 8015a18:	b318      	cbz	r0, 8015a62 <ensure+0x7e>
 8015a1a:	68a3      	ldr	r3, [r4, #8]
 8015a1c:	e9c4 6500 	strd	r6, r5, [r4]
 8015a20:	441e      	add	r6, r3
 8015a22:	4630      	mov	r0, r6
 8015a24:	bd70      	pop	{r4, r5, r6, pc}
 8015a26:	6882      	ldr	r2, [r0, #8]
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d8e2      	bhi.n	80159f2 <ensure+0xe>
 8015a2c:	2600      	movs	r6, #0
 8015a2e:	4630      	mov	r0, r6
 8015a30:	bd70      	pop	{r4, r5, r6, pc}
 8015a32:	4416      	add	r6, r2
 8015a34:	4630      	mov	r0, r6
 8015a36:	bd70      	pop	{r4, r5, r6, pc}
 8015a38:	2900      	cmp	r1, #0
 8015a3a:	dbf7      	blt.n	8015a2c <ensure+0x48>
 8015a3c:	6a23      	ldr	r3, [r4, #32]
 8015a3e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d1e4      	bne.n	8015a10 <ensure+0x2c>
 8015a46:	69a3      	ldr	r3, [r4, #24]
 8015a48:	4628      	mov	r0, r5
 8015a4a:	4798      	blx	r3
 8015a4c:	4606      	mov	r6, r0
 8015a4e:	b140      	cbz	r0, 8015a62 <ensure+0x7e>
 8015a50:	68a2      	ldr	r2, [r4, #8]
 8015a52:	6821      	ldr	r1, [r4, #0]
 8015a54:	3201      	adds	r2, #1
 8015a56:	f002 fffe 	bl	8018a56 <memcpy>
 8015a5a:	69e3      	ldr	r3, [r4, #28]
 8015a5c:	6820      	ldr	r0, [r4, #0]
 8015a5e:	4798      	blx	r3
 8015a60:	e7db      	b.n	8015a1a <ensure+0x36>
 8015a62:	69e3      	ldr	r3, [r4, #28]
 8015a64:	6820      	ldr	r0, [r4, #0]
 8015a66:	4798      	blx	r3
 8015a68:	e9c4 6600 	strd	r6, r6, [r4]
 8015a6c:	e7d9      	b.n	8015a22 <ensure+0x3e>
 8015a6e:	bf00      	nop

08015a70 <get_object_item>:
 8015a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d038      	beq.n	8015ae8 <get_object_item+0x78>
 8015a76:	460e      	mov	r6, r1
 8015a78:	2900      	cmp	r1, #0
 8015a7a:	d035      	beq.n	8015ae8 <get_object_item+0x78>
 8015a7c:	6884      	ldr	r4, [r0, #8]
 8015a7e:	bb42      	cbnz	r2, 8015ad2 <get_object_item+0x62>
 8015a80:	b32c      	cbz	r4, 8015ace <get_object_item+0x5e>
 8015a82:	f8df e070 	ldr.w	lr, [pc, #112]	@ 8015af4 <get_object_item+0x84>
 8015a86:	6a23      	ldr	r3, [r4, #32]
 8015a88:	b1f3      	cbz	r3, 8015ac8 <get_object_item+0x58>
 8015a8a:	42b3      	cmp	r3, r6
 8015a8c:	d01f      	beq.n	8015ace <get_object_item+0x5e>
 8015a8e:	3b01      	subs	r3, #1
 8015a90:	f106 3cff 	add.w	ip, r6, #4294967295
 8015a94:	e000      	b.n	8015a98 <get_object_item+0x28>
 8015a96:	b1d2      	cbz	r2, 8015ace <get_object_item+0x5e>
 8015a98:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8015a9c:	f81e 0002 	ldrb.w	r0, [lr, r2]
 8015aa0:	4617      	mov	r7, r2
 8015aa2:	f000 0003 	and.w	r0, r0, #3
 8015aa6:	2801      	cmp	r0, #1
 8015aa8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8015aac:	f81e 5000 	ldrb.w	r5, [lr, r0]
 8015ab0:	bf08      	it	eq
 8015ab2:	f102 0720 	addeq.w	r7, r2, #32
 8015ab6:	4601      	mov	r1, r0
 8015ab8:	f005 0503 	and.w	r5, r5, #3
 8015abc:	2d01      	cmp	r5, #1
 8015abe:	bf08      	it	eq
 8015ac0:	f100 0120 	addeq.w	r1, r0, #32
 8015ac4:	428f      	cmp	r7, r1
 8015ac6:	d0e6      	beq.n	8015a96 <get_object_item+0x26>
 8015ac8:	6824      	ldr	r4, [r4, #0]
 8015aca:	2c00      	cmp	r4, #0
 8015acc:	d1db      	bne.n	8015a86 <get_object_item+0x16>
 8015ace:	4620      	mov	r0, r4
 8015ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ad2:	2c00      	cmp	r4, #0
 8015ad4:	d0fb      	beq.n	8015ace <get_object_item+0x5e>
 8015ad6:	6a21      	ldr	r1, [r4, #32]
 8015ad8:	4630      	mov	r0, r6
 8015ada:	b141      	cbz	r1, 8015aee <get_object_item+0x7e>
 8015adc:	f7ea fc00 	bl	80002e0 <strcmp>
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	d0f4      	beq.n	8015ace <get_object_item+0x5e>
 8015ae4:	6824      	ldr	r4, [r4, #0]
 8015ae6:	e7f4      	b.n	8015ad2 <get_object_item+0x62>
 8015ae8:	2400      	movs	r4, #0
 8015aea:	4620      	mov	r0, r4
 8015aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aee:	460c      	mov	r4, r1
 8015af0:	4620      	mov	r0, r4
 8015af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015af4:	08021639 	.word	0x08021639

08015af8 <parse_string.isra.0>:
 8015af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015afc:	6815      	ldr	r5, [r2, #0]
 8015afe:	4681      	mov	r9, r0
 8015b00:	6890      	ldr	r0, [r2, #8]
 8015b02:	4690      	mov	r8, r2
 8015b04:	b083      	sub	sp, #12
 8015b06:	5c2a      	ldrb	r2, [r5, r0]
 8015b08:	1c43      	adds	r3, r0, #1
 8015b0a:	4428      	add	r0, r5
 8015b0c:	2a22      	cmp	r2, #34	@ 0x22
 8015b0e:	eb05 0603 	add.w	r6, r5, r3
 8015b12:	d115      	bne.n	8015b40 <parse_string.isra.0+0x48>
 8015b14:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015b18:	42bb      	cmp	r3, r7
 8015b1a:	d211      	bcs.n	8015b40 <parse_string.isra.0+0x48>
 8015b1c:	468a      	mov	sl, r1
 8015b1e:	4634      	mov	r4, r6
 8015b20:	2200      	movs	r2, #0
 8015b22:	e003      	b.n	8015b2c <parse_string.isra.0+0x34>
 8015b24:	3401      	adds	r4, #1
 8015b26:	1b63      	subs	r3, r4, r5
 8015b28:	42bb      	cmp	r3, r7
 8015b2a:	d209      	bcs.n	8015b40 <parse_string.isra.0+0x48>
 8015b2c:	7823      	ldrb	r3, [r4, #0]
 8015b2e:	2b22      	cmp	r3, #34	@ 0x22
 8015b30:	d014      	beq.n	8015b5c <parse_string.isra.0+0x64>
 8015b32:	2b5c      	cmp	r3, #92	@ 0x5c
 8015b34:	d1f6      	bne.n	8015b24 <parse_string.isra.0+0x2c>
 8015b36:	3401      	adds	r4, #1
 8015b38:	3201      	adds	r2, #1
 8015b3a:	1b63      	subs	r3, r4, r5
 8015b3c:	42bb      	cmp	r3, r7
 8015b3e:	d3f1      	bcc.n	8015b24 <parse_string.isra.0+0x2c>
 8015b40:	b146      	cbz	r6, 8015b54 <parse_string.isra.0+0x5c>
 8015b42:	f8d8 3000 	ldr.w	r3, [r8]
 8015b46:	2000      	movs	r0, #0
 8015b48:	1af6      	subs	r6, r6, r3
 8015b4a:	f8c8 6008 	str.w	r6, [r8, #8]
 8015b4e:	b003      	add	sp, #12
 8015b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b54:	4630      	mov	r0, r6
 8015b56:	b003      	add	sp, #12
 8015b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b5c:	f1c2 0201 	rsb	r2, r2, #1
 8015b60:	1a20      	subs	r0, r4, r0
 8015b62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015b66:	4410      	add	r0, r2
 8015b68:	4798      	blx	r3
 8015b6a:	4607      	mov	r7, r0
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	d0e7      	beq.n	8015b40 <parse_string.isra.0+0x48>
 8015b70:	42a6      	cmp	r6, r4
 8015b72:	463a      	mov	r2, r7
 8015b74:	f080 8097 	bcs.w	8015ca6 <parse_string.isra.0+0x1ae>
 8015b78:	f8df b18c 	ldr.w	fp, [pc, #396]	@ 8015d08 <parse_string.isra.0+0x210>
 8015b7c:	e005      	b.n	8015b8a <parse_string.isra.0+0x92>
 8015b7e:	3601      	adds	r6, #1
 8015b80:	f802 3b01 	strb.w	r3, [r2], #1
 8015b84:	42a6      	cmp	r6, r4
 8015b86:	f080 808e 	bcs.w	8015ca6 <parse_string.isra.0+0x1ae>
 8015b8a:	7833      	ldrb	r3, [r6, #0]
 8015b8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8015b8e:	d1f6      	bne.n	8015b7e <parse_string.isra.0+0x86>
 8015b90:	1ba1      	subs	r1, r4, r6
 8015b92:	2900      	cmp	r1, #0
 8015b94:	dd1a      	ble.n	8015bcc <parse_string.isra.0+0xd4>
 8015b96:	7875      	ldrb	r5, [r6, #1]
 8015b98:	2d75      	cmp	r5, #117	@ 0x75
 8015b9a:	d817      	bhi.n	8015bcc <parse_string.isra.0+0xd4>
 8015b9c:	2d5b      	cmp	r5, #91	@ 0x5b
 8015b9e:	d938      	bls.n	8015c12 <parse_string.isra.0+0x11a>
 8015ba0:	f1a5 035c 	sub.w	r3, r5, #92	@ 0x5c
 8015ba4:	2b19      	cmp	r3, #25
 8015ba6:	d811      	bhi.n	8015bcc <parse_string.isra.0+0xd4>
 8015ba8:	e8df f003 	tbb	[pc, r3]
 8015bac:	10101037 	.word	0x10101037
 8015bb0:	102d1010 	.word	0x102d1010
 8015bb4:	10271010 	.word	0x10271010
 8015bb8:	10101010 	.word	0x10101010
 8015bbc:	10211010 	.word	0x10211010
 8015bc0:	101b1010 	.word	0x101b1010
 8015bc4:	0d15      	.short	0x0d15
 8015bc6:	2905      	cmp	r1, #5
 8015bc8:	9201      	str	r2, [sp, #4]
 8015bca:	dc2b      	bgt.n	8015c24 <parse_string.isra.0+0x12c>
 8015bcc:	4638      	mov	r0, r7
 8015bce:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015bd2:	4798      	blx	r3
 8015bd4:	e7b5      	b.n	8015b42 <parse_string.isra.0+0x4a>
 8015bd6:	2109      	movs	r1, #9
 8015bd8:	2302      	movs	r3, #2
 8015bda:	f802 1b01 	strb.w	r1, [r2], #1
 8015bde:	441e      	add	r6, r3
 8015be0:	e7d0      	b.n	8015b84 <parse_string.isra.0+0x8c>
 8015be2:	210d      	movs	r1, #13
 8015be4:	2302      	movs	r3, #2
 8015be6:	f802 1b01 	strb.w	r1, [r2], #1
 8015bea:	441e      	add	r6, r3
 8015bec:	e7ca      	b.n	8015b84 <parse_string.isra.0+0x8c>
 8015bee:	210a      	movs	r1, #10
 8015bf0:	2302      	movs	r3, #2
 8015bf2:	f802 1b01 	strb.w	r1, [r2], #1
 8015bf6:	441e      	add	r6, r3
 8015bf8:	e7c4      	b.n	8015b84 <parse_string.isra.0+0x8c>
 8015bfa:	210c      	movs	r1, #12
 8015bfc:	2302      	movs	r3, #2
 8015bfe:	f802 1b01 	strb.w	r1, [r2], #1
 8015c02:	441e      	add	r6, r3
 8015c04:	e7be      	b.n	8015b84 <parse_string.isra.0+0x8c>
 8015c06:	2108      	movs	r1, #8
 8015c08:	2302      	movs	r3, #2
 8015c0a:	f802 1b01 	strb.w	r1, [r2], #1
 8015c0e:	441e      	add	r6, r3
 8015c10:	e7b8      	b.n	8015b84 <parse_string.isra.0+0x8c>
 8015c12:	2d22      	cmp	r5, #34	@ 0x22
 8015c14:	d001      	beq.n	8015c1a <parse_string.isra.0+0x122>
 8015c16:	2d2f      	cmp	r5, #47	@ 0x2f
 8015c18:	d1d8      	bne.n	8015bcc <parse_string.isra.0+0xd4>
 8015c1a:	2302      	movs	r3, #2
 8015c1c:	f802 5b01 	strb.w	r5, [r2], #1
 8015c20:	441e      	add	r6, r3
 8015c22:	e7af      	b.n	8015b84 <parse_string.isra.0+0x8c>
 8015c24:	1cb0      	adds	r0, r6, #2
 8015c26:	f7ff fe8d 	bl	8015944 <parse_hex4>
 8015c2a:	f5a0 435c 	sub.w	r3, r0, #56320	@ 0xdc00
 8015c2e:	4605      	mov	r5, r0
 8015c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015c34:	d3ca      	bcc.n	8015bcc <parse_string.isra.0+0xd4>
 8015c36:	f5a0 4358 	sub.w	r3, r0, #55296	@ 0xd800
 8015c3a:	9a01      	ldr	r2, [sp, #4]
 8015c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015c40:	d240      	bcs.n	8015cc4 <parse_string.isra.0+0x1cc>
 8015c42:	1db3      	adds	r3, r6, #6
 8015c44:	1ae3      	subs	r3, r4, r3
 8015c46:	2b05      	cmp	r3, #5
 8015c48:	ddc0      	ble.n	8015bcc <parse_string.isra.0+0xd4>
 8015c4a:	79b3      	ldrb	r3, [r6, #6]
 8015c4c:	2b5c      	cmp	r3, #92	@ 0x5c
 8015c4e:	d1bd      	bne.n	8015bcc <parse_string.isra.0+0xd4>
 8015c50:	79f3      	ldrb	r3, [r6, #7]
 8015c52:	2b75      	cmp	r3, #117	@ 0x75
 8015c54:	d1ba      	bne.n	8015bcc <parse_string.isra.0+0xd4>
 8015c56:	f106 0008 	add.w	r0, r6, #8
 8015c5a:	f7ff fe73 	bl	8015944 <parse_hex4>
 8015c5e:	f5a0 435c 	sub.w	r3, r0, #56320	@ 0xdc00
 8015c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015c66:	d2b1      	bcs.n	8015bcc <parse_string.isra.0+0xd4>
 8015c68:	ea0b 2585 	and.w	r5, fp, r5, lsl #10
 8015c6c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8015c70:	230c      	movs	r3, #12
 8015c72:	9a01      	ldr	r2, [sp, #4]
 8015c74:	4328      	orrs	r0, r5
 8015c76:	f500 3580 	add.w	r5, r0, #65536	@ 0x10000
 8015c7a:	f04f 0e04 	mov.w	lr, #4
 8015c7e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8015c82:	2003      	movs	r0, #3
 8015c84:	4410      	add	r0, r2
 8015c86:	f005 013f 	and.w	r1, r5, #63	@ 0x3f
 8015c8a:	09ad      	lsrs	r5, r5, #6
 8015c8c:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8015c90:	f800 1901 	strb.w	r1, [r0], #-1
 8015c94:	4290      	cmp	r0, r2
 8015c96:	d1f6      	bne.n	8015c86 <parse_string.isra.0+0x18e>
 8015c98:	ea4c 0505 	orr.w	r5, ip, r5
 8015c9c:	b2ed      	uxtb	r5, r5
 8015c9e:	7015      	strb	r5, [r2, #0]
 8015ca0:	441e      	add	r6, r3
 8015ca2:	4472      	add	r2, lr
 8015ca4:	e76e      	b.n	8015b84 <parse_string.isra.0+0x8c>
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	2001      	movs	r0, #1
 8015caa:	2110      	movs	r1, #16
 8015cac:	7013      	strb	r3, [r2, #0]
 8015cae:	f8d8 3000 	ldr.w	r3, [r8]
 8015cb2:	f8c9 1000 	str.w	r1, [r9]
 8015cb6:	1ae3      	subs	r3, r4, r3
 8015cb8:	f8ca 7000 	str.w	r7, [sl]
 8015cbc:	4403      	add	r3, r0
 8015cbe:	f8c8 3008 	str.w	r3, [r8, #8]
 8015cc2:	e744      	b.n	8015b4e <parse_string.isra.0+0x56>
 8015cc4:	287f      	cmp	r0, #127	@ 0x7f
 8015cc6:	d804      	bhi.n	8015cd2 <parse_string.isra.0+0x1da>
 8015cc8:	b2c5      	uxtb	r5, r0
 8015cca:	2306      	movs	r3, #6
 8015ccc:	f04f 0e01 	mov.w	lr, #1
 8015cd0:	e7e5      	b.n	8015c9e <parse_string.isra.0+0x1a6>
 8015cd2:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8015cd6:	d206      	bcs.n	8015ce6 <parse_string.isra.0+0x1ee>
 8015cd8:	2306      	movs	r3, #6
 8015cda:	f04f 0e02 	mov.w	lr, #2
 8015cde:	f04f 0cc0 	mov.w	ip, #192	@ 0xc0
 8015ce2:	2001      	movs	r0, #1
 8015ce4:	e7ce      	b.n	8015c84 <parse_string.isra.0+0x18c>
 8015ce6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015cea:	d206      	bcs.n	8015cfa <parse_string.isra.0+0x202>
 8015cec:	2306      	movs	r3, #6
 8015cee:	f04f 0e03 	mov.w	lr, #3
 8015cf2:	f04f 0ce0 	mov.w	ip, #224	@ 0xe0
 8015cf6:	2002      	movs	r0, #2
 8015cf8:	e7c4      	b.n	8015c84 <parse_string.isra.0+0x18c>
 8015cfa:	f5b0 1f88 	cmp.w	r0, #1114112	@ 0x110000
 8015cfe:	f4bf af65 	bcs.w	8015bcc <parse_string.isra.0+0xd4>
 8015d02:	2306      	movs	r3, #6
 8015d04:	e7b9      	b.n	8015c7a <parse_string.isra.0+0x182>
 8015d06:	bf00      	nop
 8015d08:	000ffc00 	.word	0x000ffc00

08015d0c <add_item_to_array.part.0>:
 8015d0c:	6883      	ldr	r3, [r0, #8]
 8015d0e:	b133      	cbz	r3, 8015d1e <add_item_to_array.part.0+0x12>
 8015d10:	685a      	ldr	r2, [r3, #4]
 8015d12:	b112      	cbz	r2, 8015d1a <add_item_to_array.part.0+0xe>
 8015d14:	6011      	str	r1, [r2, #0]
 8015d16:	604a      	str	r2, [r1, #4]
 8015d18:	6059      	str	r1, [r3, #4]
 8015d1a:	2001      	movs	r0, #1
 8015d1c:	4770      	bx	lr
 8015d1e:	6081      	str	r1, [r0, #8]
 8015d20:	2001      	movs	r0, #1
 8015d22:	e9c1 3100 	strd	r3, r1, [r1]
 8015d26:	4770      	bx	lr

08015d28 <cJSON_New_Item.isra.0>:
 8015d28:	4603      	mov	r3, r0
 8015d2a:	2028      	movs	r0, #40	@ 0x28
 8015d2c:	b510      	push	{r4, lr}
 8015d2e:	4798      	blx	r3
 8015d30:	4604      	mov	r4, r0
 8015d32:	b118      	cbz	r0, 8015d3c <cJSON_New_Item.isra.0+0x14>
 8015d34:	2228      	movs	r2, #40	@ 0x28
 8015d36:	2100      	movs	r1, #0
 8015d38:	f002 fdd6 	bl	80188e8 <memset>
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	bd10      	pop	{r4, pc}

08015d40 <print_string_ptr>:
 8015d40:	2900      	cmp	r1, #0
 8015d42:	f000 80be 	beq.w	8015ec2 <print_string_ptr+0x182>
 8015d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d4a:	4606      	mov	r6, r0
 8015d4c:	4608      	mov	r0, r1
 8015d4e:	2e00      	cmp	r6, #0
 8015d50:	f000 8090 	beq.w	8015e74 <print_string_ptr+0x134>
 8015d54:	7834      	ldrb	r4, [r6, #0]
 8015d56:	2c00      	cmp	r4, #0
 8015d58:	f000 8099 	beq.w	8015e8e <print_string_ptr+0x14e>
 8015d5c:	4632      	mov	r2, r6
 8015d5e:	f04f 0800 	mov.w	r8, #0
 8015d62:	2701      	movs	r7, #1
 8015d64:	4d5a      	ldr	r5, [pc, #360]	@ (8015ed0 <print_string_ptr+0x190>)
 8015d66:	e00f      	b.n	8015d88 <print_string_ptr+0x48>
 8015d68:	f1a4 0308 	sub.w	r3, r4, #8
 8015d6c:	2c07      	cmp	r4, #7
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	d903      	bls.n	8015d7a <print_string_ptr+0x3a>
 8015d72:	fa07 f303 	lsl.w	r3, r7, r3
 8015d76:	422b      	tst	r3, r5
 8015d78:	d10a      	bne.n	8015d90 <print_string_ptr+0x50>
 8015d7a:	2c1f      	cmp	r4, #31
 8015d7c:	bf98      	it	ls
 8015d7e:	f108 0805 	addls.w	r8, r8, #5
 8015d82:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8015d86:	b14c      	cbz	r4, 8015d9c <print_string_ptr+0x5c>
 8015d88:	2c22      	cmp	r4, #34	@ 0x22
 8015d8a:	d9ed      	bls.n	8015d68 <print_string_ptr+0x28>
 8015d8c:	2c5c      	cmp	r4, #92	@ 0x5c
 8015d8e:	d1f8      	bne.n	8015d82 <print_string_ptr+0x42>
 8015d90:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8015d94:	f108 0801 	add.w	r8, r8, #1
 8015d98:	2c00      	cmp	r4, #0
 8015d9a:	d1f5      	bne.n	8015d88 <print_string_ptr+0x48>
 8015d9c:	1b97      	subs	r7, r2, r6
 8015d9e:	eb07 0508 	add.w	r5, r7, r8
 8015da2:	1ce9      	adds	r1, r5, #3
 8015da4:	f7ff fe1e 	bl	80159e4 <ensure>
 8015da8:	4681      	mov	r9, r0
 8015daa:	2800      	cmp	r0, #0
 8015dac:	d05b      	beq.n	8015e66 <print_string_ptr+0x126>
 8015dae:	f1b8 0f00 	cmp.w	r8, #0
 8015db2:	f000 8088 	beq.w	8015ec6 <print_string_ptr+0x186>
 8015db6:	2322      	movs	r3, #34	@ 0x22
 8015db8:	4604      	mov	r4, r0
 8015dba:	f804 3b01 	strb.w	r3, [r4], #1
 8015dbe:	7833      	ldrb	r3, [r6, #0]
 8015dc0:	b3a3      	cbz	r3, 8015e2c <print_string_ptr+0xec>
 8015dc2:	275c      	movs	r7, #92	@ 0x5c
 8015dc4:	f8df a110 	ldr.w	sl, [pc, #272]	@ 8015ed8 <print_string_ptr+0x198>
 8015dc8:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8015dcc:	e007      	b.n	8015dde <print_string_ptr+0x9e>
 8015dce:	2b5c      	cmp	r3, #92	@ 0x5c
 8015dd0:	d009      	beq.n	8015de6 <print_string_ptr+0xa6>
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	7023      	strb	r3, [r4, #0]
 8015dd6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8015dda:	1c44      	adds	r4, r0, #1
 8015ddc:	b333      	cbz	r3, 8015e2c <print_string_ptr+0xec>
 8015dde:	2b22      	cmp	r3, #34	@ 0x22
 8015de0:	bf18      	it	ne
 8015de2:	2b1f      	cmpne	r3, #31
 8015de4:	d8f3      	bhi.n	8015dce <print_string_ptr+0x8e>
 8015de6:	4620      	mov	r0, r4
 8015de8:	f800 7b01 	strb.w	r7, [r0], #1
 8015dec:	7832      	ldrb	r2, [r6, #0]
 8015dee:	2a22      	cmp	r2, #34	@ 0x22
 8015df0:	d83c      	bhi.n	8015e6c <print_string_ptr+0x12c>
 8015df2:	2a07      	cmp	r2, #7
 8015df4:	d932      	bls.n	8015e5c <print_string_ptr+0x11c>
 8015df6:	f1a2 0308 	sub.w	r3, r2, #8
 8015dfa:	2b1a      	cmp	r3, #26
 8015dfc:	d82e      	bhi.n	8015e5c <print_string_ptr+0x11c>
 8015dfe:	e8df f003 	tbb	[pc, r3]
 8015e02:	272a      	.short	0x272a
 8015e04:	1e212d24 	.word	0x1e212d24
 8015e08:	2d2d2d2d 	.word	0x2d2d2d2d
 8015e0c:	2d2d2d2d 	.word	0x2d2d2d2d
 8015e10:	2d2d2d2d 	.word	0x2d2d2d2d
 8015e14:	2d2d2d2d 	.word	0x2d2d2d2d
 8015e18:	2d2d2d2d 	.word	0x2d2d2d2d
 8015e1c:	0e          	.byte	0x0e
 8015e1d:	00          	.byte	0x00
 8015e1e:	2322      	movs	r3, #34	@ 0x22
 8015e20:	7063      	strb	r3, [r4, #1]
 8015e22:	1c44      	adds	r4, r0, #1
 8015e24:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d1d8      	bne.n	8015dde <print_string_ptr+0x9e>
 8015e2c:	eb09 0405 	add.w	r4, r9, r5
 8015e30:	2222      	movs	r2, #34	@ 0x22
 8015e32:	2300      	movs	r3, #0
 8015e34:	2001      	movs	r0, #1
 8015e36:	7062      	strb	r2, [r4, #1]
 8015e38:	70a3      	strb	r3, [r4, #2]
 8015e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e3e:	2372      	movs	r3, #114	@ 0x72
 8015e40:	7063      	strb	r3, [r4, #1]
 8015e42:	e7c8      	b.n	8015dd6 <print_string_ptr+0x96>
 8015e44:	2366      	movs	r3, #102	@ 0x66
 8015e46:	7063      	strb	r3, [r4, #1]
 8015e48:	e7c5      	b.n	8015dd6 <print_string_ptr+0x96>
 8015e4a:	236e      	movs	r3, #110	@ 0x6e
 8015e4c:	7063      	strb	r3, [r4, #1]
 8015e4e:	e7c2      	b.n	8015dd6 <print_string_ptr+0x96>
 8015e50:	f884 8001 	strb.w	r8, [r4, #1]
 8015e54:	e7bf      	b.n	8015dd6 <print_string_ptr+0x96>
 8015e56:	2362      	movs	r3, #98	@ 0x62
 8015e58:	7063      	strb	r3, [r4, #1]
 8015e5a:	e7bc      	b.n	8015dd6 <print_string_ptr+0x96>
 8015e5c:	4651      	mov	r1, sl
 8015e5e:	f002 fbf9 	bl	8018654 <siprintf>
 8015e62:	1d60      	adds	r0, r4, #5
 8015e64:	e7b7      	b.n	8015dd6 <print_string_ptr+0x96>
 8015e66:	2000      	movs	r0, #0
 8015e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e6c:	2a5c      	cmp	r2, #92	@ 0x5c
 8015e6e:	d1f5      	bne.n	8015e5c <print_string_ptr+0x11c>
 8015e70:	7062      	strb	r2, [r4, #1]
 8015e72:	e7b0      	b.n	8015dd6 <print_string_ptr+0x96>
 8015e74:	2103      	movs	r1, #3
 8015e76:	f7ff fdb5 	bl	80159e4 <ensure>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	d0f2      	beq.n	8015e66 <print_string_ptr+0x126>
 8015e80:	4a14      	ldr	r2, [pc, #80]	@ (8015ed4 <print_string_ptr+0x194>)
 8015e82:	2001      	movs	r0, #1
 8015e84:	8811      	ldrh	r1, [r2, #0]
 8015e86:	7892      	ldrb	r2, [r2, #2]
 8015e88:	8019      	strh	r1, [r3, #0]
 8015e8a:	709a      	strb	r2, [r3, #2]
 8015e8c:	e7ec      	b.n	8015e68 <print_string_ptr+0x128>
 8015e8e:	2103      	movs	r1, #3
 8015e90:	f7ff fda8 	bl	80159e4 <ensure>
 8015e94:	4681      	mov	r9, r0
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d0e5      	beq.n	8015e66 <print_string_ptr+0x126>
 8015e9a:	4625      	mov	r5, r4
 8015e9c:	2702      	movs	r7, #2
 8015e9e:	f04f 0801 	mov.w	r8, #1
 8015ea2:	2422      	movs	r4, #34	@ 0x22
 8015ea4:	4648      	mov	r0, r9
 8015ea6:	462a      	mov	r2, r5
 8015ea8:	4631      	mov	r1, r6
 8015eaa:	f800 4b01 	strb.w	r4, [r0], #1
 8015eae:	f002 fdd2 	bl	8018a56 <memcpy>
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	f809 4008 	strb.w	r4, [r9, r8]
 8015eb8:	2001      	movs	r0, #1
 8015eba:	f809 3007 	strb.w	r3, [r9, r7]
 8015ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ec2:	2000      	movs	r0, #0
 8015ec4:	4770      	bx	lr
 8015ec6:	f107 0801 	add.w	r8, r7, #1
 8015eca:	3702      	adds	r7, #2
 8015ecc:	e7e9      	b.n	8015ea2 <print_string_ptr+0x162>
 8015ece:	bf00      	nop
 8015ed0:	04000037 	.word	0x04000037
 8015ed4:	0802157c 	.word	0x0802157c
 8015ed8:	08021580 	.word	0x08021580

08015edc <print_value.part.0>:
 8015edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ee0:	7b05      	ldrb	r5, [r0, #12]
 8015ee2:	b08b      	sub	sp, #44	@ 0x2c
 8015ee4:	4606      	mov	r6, r0
 8015ee6:	460c      	mov	r4, r1
 8015ee8:	2d20      	cmp	r5, #32
 8015eea:	dc25      	bgt.n	8015f38 <print_value.part.0+0x5c>
 8015eec:	b375      	cbz	r5, 8015f4c <print_value.part.0+0x70>
 8015eee:	1e6b      	subs	r3, r5, #1
 8015ef0:	2b1f      	cmp	r3, #31
 8015ef2:	d82a      	bhi.n	8015f4a <print_value.part.0+0x6e>
 8015ef4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015ef8:	00810074 	.word	0x00810074
 8015efc:	00920029 	.word	0x00920029
 8015f00:	00290029 	.word	0x00290029
 8015f04:	009b0029 	.word	0x009b0029
 8015f08:	00290029 	.word	0x00290029
 8015f0c:	00290029 	.word	0x00290029
 8015f10:	00290029 	.word	0x00290029
 8015f14:	00e50029 	.word	0x00e50029
 8015f18:	00290029 	.word	0x00290029
 8015f1c:	00290029 	.word	0x00290029
 8015f20:	00290029 	.word	0x00290029
 8015f24:	00290029 	.word	0x00290029
 8015f28:	00290029 	.word	0x00290029
 8015f2c:	00290029 	.word	0x00290029
 8015f30:	00290029 	.word	0x00290029
 8015f34:	002e0029 	.word	0x002e0029
 8015f38:	2d40      	cmp	r5, #64	@ 0x40
 8015f3a:	f000 80ec 	beq.w	8016116 <print_value.part.0+0x23a>
 8015f3e:	2d80      	cmp	r5, #128	@ 0x80
 8015f40:	d103      	bne.n	8015f4a <print_value.part.0+0x6e>
 8015f42:	6900      	ldr	r0, [r0, #16]
 8015f44:	2800      	cmp	r0, #0
 8015f46:	f040 80c4 	bne.w	80160d2 <print_value.part.0+0x1f6>
 8015f4a:	2500      	movs	r5, #0
 8015f4c:	4628      	mov	r0, r5
 8015f4e:	b00b      	add	sp, #44	@ 0x2c
 8015f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f54:	2900      	cmp	r1, #0
 8015f56:	d0f8      	beq.n	8015f4a <print_value.part.0+0x6e>
 8015f58:	2101      	movs	r1, #1
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	68b7      	ldr	r7, [r6, #8]
 8015f5e:	f7ff fd41 	bl	80159e4 <ensure>
 8015f62:	2800      	cmp	r0, #0
 8015f64:	d0f1      	beq.n	8015f4a <print_value.part.0+0x6e>
 8015f66:	235b      	movs	r3, #91	@ 0x5b
 8015f68:	7003      	strb	r3, [r0, #0]
 8015f6a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8015f6e:	3201      	adds	r2, #1
 8015f70:	3301      	adds	r3, #1
 8015f72:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8015f76:	2f00      	cmp	r7, #0
 8015f78:	f000 80bd 	beq.w	80160f6 <print_value.part.0+0x21a>
 8015f7c:	262c      	movs	r6, #44	@ 0x2c
 8015f7e:	f04f 0820 	mov.w	r8, #32
 8015f82:	2500      	movs	r5, #0
 8015f84:	e008      	b.n	8015f98 <print_value.part.0+0xbc>
 8015f86:	1c42      	adds	r2, r0, #1
 8015f88:	7015      	strb	r5, [r2, #0]
 8015f8a:	68a3      	ldr	r3, [r4, #8]
 8015f8c:	683f      	ldr	r7, [r7, #0]
 8015f8e:	444b      	add	r3, r9
 8015f90:	60a3      	str	r3, [r4, #8]
 8015f92:	2f00      	cmp	r7, #0
 8015f94:	f000 80af 	beq.w	80160f6 <print_value.part.0+0x21a>
 8015f98:	4621      	mov	r1, r4
 8015f9a:	4638      	mov	r0, r7
 8015f9c:	f7ff ff9e 	bl	8015edc <print_value.part.0>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d0d0      	beq.n	8015f4a <print_value.part.0+0x6e>
 8015fa8:	f7ff fd0e 	bl	80159c8 <update_offset>
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	4620      	mov	r0, r4
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	f000 80a0 	beq.w	80160f6 <print_value.part.0+0x21a>
 8015fb6:	6963      	ldr	r3, [r4, #20]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	bf15      	itete	ne
 8015fbc:	2103      	movne	r1, #3
 8015fbe:	2102      	moveq	r1, #2
 8015fc0:	f04f 0902 	movne.w	r9, #2
 8015fc4:	f04f 0901 	moveq.w	r9, #1
 8015fc8:	f7ff fd0c 	bl	80159e4 <ensure>
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	d0bc      	beq.n	8015f4a <print_value.part.0+0x6e>
 8015fd0:	7006      	strb	r6, [r0, #0]
 8015fd2:	1c82      	adds	r2, r0, #2
 8015fd4:	6963      	ldr	r3, [r4, #20]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d0d5      	beq.n	8015f86 <print_value.part.0+0xaa>
 8015fda:	f880 8001 	strb.w	r8, [r0, #1]
 8015fde:	e7d3      	b.n	8015f88 <print_value.part.0+0xac>
 8015fe0:	4608      	mov	r0, r1
 8015fe2:	2106      	movs	r1, #6
 8015fe4:	f7ff fcfe 	bl	80159e4 <ensure>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	2800      	cmp	r0, #0
 8015fec:	d0ad      	beq.n	8015f4a <print_value.part.0+0x6e>
 8015fee:	4aab      	ldr	r2, [pc, #684]	@ (801629c <print_value.part.0+0x3c0>)
 8015ff0:	6810      	ldr	r0, [r2, #0]
 8015ff2:	8892      	ldrh	r2, [r2, #4]
 8015ff4:	6018      	str	r0, [r3, #0]
 8015ff6:	809a      	strh	r2, [r3, #4]
 8015ff8:	e7a8      	b.n	8015f4c <print_value.part.0+0x70>
 8015ffa:	4608      	mov	r0, r1
 8015ffc:	2105      	movs	r1, #5
 8015ffe:	f7ff fcf1 	bl	80159e4 <ensure>
 8016002:	4603      	mov	r3, r0
 8016004:	2800      	cmp	r0, #0
 8016006:	d0a0      	beq.n	8015f4a <print_value.part.0+0x6e>
 8016008:	4aa5      	ldr	r2, [pc, #660]	@ (80162a0 <print_value.part.0+0x3c4>)
 801600a:	6810      	ldr	r0, [r2, #0]
 801600c:	2501      	movs	r5, #1
 801600e:	7912      	ldrb	r2, [r2, #4]
 8016010:	6018      	str	r0, [r3, #0]
 8016012:	4628      	mov	r0, r5
 8016014:	711a      	strb	r2, [r3, #4]
 8016016:	b00b      	add	sp, #44	@ 0x2c
 8016018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801601c:	4608      	mov	r0, r1
 801601e:	2105      	movs	r1, #5
 8016020:	f7ff fce0 	bl	80159e4 <ensure>
 8016024:	4603      	mov	r3, r0
 8016026:	2800      	cmp	r0, #0
 8016028:	d08f      	beq.n	8015f4a <print_value.part.0+0x6e>
 801602a:	4a9e      	ldr	r2, [pc, #632]	@ (80162a4 <print_value.part.0+0x3c8>)
 801602c:	e7ed      	b.n	801600a <print_value.part.0+0x12e>
 801602e:	2300      	movs	r3, #0
 8016030:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
 8016034:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016038:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801603c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8016040:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8016044:	2900      	cmp	r1, #0
 8016046:	d080      	beq.n	8015f4a <print_value.part.0+0x6e>
 8016048:	4632      	mov	r2, r6
 801604a:	463b      	mov	r3, r7
 801604c:	4630      	mov	r0, r6
 801604e:	4639      	mov	r1, r7
 8016050:	f7ea fbf2 	bl	8000838 <__aeabi_dcmpun>
 8016054:	b9a8      	cbnz	r0, 8016082 <print_value.part.0+0x1a6>
 8016056:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 801605a:	f04f 32ff 	mov.w	r2, #4294967295
 801605e:	4b92      	ldr	r3, [pc, #584]	@ (80162a8 <print_value.part.0+0x3cc>)
 8016060:	4630      	mov	r0, r6
 8016062:	4649      	mov	r1, r9
 8016064:	f7ea fbe8 	bl	8000838 <__aeabi_dcmpun>
 8016068:	2800      	cmp	r0, #0
 801606a:	f040 80fd 	bne.w	8016268 <print_value.part.0+0x38c>
 801606e:	4630      	mov	r0, r6
 8016070:	4649      	mov	r1, r9
 8016072:	f04f 32ff 	mov.w	r2, #4294967295
 8016076:	4b8c      	ldr	r3, [pc, #560]	@ (80162a8 <print_value.part.0+0x3cc>)
 8016078:	f7ea fbc0 	bl	80007fc <__aeabi_dcmple>
 801607c:	2800      	cmp	r0, #0
 801607e:	f040 80f3 	bne.w	8016268 <print_value.part.0+0x38c>
 8016082:	4b88      	ldr	r3, [pc, #544]	@ (80162a4 <print_value.part.0+0x3c8>)
 8016084:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016088:	9003      	str	r0, [sp, #12]
 801608a:	4620      	mov	r0, r4
 801608c:	f88d 1010 	strb.w	r1, [sp, #16]
 8016090:	2105      	movs	r1, #5
 8016092:	f7ff fca7 	bl	80159e4 <ensure>
 8016096:	4603      	mov	r3, r0
 8016098:	2800      	cmp	r0, #0
 801609a:	f43f af56 	beq.w	8015f4a <print_value.part.0+0x6e>
 801609e:	2604      	movs	r6, #4
 80160a0:	ad03      	add	r5, sp, #12
 80160a2:	4629      	mov	r1, r5
 80160a4:	199d      	adds	r5, r3, r6
 80160a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80160aa:	3301      	adds	r3, #1
 80160ac:	f803 2c01 	strb.w	r2, [r3, #-1]
 80160b0:	42ab      	cmp	r3, r5
 80160b2:	d1f8      	bne.n	80160a6 <print_value.part.0+0x1ca>
 80160b4:	2200      	movs	r2, #0
 80160b6:	2501      	movs	r5, #1
 80160b8:	701a      	strb	r2, [r3, #0]
 80160ba:	68a3      	ldr	r3, [r4, #8]
 80160bc:	441e      	add	r6, r3
 80160be:	60a6      	str	r6, [r4, #8]
 80160c0:	e744      	b.n	8015f4c <print_value.part.0+0x70>
 80160c2:	6900      	ldr	r0, [r0, #16]
 80160c4:	f7ff fe3c 	bl	8015d40 <print_string_ptr>
 80160c8:	4605      	mov	r5, r0
 80160ca:	4628      	mov	r0, r5
 80160cc:	b00b      	add	sp, #44	@ 0x2c
 80160ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160d2:	f7ea f965 	bl	80003a0 <strlen>
 80160d6:	4602      	mov	r2, r0
 80160d8:	4620      	mov	r0, r4
 80160da:	3201      	adds	r2, #1
 80160dc:	4611      	mov	r1, r2
 80160de:	9201      	str	r2, [sp, #4]
 80160e0:	f7ff fc80 	bl	80159e4 <ensure>
 80160e4:	2800      	cmp	r0, #0
 80160e6:	f43f af30 	beq.w	8015f4a <print_value.part.0+0x6e>
 80160ea:	9a01      	ldr	r2, [sp, #4]
 80160ec:	2501      	movs	r5, #1
 80160ee:	6931      	ldr	r1, [r6, #16]
 80160f0:	f002 fcb1 	bl	8018a56 <memcpy>
 80160f4:	e72a      	b.n	8015f4c <print_value.part.0+0x70>
 80160f6:	2102      	movs	r1, #2
 80160f8:	4620      	mov	r0, r4
 80160fa:	f7ff fc73 	bl	80159e4 <ensure>
 80160fe:	2800      	cmp	r0, #0
 8016100:	f43f af23 	beq.w	8015f4a <print_value.part.0+0x6e>
 8016104:	225d      	movs	r2, #93	@ 0x5d
 8016106:	2300      	movs	r3, #0
 8016108:	7002      	strb	r2, [r0, #0]
 801610a:	2501      	movs	r5, #1
 801610c:	7043      	strb	r3, [r0, #1]
 801610e:	68e3      	ldr	r3, [r4, #12]
 8016110:	3b01      	subs	r3, #1
 8016112:	60e3      	str	r3, [r4, #12]
 8016114:	e71a      	b.n	8015f4c <print_value.part.0+0x70>
 8016116:	2900      	cmp	r1, #0
 8016118:	f43f af17 	beq.w	8015f4a <print_value.part.0+0x6e>
 801611c:	694b      	ldr	r3, [r1, #20]
 801611e:	4608      	mov	r0, r1
 8016120:	68b5      	ldr	r5, [r6, #8]
 8016122:	2b00      	cmp	r3, #0
 8016124:	bf15      	itete	ne
 8016126:	2103      	movne	r1, #3
 8016128:	2102      	moveq	r1, #2
 801612a:	2602      	movne	r6, #2
 801612c:	2601      	moveq	r6, #1
 801612e:	f7ff fc59 	bl	80159e4 <ensure>
 8016132:	2800      	cmp	r0, #0
 8016134:	f43f af09 	beq.w	8015f4a <print_value.part.0+0x6e>
 8016138:	237b      	movs	r3, #123	@ 0x7b
 801613a:	7003      	strb	r3, [r0, #0]
 801613c:	68e2      	ldr	r2, [r4, #12]
 801613e:	6963      	ldr	r3, [r4, #20]
 8016140:	3201      	adds	r2, #1
 8016142:	60e2      	str	r2, [r4, #12]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d172      	bne.n	801622e <print_value.part.0+0x352>
 8016148:	68a2      	ldr	r2, [r4, #8]
 801614a:	4416      	add	r6, r2
 801614c:	60a6      	str	r6, [r4, #8]
 801614e:	2d00      	cmp	r5, #0
 8016150:	f000 80a1 	beq.w	8016296 <print_value.part.0+0x3ba>
 8016154:	2609      	movs	r6, #9
 8016156:	273a      	movs	r7, #58	@ 0x3a
 8016158:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 801615c:	2b00      	cmp	r3, #0
 801615e:	d16f      	bne.n	8016240 <print_value.part.0+0x364>
 8016160:	4621      	mov	r1, r4
 8016162:	6a28      	ldr	r0, [r5, #32]
 8016164:	f7ff fdec 	bl	8015d40 <print_string_ptr>
 8016168:	2800      	cmp	r0, #0
 801616a:	f43f aeee 	beq.w	8015f4a <print_value.part.0+0x6e>
 801616e:	4620      	mov	r0, r4
 8016170:	f7ff fc2a 	bl	80159c8 <update_offset>
 8016174:	6963      	ldr	r3, [r4, #20]
 8016176:	4620      	mov	r0, r4
 8016178:	2b00      	cmp	r3, #0
 801617a:	bf14      	ite	ne
 801617c:	f04f 0902 	movne.w	r9, #2
 8016180:	f04f 0901 	moveq.w	r9, #1
 8016184:	4649      	mov	r1, r9
 8016186:	f7ff fc2d 	bl	80159e4 <ensure>
 801618a:	2800      	cmp	r0, #0
 801618c:	f43f aedd 	beq.w	8015f4a <print_value.part.0+0x6e>
 8016190:	7007      	strb	r7, [r0, #0]
 8016192:	6963      	ldr	r3, [r4, #20]
 8016194:	b103      	cbz	r3, 8016198 <print_value.part.0+0x2bc>
 8016196:	7046      	strb	r6, [r0, #1]
 8016198:	68a3      	ldr	r3, [r4, #8]
 801619a:	4621      	mov	r1, r4
 801619c:	4628      	mov	r0, r5
 801619e:	444b      	add	r3, r9
 80161a0:	60a3      	str	r3, [r4, #8]
 80161a2:	f7ff fe9b 	bl	8015edc <print_value.part.0>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	f43f aecf 	beq.w	8015f4a <print_value.part.0+0x6e>
 80161ac:	4620      	mov	r0, r4
 80161ae:	f7ff fc0b 	bl	80159c8 <update_offset>
 80161b2:	682b      	ldr	r3, [r5, #0]
 80161b4:	6962      	ldr	r2, [r4, #20]
 80161b6:	4620      	mov	r0, r4
 80161b8:	3b00      	subs	r3, #0
 80161ba:	bf18      	it	ne
 80161bc:	2301      	movne	r3, #1
 80161be:	2a00      	cmp	r2, #0
 80161c0:	bf0c      	ite	eq
 80161c2:	4699      	moveq	r9, r3
 80161c4:	f103 0901 	addne.w	r9, r3, #1
 80161c8:	f109 0101 	add.w	r1, r9, #1
 80161cc:	f7ff fc0a 	bl	80159e4 <ensure>
 80161d0:	2800      	cmp	r0, #0
 80161d2:	f43f aeba 	beq.w	8015f4a <print_value.part.0+0x6e>
 80161d6:	682b      	ldr	r3, [r5, #0]
 80161d8:	b10b      	cbz	r3, 80161de <print_value.part.0+0x302>
 80161da:	f800 8b01 	strb.w	r8, [r0], #1
 80161de:	6963      	ldr	r3, [r4, #20]
 80161e0:	b113      	cbz	r3, 80161e8 <print_value.part.0+0x30c>
 80161e2:	230a      	movs	r3, #10
 80161e4:	f800 3b01 	strb.w	r3, [r0], #1
 80161e8:	2300      	movs	r3, #0
 80161ea:	7003      	strb	r3, [r0, #0]
 80161ec:	68a3      	ldr	r3, [r4, #8]
 80161ee:	682d      	ldr	r5, [r5, #0]
 80161f0:	444b      	add	r3, r9
 80161f2:	60a3      	str	r3, [r4, #8]
 80161f4:	6963      	ldr	r3, [r4, #20]
 80161f6:	2d00      	cmp	r5, #0
 80161f8:	d1b0      	bne.n	801615c <print_value.part.0+0x280>
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d04b      	beq.n	8016296 <print_value.part.0+0x3ba>
 80161fe:	68e1      	ldr	r1, [r4, #12]
 8016200:	3101      	adds	r1, #1
 8016202:	4620      	mov	r0, r4
 8016204:	f7ff fbee 	bl	80159e4 <ensure>
 8016208:	2800      	cmp	r0, #0
 801620a:	f43f ae9e 	beq.w	8015f4a <print_value.part.0+0x6e>
 801620e:	6963      	ldr	r3, [r4, #20]
 8016210:	b15b      	cbz	r3, 801622a <print_value.part.0+0x34e>
 8016212:	68e3      	ldr	r3, [r4, #12]
 8016214:	2b01      	cmp	r3, #1
 8016216:	d008      	beq.n	801622a <print_value.part.0+0x34e>
 8016218:	2200      	movs	r2, #0
 801621a:	2109      	movs	r1, #9
 801621c:	f800 1b01 	strb.w	r1, [r0], #1
 8016220:	3201      	adds	r2, #1
 8016222:	68e3      	ldr	r3, [r4, #12]
 8016224:	3b01      	subs	r3, #1
 8016226:	429a      	cmp	r2, r3
 8016228:	d3f8      	bcc.n	801621c <print_value.part.0+0x340>
 801622a:	227d      	movs	r2, #125	@ 0x7d
 801622c:	e76b      	b.n	8016106 <print_value.part.0+0x22a>
 801622e:	230a      	movs	r3, #10
 8016230:	7043      	strb	r3, [r0, #1]
 8016232:	68a2      	ldr	r2, [r4, #8]
 8016234:	6963      	ldr	r3, [r4, #20]
 8016236:	4416      	add	r6, r2
 8016238:	60a6      	str	r6, [r4, #8]
 801623a:	2d00      	cmp	r5, #0
 801623c:	d18a      	bne.n	8016154 <print_value.part.0+0x278>
 801623e:	e7dc      	b.n	80161fa <print_value.part.0+0x31e>
 8016240:	68e1      	ldr	r1, [r4, #12]
 8016242:	4620      	mov	r0, r4
 8016244:	f7ff fbce 	bl	80159e4 <ensure>
 8016248:	2800      	cmp	r0, #0
 801624a:	f43f ae7e 	beq.w	8015f4a <print_value.part.0+0x6e>
 801624e:	68e2      	ldr	r2, [r4, #12]
 8016250:	b132      	cbz	r2, 8016260 <print_value.part.0+0x384>
 8016252:	2300      	movs	r3, #0
 8016254:	3301      	adds	r3, #1
 8016256:	f800 6b01 	strb.w	r6, [r0], #1
 801625a:	68e2      	ldr	r2, [r4, #12]
 801625c:	4293      	cmp	r3, r2
 801625e:	d3f9      	bcc.n	8016254 <print_value.part.0+0x378>
 8016260:	68a3      	ldr	r3, [r4, #8]
 8016262:	441a      	add	r2, r3
 8016264:	60a2      	str	r2, [r4, #8]
 8016266:	e77b      	b.n	8016160 <print_value.part.0+0x284>
 8016268:	ad03      	add	r5, sp, #12
 801626a:	4632      	mov	r2, r6
 801626c:	490f      	ldr	r1, [pc, #60]	@ (80162ac <print_value.part.0+0x3d0>)
 801626e:	463b      	mov	r3, r7
 8016270:	4628      	mov	r0, r5
 8016272:	f002 f9ef 	bl	8018654 <siprintf>
 8016276:	2819      	cmp	r0, #25
 8016278:	4606      	mov	r6, r0
 801627a:	f63f ae66 	bhi.w	8015f4a <print_value.part.0+0x6e>
 801627e:	1c41      	adds	r1, r0, #1
 8016280:	4620      	mov	r0, r4
 8016282:	f7ff fbaf 	bl	80159e4 <ensure>
 8016286:	4603      	mov	r3, r0
 8016288:	2800      	cmp	r0, #0
 801628a:	f43f ae5e 	beq.w	8015f4a <print_value.part.0+0x6e>
 801628e:	2e00      	cmp	r6, #0
 8016290:	f43f af10 	beq.w	80160b4 <print_value.part.0+0x1d8>
 8016294:	e705      	b.n	80160a2 <print_value.part.0+0x1c6>
 8016296:	2102      	movs	r1, #2
 8016298:	e7b3      	b.n	8016202 <print_value.part.0+0x326>
 801629a:	bf00      	nop
 801629c:	08021590 	.word	0x08021590
 80162a0:	08021598 	.word	0x08021598
 80162a4:	08021588 	.word	0x08021588
 80162a8:	7fefffff 	.word	0x7fefffff
 80162ac:	080215a0 	.word	0x080215a0

080162b0 <print.constprop.0>:
 80162b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162b2:	b08b      	sub	sp, #44	@ 0x2c
 80162b4:	4f28      	ldr	r7, [pc, #160]	@ (8016358 <print.constprop.0+0xa8>)
 80162b6:	2224      	movs	r2, #36	@ 0x24
 80162b8:	460e      	mov	r6, r1
 80162ba:	4605      	mov	r5, r0
 80162bc:	2100      	movs	r1, #0
 80162be:	a801      	add	r0, sp, #4
 80162c0:	f002 fb12 	bl	80188e8 <memset>
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80162ca:	4798      	blx	r3
 80162cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80162d0:	4604      	mov	r4, r0
 80162d2:	9606      	str	r6, [sp, #24]
 80162d4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80162d8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80162dc:	ab0a      	add	r3, sp, #40	@ 0x28
 80162de:	e903 0007 	stmdb	r3, {r0, r1, r2}
 80162e2:	b1ac      	cbz	r4, 8016310 <print.constprop.0+0x60>
 80162e4:	b1c5      	cbz	r5, 8016318 <print.constprop.0+0x68>
 80162e6:	a901      	add	r1, sp, #4
 80162e8:	4628      	mov	r0, r5
 80162ea:	f7ff fdf7 	bl	8015edc <print_value.part.0>
 80162ee:	b190      	cbz	r0, 8016316 <print.constprop.0+0x66>
 80162f0:	9d01      	ldr	r5, [sp, #4]
 80162f2:	2d00      	cmp	r5, #0
 80162f4:	d02e      	beq.n	8016354 <print.constprop.0+0xa4>
 80162f6:	9c03      	ldr	r4, [sp, #12]
 80162f8:	1928      	adds	r0, r5, r4
 80162fa:	f7ea f851 	bl	80003a0 <strlen>
 80162fe:	4420      	add	r0, r4
 8016300:	9003      	str	r0, [sp, #12]
 8016302:	68be      	ldr	r6, [r7, #8]
 8016304:	b18e      	cbz	r6, 801632a <print.constprop.0+0x7a>
 8016306:	1c41      	adds	r1, r0, #1
 8016308:	4628      	mov	r0, r5
 801630a:	47b0      	blx	r6
 801630c:	4604      	mov	r4, r0
 801630e:	b110      	cbz	r0, 8016316 <print.constprop.0+0x66>
 8016310:	4620      	mov	r0, r4
 8016312:	b00b      	add	sp, #44	@ 0x2c
 8016314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016316:	9c01      	ldr	r4, [sp, #4]
 8016318:	2c00      	cmp	r4, #0
 801631a:	d0f9      	beq.n	8016310 <print.constprop.0+0x60>
 801631c:	4620      	mov	r0, r4
 801631e:	2400      	movs	r4, #0
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	4798      	blx	r3
 8016324:	4620      	mov	r0, r4
 8016326:	b00b      	add	sp, #44	@ 0x2c
 8016328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801632a:	3001      	adds	r0, #1
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	4798      	blx	r3
 8016330:	4604      	mov	r4, r0
 8016332:	2800      	cmp	r0, #0
 8016334:	d0ef      	beq.n	8016316 <print.constprop.0+0x66>
 8016336:	9901      	ldr	r1, [sp, #4]
 8016338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801633c:	3301      	adds	r3, #1
 801633e:	429a      	cmp	r2, r3
 8016340:	bf28      	it	cs
 8016342:	461a      	movcs	r2, r3
 8016344:	f002 fb87 	bl	8018a56 <memcpy>
 8016348:	9b03      	ldr	r3, [sp, #12]
 801634a:	54e6      	strb	r6, [r4, r3]
 801634c:	9801      	ldr	r0, [sp, #4]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	4798      	blx	r3
 8016352:	e7dd      	b.n	8016310 <print.constprop.0+0x60>
 8016354:	9803      	ldr	r0, [sp, #12]
 8016356:	e7d4      	b.n	8016302 <print.constprop.0+0x52>
 8016358:	240001c0 	.word	0x240001c0

0801635c <cJSON_strdup.isra.0.constprop.0>:
 801635c:	b530      	push	{r4, r5, lr}
 801635e:	4604      	mov	r4, r0
 8016360:	b083      	sub	sp, #12
 8016362:	b180      	cbz	r0, 8016386 <cJSON_strdup.isra.0.constprop.0+0x2a>
 8016364:	f7ea f81c 	bl	80003a0 <strlen>
 8016368:	4b08      	ldr	r3, [pc, #32]	@ (801638c <cJSON_strdup.isra.0.constprop.0+0x30>)
 801636a:	1c42      	adds	r2, r0, #1
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	4610      	mov	r0, r2
 8016370:	9201      	str	r2, [sp, #4]
 8016372:	4798      	blx	r3
 8016374:	4605      	mov	r5, r0
 8016376:	b118      	cbz	r0, 8016380 <cJSON_strdup.isra.0.constprop.0+0x24>
 8016378:	9a01      	ldr	r2, [sp, #4]
 801637a:	4621      	mov	r1, r4
 801637c:	f002 fb6b 	bl	8018a56 <memcpy>
 8016380:	4628      	mov	r0, r5
 8016382:	b003      	add	sp, #12
 8016384:	bd30      	pop	{r4, r5, pc}
 8016386:	4605      	mov	r5, r0
 8016388:	e7fa      	b.n	8016380 <cJSON_strdup.isra.0.constprop.0+0x24>
 801638a:	bf00      	nop
 801638c:	240001c0 	.word	0x240001c0

08016390 <add_item_to_object.constprop.0>:
 8016390:	b330      	cbz	r0, 80163e0 <add_item_to_object.constprop.0+0x50>
 8016392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016394:	460f      	mov	r7, r1
 8016396:	b1b9      	cbz	r1, 80163c8 <add_item_to_object.constprop.0+0x38>
 8016398:	4614      	mov	r4, r2
 801639a:	b1aa      	cbz	r2, 80163c8 <add_item_to_object.constprop.0+0x38>
 801639c:	4290      	cmp	r0, r2
 801639e:	4605      	mov	r5, r0
 80163a0:	d012      	beq.n	80163c8 <add_item_to_object.constprop.0+0x38>
 80163a2:	b19b      	cbz	r3, 80163cc <add_item_to_object.constprop.0+0x3c>
 80163a4:	68d3      	ldr	r3, [r2, #12]
 80163a6:	f443 7600 	orr.w	r6, r3, #512	@ 0x200
 80163aa:	059b      	lsls	r3, r3, #22
 80163ac:	d404      	bmi.n	80163b8 <add_item_to_object.constprop.0+0x28>
 80163ae:	6a20      	ldr	r0, [r4, #32]
 80163b0:	b110      	cbz	r0, 80163b8 <add_item_to_object.constprop.0+0x28>
 80163b2:	4b0c      	ldr	r3, [pc, #48]	@ (80163e4 <add_item_to_object.constprop.0+0x54>)
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	4798      	blx	r3
 80163b8:	4621      	mov	r1, r4
 80163ba:	4628      	mov	r0, r5
 80163bc:	6227      	str	r7, [r4, #32]
 80163be:	60e6      	str	r6, [r4, #12]
 80163c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163c4:	f7ff bca2 	b.w	8015d0c <add_item_to_array.part.0>
 80163c8:	2000      	movs	r0, #0
 80163ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163cc:	4608      	mov	r0, r1
 80163ce:	f7ff ffc5 	bl	801635c <cJSON_strdup.isra.0.constprop.0>
 80163d2:	4607      	mov	r7, r0
 80163d4:	2800      	cmp	r0, #0
 80163d6:	d0f7      	beq.n	80163c8 <add_item_to_object.constprop.0+0x38>
 80163d8:	68e3      	ldr	r3, [r4, #12]
 80163da:	f423 7600 	bic.w	r6, r3, #512	@ 0x200
 80163de:	e7e4      	b.n	80163aa <add_item_to_object.constprop.0+0x1a>
 80163e0:	2000      	movs	r0, #0
 80163e2:	4770      	bx	lr
 80163e4:	240001c0 	.word	0x240001c0

080163e8 <cJSON_InitHooks>:
 80163e8:	b1e8      	cbz	r0, 8016426 <cJSON_InitHooks+0x3e>
 80163ea:	6802      	ldr	r2, [r0, #0]
 80163ec:	4b12      	ldr	r3, [pc, #72]	@ (8016438 <cJSON_InitHooks+0x50>)
 80163ee:	4913      	ldr	r1, [pc, #76]	@ (801643c <cJSON_InitHooks+0x54>)
 80163f0:	6840      	ldr	r0, [r0, #4]
 80163f2:	b410      	push	{r4}
 80163f4:	4c12      	ldr	r4, [pc, #72]	@ (8016440 <cJSON_InitHooks+0x58>)
 80163f6:	6019      	str	r1, [r3, #0]
 80163f8:	b152      	cbz	r2, 8016410 <cJSON_InitHooks+0x28>
 80163fa:	e9c3 2400 	strd	r2, r4, [r3]
 80163fe:	b100      	cbz	r0, 8016402 <cJSON_InitHooks+0x1a>
 8016400:	6058      	str	r0, [r3, #4]
 8016402:	2000      	movs	r0, #0
 8016404:	428a      	cmp	r2, r1
 8016406:	6098      	str	r0, [r3, #8]
 8016408:	d007      	beq.n	801641a <cJSON_InitHooks+0x32>
 801640a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801640e:	4770      	bx	lr
 8016410:	605c      	str	r4, [r3, #4]
 8016412:	b108      	cbz	r0, 8016418 <cJSON_InitHooks+0x30>
 8016414:	460a      	mov	r2, r1
 8016416:	e7f3      	b.n	8016400 <cJSON_InitHooks+0x18>
 8016418:	6098      	str	r0, [r3, #8]
 801641a:	685a      	ldr	r2, [r3, #4]
 801641c:	42a2      	cmp	r2, r4
 801641e:	d1f4      	bne.n	801640a <cJSON_InitHooks+0x22>
 8016420:	4a08      	ldr	r2, [pc, #32]	@ (8016444 <cJSON_InitHooks+0x5c>)
 8016422:	609a      	str	r2, [r3, #8]
 8016424:	e7f1      	b.n	801640a <cJSON_InitHooks+0x22>
 8016426:	4b04      	ldr	r3, [pc, #16]	@ (8016438 <cJSON_InitHooks+0x50>)
 8016428:	4804      	ldr	r0, [pc, #16]	@ (801643c <cJSON_InitHooks+0x54>)
 801642a:	4905      	ldr	r1, [pc, #20]	@ (8016440 <cJSON_InitHooks+0x58>)
 801642c:	4a05      	ldr	r2, [pc, #20]	@ (8016444 <cJSON_InitHooks+0x5c>)
 801642e:	e9c3 0100 	strd	r0, r1, [r3]
 8016432:	609a      	str	r2, [r3, #8]
 8016434:	4770      	bx	lr
 8016436:	bf00      	nop
 8016438:	240001c0 	.word	0x240001c0
 801643c:	08016e25 	.word	0x08016e25
 8016440:	08016e35 	.word	0x08016e35
 8016444:	08016fa1 	.word	0x08016fa1

08016448 <cJSON_Delete>:
 8016448:	b318      	cbz	r0, 8016492 <cJSON_Delete+0x4a>
 801644a:	b570      	push	{r4, r5, r6, lr}
 801644c:	4604      	mov	r4, r0
 801644e:	4e11      	ldr	r6, [pc, #68]	@ (8016494 <cJSON_Delete+0x4c>)
 8016450:	4625      	mov	r5, r4
 8016452:	6824      	ldr	r4, [r4, #0]
 8016454:	68eb      	ldr	r3, [r5, #12]
 8016456:	05d8      	lsls	r0, r3, #23
 8016458:	461a      	mov	r2, r3
 801645a:	d40c      	bmi.n	8016476 <cJSON_Delete+0x2e>
 801645c:	68a8      	ldr	r0, [r5, #8]
 801645e:	b128      	cbz	r0, 801646c <cJSON_Delete+0x24>
 8016460:	f7ff fff2 	bl	8016448 <cJSON_Delete>
 8016464:	68eb      	ldr	r3, [r5, #12]
 8016466:	05d9      	lsls	r1, r3, #23
 8016468:	461a      	mov	r2, r3
 801646a:	d404      	bmi.n	8016476 <cJSON_Delete+0x2e>
 801646c:	6928      	ldr	r0, [r5, #16]
 801646e:	b170      	cbz	r0, 801648e <cJSON_Delete+0x46>
 8016470:	6873      	ldr	r3, [r6, #4]
 8016472:	4798      	blx	r3
 8016474:	68ea      	ldr	r2, [r5, #12]
 8016476:	0593      	lsls	r3, r2, #22
 8016478:	d403      	bmi.n	8016482 <cJSON_Delete+0x3a>
 801647a:	6a28      	ldr	r0, [r5, #32]
 801647c:	b108      	cbz	r0, 8016482 <cJSON_Delete+0x3a>
 801647e:	6873      	ldr	r3, [r6, #4]
 8016480:	4798      	blx	r3
 8016482:	4628      	mov	r0, r5
 8016484:	6873      	ldr	r3, [r6, #4]
 8016486:	4798      	blx	r3
 8016488:	2c00      	cmp	r4, #0
 801648a:	d1e1      	bne.n	8016450 <cJSON_Delete+0x8>
 801648c:	bd70      	pop	{r4, r5, r6, pc}
 801648e:	461a      	mov	r2, r3
 8016490:	e7f1      	b.n	8016476 <cJSON_Delete+0x2e>
 8016492:	4770      	bx	lr
 8016494:	240001c0 	.word	0x240001c0

08016498 <parse_value>:
 8016498:	2900      	cmp	r1, #0
 801649a:	d05c      	beq.n	8016556 <parse_value+0xbe>
 801649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164a0:	f8d1 8000 	ldr.w	r8, [r1]
 80164a4:	b093      	sub	sp, #76	@ 0x4c
 80164a6:	460c      	mov	r4, r1
 80164a8:	f1b8 0f00 	cmp.w	r8, #0
 80164ac:	d037      	beq.n	801651e <parse_value+0x86>
 80164ae:	4605      	mov	r5, r0
 80164b0:	e9d1 9601 	ldrd	r9, r6, [r1, #4]
 80164b4:	1d37      	adds	r7, r6, #4
 80164b6:	454f      	cmp	r7, r9
 80164b8:	d835      	bhi.n	8016526 <parse_value+0x8e>
 80164ba:	eb08 0b06 	add.w	fp, r8, r6
 80164be:	2204      	movs	r2, #4
 80164c0:	49b3      	ldr	r1, [pc, #716]	@ (8016790 <parse_value+0x2f8>)
 80164c2:	4658      	mov	r0, fp
 80164c4:	f002 fa18 	bl	80188f8 <strncmp>
 80164c8:	2800      	cmp	r0, #0
 80164ca:	d046      	beq.n	801655a <parse_value+0xc2>
 80164cc:	f106 0a05 	add.w	sl, r6, #5
 80164d0:	45d1      	cmp	r9, sl
 80164d2:	d305      	bcc.n	80164e0 <parse_value+0x48>
 80164d4:	2205      	movs	r2, #5
 80164d6:	49af      	ldr	r1, [pc, #700]	@ (8016794 <parse_value+0x2fc>)
 80164d8:	4658      	mov	r0, fp
 80164da:	f002 fa0d 	bl	80188f8 <strncmp>
 80164de:	b370      	cbz	r0, 801653e <parse_value+0xa6>
 80164e0:	4658      	mov	r0, fp
 80164e2:	2204      	movs	r2, #4
 80164e4:	49ac      	ldr	r1, [pc, #688]	@ (8016798 <parse_value+0x300>)
 80164e6:	f002 fa07 	bl	80188f8 <strncmp>
 80164ea:	b368      	cbz	r0, 8016548 <parse_value+0xb0>
 80164ec:	454e      	cmp	r6, r9
 80164ee:	d216      	bcs.n	801651e <parse_value+0x86>
 80164f0:	f818 3006 	ldrb.w	r3, [r8, r6]
 80164f4:	2b22      	cmp	r3, #34	@ 0x22
 80164f6:	f000 80fc 	beq.w	80166f2 <parse_value+0x25a>
 80164fa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80164fe:	2a09      	cmp	r2, #9
 8016500:	f240 809d 	bls.w	801663e <parse_value+0x1a6>
 8016504:	f1a3 072d 	sub.w	r7, r3, #45	@ 0x2d
 8016508:	fab7 f787 	clz	r7, r7
 801650c:	097f      	lsrs	r7, r7, #5
 801650e:	2f00      	cmp	r7, #0
 8016510:	f040 8095 	bne.w	801663e <parse_value+0x1a6>
 8016514:	2b5b      	cmp	r3, #91	@ 0x5b
 8016516:	f000 80f4 	beq.w	8016702 <parse_value+0x26a>
 801651a:	2b7b      	cmp	r3, #123	@ 0x7b
 801651c:	d024      	beq.n	8016568 <parse_value+0xd0>
 801651e:	2000      	movs	r0, #0
 8016520:	b013      	add	sp, #76	@ 0x4c
 8016522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016526:	f106 0a05 	add.w	sl, r6, #5
 801652a:	45d1      	cmp	r9, sl
 801652c:	d3de      	bcc.n	80164ec <parse_value+0x54>
 801652e:	2205      	movs	r2, #5
 8016530:	4998      	ldr	r1, [pc, #608]	@ (8016794 <parse_value+0x2fc>)
 8016532:	eb08 0006 	add.w	r0, r8, r6
 8016536:	f002 f9df 	bl	80188f8 <strncmp>
 801653a:	2800      	cmp	r0, #0
 801653c:	d1d6      	bne.n	80164ec <parse_value+0x54>
 801653e:	2001      	movs	r0, #1
 8016540:	60e8      	str	r0, [r5, #12]
 8016542:	f8c4 a008 	str.w	sl, [r4, #8]
 8016546:	e7eb      	b.n	8016520 <parse_value+0x88>
 8016548:	2301      	movs	r3, #1
 801654a:	2202      	movs	r2, #2
 801654c:	616b      	str	r3, [r5, #20]
 801654e:	4618      	mov	r0, r3
 8016550:	60ea      	str	r2, [r5, #12]
 8016552:	60a7      	str	r7, [r4, #8]
 8016554:	e7e4      	b.n	8016520 <parse_value+0x88>
 8016556:	2000      	movs	r0, #0
 8016558:	4770      	bx	lr
 801655a:	2304      	movs	r3, #4
 801655c:	2001      	movs	r0, #1
 801655e:	60eb      	str	r3, [r5, #12]
 8016560:	60a7      	str	r7, [r4, #8]
 8016562:	b013      	add	sp, #76	@ 0x4c
 8016564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016568:	68e3      	ldr	r3, [r4, #12]
 801656a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801656e:	d2d6      	bcs.n	801651e <parse_value+0x86>
 8016570:	3301      	adds	r3, #1
 8016572:	60e3      	str	r3, [r4, #12]
 8016574:	f818 3006 	ldrb.w	r3, [r8, r6]
 8016578:	2b7b      	cmp	r3, #123	@ 0x7b
 801657a:	d1d0      	bne.n	801651e <parse_value+0x86>
 801657c:	3601      	adds	r6, #1
 801657e:	4620      	mov	r0, r4
 8016580:	60a6      	str	r6, [r4, #8]
 8016582:	f7ff fa01 	bl	8015988 <buffer_skip_whitespace>
 8016586:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801658a:	4293      	cmp	r3, r2
 801658c:	f080 8117 	bcs.w	80167be <parse_value+0x326>
 8016590:	6822      	ldr	r2, [r4, #0]
 8016592:	5cd2      	ldrb	r2, [r2, r3]
 8016594:	2a7d      	cmp	r2, #125	@ 0x7d
 8016596:	f000 8144 	beq.w	8016822 <parse_value+0x38a>
 801659a:	2600      	movs	r6, #0
 801659c:	3b01      	subs	r3, #1
 801659e:	4637      	mov	r7, r6
 80165a0:	46b0      	mov	r8, r6
 80165a2:	60a3      	str	r3, [r4, #8]
 80165a4:	e03f      	b.n	8016626 <parse_value+0x18e>
 80165a6:	f8c9 0000 	str.w	r0, [r9]
 80165aa:	f8c0 9004 	str.w	r9, [r0, #4]
 80165ae:	68a3      	ldr	r3, [r4, #8]
 80165b0:	4620      	mov	r0, r4
 80165b2:	3301      	adds	r3, #1
 80165b4:	60a3      	str	r3, [r4, #8]
 80165b6:	f7ff f9e7 	bl	8015988 <buffer_skip_whitespace>
 80165ba:	4622      	mov	r2, r4
 80165bc:	f106 0110 	add.w	r1, r6, #16
 80165c0:	f106 000c 	add.w	r0, r6, #12
 80165c4:	f7ff fa98 	bl	8015af8 <parse_string.isra.0>
 80165c8:	4603      	mov	r3, r0
 80165ca:	4620      	mov	r0, r4
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	f000 8116 	beq.w	80167fe <parse_value+0x366>
 80165d2:	f7ff f9d9 	bl	8015988 <buffer_skip_whitespace>
 80165d6:	6932      	ldr	r2, [r6, #16]
 80165d8:	68a3      	ldr	r3, [r4, #8]
 80165da:	4620      	mov	r0, r4
 80165dc:	6232      	str	r2, [r6, #32]
 80165de:	6862      	ldr	r2, [r4, #4]
 80165e0:	1c59      	adds	r1, r3, #1
 80165e2:	f8c6 8010 	str.w	r8, [r6, #16]
 80165e6:	4293      	cmp	r3, r2
 80165e8:	f080 8109 	bcs.w	80167fe <parse_value+0x366>
 80165ec:	6822      	ldr	r2, [r4, #0]
 80165ee:	5cd3      	ldrb	r3, [r2, r3]
 80165f0:	2b3a      	cmp	r3, #58	@ 0x3a
 80165f2:	f040 8104 	bne.w	80167fe <parse_value+0x366>
 80165f6:	60a1      	str	r1, [r4, #8]
 80165f8:	f7ff f9c6 	bl	8015988 <buffer_skip_whitespace>
 80165fc:	4621      	mov	r1, r4
 80165fe:	4630      	mov	r0, r6
 8016600:	f7ff ff4a 	bl	8016498 <parse_value>
 8016604:	4603      	mov	r3, r0
 8016606:	4620      	mov	r0, r4
 8016608:	2b00      	cmp	r3, #0
 801660a:	f000 80f8 	beq.w	80167fe <parse_value+0x366>
 801660e:	f7ff f9bb 	bl	8015988 <buffer_skip_whitespace>
 8016612:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016616:	4293      	cmp	r3, r2
 8016618:	f080 80f1 	bcs.w	80167fe <parse_value+0x366>
 801661c:	6822      	ldr	r2, [r4, #0]
 801661e:	5cd3      	ldrb	r3, [r2, r3]
 8016620:	2b2c      	cmp	r3, #44	@ 0x2c
 8016622:	f040 80f0 	bne.w	8016806 <parse_value+0x36e>
 8016626:	6920      	ldr	r0, [r4, #16]
 8016628:	46b1      	mov	r9, r6
 801662a:	f7ff fb7d 	bl	8015d28 <cJSON_New_Item.isra.0>
 801662e:	4606      	mov	r6, r0
 8016630:	2800      	cmp	r0, #0
 8016632:	f000 80e1 	beq.w	80167f8 <parse_value+0x360>
 8016636:	2f00      	cmp	r7, #0
 8016638:	d1b5      	bne.n	80165a6 <parse_value+0x10e>
 801663a:	4607      	mov	r7, r0
 801663c:	e7b7      	b.n	80165ae <parse_value+0x116>
 801663e:	1e73      	subs	r3, r6, #1
 8016640:	2200      	movs	r2, #0
 8016642:	af02      	add	r7, sp, #8
 8016644:	eba9 0606 	sub.w	r6, r9, r6
 8016648:	4498      	add	r8, r3
 801664a:	4611      	mov	r1, r2
 801664c:	4638      	mov	r0, r7
 801664e:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
 8016652:	9201      	str	r2, [sp, #4]
 8016654:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8016658:	2a45      	cmp	r2, #69	@ 0x45
 801665a:	f1a2 032b 	sub.w	r3, r2, #43	@ 0x2b
 801665e:	d813      	bhi.n	8016688 <parse_value+0x1f0>
 8016660:	2a2a      	cmp	r2, #42	@ 0x2a
 8016662:	d913      	bls.n	801668c <parse_value+0x1f4>
 8016664:	2b1a      	cmp	r3, #26
 8016666:	d811      	bhi.n	801668c <parse_value+0x1f4>
 8016668:	e8df f003 	tbb	[pc, r3]
 801666c:	38411041 	.word	0x38411041
 8016670:	41414110 	.word	0x41414110
 8016674:	41414141 	.word	0x41414141
 8016678:	10414141 	.word	0x10414141
 801667c:	10101010 	.word	0x10101010
 8016680:	10101010 	.word	0x10101010
 8016684:	1010      	.short	0x1010
 8016686:	41          	.byte	0x41
 8016687:	00          	.byte	0x00
 8016688:	2a65      	cmp	r2, #101	@ 0x65
 801668a:	d030      	beq.n	80166ee <parse_value+0x256>
 801668c:	ab12      	add	r3, sp, #72	@ 0x48
 801668e:	2600      	movs	r6, #0
 8016690:	4638      	mov	r0, r7
 8016692:	440b      	add	r3, r1
 8016694:	a901      	add	r1, sp, #4
 8016696:	f803 6c40 	strb.w	r6, [r3, #-64]
 801669a:	f001 fa67 	bl	8017b6c <strtod>
 801669e:	f8dd a004 	ldr.w	sl, [sp, #4]
 80166a2:	45ba      	cmp	sl, r7
 80166a4:	ec59 8b10 	vmov	r8, r9, d0
 80166a8:	f43f af39 	beq.w	801651e <parse_value+0x86>
 80166ac:	ee10 0a10 	vmov	r0, s0
 80166b0:	4649      	mov	r1, r9
 80166b2:	a335      	add	r3, pc, #212	@ (adr r3, 8016788 <parse_value+0x2f0>)
 80166b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b8:	ed85 0b06 	vstr	d0, [r5, #24]
 80166bc:	f7ea f8a8 	bl	8000810 <__aeabi_dcmpge>
 80166c0:	2800      	cmp	r0, #0
 80166c2:	d06b      	beq.n	801679c <parse_value+0x304>
 80166c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80166c8:	616b      	str	r3, [r5, #20]
 80166ca:	68a3      	ldr	r3, [r4, #8]
 80166cc:	ebaa 0707 	sub.w	r7, sl, r7
 80166d0:	2208      	movs	r2, #8
 80166d2:	2001      	movs	r0, #1
 80166d4:	441f      	add	r7, r3
 80166d6:	60ea      	str	r2, [r5, #12]
 80166d8:	60a7      	str	r7, [r4, #8]
 80166da:	e721      	b.n	8016520 <parse_value+0x88>
 80166dc:	f880 c000 	strb.w	ip, [r0]
 80166e0:	3101      	adds	r1, #1
 80166e2:	3001      	adds	r0, #1
 80166e4:	293f      	cmp	r1, #63	@ 0x3f
 80166e6:	d0d1      	beq.n	801668c <parse_value+0x1f4>
 80166e8:	42b1      	cmp	r1, r6
 80166ea:	d1b3      	bne.n	8016654 <parse_value+0x1bc>
 80166ec:	e7ce      	b.n	801668c <parse_value+0x1f4>
 80166ee:	7002      	strb	r2, [r0, #0]
 80166f0:	e7f6      	b.n	80166e0 <parse_value+0x248>
 80166f2:	4622      	mov	r2, r4
 80166f4:	f105 0110 	add.w	r1, r5, #16
 80166f8:	f105 000c 	add.w	r0, r5, #12
 80166fc:	f7ff f9fc 	bl	8015af8 <parse_string.isra.0>
 8016700:	e70e      	b.n	8016520 <parse_value+0x88>
 8016702:	68e3      	ldr	r3, [r4, #12]
 8016704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016708:	f4bf af09 	bcs.w	801651e <parse_value+0x86>
 801670c:	3301      	adds	r3, #1
 801670e:	60e3      	str	r3, [r4, #12]
 8016710:	f818 3006 	ldrb.w	r3, [r8, r6]
 8016714:	2b5b      	cmp	r3, #91	@ 0x5b
 8016716:	f47f af02 	bne.w	801651e <parse_value+0x86>
 801671a:	3601      	adds	r6, #1
 801671c:	4620      	mov	r0, r4
 801671e:	60a6      	str	r6, [r4, #8]
 8016720:	f7ff f932 	bl	8015988 <buffer_skip_whitespace>
 8016724:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016728:	4293      	cmp	r3, r2
 801672a:	d248      	bcs.n	80167be <parse_value+0x326>
 801672c:	6822      	ldr	r2, [r4, #0]
 801672e:	5cd2      	ldrb	r2, [r2, r3]
 8016730:	2a5d      	cmp	r2, #93	@ 0x5d
 8016732:	d071      	beq.n	8016818 <parse_value+0x380>
 8016734:	3b01      	subs	r3, #1
 8016736:	46b8      	mov	r8, r7
 8016738:	60a3      	str	r3, [r4, #8]
 801673a:	e019      	b.n	8016770 <parse_value+0x2d8>
 801673c:	6030      	str	r0, [r6, #0]
 801673e:	6046      	str	r6, [r0, #4]
 8016740:	68a3      	ldr	r3, [r4, #8]
 8016742:	4620      	mov	r0, r4
 8016744:	3301      	adds	r3, #1
 8016746:	60a3      	str	r3, [r4, #8]
 8016748:	f7ff f91e 	bl	8015988 <buffer_skip_whitespace>
 801674c:	4621      	mov	r1, r4
 801674e:	4638      	mov	r0, r7
 8016750:	f7ff fea2 	bl	8016498 <parse_value>
 8016754:	4603      	mov	r3, r0
 8016756:	4620      	mov	r0, r4
 8016758:	2b00      	cmp	r3, #0
 801675a:	d038      	beq.n	80167ce <parse_value+0x336>
 801675c:	f7ff f914 	bl	8015988 <buffer_skip_whitespace>
 8016760:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016764:	4293      	cmp	r3, r2
 8016766:	d232      	bcs.n	80167ce <parse_value+0x336>
 8016768:	6822      	ldr	r2, [r4, #0]
 801676a:	5cd3      	ldrb	r3, [r2, r3]
 801676c:	2b2c      	cmp	r3, #44	@ 0x2c
 801676e:	d133      	bne.n	80167d8 <parse_value+0x340>
 8016770:	6920      	ldr	r0, [r4, #16]
 8016772:	463e      	mov	r6, r7
 8016774:	f7ff fad8 	bl	8015d28 <cJSON_New_Item.isra.0>
 8016778:	4607      	mov	r7, r0
 801677a:	b320      	cbz	r0, 80167c6 <parse_value+0x32e>
 801677c:	f1b8 0f00 	cmp.w	r8, #0
 8016780:	d1dc      	bne.n	801673c <parse_value+0x2a4>
 8016782:	4680      	mov	r8, r0
 8016784:	e7dc      	b.n	8016740 <parse_value+0x2a8>
 8016786:	bf00      	nop
 8016788:	ffc00000 	.word	0xffc00000
 801678c:	41dfffff 	.word	0x41dfffff
 8016790:	08021588 	.word	0x08021588
 8016794:	08021590 	.word	0x08021590
 8016798:	08021598 	.word	0x08021598
 801679c:	2200      	movs	r2, #0
 801679e:	4b23      	ldr	r3, [pc, #140]	@ (801682c <parse_value+0x394>)
 80167a0:	4640      	mov	r0, r8
 80167a2:	4649      	mov	r1, r9
 80167a4:	f7ea f82a 	bl	80007fc <__aeabi_dcmple>
 80167a8:	b118      	cbz	r0, 80167b2 <parse_value+0x31a>
 80167aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80167ae:	616b      	str	r3, [r5, #20]
 80167b0:	e78b      	b.n	80166ca <parse_value+0x232>
 80167b2:	4640      	mov	r0, r8
 80167b4:	4649      	mov	r1, r9
 80167b6:	f7ea f855 	bl	8000864 <__aeabi_d2iz>
 80167ba:	6168      	str	r0, [r5, #20]
 80167bc:	e785      	b.n	80166ca <parse_value+0x232>
 80167be:	3b01      	subs	r3, #1
 80167c0:	4638      	mov	r0, r7
 80167c2:	60a3      	str	r3, [r4, #8]
 80167c4:	e6ac      	b.n	8016520 <parse_value+0x88>
 80167c6:	f1b8 0f00 	cmp.w	r8, #0
 80167ca:	f43f aea8 	beq.w	801651e <parse_value+0x86>
 80167ce:	4640      	mov	r0, r8
 80167d0:	f7ff fe3a 	bl	8016448 <cJSON_Delete>
 80167d4:	2000      	movs	r0, #0
 80167d6:	e6a3      	b.n	8016520 <parse_value+0x88>
 80167d8:	2b5d      	cmp	r3, #93	@ 0x5d
 80167da:	d1f8      	bne.n	80167ce <parse_value+0x336>
 80167dc:	68e3      	ldr	r3, [r4, #12]
 80167de:	3b01      	subs	r3, #1
 80167e0:	60e3      	str	r3, [r4, #12]
 80167e2:	f8c8 7004 	str.w	r7, [r8, #4]
 80167e6:	2320      	movs	r3, #32
 80167e8:	f8c5 8008 	str.w	r8, [r5, #8]
 80167ec:	60eb      	str	r3, [r5, #12]
 80167ee:	2001      	movs	r0, #1
 80167f0:	68a3      	ldr	r3, [r4, #8]
 80167f2:	4403      	add	r3, r0
 80167f4:	60a3      	str	r3, [r4, #8]
 80167f6:	e693      	b.n	8016520 <parse_value+0x88>
 80167f8:	2f00      	cmp	r7, #0
 80167fa:	f43f ae90 	beq.w	801651e <parse_value+0x86>
 80167fe:	4638      	mov	r0, r7
 8016800:	f7ff fe22 	bl	8016448 <cJSON_Delete>
 8016804:	e68b      	b.n	801651e <parse_value+0x86>
 8016806:	2b7d      	cmp	r3, #125	@ 0x7d
 8016808:	d1f9      	bne.n	80167fe <parse_value+0x366>
 801680a:	68e3      	ldr	r3, [r4, #12]
 801680c:	3b01      	subs	r3, #1
 801680e:	60e3      	str	r3, [r4, #12]
 8016810:	607e      	str	r6, [r7, #4]
 8016812:	2340      	movs	r3, #64	@ 0x40
 8016814:	60af      	str	r7, [r5, #8]
 8016816:	e7e9      	b.n	80167ec <parse_value+0x354>
 8016818:	68e3      	ldr	r3, [r4, #12]
 801681a:	46b8      	mov	r8, r7
 801681c:	3b01      	subs	r3, #1
 801681e:	60e3      	str	r3, [r4, #12]
 8016820:	e7e1      	b.n	80167e6 <parse_value+0x34e>
 8016822:	68e3      	ldr	r3, [r4, #12]
 8016824:	2700      	movs	r7, #0
 8016826:	3b01      	subs	r3, #1
 8016828:	60e3      	str	r3, [r4, #12]
 801682a:	e7f2      	b.n	8016812 <parse_value+0x37a>
 801682c:	c1e00000 	.word	0xc1e00000

08016830 <cJSON_ParseWithLengthOpts>:
 8016830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016834:	2500      	movs	r5, #0
 8016836:	b089      	sub	sp, #36	@ 0x24
 8016838:	4f38      	ldr	r7, [pc, #224]	@ (801691c <cJSON_ParseWithLengthOpts+0xec>)
 801683a:	4616      	mov	r6, r2
 801683c:	4604      	mov	r4, r0
 801683e:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8016842:	e9c7 5500 	strd	r5, r5, [r7]
 8016846:	2800      	cmp	r0, #0
 8016848:	d03a      	beq.n	80168c0 <cJSON_ParseWithLengthOpts+0x90>
 801684a:	fab1 f981 	clz	r9, r1
 801684e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8016852:	2900      	cmp	r1, #0
 8016854:	d034      	beq.n	80168c0 <cJSON_ParseWithLengthOpts+0x90>
 8016856:	4698      	mov	r8, r3
 8016858:	4b31      	ldr	r3, [pc, #196]	@ (8016920 <cJSON_ParseWithLengthOpts+0xf0>)
 801685a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801685e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016862:	ab08      	add	r3, sp, #32
 8016864:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8016868:	f7ff fa5e 	bl	8015d28 <cJSON_New_Item.isra.0>
 801686c:	4605      	mov	r5, r0
 801686e:	2800      	cmp	r0, #0
 8016870:	d041      	beq.n	80168f6 <cJSON_ParseWithLengthOpts+0xc6>
 8016872:	9801      	ldr	r0, [sp, #4]
 8016874:	b188      	cbz	r0, 801689a <cJSON_ParseWithLengthOpts+0x6a>
 8016876:	9b03      	ldr	r3, [sp, #12]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d145      	bne.n	8016908 <cJSON_ParseWithLengthOpts+0xd8>
 801687c:	9b02      	ldr	r3, [sp, #8]
 801687e:	2b04      	cmp	r3, #4
 8016880:	d940      	bls.n	8016904 <cJSON_ParseWithLengthOpts+0xd4>
 8016882:	7803      	ldrb	r3, [r0, #0]
 8016884:	2bef      	cmp	r3, #239	@ 0xef
 8016886:	d13d      	bne.n	8016904 <cJSON_ParseWithLengthOpts+0xd4>
 8016888:	7843      	ldrb	r3, [r0, #1]
 801688a:	2bbb      	cmp	r3, #187	@ 0xbb
 801688c:	d13a      	bne.n	8016904 <cJSON_ParseWithLengthOpts+0xd4>
 801688e:	7883      	ldrb	r3, [r0, #2]
 8016890:	2bbf      	cmp	r3, #191	@ 0xbf
 8016892:	d137      	bne.n	8016904 <cJSON_ParseWithLengthOpts+0xd4>
 8016894:	2303      	movs	r3, #3
 8016896:	a801      	add	r0, sp, #4
 8016898:	9303      	str	r3, [sp, #12]
 801689a:	f7ff f875 	bl	8015988 <buffer_skip_whitespace>
 801689e:	4601      	mov	r1, r0
 80168a0:	4628      	mov	r0, r5
 80168a2:	f7ff fdf9 	bl	8016498 <parse_value>
 80168a6:	b318      	cbz	r0, 80168f0 <cJSON_ParseWithLengthOpts+0xc0>
 80168a8:	f1b8 0f00 	cmp.w	r8, #0
 80168ac:	d119      	bne.n	80168e2 <cJSON_ParseWithLengthOpts+0xb2>
 80168ae:	b17e      	cbz	r6, 80168d0 <cJSON_ParseWithLengthOpts+0xa0>
 80168b0:	9b01      	ldr	r3, [sp, #4]
 80168b2:	4628      	mov	r0, r5
 80168b4:	9a03      	ldr	r2, [sp, #12]
 80168b6:	4413      	add	r3, r2
 80168b8:	6033      	str	r3, [r6, #0]
 80168ba:	b009      	add	sp, #36	@ 0x24
 80168bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168c0:	b154      	cbz	r4, 80168d8 <cJSON_ParseWithLengthOpts+0xa8>
 80168c2:	2300      	movs	r3, #0
 80168c4:	b10e      	cbz	r6, 80168ca <cJSON_ParseWithLengthOpts+0x9a>
 80168c6:	18e2      	adds	r2, r4, r3
 80168c8:	6032      	str	r2, [r6, #0]
 80168ca:	2500      	movs	r5, #0
 80168cc:	603c      	str	r4, [r7, #0]
 80168ce:	607b      	str	r3, [r7, #4]
 80168d0:	4628      	mov	r0, r5
 80168d2:	b009      	add	sp, #36	@ 0x24
 80168d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168d8:	4625      	mov	r5, r4
 80168da:	4628      	mov	r0, r5
 80168dc:	b009      	add	sp, #36	@ 0x24
 80168de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168e2:	a801      	add	r0, sp, #4
 80168e4:	f7ff f850 	bl	8015988 <buffer_skip_whitespace>
 80168e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168ec:	4293      	cmp	r3, r2
 80168ee:	d30d      	bcc.n	801690c <cJSON_ParseWithLengthOpts+0xdc>
 80168f0:	4628      	mov	r0, r5
 80168f2:	f7ff fda9 	bl	8016448 <cJSON_Delete>
 80168f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d8e2      	bhi.n	80168c4 <cJSON_ParseWithLengthOpts+0x94>
 80168fe:	b152      	cbz	r2, 8016916 <cJSON_ParseWithLengthOpts+0xe6>
 8016900:	1e53      	subs	r3, r2, #1
 8016902:	e7df      	b.n	80168c4 <cJSON_ParseWithLengthOpts+0x94>
 8016904:	a801      	add	r0, sp, #4
 8016906:	e7c8      	b.n	801689a <cJSON_ParseWithLengthOpts+0x6a>
 8016908:	4648      	mov	r0, r9
 801690a:	e7c6      	b.n	801689a <cJSON_ParseWithLengthOpts+0x6a>
 801690c:	9a01      	ldr	r2, [sp, #4]
 801690e:	5cd3      	ldrb	r3, [r2, r3]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d0cc      	beq.n	80168ae <cJSON_ParseWithLengthOpts+0x7e>
 8016914:	e7ec      	b.n	80168f0 <cJSON_ParseWithLengthOpts+0xc0>
 8016916:	4613      	mov	r3, r2
 8016918:	e7d4      	b.n	80168c4 <cJSON_ParseWithLengthOpts+0x94>
 801691a:	bf00      	nop
 801691c:	240030bc 	.word	0x240030bc
 8016920:	240001c0 	.word	0x240001c0

08016924 <cJSON_ParseWithOpts>:
 8016924:	b168      	cbz	r0, 8016942 <cJSON_ParseWithOpts+0x1e>
 8016926:	b570      	push	{r4, r5, r6, lr}
 8016928:	460d      	mov	r5, r1
 801692a:	4616      	mov	r6, r2
 801692c:	4604      	mov	r4, r0
 801692e:	f7e9 fd37 	bl	80003a0 <strlen>
 8016932:	4633      	mov	r3, r6
 8016934:	462a      	mov	r2, r5
 8016936:	1c41      	adds	r1, r0, #1
 8016938:	4620      	mov	r0, r4
 801693a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801693e:	f7ff bf77 	b.w	8016830 <cJSON_ParseWithLengthOpts>
 8016942:	4770      	bx	lr

08016944 <cJSON_Parse>:
 8016944:	2200      	movs	r2, #0
 8016946:	4611      	mov	r1, r2
 8016948:	f7ff bfec 	b.w	8016924 <cJSON_ParseWithOpts>

0801694c <cJSON_PrintUnformatted>:
 801694c:	2100      	movs	r1, #0
 801694e:	f7ff bcaf 	b.w	80162b0 <print.constprop.0>
 8016952:	bf00      	nop

08016954 <cJSON_GetObjectItemCaseSensitive>:
 8016954:	2201      	movs	r2, #1
 8016956:	f7ff b88b 	b.w	8015a70 <get_object_item>
 801695a:	bf00      	nop

0801695c <cJSON_AddItemToArray>:
 801695c:	4281      	cmp	r1, r0
 801695e:	bf18      	it	ne
 8016960:	2800      	cmpne	r0, #0
 8016962:	d002      	beq.n	801696a <cJSON_AddItemToArray+0xe>
 8016964:	b109      	cbz	r1, 801696a <cJSON_AddItemToArray+0xe>
 8016966:	f7ff b9d1 	b.w	8015d0c <add_item_to_array.part.0>
 801696a:	2000      	movs	r0, #0
 801696c:	4770      	bx	lr
 801696e:	bf00      	nop

08016970 <cJSON_AddItemToObject>:
 8016970:	2300      	movs	r3, #0
 8016972:	f7ff bd0d 	b.w	8016390 <add_item_to_object.constprop.0>
 8016976:	bf00      	nop

08016978 <cJSON_AddBoolToObject>:
 8016978:	4b10      	ldr	r3, [pc, #64]	@ (80169bc <cJSON_AddBoolToObject+0x44>)
 801697a:	b570      	push	{r4, r5, r6, lr}
 801697c:	b082      	sub	sp, #8
 801697e:	4605      	mov	r5, r0
 8016980:	6818      	ldr	r0, [r3, #0]
 8016982:	4616      	mov	r6, r2
 8016984:	9101      	str	r1, [sp, #4]
 8016986:	f7ff f9cf 	bl	8015d28 <cJSON_New_Item.isra.0>
 801698a:	9901      	ldr	r1, [sp, #4]
 801698c:	4604      	mov	r4, r0
 801698e:	b120      	cbz	r0, 801699a <cJSON_AddBoolToObject+0x22>
 8016990:	2e00      	cmp	r6, #0
 8016992:	bf14      	ite	ne
 8016994:	2302      	movne	r3, #2
 8016996:	2301      	moveq	r3, #1
 8016998:	60c3      	str	r3, [r0, #12]
 801699a:	2300      	movs	r3, #0
 801699c:	4628      	mov	r0, r5
 801699e:	4622      	mov	r2, r4
 80169a0:	f7ff fcf6 	bl	8016390 <add_item_to_object.constprop.0>
 80169a4:	4603      	mov	r3, r0
 80169a6:	b110      	cbz	r0, 80169ae <cJSON_AddBoolToObject+0x36>
 80169a8:	4620      	mov	r0, r4
 80169aa:	b002      	add	sp, #8
 80169ac:	bd70      	pop	{r4, r5, r6, pc}
 80169ae:	4620      	mov	r0, r4
 80169b0:	461c      	mov	r4, r3
 80169b2:	f7ff fd49 	bl	8016448 <cJSON_Delete>
 80169b6:	4620      	mov	r0, r4
 80169b8:	b002      	add	sp, #8
 80169ba:	bd70      	pop	{r4, r5, r6, pc}
 80169bc:	240001c0 	.word	0x240001c0

080169c0 <cJSON_AddObjectToObject>:
 80169c0:	4b0e      	ldr	r3, [pc, #56]	@ (80169fc <cJSON_AddObjectToObject+0x3c>)
 80169c2:	b530      	push	{r4, r5, lr}
 80169c4:	b083      	sub	sp, #12
 80169c6:	4605      	mov	r5, r0
 80169c8:	6818      	ldr	r0, [r3, #0]
 80169ca:	9101      	str	r1, [sp, #4]
 80169cc:	f7ff f9ac 	bl	8015d28 <cJSON_New_Item.isra.0>
 80169d0:	9901      	ldr	r1, [sp, #4]
 80169d2:	4604      	mov	r4, r0
 80169d4:	b108      	cbz	r0, 80169da <cJSON_AddObjectToObject+0x1a>
 80169d6:	2340      	movs	r3, #64	@ 0x40
 80169d8:	60c3      	str	r3, [r0, #12]
 80169da:	2300      	movs	r3, #0
 80169dc:	4628      	mov	r0, r5
 80169de:	4622      	mov	r2, r4
 80169e0:	f7ff fcd6 	bl	8016390 <add_item_to_object.constprop.0>
 80169e4:	4603      	mov	r3, r0
 80169e6:	b110      	cbz	r0, 80169ee <cJSON_AddObjectToObject+0x2e>
 80169e8:	4620      	mov	r0, r4
 80169ea:	b003      	add	sp, #12
 80169ec:	bd30      	pop	{r4, r5, pc}
 80169ee:	4620      	mov	r0, r4
 80169f0:	461c      	mov	r4, r3
 80169f2:	f7ff fd29 	bl	8016448 <cJSON_Delete>
 80169f6:	4620      	mov	r0, r4
 80169f8:	b003      	add	sp, #12
 80169fa:	bd30      	pop	{r4, r5, pc}
 80169fc:	240001c0 	.word	0x240001c0

08016a00 <cJSON_AddArrayToObject>:
 8016a00:	4b0e      	ldr	r3, [pc, #56]	@ (8016a3c <cJSON_AddArrayToObject+0x3c>)
 8016a02:	b530      	push	{r4, r5, lr}
 8016a04:	b083      	sub	sp, #12
 8016a06:	4605      	mov	r5, r0
 8016a08:	6818      	ldr	r0, [r3, #0]
 8016a0a:	9101      	str	r1, [sp, #4]
 8016a0c:	f7ff f98c 	bl	8015d28 <cJSON_New_Item.isra.0>
 8016a10:	9901      	ldr	r1, [sp, #4]
 8016a12:	4604      	mov	r4, r0
 8016a14:	b108      	cbz	r0, 8016a1a <cJSON_AddArrayToObject+0x1a>
 8016a16:	2320      	movs	r3, #32
 8016a18:	60c3      	str	r3, [r0, #12]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	4622      	mov	r2, r4
 8016a20:	f7ff fcb6 	bl	8016390 <add_item_to_object.constprop.0>
 8016a24:	4603      	mov	r3, r0
 8016a26:	b110      	cbz	r0, 8016a2e <cJSON_AddArrayToObject+0x2e>
 8016a28:	4620      	mov	r0, r4
 8016a2a:	b003      	add	sp, #12
 8016a2c:	bd30      	pop	{r4, r5, pc}
 8016a2e:	4620      	mov	r0, r4
 8016a30:	461c      	mov	r4, r3
 8016a32:	f7ff fd09 	bl	8016448 <cJSON_Delete>
 8016a36:	4620      	mov	r0, r4
 8016a38:	b003      	add	sp, #12
 8016a3a:	bd30      	pop	{r4, r5, pc}
 8016a3c:	240001c0 	.word	0x240001c0

08016a40 <cJSON_CreateNumber>:
 8016a40:	4b19      	ldr	r3, [pc, #100]	@ (8016aa8 <cJSON_CreateNumber+0x68>)
 8016a42:	b5d0      	push	{r4, r6, r7, lr}
 8016a44:	6818      	ldr	r0, [r3, #0]
 8016a46:	ec57 6b10 	vmov	r6, r7, d0
 8016a4a:	f7ff f96d 	bl	8015d28 <cJSON_New_Item.isra.0>
 8016a4e:	4604      	mov	r4, r0
 8016a50:	b170      	cbz	r0, 8016a70 <cJSON_CreateNumber+0x30>
 8016a52:	2308      	movs	r3, #8
 8016a54:	4639      	mov	r1, r7
 8016a56:	60c3      	str	r3, [r0, #12]
 8016a58:	e9c0 6706 	strd	r6, r7, [r0, #24]
 8016a5c:	a310      	add	r3, pc, #64	@ (adr r3, 8016aa0 <cJSON_CreateNumber+0x60>)
 8016a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a62:	4630      	mov	r0, r6
 8016a64:	f7e9 fed4 	bl	8000810 <__aeabi_dcmpge>
 8016a68:	b120      	cbz	r0, 8016a74 <cJSON_CreateNumber+0x34>
 8016a6a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016a6e:	6163      	str	r3, [r4, #20]
 8016a70:	4620      	mov	r0, r4
 8016a72:	bdd0      	pop	{r4, r6, r7, pc}
 8016a74:	2200      	movs	r2, #0
 8016a76:	4b0d      	ldr	r3, [pc, #52]	@ (8016aac <cJSON_CreateNumber+0x6c>)
 8016a78:	4630      	mov	r0, r6
 8016a7a:	4639      	mov	r1, r7
 8016a7c:	f7e9 febe 	bl	80007fc <__aeabi_dcmple>
 8016a80:	b120      	cbz	r0, 8016a8c <cJSON_CreateNumber+0x4c>
 8016a82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016a86:	4620      	mov	r0, r4
 8016a88:	6163      	str	r3, [r4, #20]
 8016a8a:	bdd0      	pop	{r4, r6, r7, pc}
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	4639      	mov	r1, r7
 8016a90:	f7e9 fee8 	bl	8000864 <__aeabi_d2iz>
 8016a94:	6160      	str	r0, [r4, #20]
 8016a96:	4620      	mov	r0, r4
 8016a98:	bdd0      	pop	{r4, r6, r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	f3af 8000 	nop.w
 8016aa0:	ffc00000 	.word	0xffc00000
 8016aa4:	41dfffff 	.word	0x41dfffff
 8016aa8:	240001c0 	.word	0x240001c0
 8016aac:	c1e00000 	.word	0xc1e00000

08016ab0 <cJSON_AddNumberToObject>:
 8016ab0:	b530      	push	{r4, r5, lr}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	4605      	mov	r5, r0
 8016ab6:	9101      	str	r1, [sp, #4]
 8016ab8:	f7ff ffc2 	bl	8016a40 <cJSON_CreateNumber>
 8016abc:	4604      	mov	r4, r0
 8016abe:	9901      	ldr	r1, [sp, #4]
 8016ac0:	4628      	mov	r0, r5
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	4622      	mov	r2, r4
 8016ac6:	f7ff fc63 	bl	8016390 <add_item_to_object.constprop.0>
 8016aca:	b110      	cbz	r0, 8016ad2 <cJSON_AddNumberToObject+0x22>
 8016acc:	4620      	mov	r0, r4
 8016ace:	b003      	add	sp, #12
 8016ad0:	bd30      	pop	{r4, r5, pc}
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	461c      	mov	r4, r3
 8016ad8:	f7ff fcb6 	bl	8016448 <cJSON_Delete>
 8016adc:	4620      	mov	r0, r4
 8016ade:	b003      	add	sp, #12
 8016ae0:	bd30      	pop	{r4, r5, pc}
 8016ae2:	bf00      	nop

08016ae4 <cJSON_CreateString>:
 8016ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8016b14 <cJSON_CreateString+0x30>)
 8016ae6:	b538      	push	{r3, r4, r5, lr}
 8016ae8:	4605      	mov	r5, r0
 8016aea:	6810      	ldr	r0, [r2, #0]
 8016aec:	f7ff f91c 	bl	8015d28 <cJSON_New_Item.isra.0>
 8016af0:	4604      	mov	r4, r0
 8016af2:	b138      	cbz	r0, 8016b04 <cJSON_CreateString+0x20>
 8016af4:	2310      	movs	r3, #16
 8016af6:	4628      	mov	r0, r5
 8016af8:	60e3      	str	r3, [r4, #12]
 8016afa:	f7ff fc2f 	bl	801635c <cJSON_strdup.isra.0.constprop.0>
 8016afe:	4603      	mov	r3, r0
 8016b00:	6120      	str	r0, [r4, #16]
 8016b02:	b108      	cbz	r0, 8016b08 <cJSON_CreateString+0x24>
 8016b04:	4620      	mov	r0, r4
 8016b06:	bd38      	pop	{r3, r4, r5, pc}
 8016b08:	4620      	mov	r0, r4
 8016b0a:	461c      	mov	r4, r3
 8016b0c:	f7ff fc9c 	bl	8016448 <cJSON_Delete>
 8016b10:	e7f8      	b.n	8016b04 <cJSON_CreateString+0x20>
 8016b12:	bf00      	nop
 8016b14:	240001c0 	.word	0x240001c0

08016b18 <cJSON_AddStringToObject>:
 8016b18:	b530      	push	{r4, r5, lr}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	4605      	mov	r5, r0
 8016b1e:	4610      	mov	r0, r2
 8016b20:	9101      	str	r1, [sp, #4]
 8016b22:	f7ff ffdf 	bl	8016ae4 <cJSON_CreateString>
 8016b26:	4604      	mov	r4, r0
 8016b28:	2300      	movs	r3, #0
 8016b2a:	9901      	ldr	r1, [sp, #4]
 8016b2c:	4628      	mov	r0, r5
 8016b2e:	4622      	mov	r2, r4
 8016b30:	f7ff fc2e 	bl	8016390 <add_item_to_object.constprop.0>
 8016b34:	b110      	cbz	r0, 8016b3c <cJSON_AddStringToObject+0x24>
 8016b36:	4620      	mov	r0, r4
 8016b38:	b003      	add	sp, #12
 8016b3a:	bd30      	pop	{r4, r5, pc}
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	4620      	mov	r0, r4
 8016b40:	461c      	mov	r4, r3
 8016b42:	f7ff fc81 	bl	8016448 <cJSON_Delete>
 8016b46:	4620      	mov	r0, r4
 8016b48:	b003      	add	sp, #12
 8016b4a:	bd30      	pop	{r4, r5, pc}

08016b4c <cJSON_CreateArray>:
 8016b4c:	b508      	push	{r3, lr}
 8016b4e:	4b04      	ldr	r3, [pc, #16]	@ (8016b60 <cJSON_CreateArray+0x14>)
 8016b50:	6818      	ldr	r0, [r3, #0]
 8016b52:	f7ff f8e9 	bl	8015d28 <cJSON_New_Item.isra.0>
 8016b56:	b108      	cbz	r0, 8016b5c <cJSON_CreateArray+0x10>
 8016b58:	2320      	movs	r3, #32
 8016b5a:	60c3      	str	r3, [r0, #12]
 8016b5c:	bd08      	pop	{r3, pc}
 8016b5e:	bf00      	nop
 8016b60:	240001c0 	.word	0x240001c0

08016b64 <cJSON_CreateObject>:
 8016b64:	b508      	push	{r3, lr}
 8016b66:	4b04      	ldr	r3, [pc, #16]	@ (8016b78 <cJSON_CreateObject+0x14>)
 8016b68:	6818      	ldr	r0, [r3, #0]
 8016b6a:	f7ff f8dd 	bl	8015d28 <cJSON_New_Item.isra.0>
 8016b6e:	b108      	cbz	r0, 8016b74 <cJSON_CreateObject+0x10>
 8016b70:	2340      	movs	r3, #64	@ 0x40
 8016b72:	60c3      	str	r3, [r0, #12]
 8016b74:	bd08      	pop	{r3, pc}
 8016b76:	bf00      	nop
 8016b78:	240001c0 	.word	0x240001c0

08016b7c <cJSON_IsBool>:
 8016b7c:	b120      	cbz	r0, 8016b88 <cJSON_IsBool+0xc>
 8016b7e:	68c0      	ldr	r0, [r0, #12]
 8016b80:	f010 0003 	ands.w	r0, r0, #3
 8016b84:	bf18      	it	ne
 8016b86:	2001      	movne	r0, #1
 8016b88:	4770      	bx	lr
 8016b8a:	bf00      	nop

08016b8c <cJSON_IsNumber>:
 8016b8c:	b128      	cbz	r0, 8016b9a <cJSON_IsNumber+0xe>
 8016b8e:	7b00      	ldrb	r0, [r0, #12]
 8016b90:	f1a0 0008 	sub.w	r0, r0, #8
 8016b94:	fab0 f080 	clz	r0, r0
 8016b98:	0940      	lsrs	r0, r0, #5
 8016b9a:	4770      	bx	lr

08016b9c <cJSON_IsString>:
 8016b9c:	b128      	cbz	r0, 8016baa <cJSON_IsString+0xe>
 8016b9e:	7b00      	ldrb	r0, [r0, #12]
 8016ba0:	f1a0 0010 	sub.w	r0, r0, #16
 8016ba4:	fab0 f080 	clz	r0, r0
 8016ba8:	0940      	lsrs	r0, r0, #5
 8016baa:	4770      	bx	lr

08016bac <cJSON_IsArray>:
 8016bac:	b128      	cbz	r0, 8016bba <cJSON_IsArray+0xe>
 8016bae:	7b00      	ldrb	r0, [r0, #12]
 8016bb0:	f1a0 0020 	sub.w	r0, r0, #32
 8016bb4:	fab0 f080 	clz	r0, r0
 8016bb8:	0940      	lsrs	r0, r0, #5
 8016bba:	4770      	bx	lr

08016bbc <cJSON_IsObject>:
 8016bbc:	b128      	cbz	r0, 8016bca <cJSON_IsObject+0xe>
 8016bbe:	7b00      	ldrb	r0, [r0, #12]
 8016bc0:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8016bc4:	fab0 f080 	clz	r0, r0
 8016bc8:	0940      	lsrs	r0, r0, #5
 8016bca:	4770      	bx	lr

08016bcc <cJSON_free>:
 8016bcc:	4b01      	ldr	r3, [pc, #4]	@ (8016bd4 <cJSON_free+0x8>)
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	4718      	bx	r3
 8016bd2:	bf00      	nop
 8016bd4:	240001c0 	.word	0x240001c0

08016bd8 <is_json_node>:
 8016bd8:	b508      	push	{r3, lr}
 8016bda:	f7ff febb 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8016bde:	3800      	subs	r0, #0
 8016be0:	bf18      	it	ne
 8016be2:	2001      	movne	r0, #1
 8016be4:	bd08      	pop	{r3, pc}
 8016be6:	bf00      	nop

08016be8 <get_json_int_value>:
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	4615      	mov	r5, r2
 8016bec:	f7ff feb2 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8016bf0:	b138      	cbz	r0, 8016c02 <get_json_int_value+0x1a>
 8016bf2:	4604      	mov	r4, r0
 8016bf4:	f7ff ffca 	bl	8016b8c <cJSON_IsNumber>
 8016bf8:	b118      	cbz	r0, 8016c02 <get_json_int_value+0x1a>
 8016bfa:	6963      	ldr	r3, [r4, #20]
 8016bfc:	2001      	movs	r0, #1
 8016bfe:	602b      	str	r3, [r5, #0]
 8016c00:	bd38      	pop	{r3, r4, r5, pc}
 8016c02:	2000      	movs	r0, #0
 8016c04:	bd38      	pop	{r3, r4, r5, pc}
 8016c06:	bf00      	nop

08016c08 <get_json_float_value>:
 8016c08:	b538      	push	{r3, r4, r5, lr}
 8016c0a:	4615      	mov	r5, r2
 8016c0c:	f7ff fea2 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8016c10:	b158      	cbz	r0, 8016c2a <get_json_float_value+0x22>
 8016c12:	4604      	mov	r4, r0
 8016c14:	f7ff ffba 	bl	8016b8c <cJSON_IsNumber>
 8016c18:	b138      	cbz	r0, 8016c2a <get_json_float_value+0x22>
 8016c1a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8016c1e:	f7e9 fe49 	bl	80008b4 <__aeabi_d2f>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2001      	movs	r0, #1
 8016c26:	602b      	str	r3, [r5, #0]
 8016c28:	bd38      	pop	{r3, r4, r5, pc}
 8016c2a:	2000      	movs	r0, #0
 8016c2c:	bd38      	pop	{r3, r4, r5, pc}
 8016c2e:	bf00      	nop

08016c30 <get_json_bool_value>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4615      	mov	r5, r2
 8016c34:	f7ff fe8e 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8016c38:	b160      	cbz	r0, 8016c54 <get_json_bool_value+0x24>
 8016c3a:	4604      	mov	r4, r0
 8016c3c:	f7ff ff9e 	bl	8016b7c <cJSON_IsBool>
 8016c40:	b140      	cbz	r0, 8016c54 <get_json_bool_value+0x24>
 8016c42:	68e3      	ldr	r3, [r4, #12]
 8016c44:	2001      	movs	r0, #1
 8016c46:	f1a3 0302 	sub.w	r3, r3, #2
 8016c4a:	fab3 f383 	clz	r3, r3
 8016c4e:	095b      	lsrs	r3, r3, #5
 8016c50:	702b      	strb	r3, [r5, #0]
 8016c52:	bd38      	pop	{r3, r4, r5, pc}
 8016c54:	2000      	movs	r0, #0
 8016c56:	bd38      	pop	{r3, r4, r5, pc}

08016c58 <get_json_string_value>:
 8016c58:	b538      	push	{r3, r4, r5, lr}
 8016c5a:	4615      	mov	r5, r2
 8016c5c:	f7ff fe7a 	bl	8016954 <cJSON_GetObjectItemCaseSensitive>
 8016c60:	b138      	cbz	r0, 8016c72 <get_json_string_value+0x1a>
 8016c62:	4604      	mov	r4, r0
 8016c64:	f7ff ff9a 	bl	8016b9c <cJSON_IsString>
 8016c68:	b118      	cbz	r0, 8016c72 <get_json_string_value+0x1a>
 8016c6a:	6923      	ldr	r3, [r4, #16]
 8016c6c:	2001      	movs	r0, #1
 8016c6e:	602b      	str	r3, [r5, #0]
 8016c70:	bd38      	pop	{r3, r4, r5, pc}
 8016c72:	2000      	movs	r0, #0
 8016c74:	bd38      	pop	{r3, r4, r5, pc}
 8016c76:	bf00      	nop

08016c78 <add_json_float_value>:
 8016c78:	b538      	push	{r3, r4, r5, lr}
 8016c7a:	4604      	mov	r4, r0
 8016c7c:	460d      	mov	r5, r1
 8016c7e:	ee10 0a10 	vmov	r0, s0
 8016c82:	f7e9 fcf9 	bl	8000678 <__aeabi_f2d>
 8016c86:	ec41 0b10 	vmov	d0, r0, r1
 8016c8a:	4629      	mov	r1, r5
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	f7ff ff0f 	bl	8016ab0 <cJSON_AddNumberToObject>
 8016c92:	3800      	subs	r0, #0
 8016c94:	bf18      	it	ne
 8016c96:	2001      	movne	r0, #1
 8016c98:	bd38      	pop	{r3, r4, r5, pc}
 8016c9a:	bf00      	nop

08016c9c <add_json_uint32_value>:
 8016c9c:	b538      	push	{r3, r4, r5, lr}
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	460d      	mov	r5, r1
 8016ca2:	4610      	mov	r0, r2
 8016ca4:	f7e9 fcc6 	bl	8000634 <__aeabi_ui2d>
 8016ca8:	ec41 0b10 	vmov	d0, r0, r1
 8016cac:	4629      	mov	r1, r5
 8016cae:	4620      	mov	r0, r4
 8016cb0:	f7ff fefe 	bl	8016ab0 <cJSON_AddNumberToObject>
 8016cb4:	3800      	subs	r0, #0
 8016cb6:	bf18      	it	ne
 8016cb8:	2001      	movne	r0, #1
 8016cba:	bd38      	pop	{r3, r4, r5, pc}

08016cbc <add_json_int_value>:
 8016cbc:	b538      	push	{r3, r4, r5, lr}
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	460d      	mov	r5, r1
 8016cc2:	4610      	mov	r0, r2
 8016cc4:	f7e9 fcc6 	bl	8000654 <__aeabi_i2d>
 8016cc8:	ec41 0b10 	vmov	d0, r0, r1
 8016ccc:	4629      	mov	r1, r5
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f7ff feee 	bl	8016ab0 <cJSON_AddNumberToObject>
 8016cd4:	3800      	subs	r0, #0
 8016cd6:	bf18      	it	ne
 8016cd8:	2001      	movne	r0, #1
 8016cda:	bd38      	pop	{r3, r4, r5, pc}

08016cdc <add_json_bool_value>:
 8016cdc:	b508      	push	{r3, lr}
 8016cde:	f7ff fe4b 	bl	8016978 <cJSON_AddBoolToObject>
 8016ce2:	3800      	subs	r0, #0
 8016ce4:	bf18      	it	ne
 8016ce6:	2001      	movne	r0, #1
 8016ce8:	bd08      	pop	{r3, pc}
 8016cea:	bf00      	nop

08016cec <add_json_string_value>:
 8016cec:	b508      	push	{r3, lr}
 8016cee:	f7ff ff13 	bl	8016b18 <cJSON_AddStringToObject>
 8016cf2:	3800      	subs	r0, #0
 8016cf4:	bf18      	it	ne
 8016cf6:	2001      	movne	r0, #1
 8016cf8:	bd08      	pop	{r3, pc}
 8016cfa:	bf00      	nop

08016cfc <json_validate>:
 8016cfc:	2800      	cmp	r0, #0
 8016cfe:	d05c      	beq.n	8016dba <json_validate+0xbe>
 8016d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d02:	6886      	ldr	r6, [r0, #8]
 8016d04:	b083      	sub	sp, #12
 8016d06:	460f      	mov	r7, r1
 8016d08:	b316      	cbz	r6, 8016d50 <json_validate+0x54>
 8016d0a:	6838      	ldr	r0, [r7, #0]
 8016d0c:	2800      	cmp	r0, #0
 8016d0e:	d02c      	beq.n	8016d6a <json_validate+0x6e>
 8016d10:	6a35      	ldr	r5, [r6, #32]
 8016d12:	463c      	mov	r4, r7
 8016d14:	e002      	b.n	8016d1c <json_validate+0x20>
 8016d16:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8016d1a:	b330      	cbz	r0, 8016d6a <json_validate+0x6e>
 8016d1c:	4629      	mov	r1, r5
 8016d1e:	f7e9 fadf 	bl	80002e0 <strcmp>
 8016d22:	2800      	cmp	r0, #0
 8016d24:	d1f7      	bne.n	8016d16 <json_validate+0x1a>
 8016d26:	7923      	ldrb	r3, [r4, #4]
 8016d28:	2b07      	cmp	r3, #7
 8016d2a:	d81e      	bhi.n	8016d6a <json_validate+0x6e>
 8016d2c:	e8df f003 	tbb	[pc, r3]
 8016d30:	0420373e 	.word	0x0420373e
 8016d34:	1a041d13 	.word	0x1a041d13
 8016d38:	4630      	mov	r0, r6
 8016d3a:	f7ff ff2f 	bl	8016b9c <cJSON_IsString>
 8016d3e:	3800      	subs	r0, #0
 8016d40:	bf18      	it	ne
 8016d42:	2001      	movne	r0, #1
 8016d44:	6823      	ldr	r3, [r4, #0]
 8016d46:	b183      	cbz	r3, 8016d6a <json_validate+0x6e>
 8016d48:	b178      	cbz	r0, 8016d6a <json_validate+0x6e>
 8016d4a:	6836      	ldr	r6, [r6, #0]
 8016d4c:	2e00      	cmp	r6, #0
 8016d4e:	d1dc      	bne.n	8016d0a <json_validate+0xe>
 8016d50:	2001      	movs	r0, #1
 8016d52:	b003      	add	sp, #12
 8016d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d56:	4630      	mov	r0, r6
 8016d58:	f7ff ff28 	bl	8016bac <cJSON_IsArray>
 8016d5c:	3800      	subs	r0, #0
 8016d5e:	bf18      	it	ne
 8016d60:	2001      	movne	r0, #1
 8016d62:	e7ef      	b.n	8016d44 <json_validate+0x48>
 8016d64:	6823      	ldr	r3, [r4, #0]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d1ef      	bne.n	8016d4a <json_validate+0x4e>
 8016d6a:	2000      	movs	r0, #0
 8016d6c:	b003      	add	sp, #12
 8016d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d70:	4630      	mov	r0, r6
 8016d72:	f7ff ff0b 	bl	8016b8c <cJSON_IsNumber>
 8016d76:	2800      	cmp	r0, #0
 8016d78:	d0f7      	beq.n	8016d6a <json_validate+0x6e>
 8016d7a:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8016d7e:	ec41 0b10 	vmov	d0, r0, r1
 8016d82:	e9cd 0100 	strd	r0, r1, [sp]
 8016d86:	f004 fa79 	bl	801b27c <round>
 8016d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d8e:	ec53 2b10 	vmov	r2, r3, d0
 8016d92:	f7e9 fd1f 	bl	80007d4 <__aeabi_dcmpeq>
 8016d96:	3800      	subs	r0, #0
 8016d98:	bf18      	it	ne
 8016d9a:	2001      	movne	r0, #1
 8016d9c:	e7d2      	b.n	8016d44 <json_validate+0x48>
 8016d9e:	4630      	mov	r0, r6
 8016da0:	f7ff fef4 	bl	8016b8c <cJSON_IsNumber>
 8016da4:	3800      	subs	r0, #0
 8016da6:	bf18      	it	ne
 8016da8:	2001      	movne	r0, #1
 8016daa:	e7cb      	b.n	8016d44 <json_validate+0x48>
 8016dac:	4630      	mov	r0, r6
 8016dae:	f7ff fee5 	bl	8016b7c <cJSON_IsBool>
 8016db2:	3800      	subs	r0, #0
 8016db4:	bf18      	it	ne
 8016db6:	2001      	movne	r0, #1
 8016db8:	e7c4      	b.n	8016d44 <json_validate+0x48>
 8016dba:	2001      	movs	r0, #1
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop

08016dc0 <__assert_func>:
 8016dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016dc2:	4614      	mov	r4, r2
 8016dc4:	461a      	mov	r2, r3
 8016dc6:	4b09      	ldr	r3, [pc, #36]	@ (8016dec <__assert_func+0x2c>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	4605      	mov	r5, r0
 8016dcc:	68d8      	ldr	r0, [r3, #12]
 8016dce:	b954      	cbnz	r4, 8016de6 <__assert_func+0x26>
 8016dd0:	4b07      	ldr	r3, [pc, #28]	@ (8016df0 <__assert_func+0x30>)
 8016dd2:	461c      	mov	r4, r3
 8016dd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016dd8:	9100      	str	r1, [sp, #0]
 8016dda:	462b      	mov	r3, r5
 8016ddc:	4905      	ldr	r1, [pc, #20]	@ (8016df4 <__assert_func+0x34>)
 8016dde:	f001 fbab 	bl	8018538 <fiprintf>
 8016de2:	f001 fe51 	bl	8018a88 <abort>
 8016de6:	4b04      	ldr	r3, [pc, #16]	@ (8016df8 <__assert_func+0x38>)
 8016de8:	e7f4      	b.n	8016dd4 <__assert_func+0x14>
 8016dea:	bf00      	nop
 8016dec:	24000344 	.word	0x24000344
 8016df0:	080215e2 	.word	0x080215e2
 8016df4:	080215b4 	.word	0x080215b4
 8016df8:	080215a7 	.word	0x080215a7

08016dfc <_calloc_r>:
 8016dfc:	b570      	push	{r4, r5, r6, lr}
 8016dfe:	fba1 5402 	umull	r5, r4, r1, r2
 8016e02:	b93c      	cbnz	r4, 8016e14 <_calloc_r+0x18>
 8016e04:	4629      	mov	r1, r5
 8016e06:	f000 f83f 	bl	8016e88 <_malloc_r>
 8016e0a:	4606      	mov	r6, r0
 8016e0c:	b928      	cbnz	r0, 8016e1a <_calloc_r+0x1e>
 8016e0e:	2600      	movs	r6, #0
 8016e10:	4630      	mov	r0, r6
 8016e12:	bd70      	pop	{r4, r5, r6, pc}
 8016e14:	220c      	movs	r2, #12
 8016e16:	6002      	str	r2, [r0, #0]
 8016e18:	e7f9      	b.n	8016e0e <_calloc_r+0x12>
 8016e1a:	462a      	mov	r2, r5
 8016e1c:	4621      	mov	r1, r4
 8016e1e:	f001 fd63 	bl	80188e8 <memset>
 8016e22:	e7f5      	b.n	8016e10 <_calloc_r+0x14>

08016e24 <malloc>:
 8016e24:	4b02      	ldr	r3, [pc, #8]	@ (8016e30 <malloc+0xc>)
 8016e26:	4601      	mov	r1, r0
 8016e28:	6818      	ldr	r0, [r3, #0]
 8016e2a:	f000 b82d 	b.w	8016e88 <_malloc_r>
 8016e2e:	bf00      	nop
 8016e30:	24000344 	.word	0x24000344

08016e34 <free>:
 8016e34:	4b02      	ldr	r3, [pc, #8]	@ (8016e40 <free+0xc>)
 8016e36:	4601      	mov	r1, r0
 8016e38:	6818      	ldr	r0, [r3, #0]
 8016e3a:	f002 bc0b 	b.w	8019654 <_free_r>
 8016e3e:	bf00      	nop
 8016e40:	24000344 	.word	0x24000344

08016e44 <sbrk_aligned>:
 8016e44:	b570      	push	{r4, r5, r6, lr}
 8016e46:	4e0f      	ldr	r6, [pc, #60]	@ (8016e84 <sbrk_aligned+0x40>)
 8016e48:	460c      	mov	r4, r1
 8016e4a:	6831      	ldr	r1, [r6, #0]
 8016e4c:	4605      	mov	r5, r0
 8016e4e:	b911      	cbnz	r1, 8016e56 <sbrk_aligned+0x12>
 8016e50:	f001 fdb2 	bl	80189b8 <_sbrk_r>
 8016e54:	6030      	str	r0, [r6, #0]
 8016e56:	4621      	mov	r1, r4
 8016e58:	4628      	mov	r0, r5
 8016e5a:	f001 fdad 	bl	80189b8 <_sbrk_r>
 8016e5e:	1c43      	adds	r3, r0, #1
 8016e60:	d103      	bne.n	8016e6a <sbrk_aligned+0x26>
 8016e62:	f04f 34ff 	mov.w	r4, #4294967295
 8016e66:	4620      	mov	r0, r4
 8016e68:	bd70      	pop	{r4, r5, r6, pc}
 8016e6a:	1cc4      	adds	r4, r0, #3
 8016e6c:	f024 0403 	bic.w	r4, r4, #3
 8016e70:	42a0      	cmp	r0, r4
 8016e72:	d0f8      	beq.n	8016e66 <sbrk_aligned+0x22>
 8016e74:	1a21      	subs	r1, r4, r0
 8016e76:	4628      	mov	r0, r5
 8016e78:	f001 fd9e 	bl	80189b8 <_sbrk_r>
 8016e7c:	3001      	adds	r0, #1
 8016e7e:	d1f2      	bne.n	8016e66 <sbrk_aligned+0x22>
 8016e80:	e7ef      	b.n	8016e62 <sbrk_aligned+0x1e>
 8016e82:	bf00      	nop
 8016e84:	240030c4 	.word	0x240030c4

08016e88 <_malloc_r>:
 8016e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e8c:	1ccd      	adds	r5, r1, #3
 8016e8e:	f025 0503 	bic.w	r5, r5, #3
 8016e92:	3508      	adds	r5, #8
 8016e94:	2d0c      	cmp	r5, #12
 8016e96:	bf38      	it	cc
 8016e98:	250c      	movcc	r5, #12
 8016e9a:	2d00      	cmp	r5, #0
 8016e9c:	4606      	mov	r6, r0
 8016e9e:	db01      	blt.n	8016ea4 <_malloc_r+0x1c>
 8016ea0:	42a9      	cmp	r1, r5
 8016ea2:	d904      	bls.n	8016eae <_malloc_r+0x26>
 8016ea4:	230c      	movs	r3, #12
 8016ea6:	6033      	str	r3, [r6, #0]
 8016ea8:	2000      	movs	r0, #0
 8016eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016f84 <_malloc_r+0xfc>
 8016eb2:	f000 f869 	bl	8016f88 <__malloc_lock>
 8016eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8016eba:	461c      	mov	r4, r3
 8016ebc:	bb44      	cbnz	r4, 8016f10 <_malloc_r+0x88>
 8016ebe:	4629      	mov	r1, r5
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	f7ff ffbf 	bl	8016e44 <sbrk_aligned>
 8016ec6:	1c43      	adds	r3, r0, #1
 8016ec8:	4604      	mov	r4, r0
 8016eca:	d158      	bne.n	8016f7e <_malloc_r+0xf6>
 8016ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8016ed0:	4627      	mov	r7, r4
 8016ed2:	2f00      	cmp	r7, #0
 8016ed4:	d143      	bne.n	8016f5e <_malloc_r+0xd6>
 8016ed6:	2c00      	cmp	r4, #0
 8016ed8:	d04b      	beq.n	8016f72 <_malloc_r+0xea>
 8016eda:	6823      	ldr	r3, [r4, #0]
 8016edc:	4639      	mov	r1, r7
 8016ede:	4630      	mov	r0, r6
 8016ee0:	eb04 0903 	add.w	r9, r4, r3
 8016ee4:	f001 fd68 	bl	80189b8 <_sbrk_r>
 8016ee8:	4581      	cmp	r9, r0
 8016eea:	d142      	bne.n	8016f72 <_malloc_r+0xea>
 8016eec:	6821      	ldr	r1, [r4, #0]
 8016eee:	1a6d      	subs	r5, r5, r1
 8016ef0:	4629      	mov	r1, r5
 8016ef2:	4630      	mov	r0, r6
 8016ef4:	f7ff ffa6 	bl	8016e44 <sbrk_aligned>
 8016ef8:	3001      	adds	r0, #1
 8016efa:	d03a      	beq.n	8016f72 <_malloc_r+0xea>
 8016efc:	6823      	ldr	r3, [r4, #0]
 8016efe:	442b      	add	r3, r5
 8016f00:	6023      	str	r3, [r4, #0]
 8016f02:	f8d8 3000 	ldr.w	r3, [r8]
 8016f06:	685a      	ldr	r2, [r3, #4]
 8016f08:	bb62      	cbnz	r2, 8016f64 <_malloc_r+0xdc>
 8016f0a:	f8c8 7000 	str.w	r7, [r8]
 8016f0e:	e00f      	b.n	8016f30 <_malloc_r+0xa8>
 8016f10:	6822      	ldr	r2, [r4, #0]
 8016f12:	1b52      	subs	r2, r2, r5
 8016f14:	d420      	bmi.n	8016f58 <_malloc_r+0xd0>
 8016f16:	2a0b      	cmp	r2, #11
 8016f18:	d917      	bls.n	8016f4a <_malloc_r+0xc2>
 8016f1a:	1961      	adds	r1, r4, r5
 8016f1c:	42a3      	cmp	r3, r4
 8016f1e:	6025      	str	r5, [r4, #0]
 8016f20:	bf18      	it	ne
 8016f22:	6059      	strne	r1, [r3, #4]
 8016f24:	6863      	ldr	r3, [r4, #4]
 8016f26:	bf08      	it	eq
 8016f28:	f8c8 1000 	streq.w	r1, [r8]
 8016f2c:	5162      	str	r2, [r4, r5]
 8016f2e:	604b      	str	r3, [r1, #4]
 8016f30:	4630      	mov	r0, r6
 8016f32:	f000 f82f 	bl	8016f94 <__malloc_unlock>
 8016f36:	f104 000b 	add.w	r0, r4, #11
 8016f3a:	1d23      	adds	r3, r4, #4
 8016f3c:	f020 0007 	bic.w	r0, r0, #7
 8016f40:	1ac2      	subs	r2, r0, r3
 8016f42:	bf1c      	itt	ne
 8016f44:	1a1b      	subne	r3, r3, r0
 8016f46:	50a3      	strne	r3, [r4, r2]
 8016f48:	e7af      	b.n	8016eaa <_malloc_r+0x22>
 8016f4a:	6862      	ldr	r2, [r4, #4]
 8016f4c:	42a3      	cmp	r3, r4
 8016f4e:	bf0c      	ite	eq
 8016f50:	f8c8 2000 	streq.w	r2, [r8]
 8016f54:	605a      	strne	r2, [r3, #4]
 8016f56:	e7eb      	b.n	8016f30 <_malloc_r+0xa8>
 8016f58:	4623      	mov	r3, r4
 8016f5a:	6864      	ldr	r4, [r4, #4]
 8016f5c:	e7ae      	b.n	8016ebc <_malloc_r+0x34>
 8016f5e:	463c      	mov	r4, r7
 8016f60:	687f      	ldr	r7, [r7, #4]
 8016f62:	e7b6      	b.n	8016ed2 <_malloc_r+0x4a>
 8016f64:	461a      	mov	r2, r3
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	42a3      	cmp	r3, r4
 8016f6a:	d1fb      	bne.n	8016f64 <_malloc_r+0xdc>
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	6053      	str	r3, [r2, #4]
 8016f70:	e7de      	b.n	8016f30 <_malloc_r+0xa8>
 8016f72:	230c      	movs	r3, #12
 8016f74:	6033      	str	r3, [r6, #0]
 8016f76:	4630      	mov	r0, r6
 8016f78:	f000 f80c 	bl	8016f94 <__malloc_unlock>
 8016f7c:	e794      	b.n	8016ea8 <_malloc_r+0x20>
 8016f7e:	6005      	str	r5, [r0, #0]
 8016f80:	e7d6      	b.n	8016f30 <_malloc_r+0xa8>
 8016f82:	bf00      	nop
 8016f84:	240030c8 	.word	0x240030c8

08016f88 <__malloc_lock>:
 8016f88:	4801      	ldr	r0, [pc, #4]	@ (8016f90 <__malloc_lock+0x8>)
 8016f8a:	f001 bd62 	b.w	8018a52 <__retarget_lock_acquire_recursive>
 8016f8e:	bf00      	nop
 8016f90:	2400320c 	.word	0x2400320c

08016f94 <__malloc_unlock>:
 8016f94:	4801      	ldr	r0, [pc, #4]	@ (8016f9c <__malloc_unlock+0x8>)
 8016f96:	f001 bd5d 	b.w	8018a54 <__retarget_lock_release_recursive>
 8016f9a:	bf00      	nop
 8016f9c:	2400320c 	.word	0x2400320c

08016fa0 <realloc>:
 8016fa0:	4b02      	ldr	r3, [pc, #8]	@ (8016fac <realloc+0xc>)
 8016fa2:	460a      	mov	r2, r1
 8016fa4:	4601      	mov	r1, r0
 8016fa6:	6818      	ldr	r0, [r3, #0]
 8016fa8:	f000 b802 	b.w	8016fb0 <_realloc_r>
 8016fac:	24000344 	.word	0x24000344

08016fb0 <_realloc_r>:
 8016fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb4:	4680      	mov	r8, r0
 8016fb6:	4615      	mov	r5, r2
 8016fb8:	460c      	mov	r4, r1
 8016fba:	b921      	cbnz	r1, 8016fc6 <_realloc_r+0x16>
 8016fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc0:	4611      	mov	r1, r2
 8016fc2:	f7ff bf61 	b.w	8016e88 <_malloc_r>
 8016fc6:	b92a      	cbnz	r2, 8016fd4 <_realloc_r+0x24>
 8016fc8:	f002 fb44 	bl	8019654 <_free_r>
 8016fcc:	2400      	movs	r4, #0
 8016fce:	4620      	mov	r0, r4
 8016fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fd4:	f003 fb83 	bl	801a6de <_malloc_usable_size_r>
 8016fd8:	4285      	cmp	r5, r0
 8016fda:	4606      	mov	r6, r0
 8016fdc:	d802      	bhi.n	8016fe4 <_realloc_r+0x34>
 8016fde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016fe2:	d8f4      	bhi.n	8016fce <_realloc_r+0x1e>
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	4640      	mov	r0, r8
 8016fe8:	f7ff ff4e 	bl	8016e88 <_malloc_r>
 8016fec:	4607      	mov	r7, r0
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d0ec      	beq.n	8016fcc <_realloc_r+0x1c>
 8016ff2:	42b5      	cmp	r5, r6
 8016ff4:	462a      	mov	r2, r5
 8016ff6:	4621      	mov	r1, r4
 8016ff8:	bf28      	it	cs
 8016ffa:	4632      	movcs	r2, r6
 8016ffc:	f001 fd2b 	bl	8018a56 <memcpy>
 8017000:	4621      	mov	r1, r4
 8017002:	4640      	mov	r0, r8
 8017004:	f002 fb26 	bl	8019654 <_free_r>
 8017008:	463c      	mov	r4, r7
 801700a:	e7e0      	b.n	8016fce <_realloc_r+0x1e>

0801700c <sulp>:
 801700c:	b570      	push	{r4, r5, r6, lr}
 801700e:	4604      	mov	r4, r0
 8017010:	460d      	mov	r5, r1
 8017012:	4616      	mov	r6, r2
 8017014:	ec45 4b10 	vmov	d0, r4, r5
 8017018:	f003 fa26 	bl	801a468 <__ulp>
 801701c:	b17e      	cbz	r6, 801703e <sulp+0x32>
 801701e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017022:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017026:	2b00      	cmp	r3, #0
 8017028:	dd09      	ble.n	801703e <sulp+0x32>
 801702a:	051b      	lsls	r3, r3, #20
 801702c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8017030:	2000      	movs	r0, #0
 8017032:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8017036:	ec41 0b17 	vmov	d7, r0, r1
 801703a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801703e:	bd70      	pop	{r4, r5, r6, pc}

08017040 <_strtod_l>:
 8017040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017044:	ed2d 8b0a 	vpush	{d8-d12}
 8017048:	b097      	sub	sp, #92	@ 0x5c
 801704a:	4688      	mov	r8, r1
 801704c:	920e      	str	r2, [sp, #56]	@ 0x38
 801704e:	2200      	movs	r2, #0
 8017050:	9212      	str	r2, [sp, #72]	@ 0x48
 8017052:	9005      	str	r0, [sp, #20]
 8017054:	f04f 0a00 	mov.w	sl, #0
 8017058:	f04f 0b00 	mov.w	fp, #0
 801705c:	460a      	mov	r2, r1
 801705e:	9211      	str	r2, [sp, #68]	@ 0x44
 8017060:	7811      	ldrb	r1, [r2, #0]
 8017062:	292b      	cmp	r1, #43	@ 0x2b
 8017064:	d04c      	beq.n	8017100 <_strtod_l+0xc0>
 8017066:	d839      	bhi.n	80170dc <_strtod_l+0x9c>
 8017068:	290d      	cmp	r1, #13
 801706a:	d833      	bhi.n	80170d4 <_strtod_l+0x94>
 801706c:	2908      	cmp	r1, #8
 801706e:	d833      	bhi.n	80170d8 <_strtod_l+0x98>
 8017070:	2900      	cmp	r1, #0
 8017072:	d03c      	beq.n	80170ee <_strtod_l+0xae>
 8017074:	2200      	movs	r2, #0
 8017076:	9208      	str	r2, [sp, #32]
 8017078:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801707a:	782a      	ldrb	r2, [r5, #0]
 801707c:	2a30      	cmp	r2, #48	@ 0x30
 801707e:	f040 80b5 	bne.w	80171ec <_strtod_l+0x1ac>
 8017082:	786a      	ldrb	r2, [r5, #1]
 8017084:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017088:	2a58      	cmp	r2, #88	@ 0x58
 801708a:	d170      	bne.n	801716e <_strtod_l+0x12e>
 801708c:	9302      	str	r3, [sp, #8]
 801708e:	9b08      	ldr	r3, [sp, #32]
 8017090:	9301      	str	r3, [sp, #4]
 8017092:	ab12      	add	r3, sp, #72	@ 0x48
 8017094:	9300      	str	r3, [sp, #0]
 8017096:	4a8b      	ldr	r2, [pc, #556]	@ (80172c4 <_strtod_l+0x284>)
 8017098:	9805      	ldr	r0, [sp, #20]
 801709a:	ab13      	add	r3, sp, #76	@ 0x4c
 801709c:	a911      	add	r1, sp, #68	@ 0x44
 801709e:	f002 fb8b 	bl	80197b8 <__gethex>
 80170a2:	f010 060f 	ands.w	r6, r0, #15
 80170a6:	4604      	mov	r4, r0
 80170a8:	d005      	beq.n	80170b6 <_strtod_l+0x76>
 80170aa:	2e06      	cmp	r6, #6
 80170ac:	d12a      	bne.n	8017104 <_strtod_l+0xc4>
 80170ae:	3501      	adds	r5, #1
 80170b0:	2300      	movs	r3, #0
 80170b2:	9511      	str	r5, [sp, #68]	@ 0x44
 80170b4:	9308      	str	r3, [sp, #32]
 80170b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	f040 852f 	bne.w	8017b1c <_strtod_l+0xadc>
 80170be:	9b08      	ldr	r3, [sp, #32]
 80170c0:	ec4b ab10 	vmov	d0, sl, fp
 80170c4:	b1cb      	cbz	r3, 80170fa <_strtod_l+0xba>
 80170c6:	eeb1 0b40 	vneg.f64	d0, d0
 80170ca:	b017      	add	sp, #92	@ 0x5c
 80170cc:	ecbd 8b0a 	vpop	{d8-d12}
 80170d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d4:	2920      	cmp	r1, #32
 80170d6:	d1cd      	bne.n	8017074 <_strtod_l+0x34>
 80170d8:	3201      	adds	r2, #1
 80170da:	e7c0      	b.n	801705e <_strtod_l+0x1e>
 80170dc:	292d      	cmp	r1, #45	@ 0x2d
 80170de:	d1c9      	bne.n	8017074 <_strtod_l+0x34>
 80170e0:	2101      	movs	r1, #1
 80170e2:	9108      	str	r1, [sp, #32]
 80170e4:	1c51      	adds	r1, r2, #1
 80170e6:	9111      	str	r1, [sp, #68]	@ 0x44
 80170e8:	7852      	ldrb	r2, [r2, #1]
 80170ea:	2a00      	cmp	r2, #0
 80170ec:	d1c4      	bne.n	8017078 <_strtod_l+0x38>
 80170ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f040 850f 	bne.w	8017b18 <_strtod_l+0xad8>
 80170fa:	ec4b ab10 	vmov	d0, sl, fp
 80170fe:	e7e4      	b.n	80170ca <_strtod_l+0x8a>
 8017100:	2100      	movs	r1, #0
 8017102:	e7ee      	b.n	80170e2 <_strtod_l+0xa2>
 8017104:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017106:	b13a      	cbz	r2, 8017118 <_strtod_l+0xd8>
 8017108:	2135      	movs	r1, #53	@ 0x35
 801710a:	a814      	add	r0, sp, #80	@ 0x50
 801710c:	f003 faa3 	bl	801a656 <__copybits>
 8017110:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017112:	9805      	ldr	r0, [sp, #20]
 8017114:	f002 fe74 	bl	8019e00 <_Bfree>
 8017118:	1e73      	subs	r3, r6, #1
 801711a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801711c:	2b04      	cmp	r3, #4
 801711e:	d806      	bhi.n	801712e <_strtod_l+0xee>
 8017120:	e8df f003 	tbb	[pc, r3]
 8017124:	201d0314 	.word	0x201d0314
 8017128:	14          	.byte	0x14
 8017129:	00          	.byte	0x00
 801712a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801712e:	05e3      	lsls	r3, r4, #23
 8017130:	bf48      	it	mi
 8017132:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801713a:	0d1b      	lsrs	r3, r3, #20
 801713c:	051b      	lsls	r3, r3, #20
 801713e:	2b00      	cmp	r3, #0
 8017140:	d1b9      	bne.n	80170b6 <_strtod_l+0x76>
 8017142:	f001 fc5b 	bl	80189fc <__errno>
 8017146:	2322      	movs	r3, #34	@ 0x22
 8017148:	6003      	str	r3, [r0, #0]
 801714a:	e7b4      	b.n	80170b6 <_strtod_l+0x76>
 801714c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8017150:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017154:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017158:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801715c:	e7e7      	b.n	801712e <_strtod_l+0xee>
 801715e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80172cc <_strtod_l+0x28c>
 8017162:	e7e4      	b.n	801712e <_strtod_l+0xee>
 8017164:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017168:	f04f 3aff 	mov.w	sl, #4294967295
 801716c:	e7df      	b.n	801712e <_strtod_l+0xee>
 801716e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017170:	1c5a      	adds	r2, r3, #1
 8017172:	9211      	str	r2, [sp, #68]	@ 0x44
 8017174:	785b      	ldrb	r3, [r3, #1]
 8017176:	2b30      	cmp	r3, #48	@ 0x30
 8017178:	d0f9      	beq.n	801716e <_strtod_l+0x12e>
 801717a:	2b00      	cmp	r3, #0
 801717c:	d09b      	beq.n	80170b6 <_strtod_l+0x76>
 801717e:	2301      	movs	r3, #1
 8017180:	2600      	movs	r6, #0
 8017182:	9307      	str	r3, [sp, #28]
 8017184:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017186:	930a      	str	r3, [sp, #40]	@ 0x28
 8017188:	46b1      	mov	r9, r6
 801718a:	4635      	mov	r5, r6
 801718c:	220a      	movs	r2, #10
 801718e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017190:	7804      	ldrb	r4, [r0, #0]
 8017192:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017196:	b2d9      	uxtb	r1, r3
 8017198:	2909      	cmp	r1, #9
 801719a:	d929      	bls.n	80171f0 <_strtod_l+0x1b0>
 801719c:	494a      	ldr	r1, [pc, #296]	@ (80172c8 <_strtod_l+0x288>)
 801719e:	2201      	movs	r2, #1
 80171a0:	f001 fbaa 	bl	80188f8 <strncmp>
 80171a4:	b378      	cbz	r0, 8017206 <_strtod_l+0x1c6>
 80171a6:	2000      	movs	r0, #0
 80171a8:	4622      	mov	r2, r4
 80171aa:	462b      	mov	r3, r5
 80171ac:	4607      	mov	r7, r0
 80171ae:	9006      	str	r0, [sp, #24]
 80171b0:	2a65      	cmp	r2, #101	@ 0x65
 80171b2:	d001      	beq.n	80171b8 <_strtod_l+0x178>
 80171b4:	2a45      	cmp	r2, #69	@ 0x45
 80171b6:	d117      	bne.n	80171e8 <_strtod_l+0x1a8>
 80171b8:	b91b      	cbnz	r3, 80171c2 <_strtod_l+0x182>
 80171ba:	9b07      	ldr	r3, [sp, #28]
 80171bc:	4303      	orrs	r3, r0
 80171be:	d096      	beq.n	80170ee <_strtod_l+0xae>
 80171c0:	2300      	movs	r3, #0
 80171c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80171c6:	f108 0201 	add.w	r2, r8, #1
 80171ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80171cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80171d0:	2a2b      	cmp	r2, #43	@ 0x2b
 80171d2:	d06b      	beq.n	80172ac <_strtod_l+0x26c>
 80171d4:	2a2d      	cmp	r2, #45	@ 0x2d
 80171d6:	d071      	beq.n	80172bc <_strtod_l+0x27c>
 80171d8:	f04f 0e00 	mov.w	lr, #0
 80171dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80171e0:	2c09      	cmp	r4, #9
 80171e2:	d979      	bls.n	80172d8 <_strtod_l+0x298>
 80171e4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80171e8:	2400      	movs	r4, #0
 80171ea:	e094      	b.n	8017316 <_strtod_l+0x2d6>
 80171ec:	2300      	movs	r3, #0
 80171ee:	e7c7      	b.n	8017180 <_strtod_l+0x140>
 80171f0:	2d08      	cmp	r5, #8
 80171f2:	f100 0001 	add.w	r0, r0, #1
 80171f6:	bfd4      	ite	le
 80171f8:	fb02 3909 	mlale	r9, r2, r9, r3
 80171fc:	fb02 3606 	mlagt	r6, r2, r6, r3
 8017200:	3501      	adds	r5, #1
 8017202:	9011      	str	r0, [sp, #68]	@ 0x44
 8017204:	e7c3      	b.n	801718e <_strtod_l+0x14e>
 8017206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017208:	1c5a      	adds	r2, r3, #1
 801720a:	9211      	str	r2, [sp, #68]	@ 0x44
 801720c:	785a      	ldrb	r2, [r3, #1]
 801720e:	b375      	cbz	r5, 801726e <_strtod_l+0x22e>
 8017210:	4607      	mov	r7, r0
 8017212:	462b      	mov	r3, r5
 8017214:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017218:	2909      	cmp	r1, #9
 801721a:	d913      	bls.n	8017244 <_strtod_l+0x204>
 801721c:	2101      	movs	r1, #1
 801721e:	9106      	str	r1, [sp, #24]
 8017220:	e7c6      	b.n	80171b0 <_strtod_l+0x170>
 8017222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017224:	1c5a      	adds	r2, r3, #1
 8017226:	9211      	str	r2, [sp, #68]	@ 0x44
 8017228:	785a      	ldrb	r2, [r3, #1]
 801722a:	3001      	adds	r0, #1
 801722c:	2a30      	cmp	r2, #48	@ 0x30
 801722e:	d0f8      	beq.n	8017222 <_strtod_l+0x1e2>
 8017230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017234:	2b08      	cmp	r3, #8
 8017236:	f200 8476 	bhi.w	8017b26 <_strtod_l+0xae6>
 801723a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801723c:	930a      	str	r3, [sp, #40]	@ 0x28
 801723e:	4607      	mov	r7, r0
 8017240:	2000      	movs	r0, #0
 8017242:	4603      	mov	r3, r0
 8017244:	3a30      	subs	r2, #48	@ 0x30
 8017246:	f100 0101 	add.w	r1, r0, #1
 801724a:	d023      	beq.n	8017294 <_strtod_l+0x254>
 801724c:	440f      	add	r7, r1
 801724e:	eb00 0c03 	add.w	ip, r0, r3
 8017252:	4619      	mov	r1, r3
 8017254:	240a      	movs	r4, #10
 8017256:	4561      	cmp	r1, ip
 8017258:	d10b      	bne.n	8017272 <_strtod_l+0x232>
 801725a:	1c5c      	adds	r4, r3, #1
 801725c:	4403      	add	r3, r0
 801725e:	2b08      	cmp	r3, #8
 8017260:	4404      	add	r4, r0
 8017262:	dc11      	bgt.n	8017288 <_strtod_l+0x248>
 8017264:	230a      	movs	r3, #10
 8017266:	fb03 2909 	mla	r9, r3, r9, r2
 801726a:	2100      	movs	r1, #0
 801726c:	e013      	b.n	8017296 <_strtod_l+0x256>
 801726e:	4628      	mov	r0, r5
 8017270:	e7dc      	b.n	801722c <_strtod_l+0x1ec>
 8017272:	2908      	cmp	r1, #8
 8017274:	f101 0101 	add.w	r1, r1, #1
 8017278:	dc02      	bgt.n	8017280 <_strtod_l+0x240>
 801727a:	fb04 f909 	mul.w	r9, r4, r9
 801727e:	e7ea      	b.n	8017256 <_strtod_l+0x216>
 8017280:	2910      	cmp	r1, #16
 8017282:	bfd8      	it	le
 8017284:	4366      	mulle	r6, r4
 8017286:	e7e6      	b.n	8017256 <_strtod_l+0x216>
 8017288:	2b0f      	cmp	r3, #15
 801728a:	dcee      	bgt.n	801726a <_strtod_l+0x22a>
 801728c:	230a      	movs	r3, #10
 801728e:	fb03 2606 	mla	r6, r3, r6, r2
 8017292:	e7ea      	b.n	801726a <_strtod_l+0x22a>
 8017294:	461c      	mov	r4, r3
 8017296:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017298:	1c5a      	adds	r2, r3, #1
 801729a:	9211      	str	r2, [sp, #68]	@ 0x44
 801729c:	785a      	ldrb	r2, [r3, #1]
 801729e:	4608      	mov	r0, r1
 80172a0:	4623      	mov	r3, r4
 80172a2:	e7b7      	b.n	8017214 <_strtod_l+0x1d4>
 80172a4:	2301      	movs	r3, #1
 80172a6:	2700      	movs	r7, #0
 80172a8:	9306      	str	r3, [sp, #24]
 80172aa:	e786      	b.n	80171ba <_strtod_l+0x17a>
 80172ac:	f04f 0e00 	mov.w	lr, #0
 80172b0:	f108 0202 	add.w	r2, r8, #2
 80172b4:	9211      	str	r2, [sp, #68]	@ 0x44
 80172b6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80172ba:	e78f      	b.n	80171dc <_strtod_l+0x19c>
 80172bc:	f04f 0e01 	mov.w	lr, #1
 80172c0:	e7f6      	b.n	80172b0 <_strtod_l+0x270>
 80172c2:	bf00      	nop
 80172c4:	080215fc 	.word	0x080215fc
 80172c8:	080215e3 	.word	0x080215e3
 80172cc:	7ff00000 	.word	0x7ff00000
 80172d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80172d2:	1c54      	adds	r4, r2, #1
 80172d4:	9411      	str	r4, [sp, #68]	@ 0x44
 80172d6:	7852      	ldrb	r2, [r2, #1]
 80172d8:	2a30      	cmp	r2, #48	@ 0x30
 80172da:	d0f9      	beq.n	80172d0 <_strtod_l+0x290>
 80172dc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80172e0:	2c08      	cmp	r4, #8
 80172e2:	d881      	bhi.n	80171e8 <_strtod_l+0x1a8>
 80172e4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80172e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80172ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80172ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80172ee:	1c51      	adds	r1, r2, #1
 80172f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80172f2:	7852      	ldrb	r2, [r2, #1]
 80172f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80172f8:	2c09      	cmp	r4, #9
 80172fa:	d938      	bls.n	801736e <_strtod_l+0x32e>
 80172fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80172fe:	1b0c      	subs	r4, r1, r4
 8017300:	2c08      	cmp	r4, #8
 8017302:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8017306:	dc02      	bgt.n	801730e <_strtod_l+0x2ce>
 8017308:	4564      	cmp	r4, ip
 801730a:	bfa8      	it	ge
 801730c:	4664      	movge	r4, ip
 801730e:	f1be 0f00 	cmp.w	lr, #0
 8017312:	d000      	beq.n	8017316 <_strtod_l+0x2d6>
 8017314:	4264      	negs	r4, r4
 8017316:	2b00      	cmp	r3, #0
 8017318:	d14e      	bne.n	80173b8 <_strtod_l+0x378>
 801731a:	9b07      	ldr	r3, [sp, #28]
 801731c:	4318      	orrs	r0, r3
 801731e:	f47f aeca 	bne.w	80170b6 <_strtod_l+0x76>
 8017322:	9b06      	ldr	r3, [sp, #24]
 8017324:	2b00      	cmp	r3, #0
 8017326:	f47f aee2 	bne.w	80170ee <_strtod_l+0xae>
 801732a:	2a69      	cmp	r2, #105	@ 0x69
 801732c:	d027      	beq.n	801737e <_strtod_l+0x33e>
 801732e:	dc24      	bgt.n	801737a <_strtod_l+0x33a>
 8017330:	2a49      	cmp	r2, #73	@ 0x49
 8017332:	d024      	beq.n	801737e <_strtod_l+0x33e>
 8017334:	2a4e      	cmp	r2, #78	@ 0x4e
 8017336:	f47f aeda 	bne.w	80170ee <_strtod_l+0xae>
 801733a:	4997      	ldr	r1, [pc, #604]	@ (8017598 <_strtod_l+0x558>)
 801733c:	a811      	add	r0, sp, #68	@ 0x44
 801733e:	f002 fc5d 	bl	8019bfc <__match>
 8017342:	2800      	cmp	r0, #0
 8017344:	f43f aed3 	beq.w	80170ee <_strtod_l+0xae>
 8017348:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	2b28      	cmp	r3, #40	@ 0x28
 801734e:	d12d      	bne.n	80173ac <_strtod_l+0x36c>
 8017350:	4992      	ldr	r1, [pc, #584]	@ (801759c <_strtod_l+0x55c>)
 8017352:	aa14      	add	r2, sp, #80	@ 0x50
 8017354:	a811      	add	r0, sp, #68	@ 0x44
 8017356:	f002 fc65 	bl	8019c24 <__hexnan>
 801735a:	2805      	cmp	r0, #5
 801735c:	d126      	bne.n	80173ac <_strtod_l+0x36c>
 801735e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017360:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8017364:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017368:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801736c:	e6a3      	b.n	80170b6 <_strtod_l+0x76>
 801736e:	240a      	movs	r4, #10
 8017370:	fb04 2c0c 	mla	ip, r4, ip, r2
 8017374:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8017378:	e7b8      	b.n	80172ec <_strtod_l+0x2ac>
 801737a:	2a6e      	cmp	r2, #110	@ 0x6e
 801737c:	e7db      	b.n	8017336 <_strtod_l+0x2f6>
 801737e:	4988      	ldr	r1, [pc, #544]	@ (80175a0 <_strtod_l+0x560>)
 8017380:	a811      	add	r0, sp, #68	@ 0x44
 8017382:	f002 fc3b 	bl	8019bfc <__match>
 8017386:	2800      	cmp	r0, #0
 8017388:	f43f aeb1 	beq.w	80170ee <_strtod_l+0xae>
 801738c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801738e:	4985      	ldr	r1, [pc, #532]	@ (80175a4 <_strtod_l+0x564>)
 8017390:	3b01      	subs	r3, #1
 8017392:	a811      	add	r0, sp, #68	@ 0x44
 8017394:	9311      	str	r3, [sp, #68]	@ 0x44
 8017396:	f002 fc31 	bl	8019bfc <__match>
 801739a:	b910      	cbnz	r0, 80173a2 <_strtod_l+0x362>
 801739c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801739e:	3301      	adds	r3, #1
 80173a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80173a2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80175b8 <_strtod_l+0x578>
 80173a6:	f04f 0a00 	mov.w	sl, #0
 80173aa:	e684      	b.n	80170b6 <_strtod_l+0x76>
 80173ac:	487e      	ldr	r0, [pc, #504]	@ (80175a8 <_strtod_l+0x568>)
 80173ae:	f001 fb63 	bl	8018a78 <nan>
 80173b2:	ec5b ab10 	vmov	sl, fp, d0
 80173b6:	e67e      	b.n	80170b6 <_strtod_l+0x76>
 80173b8:	ee07 9a90 	vmov	s15, r9
 80173bc:	1be2      	subs	r2, r4, r7
 80173be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80173c2:	2d00      	cmp	r5, #0
 80173c4:	bf08      	it	eq
 80173c6:	461d      	moveq	r5, r3
 80173c8:	2b10      	cmp	r3, #16
 80173ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80173cc:	461a      	mov	r2, r3
 80173ce:	bfa8      	it	ge
 80173d0:	2210      	movge	r2, #16
 80173d2:	2b09      	cmp	r3, #9
 80173d4:	ec5b ab17 	vmov	sl, fp, d7
 80173d8:	dc15      	bgt.n	8017406 <_strtod_l+0x3c6>
 80173da:	1be1      	subs	r1, r4, r7
 80173dc:	2900      	cmp	r1, #0
 80173de:	f43f ae6a 	beq.w	80170b6 <_strtod_l+0x76>
 80173e2:	eba4 0107 	sub.w	r1, r4, r7
 80173e6:	dd72      	ble.n	80174ce <_strtod_l+0x48e>
 80173e8:	2916      	cmp	r1, #22
 80173ea:	dc59      	bgt.n	80174a0 <_strtod_l+0x460>
 80173ec:	4b6f      	ldr	r3, [pc, #444]	@ (80175ac <_strtod_l+0x56c>)
 80173ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80173f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173f4:	ed93 7b00 	vldr	d7, [r3]
 80173f8:	ec4b ab16 	vmov	d6, sl, fp
 80173fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017400:	ec5b ab17 	vmov	sl, fp, d7
 8017404:	e657      	b.n	80170b6 <_strtod_l+0x76>
 8017406:	4969      	ldr	r1, [pc, #420]	@ (80175ac <_strtod_l+0x56c>)
 8017408:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801740c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017410:	ee06 6a90 	vmov	s13, r6
 8017414:	2b0f      	cmp	r3, #15
 8017416:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801741a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801741e:	ec5b ab16 	vmov	sl, fp, d6
 8017422:	ddda      	ble.n	80173da <_strtod_l+0x39a>
 8017424:	1a9a      	subs	r2, r3, r2
 8017426:	1be1      	subs	r1, r4, r7
 8017428:	440a      	add	r2, r1
 801742a:	2a00      	cmp	r2, #0
 801742c:	f340 8094 	ble.w	8017558 <_strtod_l+0x518>
 8017430:	f012 000f 	ands.w	r0, r2, #15
 8017434:	d00a      	beq.n	801744c <_strtod_l+0x40c>
 8017436:	495d      	ldr	r1, [pc, #372]	@ (80175ac <_strtod_l+0x56c>)
 8017438:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801743c:	ed91 7b00 	vldr	d7, [r1]
 8017440:	ec4b ab16 	vmov	d6, sl, fp
 8017444:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017448:	ec5b ab17 	vmov	sl, fp, d7
 801744c:	f032 020f 	bics.w	r2, r2, #15
 8017450:	d073      	beq.n	801753a <_strtod_l+0x4fa>
 8017452:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017456:	dd47      	ble.n	80174e8 <_strtod_l+0x4a8>
 8017458:	2400      	movs	r4, #0
 801745a:	4625      	mov	r5, r4
 801745c:	9407      	str	r4, [sp, #28]
 801745e:	4626      	mov	r6, r4
 8017460:	9a05      	ldr	r2, [sp, #20]
 8017462:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80175b8 <_strtod_l+0x578>
 8017466:	2322      	movs	r3, #34	@ 0x22
 8017468:	6013      	str	r3, [r2, #0]
 801746a:	f04f 0a00 	mov.w	sl, #0
 801746e:	9b07      	ldr	r3, [sp, #28]
 8017470:	2b00      	cmp	r3, #0
 8017472:	f43f ae20 	beq.w	80170b6 <_strtod_l+0x76>
 8017476:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017478:	9805      	ldr	r0, [sp, #20]
 801747a:	f002 fcc1 	bl	8019e00 <_Bfree>
 801747e:	9805      	ldr	r0, [sp, #20]
 8017480:	4631      	mov	r1, r6
 8017482:	f002 fcbd 	bl	8019e00 <_Bfree>
 8017486:	9805      	ldr	r0, [sp, #20]
 8017488:	4629      	mov	r1, r5
 801748a:	f002 fcb9 	bl	8019e00 <_Bfree>
 801748e:	9907      	ldr	r1, [sp, #28]
 8017490:	9805      	ldr	r0, [sp, #20]
 8017492:	f002 fcb5 	bl	8019e00 <_Bfree>
 8017496:	9805      	ldr	r0, [sp, #20]
 8017498:	4621      	mov	r1, r4
 801749a:	f002 fcb1 	bl	8019e00 <_Bfree>
 801749e:	e60a      	b.n	80170b6 <_strtod_l+0x76>
 80174a0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80174a4:	1be0      	subs	r0, r4, r7
 80174a6:	4281      	cmp	r1, r0
 80174a8:	dbbc      	blt.n	8017424 <_strtod_l+0x3e4>
 80174aa:	4a40      	ldr	r2, [pc, #256]	@ (80175ac <_strtod_l+0x56c>)
 80174ac:	f1c3 030f 	rsb	r3, r3, #15
 80174b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80174b4:	ed91 7b00 	vldr	d7, [r1]
 80174b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80174ba:	ec4b ab16 	vmov	d6, sl, fp
 80174be:	1acb      	subs	r3, r1, r3
 80174c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80174c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80174c8:	ed92 6b00 	vldr	d6, [r2]
 80174cc:	e796      	b.n	80173fc <_strtod_l+0x3bc>
 80174ce:	3116      	adds	r1, #22
 80174d0:	dba8      	blt.n	8017424 <_strtod_l+0x3e4>
 80174d2:	4b36      	ldr	r3, [pc, #216]	@ (80175ac <_strtod_l+0x56c>)
 80174d4:	1b3c      	subs	r4, r7, r4
 80174d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80174da:	ed94 7b00 	vldr	d7, [r4]
 80174de:	ec4b ab16 	vmov	d6, sl, fp
 80174e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80174e6:	e78b      	b.n	8017400 <_strtod_l+0x3c0>
 80174e8:	2000      	movs	r0, #0
 80174ea:	ec4b ab17 	vmov	d7, sl, fp
 80174ee:	4e30      	ldr	r6, [pc, #192]	@ (80175b0 <_strtod_l+0x570>)
 80174f0:	1112      	asrs	r2, r2, #4
 80174f2:	4601      	mov	r1, r0
 80174f4:	2a01      	cmp	r2, #1
 80174f6:	dc23      	bgt.n	8017540 <_strtod_l+0x500>
 80174f8:	b108      	cbz	r0, 80174fe <_strtod_l+0x4be>
 80174fa:	ec5b ab17 	vmov	sl, fp, d7
 80174fe:	4a2c      	ldr	r2, [pc, #176]	@ (80175b0 <_strtod_l+0x570>)
 8017500:	482c      	ldr	r0, [pc, #176]	@ (80175b4 <_strtod_l+0x574>)
 8017502:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017506:	ed92 7b00 	vldr	d7, [r2]
 801750a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801750e:	ec4b ab16 	vmov	d6, sl, fp
 8017512:	4a29      	ldr	r2, [pc, #164]	@ (80175b8 <_strtod_l+0x578>)
 8017514:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017518:	ee17 1a90 	vmov	r1, s15
 801751c:	400a      	ands	r2, r1
 801751e:	4282      	cmp	r2, r0
 8017520:	ec5b ab17 	vmov	sl, fp, d7
 8017524:	d898      	bhi.n	8017458 <_strtod_l+0x418>
 8017526:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801752a:	4282      	cmp	r2, r0
 801752c:	bf86      	itte	hi
 801752e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80175bc <_strtod_l+0x57c>
 8017532:	f04f 3aff 	movhi.w	sl, #4294967295
 8017536:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801753a:	2200      	movs	r2, #0
 801753c:	9206      	str	r2, [sp, #24]
 801753e:	e076      	b.n	801762e <_strtod_l+0x5ee>
 8017540:	f012 0f01 	tst.w	r2, #1
 8017544:	d004      	beq.n	8017550 <_strtod_l+0x510>
 8017546:	ed96 6b00 	vldr	d6, [r6]
 801754a:	2001      	movs	r0, #1
 801754c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017550:	3101      	adds	r1, #1
 8017552:	1052      	asrs	r2, r2, #1
 8017554:	3608      	adds	r6, #8
 8017556:	e7cd      	b.n	80174f4 <_strtod_l+0x4b4>
 8017558:	d0ef      	beq.n	801753a <_strtod_l+0x4fa>
 801755a:	4252      	negs	r2, r2
 801755c:	f012 000f 	ands.w	r0, r2, #15
 8017560:	d00a      	beq.n	8017578 <_strtod_l+0x538>
 8017562:	4912      	ldr	r1, [pc, #72]	@ (80175ac <_strtod_l+0x56c>)
 8017564:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017568:	ed91 7b00 	vldr	d7, [r1]
 801756c:	ec4b ab16 	vmov	d6, sl, fp
 8017570:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017574:	ec5b ab17 	vmov	sl, fp, d7
 8017578:	1112      	asrs	r2, r2, #4
 801757a:	d0de      	beq.n	801753a <_strtod_l+0x4fa>
 801757c:	2a1f      	cmp	r2, #31
 801757e:	dd1f      	ble.n	80175c0 <_strtod_l+0x580>
 8017580:	2400      	movs	r4, #0
 8017582:	4625      	mov	r5, r4
 8017584:	9407      	str	r4, [sp, #28]
 8017586:	4626      	mov	r6, r4
 8017588:	9a05      	ldr	r2, [sp, #20]
 801758a:	2322      	movs	r3, #34	@ 0x22
 801758c:	f04f 0a00 	mov.w	sl, #0
 8017590:	f04f 0b00 	mov.w	fp, #0
 8017594:	6013      	str	r3, [r2, #0]
 8017596:	e76a      	b.n	801746e <_strtod_l+0x42e>
 8017598:	08021746 	.word	0x08021746
 801759c:	080215e8 	.word	0x080215e8
 80175a0:	0802173e 	.word	0x0802173e
 80175a4:	08021778 	.word	0x08021778
 80175a8:	080215e2 	.word	0x080215e2
 80175ac:	080218f0 	.word	0x080218f0
 80175b0:	080218c8 	.word	0x080218c8
 80175b4:	7ca00000 	.word	0x7ca00000
 80175b8:	7ff00000 	.word	0x7ff00000
 80175bc:	7fefffff 	.word	0x7fefffff
 80175c0:	f012 0110 	ands.w	r1, r2, #16
 80175c4:	bf18      	it	ne
 80175c6:	216a      	movne	r1, #106	@ 0x6a
 80175c8:	9106      	str	r1, [sp, #24]
 80175ca:	ec4b ab17 	vmov	d7, sl, fp
 80175ce:	49b0      	ldr	r1, [pc, #704]	@ (8017890 <_strtod_l+0x850>)
 80175d0:	2000      	movs	r0, #0
 80175d2:	07d6      	lsls	r6, r2, #31
 80175d4:	d504      	bpl.n	80175e0 <_strtod_l+0x5a0>
 80175d6:	ed91 6b00 	vldr	d6, [r1]
 80175da:	2001      	movs	r0, #1
 80175dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80175e0:	1052      	asrs	r2, r2, #1
 80175e2:	f101 0108 	add.w	r1, r1, #8
 80175e6:	d1f4      	bne.n	80175d2 <_strtod_l+0x592>
 80175e8:	b108      	cbz	r0, 80175ee <_strtod_l+0x5ae>
 80175ea:	ec5b ab17 	vmov	sl, fp, d7
 80175ee:	9a06      	ldr	r2, [sp, #24]
 80175f0:	b1b2      	cbz	r2, 8017620 <_strtod_l+0x5e0>
 80175f2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80175f6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80175fa:	2a00      	cmp	r2, #0
 80175fc:	4658      	mov	r0, fp
 80175fe:	dd0f      	ble.n	8017620 <_strtod_l+0x5e0>
 8017600:	2a1f      	cmp	r2, #31
 8017602:	dd55      	ble.n	80176b0 <_strtod_l+0x670>
 8017604:	2a34      	cmp	r2, #52	@ 0x34
 8017606:	bfde      	ittt	le
 8017608:	f04f 32ff 	movle.w	r2, #4294967295
 801760c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8017610:	408a      	lslle	r2, r1
 8017612:	f04f 0a00 	mov.w	sl, #0
 8017616:	bfcc      	ite	gt
 8017618:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801761c:	ea02 0b00 	andle.w	fp, r2, r0
 8017620:	ec4b ab17 	vmov	d7, sl, fp
 8017624:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801762c:	d0a8      	beq.n	8017580 <_strtod_l+0x540>
 801762e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017630:	9805      	ldr	r0, [sp, #20]
 8017632:	f8cd 9000 	str.w	r9, [sp]
 8017636:	462a      	mov	r2, r5
 8017638:	f002 fc4a 	bl	8019ed0 <__s2b>
 801763c:	9007      	str	r0, [sp, #28]
 801763e:	2800      	cmp	r0, #0
 8017640:	f43f af0a 	beq.w	8017458 <_strtod_l+0x418>
 8017644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017646:	1b3f      	subs	r7, r7, r4
 8017648:	2b00      	cmp	r3, #0
 801764a:	bfb4      	ite	lt
 801764c:	463b      	movlt	r3, r7
 801764e:	2300      	movge	r3, #0
 8017650:	930a      	str	r3, [sp, #40]	@ 0x28
 8017652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017654:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017880 <_strtod_l+0x840>
 8017658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801765c:	2400      	movs	r4, #0
 801765e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017660:	4625      	mov	r5, r4
 8017662:	9b07      	ldr	r3, [sp, #28]
 8017664:	9805      	ldr	r0, [sp, #20]
 8017666:	6859      	ldr	r1, [r3, #4]
 8017668:	f002 fb8a 	bl	8019d80 <_Balloc>
 801766c:	4606      	mov	r6, r0
 801766e:	2800      	cmp	r0, #0
 8017670:	f43f aef6 	beq.w	8017460 <_strtod_l+0x420>
 8017674:	9b07      	ldr	r3, [sp, #28]
 8017676:	691a      	ldr	r2, [r3, #16]
 8017678:	ec4b ab19 	vmov	d9, sl, fp
 801767c:	3202      	adds	r2, #2
 801767e:	f103 010c 	add.w	r1, r3, #12
 8017682:	0092      	lsls	r2, r2, #2
 8017684:	300c      	adds	r0, #12
 8017686:	f001 f9e6 	bl	8018a56 <memcpy>
 801768a:	eeb0 0b49 	vmov.f64	d0, d9
 801768e:	9805      	ldr	r0, [sp, #20]
 8017690:	aa14      	add	r2, sp, #80	@ 0x50
 8017692:	a913      	add	r1, sp, #76	@ 0x4c
 8017694:	f002 ff58 	bl	801a548 <__d2b>
 8017698:	9012      	str	r0, [sp, #72]	@ 0x48
 801769a:	2800      	cmp	r0, #0
 801769c:	f43f aee0 	beq.w	8017460 <_strtod_l+0x420>
 80176a0:	9805      	ldr	r0, [sp, #20]
 80176a2:	2101      	movs	r1, #1
 80176a4:	f002 fcaa 	bl	8019ffc <__i2b>
 80176a8:	4605      	mov	r5, r0
 80176aa:	b940      	cbnz	r0, 80176be <_strtod_l+0x67e>
 80176ac:	2500      	movs	r5, #0
 80176ae:	e6d7      	b.n	8017460 <_strtod_l+0x420>
 80176b0:	f04f 31ff 	mov.w	r1, #4294967295
 80176b4:	fa01 f202 	lsl.w	r2, r1, r2
 80176b8:	ea02 0a0a 	and.w	sl, r2, sl
 80176bc:	e7b0      	b.n	8017620 <_strtod_l+0x5e0>
 80176be:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80176c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80176c2:	2f00      	cmp	r7, #0
 80176c4:	bfab      	itete	ge
 80176c6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80176c8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80176ca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80176ce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80176d2:	bfac      	ite	ge
 80176d4:	eb07 0903 	addge.w	r9, r7, r3
 80176d8:	eba3 0807 	sublt.w	r8, r3, r7
 80176dc:	9b06      	ldr	r3, [sp, #24]
 80176de:	1aff      	subs	r7, r7, r3
 80176e0:	4417      	add	r7, r2
 80176e2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80176e6:	4a6b      	ldr	r2, [pc, #428]	@ (8017894 <_strtod_l+0x854>)
 80176e8:	3f01      	subs	r7, #1
 80176ea:	4297      	cmp	r7, r2
 80176ec:	da51      	bge.n	8017792 <_strtod_l+0x752>
 80176ee:	1bd1      	subs	r1, r2, r7
 80176f0:	291f      	cmp	r1, #31
 80176f2:	eba3 0301 	sub.w	r3, r3, r1
 80176f6:	f04f 0201 	mov.w	r2, #1
 80176fa:	dc3e      	bgt.n	801777a <_strtod_l+0x73a>
 80176fc:	408a      	lsls	r2, r1
 80176fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8017700:	2200      	movs	r2, #0
 8017702:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017704:	eb09 0703 	add.w	r7, r9, r3
 8017708:	4498      	add	r8, r3
 801770a:	9b06      	ldr	r3, [sp, #24]
 801770c:	45b9      	cmp	r9, r7
 801770e:	4498      	add	r8, r3
 8017710:	464b      	mov	r3, r9
 8017712:	bfa8      	it	ge
 8017714:	463b      	movge	r3, r7
 8017716:	4543      	cmp	r3, r8
 8017718:	bfa8      	it	ge
 801771a:	4643      	movge	r3, r8
 801771c:	2b00      	cmp	r3, #0
 801771e:	bfc2      	ittt	gt
 8017720:	1aff      	subgt	r7, r7, r3
 8017722:	eba8 0803 	subgt.w	r8, r8, r3
 8017726:	eba9 0903 	subgt.w	r9, r9, r3
 801772a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801772c:	2b00      	cmp	r3, #0
 801772e:	dd16      	ble.n	801775e <_strtod_l+0x71e>
 8017730:	4629      	mov	r1, r5
 8017732:	9805      	ldr	r0, [sp, #20]
 8017734:	461a      	mov	r2, r3
 8017736:	f002 fd21 	bl	801a17c <__pow5mult>
 801773a:	4605      	mov	r5, r0
 801773c:	2800      	cmp	r0, #0
 801773e:	d0b5      	beq.n	80176ac <_strtod_l+0x66c>
 8017740:	4601      	mov	r1, r0
 8017742:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017744:	9805      	ldr	r0, [sp, #20]
 8017746:	f002 fc6f 	bl	801a028 <__multiply>
 801774a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801774c:	2800      	cmp	r0, #0
 801774e:	f43f ae87 	beq.w	8017460 <_strtod_l+0x420>
 8017752:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017754:	9805      	ldr	r0, [sp, #20]
 8017756:	f002 fb53 	bl	8019e00 <_Bfree>
 801775a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801775c:	9312      	str	r3, [sp, #72]	@ 0x48
 801775e:	2f00      	cmp	r7, #0
 8017760:	dc1b      	bgt.n	801779a <_strtod_l+0x75a>
 8017762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017764:	2b00      	cmp	r3, #0
 8017766:	dd21      	ble.n	80177ac <_strtod_l+0x76c>
 8017768:	4631      	mov	r1, r6
 801776a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801776c:	9805      	ldr	r0, [sp, #20]
 801776e:	f002 fd05 	bl	801a17c <__pow5mult>
 8017772:	4606      	mov	r6, r0
 8017774:	b9d0      	cbnz	r0, 80177ac <_strtod_l+0x76c>
 8017776:	2600      	movs	r6, #0
 8017778:	e672      	b.n	8017460 <_strtod_l+0x420>
 801777a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801777e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8017782:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017786:	37e2      	adds	r7, #226	@ 0xe2
 8017788:	fa02 f107 	lsl.w	r1, r2, r7
 801778c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801778e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017790:	e7b8      	b.n	8017704 <_strtod_l+0x6c4>
 8017792:	2200      	movs	r2, #0
 8017794:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017796:	2201      	movs	r2, #1
 8017798:	e7f9      	b.n	801778e <_strtod_l+0x74e>
 801779a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801779c:	9805      	ldr	r0, [sp, #20]
 801779e:	463a      	mov	r2, r7
 80177a0:	f002 fd46 	bl	801a230 <__lshift>
 80177a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80177a6:	2800      	cmp	r0, #0
 80177a8:	d1db      	bne.n	8017762 <_strtod_l+0x722>
 80177aa:	e659      	b.n	8017460 <_strtod_l+0x420>
 80177ac:	f1b8 0f00 	cmp.w	r8, #0
 80177b0:	dd07      	ble.n	80177c2 <_strtod_l+0x782>
 80177b2:	4631      	mov	r1, r6
 80177b4:	9805      	ldr	r0, [sp, #20]
 80177b6:	4642      	mov	r2, r8
 80177b8:	f002 fd3a 	bl	801a230 <__lshift>
 80177bc:	4606      	mov	r6, r0
 80177be:	2800      	cmp	r0, #0
 80177c0:	d0d9      	beq.n	8017776 <_strtod_l+0x736>
 80177c2:	f1b9 0f00 	cmp.w	r9, #0
 80177c6:	dd08      	ble.n	80177da <_strtod_l+0x79a>
 80177c8:	4629      	mov	r1, r5
 80177ca:	9805      	ldr	r0, [sp, #20]
 80177cc:	464a      	mov	r2, r9
 80177ce:	f002 fd2f 	bl	801a230 <__lshift>
 80177d2:	4605      	mov	r5, r0
 80177d4:	2800      	cmp	r0, #0
 80177d6:	f43f ae43 	beq.w	8017460 <_strtod_l+0x420>
 80177da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80177dc:	9805      	ldr	r0, [sp, #20]
 80177de:	4632      	mov	r2, r6
 80177e0:	f002 fdae 	bl	801a340 <__mdiff>
 80177e4:	4604      	mov	r4, r0
 80177e6:	2800      	cmp	r0, #0
 80177e8:	f43f ae3a 	beq.w	8017460 <_strtod_l+0x420>
 80177ec:	2300      	movs	r3, #0
 80177ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80177f2:	60c3      	str	r3, [r0, #12]
 80177f4:	4629      	mov	r1, r5
 80177f6:	f002 fd87 	bl	801a308 <__mcmp>
 80177fa:	2800      	cmp	r0, #0
 80177fc:	da4e      	bge.n	801789c <_strtod_l+0x85c>
 80177fe:	ea58 080a 	orrs.w	r8, r8, sl
 8017802:	d174      	bne.n	80178ee <_strtod_l+0x8ae>
 8017804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017808:	2b00      	cmp	r3, #0
 801780a:	d170      	bne.n	80178ee <_strtod_l+0x8ae>
 801780c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017810:	0d1b      	lsrs	r3, r3, #20
 8017812:	051b      	lsls	r3, r3, #20
 8017814:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017818:	d969      	bls.n	80178ee <_strtod_l+0x8ae>
 801781a:	6963      	ldr	r3, [r4, #20]
 801781c:	b913      	cbnz	r3, 8017824 <_strtod_l+0x7e4>
 801781e:	6923      	ldr	r3, [r4, #16]
 8017820:	2b01      	cmp	r3, #1
 8017822:	dd64      	ble.n	80178ee <_strtod_l+0x8ae>
 8017824:	4621      	mov	r1, r4
 8017826:	2201      	movs	r2, #1
 8017828:	9805      	ldr	r0, [sp, #20]
 801782a:	f002 fd01 	bl	801a230 <__lshift>
 801782e:	4629      	mov	r1, r5
 8017830:	4604      	mov	r4, r0
 8017832:	f002 fd69 	bl	801a308 <__mcmp>
 8017836:	2800      	cmp	r0, #0
 8017838:	dd59      	ble.n	80178ee <_strtod_l+0x8ae>
 801783a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801783e:	9a06      	ldr	r2, [sp, #24]
 8017840:	0d1b      	lsrs	r3, r3, #20
 8017842:	051b      	lsls	r3, r3, #20
 8017844:	2a00      	cmp	r2, #0
 8017846:	d070      	beq.n	801792a <_strtod_l+0x8ea>
 8017848:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801784c:	d86d      	bhi.n	801792a <_strtod_l+0x8ea>
 801784e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017852:	f67f ae99 	bls.w	8017588 <_strtod_l+0x548>
 8017856:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017888 <_strtod_l+0x848>
 801785a:	ec4b ab16 	vmov	d6, sl, fp
 801785e:	4b0e      	ldr	r3, [pc, #56]	@ (8017898 <_strtod_l+0x858>)
 8017860:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017864:	ee17 2a90 	vmov	r2, s15
 8017868:	4013      	ands	r3, r2
 801786a:	ec5b ab17 	vmov	sl, fp, d7
 801786e:	2b00      	cmp	r3, #0
 8017870:	f47f ae01 	bne.w	8017476 <_strtod_l+0x436>
 8017874:	9a05      	ldr	r2, [sp, #20]
 8017876:	2322      	movs	r3, #34	@ 0x22
 8017878:	6013      	str	r3, [r2, #0]
 801787a:	e5fc      	b.n	8017476 <_strtod_l+0x436>
 801787c:	f3af 8000 	nop.w
 8017880:	ffc00000 	.word	0xffc00000
 8017884:	41dfffff 	.word	0x41dfffff
 8017888:	00000000 	.word	0x00000000
 801788c:	39500000 	.word	0x39500000
 8017890:	08021610 	.word	0x08021610
 8017894:	fffffc02 	.word	0xfffffc02
 8017898:	7ff00000 	.word	0x7ff00000
 801789c:	46d9      	mov	r9, fp
 801789e:	d15d      	bne.n	801795c <_strtod_l+0x91c>
 80178a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80178a4:	f1b8 0f00 	cmp.w	r8, #0
 80178a8:	d02a      	beq.n	8017900 <_strtod_l+0x8c0>
 80178aa:	4aab      	ldr	r2, [pc, #684]	@ (8017b58 <_strtod_l+0xb18>)
 80178ac:	4293      	cmp	r3, r2
 80178ae:	d12a      	bne.n	8017906 <_strtod_l+0x8c6>
 80178b0:	9b06      	ldr	r3, [sp, #24]
 80178b2:	4652      	mov	r2, sl
 80178b4:	b1fb      	cbz	r3, 80178f6 <_strtod_l+0x8b6>
 80178b6:	4ba9      	ldr	r3, [pc, #676]	@ (8017b5c <_strtod_l+0xb1c>)
 80178b8:	ea0b 0303 	and.w	r3, fp, r3
 80178bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80178c0:	f04f 31ff 	mov.w	r1, #4294967295
 80178c4:	d81a      	bhi.n	80178fc <_strtod_l+0x8bc>
 80178c6:	0d1b      	lsrs	r3, r3, #20
 80178c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80178cc:	fa01 f303 	lsl.w	r3, r1, r3
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d118      	bne.n	8017906 <_strtod_l+0x8c6>
 80178d4:	4ba2      	ldr	r3, [pc, #648]	@ (8017b60 <_strtod_l+0xb20>)
 80178d6:	4599      	cmp	r9, r3
 80178d8:	d102      	bne.n	80178e0 <_strtod_l+0x8a0>
 80178da:	3201      	adds	r2, #1
 80178dc:	f43f adc0 	beq.w	8017460 <_strtod_l+0x420>
 80178e0:	4b9e      	ldr	r3, [pc, #632]	@ (8017b5c <_strtod_l+0xb1c>)
 80178e2:	ea09 0303 	and.w	r3, r9, r3
 80178e6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80178ea:	f04f 0a00 	mov.w	sl, #0
 80178ee:	9b06      	ldr	r3, [sp, #24]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d1b0      	bne.n	8017856 <_strtod_l+0x816>
 80178f4:	e5bf      	b.n	8017476 <_strtod_l+0x436>
 80178f6:	f04f 33ff 	mov.w	r3, #4294967295
 80178fa:	e7e9      	b.n	80178d0 <_strtod_l+0x890>
 80178fc:	460b      	mov	r3, r1
 80178fe:	e7e7      	b.n	80178d0 <_strtod_l+0x890>
 8017900:	ea53 030a 	orrs.w	r3, r3, sl
 8017904:	d099      	beq.n	801783a <_strtod_l+0x7fa>
 8017906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017908:	b1c3      	cbz	r3, 801793c <_strtod_l+0x8fc>
 801790a:	ea13 0f09 	tst.w	r3, r9
 801790e:	d0ee      	beq.n	80178ee <_strtod_l+0x8ae>
 8017910:	9a06      	ldr	r2, [sp, #24]
 8017912:	4650      	mov	r0, sl
 8017914:	4659      	mov	r1, fp
 8017916:	f1b8 0f00 	cmp.w	r8, #0
 801791a:	d013      	beq.n	8017944 <_strtod_l+0x904>
 801791c:	f7ff fb76 	bl	801700c <sulp>
 8017920:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017924:	ec5b ab17 	vmov	sl, fp, d7
 8017928:	e7e1      	b.n	80178ee <_strtod_l+0x8ae>
 801792a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801792e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017932:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017936:	f04f 3aff 	mov.w	sl, #4294967295
 801793a:	e7d8      	b.n	80178ee <_strtod_l+0x8ae>
 801793c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801793e:	ea13 0f0a 	tst.w	r3, sl
 8017942:	e7e4      	b.n	801790e <_strtod_l+0x8ce>
 8017944:	f7ff fb62 	bl	801700c <sulp>
 8017948:	ee39 0b40 	vsub.f64	d0, d9, d0
 801794c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017954:	ec5b ab10 	vmov	sl, fp, d0
 8017958:	d1c9      	bne.n	80178ee <_strtod_l+0x8ae>
 801795a:	e615      	b.n	8017588 <_strtod_l+0x548>
 801795c:	4629      	mov	r1, r5
 801795e:	4620      	mov	r0, r4
 8017960:	f002 fe4a 	bl	801a5f8 <__ratio>
 8017964:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017968:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801796c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017970:	d85d      	bhi.n	8017a2e <_strtod_l+0x9ee>
 8017972:	f1b8 0f00 	cmp.w	r8, #0
 8017976:	d164      	bne.n	8017a42 <_strtod_l+0xa02>
 8017978:	f1ba 0f00 	cmp.w	sl, #0
 801797c:	d14b      	bne.n	8017a16 <_strtod_l+0x9d6>
 801797e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017982:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017986:	2b00      	cmp	r3, #0
 8017988:	d160      	bne.n	8017a4c <_strtod_l+0xa0c>
 801798a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801798e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017996:	d401      	bmi.n	801799c <_strtod_l+0x95c>
 8017998:	ee20 8b08 	vmul.f64	d8, d0, d8
 801799c:	eeb1 ab48 	vneg.f64	d10, d8
 80179a0:	486e      	ldr	r0, [pc, #440]	@ (8017b5c <_strtod_l+0xb1c>)
 80179a2:	4970      	ldr	r1, [pc, #448]	@ (8017b64 <_strtod_l+0xb24>)
 80179a4:	ea09 0700 	and.w	r7, r9, r0
 80179a8:	428f      	cmp	r7, r1
 80179aa:	ec53 2b1a 	vmov	r2, r3, d10
 80179ae:	d17d      	bne.n	8017aac <_strtod_l+0xa6c>
 80179b0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80179b4:	ec4b ab1c 	vmov	d12, sl, fp
 80179b8:	eeb0 0b4c 	vmov.f64	d0, d12
 80179bc:	f002 fd54 	bl	801a468 <__ulp>
 80179c0:	4866      	ldr	r0, [pc, #408]	@ (8017b5c <_strtod_l+0xb1c>)
 80179c2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80179c6:	ee1c 3a90 	vmov	r3, s25
 80179ca:	4a67      	ldr	r2, [pc, #412]	@ (8017b68 <_strtod_l+0xb28>)
 80179cc:	ea03 0100 	and.w	r1, r3, r0
 80179d0:	4291      	cmp	r1, r2
 80179d2:	ec5b ab1c 	vmov	sl, fp, d12
 80179d6:	d93c      	bls.n	8017a52 <_strtod_l+0xa12>
 80179d8:	ee19 2a90 	vmov	r2, s19
 80179dc:	4b60      	ldr	r3, [pc, #384]	@ (8017b60 <_strtod_l+0xb20>)
 80179de:	429a      	cmp	r2, r3
 80179e0:	d104      	bne.n	80179ec <_strtod_l+0x9ac>
 80179e2:	ee19 3a10 	vmov	r3, s18
 80179e6:	3301      	adds	r3, #1
 80179e8:	f43f ad3a 	beq.w	8017460 <_strtod_l+0x420>
 80179ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8017b60 <_strtod_l+0xb20>
 80179f0:	f04f 3aff 	mov.w	sl, #4294967295
 80179f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80179f6:	9805      	ldr	r0, [sp, #20]
 80179f8:	f002 fa02 	bl	8019e00 <_Bfree>
 80179fc:	9805      	ldr	r0, [sp, #20]
 80179fe:	4631      	mov	r1, r6
 8017a00:	f002 f9fe 	bl	8019e00 <_Bfree>
 8017a04:	9805      	ldr	r0, [sp, #20]
 8017a06:	4629      	mov	r1, r5
 8017a08:	f002 f9fa 	bl	8019e00 <_Bfree>
 8017a0c:	9805      	ldr	r0, [sp, #20]
 8017a0e:	4621      	mov	r1, r4
 8017a10:	f002 f9f6 	bl	8019e00 <_Bfree>
 8017a14:	e625      	b.n	8017662 <_strtod_l+0x622>
 8017a16:	f1ba 0f01 	cmp.w	sl, #1
 8017a1a:	d103      	bne.n	8017a24 <_strtod_l+0x9e4>
 8017a1c:	f1bb 0f00 	cmp.w	fp, #0
 8017a20:	f43f adb2 	beq.w	8017588 <_strtod_l+0x548>
 8017a24:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017a28:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017a2c:	e7b8      	b.n	80179a0 <_strtod_l+0x960>
 8017a2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017a32:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017a36:	f1b8 0f00 	cmp.w	r8, #0
 8017a3a:	d0af      	beq.n	801799c <_strtod_l+0x95c>
 8017a3c:	eeb0 ab48 	vmov.f64	d10, d8
 8017a40:	e7ae      	b.n	80179a0 <_strtod_l+0x960>
 8017a42:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8017a46:	eeb0 8b4a 	vmov.f64	d8, d10
 8017a4a:	e7a9      	b.n	80179a0 <_strtod_l+0x960>
 8017a4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017a50:	e7a6      	b.n	80179a0 <_strtod_l+0x960>
 8017a52:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017a56:	9b06      	ldr	r3, [sp, #24]
 8017a58:	46d9      	mov	r9, fp
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d1ca      	bne.n	80179f4 <_strtod_l+0x9b4>
 8017a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017a62:	0d1b      	lsrs	r3, r3, #20
 8017a64:	051b      	lsls	r3, r3, #20
 8017a66:	429f      	cmp	r7, r3
 8017a68:	d1c4      	bne.n	80179f4 <_strtod_l+0x9b4>
 8017a6a:	ec51 0b18 	vmov	r0, r1, d8
 8017a6e:	f7e8 ff89 	bl	8000984 <__aeabi_d2lz>
 8017a72:	f7e8 fe2b 	bl	80006cc <__aeabi_l2d>
 8017a76:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8017a7a:	ec41 0b17 	vmov	d7, r0, r1
 8017a7e:	ea49 090a 	orr.w	r9, r9, sl
 8017a82:	ea59 0908 	orrs.w	r9, r9, r8
 8017a86:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017a8a:	d03c      	beq.n	8017b06 <_strtod_l+0xac6>
 8017a8c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017b40 <_strtod_l+0xb00>
 8017a90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a98:	f53f aced 	bmi.w	8017476 <_strtod_l+0x436>
 8017a9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017b48 <_strtod_l+0xb08>
 8017aa0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa8:	dda4      	ble.n	80179f4 <_strtod_l+0x9b4>
 8017aaa:	e4e4      	b.n	8017476 <_strtod_l+0x436>
 8017aac:	9906      	ldr	r1, [sp, #24]
 8017aae:	b1e1      	cbz	r1, 8017aea <_strtod_l+0xaaa>
 8017ab0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8017ab4:	d819      	bhi.n	8017aea <_strtod_l+0xaaa>
 8017ab6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8017aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017abe:	d811      	bhi.n	8017ae4 <_strtod_l+0xaa4>
 8017ac0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8017ac4:	ee18 3a10 	vmov	r3, s16
 8017ac8:	2b01      	cmp	r3, #1
 8017aca:	bf38      	it	cc
 8017acc:	2301      	movcc	r3, #1
 8017ace:	ee08 3a10 	vmov	s16, r3
 8017ad2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8017ad6:	f1b8 0f00 	cmp.w	r8, #0
 8017ada:	d111      	bne.n	8017b00 <_strtod_l+0xac0>
 8017adc:	eeb1 7b48 	vneg.f64	d7, d8
 8017ae0:	ec53 2b17 	vmov	r2, r3, d7
 8017ae4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8017ae8:	1bcb      	subs	r3, r1, r7
 8017aea:	eeb0 0b49 	vmov.f64	d0, d9
 8017aee:	ec43 2b1a 	vmov	d10, r2, r3
 8017af2:	f002 fcb9 	bl	801a468 <__ulp>
 8017af6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8017afa:	ec5b ab19 	vmov	sl, fp, d9
 8017afe:	e7aa      	b.n	8017a56 <_strtod_l+0xa16>
 8017b00:	eeb0 7b48 	vmov.f64	d7, d8
 8017b04:	e7ec      	b.n	8017ae0 <_strtod_l+0xaa0>
 8017b06:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8017b50 <_strtod_l+0xb10>
 8017b0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b12:	f57f af6f 	bpl.w	80179f4 <_strtod_l+0x9b4>
 8017b16:	e4ae      	b.n	8017476 <_strtod_l+0x436>
 8017b18:	2300      	movs	r3, #0
 8017b1a:	9308      	str	r3, [sp, #32]
 8017b1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017b20:	6013      	str	r3, [r2, #0]
 8017b22:	f7ff bacc 	b.w	80170be <_strtod_l+0x7e>
 8017b26:	2a65      	cmp	r2, #101	@ 0x65
 8017b28:	f43f abbc 	beq.w	80172a4 <_strtod_l+0x264>
 8017b2c:	2a45      	cmp	r2, #69	@ 0x45
 8017b2e:	f43f abb9 	beq.w	80172a4 <_strtod_l+0x264>
 8017b32:	2301      	movs	r3, #1
 8017b34:	9306      	str	r3, [sp, #24]
 8017b36:	f7ff bbf0 	b.w	801731a <_strtod_l+0x2da>
 8017b3a:	bf00      	nop
 8017b3c:	f3af 8000 	nop.w
 8017b40:	94a03595 	.word	0x94a03595
 8017b44:	3fdfffff 	.word	0x3fdfffff
 8017b48:	35afe535 	.word	0x35afe535
 8017b4c:	3fe00000 	.word	0x3fe00000
 8017b50:	94a03595 	.word	0x94a03595
 8017b54:	3fcfffff 	.word	0x3fcfffff
 8017b58:	000fffff 	.word	0x000fffff
 8017b5c:	7ff00000 	.word	0x7ff00000
 8017b60:	7fefffff 	.word	0x7fefffff
 8017b64:	7fe00000 	.word	0x7fe00000
 8017b68:	7c9fffff 	.word	0x7c9fffff

08017b6c <strtod>:
 8017b6c:	460a      	mov	r2, r1
 8017b6e:	4601      	mov	r1, r0
 8017b70:	4802      	ldr	r0, [pc, #8]	@ (8017b7c <strtod+0x10>)
 8017b72:	4b03      	ldr	r3, [pc, #12]	@ (8017b80 <strtod+0x14>)
 8017b74:	6800      	ldr	r0, [r0, #0]
 8017b76:	f7ff ba63 	b.w	8017040 <_strtod_l>
 8017b7a:	bf00      	nop
 8017b7c:	24000344 	.word	0x24000344
 8017b80:	240001d8 	.word	0x240001d8

08017b84 <__cvt>:
 8017b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b86:	ed2d 8b02 	vpush	{d8}
 8017b8a:	eeb0 8b40 	vmov.f64	d8, d0
 8017b8e:	b085      	sub	sp, #20
 8017b90:	4617      	mov	r7, r2
 8017b92:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017b94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017b96:	ee18 2a90 	vmov	r2, s17
 8017b9a:	f025 0520 	bic.w	r5, r5, #32
 8017b9e:	2a00      	cmp	r2, #0
 8017ba0:	bfb6      	itet	lt
 8017ba2:	222d      	movlt	r2, #45	@ 0x2d
 8017ba4:	2200      	movge	r2, #0
 8017ba6:	eeb1 8b40 	vneglt.f64	d8, d0
 8017baa:	2d46      	cmp	r5, #70	@ 0x46
 8017bac:	460c      	mov	r4, r1
 8017bae:	701a      	strb	r2, [r3, #0]
 8017bb0:	d004      	beq.n	8017bbc <__cvt+0x38>
 8017bb2:	2d45      	cmp	r5, #69	@ 0x45
 8017bb4:	d100      	bne.n	8017bb8 <__cvt+0x34>
 8017bb6:	3401      	adds	r4, #1
 8017bb8:	2102      	movs	r1, #2
 8017bba:	e000      	b.n	8017bbe <__cvt+0x3a>
 8017bbc:	2103      	movs	r1, #3
 8017bbe:	ab03      	add	r3, sp, #12
 8017bc0:	9301      	str	r3, [sp, #4]
 8017bc2:	ab02      	add	r3, sp, #8
 8017bc4:	9300      	str	r3, [sp, #0]
 8017bc6:	4622      	mov	r2, r4
 8017bc8:	4633      	mov	r3, r6
 8017bca:	eeb0 0b48 	vmov.f64	d0, d8
 8017bce:	f000 ffeb 	bl	8018ba8 <_dtoa_r>
 8017bd2:	2d47      	cmp	r5, #71	@ 0x47
 8017bd4:	d114      	bne.n	8017c00 <__cvt+0x7c>
 8017bd6:	07fb      	lsls	r3, r7, #31
 8017bd8:	d50a      	bpl.n	8017bf0 <__cvt+0x6c>
 8017bda:	1902      	adds	r2, r0, r4
 8017bdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017be4:	bf08      	it	eq
 8017be6:	9203      	streq	r2, [sp, #12]
 8017be8:	2130      	movs	r1, #48	@ 0x30
 8017bea:	9b03      	ldr	r3, [sp, #12]
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d319      	bcc.n	8017c24 <__cvt+0xa0>
 8017bf0:	9b03      	ldr	r3, [sp, #12]
 8017bf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017bf4:	1a1b      	subs	r3, r3, r0
 8017bf6:	6013      	str	r3, [r2, #0]
 8017bf8:	b005      	add	sp, #20
 8017bfa:	ecbd 8b02 	vpop	{d8}
 8017bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c00:	2d46      	cmp	r5, #70	@ 0x46
 8017c02:	eb00 0204 	add.w	r2, r0, r4
 8017c06:	d1e9      	bne.n	8017bdc <__cvt+0x58>
 8017c08:	7803      	ldrb	r3, [r0, #0]
 8017c0a:	2b30      	cmp	r3, #48	@ 0x30
 8017c0c:	d107      	bne.n	8017c1e <__cvt+0x9a>
 8017c0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c16:	bf1c      	itt	ne
 8017c18:	f1c4 0401 	rsbne	r4, r4, #1
 8017c1c:	6034      	strne	r4, [r6, #0]
 8017c1e:	6833      	ldr	r3, [r6, #0]
 8017c20:	441a      	add	r2, r3
 8017c22:	e7db      	b.n	8017bdc <__cvt+0x58>
 8017c24:	1c5c      	adds	r4, r3, #1
 8017c26:	9403      	str	r4, [sp, #12]
 8017c28:	7019      	strb	r1, [r3, #0]
 8017c2a:	e7de      	b.n	8017bea <__cvt+0x66>

08017c2c <__exponent>:
 8017c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c2e:	2900      	cmp	r1, #0
 8017c30:	bfba      	itte	lt
 8017c32:	4249      	neglt	r1, r1
 8017c34:	232d      	movlt	r3, #45	@ 0x2d
 8017c36:	232b      	movge	r3, #43	@ 0x2b
 8017c38:	2909      	cmp	r1, #9
 8017c3a:	7002      	strb	r2, [r0, #0]
 8017c3c:	7043      	strb	r3, [r0, #1]
 8017c3e:	dd29      	ble.n	8017c94 <__exponent+0x68>
 8017c40:	f10d 0307 	add.w	r3, sp, #7
 8017c44:	461d      	mov	r5, r3
 8017c46:	270a      	movs	r7, #10
 8017c48:	461a      	mov	r2, r3
 8017c4a:	fbb1 f6f7 	udiv	r6, r1, r7
 8017c4e:	fb07 1416 	mls	r4, r7, r6, r1
 8017c52:	3430      	adds	r4, #48	@ 0x30
 8017c54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017c58:	460c      	mov	r4, r1
 8017c5a:	2c63      	cmp	r4, #99	@ 0x63
 8017c5c:	f103 33ff 	add.w	r3, r3, #4294967295
 8017c60:	4631      	mov	r1, r6
 8017c62:	dcf1      	bgt.n	8017c48 <__exponent+0x1c>
 8017c64:	3130      	adds	r1, #48	@ 0x30
 8017c66:	1e94      	subs	r4, r2, #2
 8017c68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017c6c:	1c41      	adds	r1, r0, #1
 8017c6e:	4623      	mov	r3, r4
 8017c70:	42ab      	cmp	r3, r5
 8017c72:	d30a      	bcc.n	8017c8a <__exponent+0x5e>
 8017c74:	f10d 0309 	add.w	r3, sp, #9
 8017c78:	1a9b      	subs	r3, r3, r2
 8017c7a:	42ac      	cmp	r4, r5
 8017c7c:	bf88      	it	hi
 8017c7e:	2300      	movhi	r3, #0
 8017c80:	3302      	adds	r3, #2
 8017c82:	4403      	add	r3, r0
 8017c84:	1a18      	subs	r0, r3, r0
 8017c86:	b003      	add	sp, #12
 8017c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017c8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017c92:	e7ed      	b.n	8017c70 <__exponent+0x44>
 8017c94:	2330      	movs	r3, #48	@ 0x30
 8017c96:	3130      	adds	r1, #48	@ 0x30
 8017c98:	7083      	strb	r3, [r0, #2]
 8017c9a:	70c1      	strb	r1, [r0, #3]
 8017c9c:	1d03      	adds	r3, r0, #4
 8017c9e:	e7f1      	b.n	8017c84 <__exponent+0x58>

08017ca0 <_printf_float>:
 8017ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca4:	b08d      	sub	sp, #52	@ 0x34
 8017ca6:	460c      	mov	r4, r1
 8017ca8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017cac:	4616      	mov	r6, r2
 8017cae:	461f      	mov	r7, r3
 8017cb0:	4605      	mov	r5, r0
 8017cb2:	f000 fe49 	bl	8018948 <_localeconv_r>
 8017cb6:	f8d0 b000 	ldr.w	fp, [r0]
 8017cba:	4658      	mov	r0, fp
 8017cbc:	f7e8 fb70 	bl	80003a0 <strlen>
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8017cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8017cc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017ccc:	6822      	ldr	r2, [r4, #0]
 8017cce:	9005      	str	r0, [sp, #20]
 8017cd0:	3307      	adds	r3, #7
 8017cd2:	f023 0307 	bic.w	r3, r3, #7
 8017cd6:	f103 0108 	add.w	r1, r3, #8
 8017cda:	f8c8 1000 	str.w	r1, [r8]
 8017cde:	ed93 0b00 	vldr	d0, [r3]
 8017ce2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8017f40 <_printf_float+0x2a0>
 8017ce6:	eeb0 7bc0 	vabs.f64	d7, d0
 8017cea:	eeb4 7b46 	vcmp.f64	d7, d6
 8017cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cf2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8017cf6:	dd24      	ble.n	8017d42 <_printf_float+0xa2>
 8017cf8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d00:	d502      	bpl.n	8017d08 <_printf_float+0x68>
 8017d02:	232d      	movs	r3, #45	@ 0x2d
 8017d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d08:	498f      	ldr	r1, [pc, #572]	@ (8017f48 <_printf_float+0x2a8>)
 8017d0a:	4b90      	ldr	r3, [pc, #576]	@ (8017f4c <_printf_float+0x2ac>)
 8017d0c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8017d10:	bf94      	ite	ls
 8017d12:	4688      	movls	r8, r1
 8017d14:	4698      	movhi	r8, r3
 8017d16:	f022 0204 	bic.w	r2, r2, #4
 8017d1a:	2303      	movs	r3, #3
 8017d1c:	6123      	str	r3, [r4, #16]
 8017d1e:	6022      	str	r2, [r4, #0]
 8017d20:	f04f 0a00 	mov.w	sl, #0
 8017d24:	9700      	str	r7, [sp, #0]
 8017d26:	4633      	mov	r3, r6
 8017d28:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017d2a:	4621      	mov	r1, r4
 8017d2c:	4628      	mov	r0, r5
 8017d2e:	f000 f9d1 	bl	80180d4 <_printf_common>
 8017d32:	3001      	adds	r0, #1
 8017d34:	f040 8089 	bne.w	8017e4a <_printf_float+0x1aa>
 8017d38:	f04f 30ff 	mov.w	r0, #4294967295
 8017d3c:	b00d      	add	sp, #52	@ 0x34
 8017d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d42:	eeb4 0b40 	vcmp.f64	d0, d0
 8017d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d4a:	d709      	bvc.n	8017d60 <_printf_float+0xc0>
 8017d4c:	ee10 3a90 	vmov	r3, s1
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	bfbc      	itt	lt
 8017d54:	232d      	movlt	r3, #45	@ 0x2d
 8017d56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017d5a:	497d      	ldr	r1, [pc, #500]	@ (8017f50 <_printf_float+0x2b0>)
 8017d5c:	4b7d      	ldr	r3, [pc, #500]	@ (8017f54 <_printf_float+0x2b4>)
 8017d5e:	e7d5      	b.n	8017d0c <_printf_float+0x6c>
 8017d60:	6863      	ldr	r3, [r4, #4]
 8017d62:	1c59      	adds	r1, r3, #1
 8017d64:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8017d68:	d139      	bne.n	8017dde <_printf_float+0x13e>
 8017d6a:	2306      	movs	r3, #6
 8017d6c:	6063      	str	r3, [r4, #4]
 8017d6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8017d72:	2300      	movs	r3, #0
 8017d74:	6022      	str	r2, [r4, #0]
 8017d76:	9303      	str	r3, [sp, #12]
 8017d78:	ab0a      	add	r3, sp, #40	@ 0x28
 8017d7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017d7e:	ab09      	add	r3, sp, #36	@ 0x24
 8017d80:	9300      	str	r3, [sp, #0]
 8017d82:	6861      	ldr	r1, [r4, #4]
 8017d84:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017d88:	4628      	mov	r0, r5
 8017d8a:	f7ff fefb 	bl	8017b84 <__cvt>
 8017d8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017d92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017d94:	4680      	mov	r8, r0
 8017d96:	d129      	bne.n	8017dec <_printf_float+0x14c>
 8017d98:	1cc8      	adds	r0, r1, #3
 8017d9a:	db02      	blt.n	8017da2 <_printf_float+0x102>
 8017d9c:	6863      	ldr	r3, [r4, #4]
 8017d9e:	4299      	cmp	r1, r3
 8017da0:	dd41      	ble.n	8017e26 <_printf_float+0x186>
 8017da2:	f1a9 0902 	sub.w	r9, r9, #2
 8017da6:	fa5f f989 	uxtb.w	r9, r9
 8017daa:	3901      	subs	r1, #1
 8017dac:	464a      	mov	r2, r9
 8017dae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017db2:	9109      	str	r1, [sp, #36]	@ 0x24
 8017db4:	f7ff ff3a 	bl	8017c2c <__exponent>
 8017db8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017dba:	1813      	adds	r3, r2, r0
 8017dbc:	2a01      	cmp	r2, #1
 8017dbe:	4682      	mov	sl, r0
 8017dc0:	6123      	str	r3, [r4, #16]
 8017dc2:	dc02      	bgt.n	8017dca <_printf_float+0x12a>
 8017dc4:	6822      	ldr	r2, [r4, #0]
 8017dc6:	07d2      	lsls	r2, r2, #31
 8017dc8:	d501      	bpl.n	8017dce <_printf_float+0x12e>
 8017dca:	3301      	adds	r3, #1
 8017dcc:	6123      	str	r3, [r4, #16]
 8017dce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d0a6      	beq.n	8017d24 <_printf_float+0x84>
 8017dd6:	232d      	movs	r3, #45	@ 0x2d
 8017dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017ddc:	e7a2      	b.n	8017d24 <_printf_float+0x84>
 8017dde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017de2:	d1c4      	bne.n	8017d6e <_printf_float+0xce>
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d1c2      	bne.n	8017d6e <_printf_float+0xce>
 8017de8:	2301      	movs	r3, #1
 8017dea:	e7bf      	b.n	8017d6c <_printf_float+0xcc>
 8017dec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017df0:	d9db      	bls.n	8017daa <_printf_float+0x10a>
 8017df2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8017df6:	d118      	bne.n	8017e2a <_printf_float+0x18a>
 8017df8:	2900      	cmp	r1, #0
 8017dfa:	6863      	ldr	r3, [r4, #4]
 8017dfc:	dd0b      	ble.n	8017e16 <_printf_float+0x176>
 8017dfe:	6121      	str	r1, [r4, #16]
 8017e00:	b913      	cbnz	r3, 8017e08 <_printf_float+0x168>
 8017e02:	6822      	ldr	r2, [r4, #0]
 8017e04:	07d0      	lsls	r0, r2, #31
 8017e06:	d502      	bpl.n	8017e0e <_printf_float+0x16e>
 8017e08:	3301      	adds	r3, #1
 8017e0a:	440b      	add	r3, r1
 8017e0c:	6123      	str	r3, [r4, #16]
 8017e0e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017e10:	f04f 0a00 	mov.w	sl, #0
 8017e14:	e7db      	b.n	8017dce <_printf_float+0x12e>
 8017e16:	b913      	cbnz	r3, 8017e1e <_printf_float+0x17e>
 8017e18:	6822      	ldr	r2, [r4, #0]
 8017e1a:	07d2      	lsls	r2, r2, #31
 8017e1c:	d501      	bpl.n	8017e22 <_printf_float+0x182>
 8017e1e:	3302      	adds	r3, #2
 8017e20:	e7f4      	b.n	8017e0c <_printf_float+0x16c>
 8017e22:	2301      	movs	r3, #1
 8017e24:	e7f2      	b.n	8017e0c <_printf_float+0x16c>
 8017e26:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8017e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e2c:	4299      	cmp	r1, r3
 8017e2e:	db05      	blt.n	8017e3c <_printf_float+0x19c>
 8017e30:	6823      	ldr	r3, [r4, #0]
 8017e32:	6121      	str	r1, [r4, #16]
 8017e34:	07d8      	lsls	r0, r3, #31
 8017e36:	d5ea      	bpl.n	8017e0e <_printf_float+0x16e>
 8017e38:	1c4b      	adds	r3, r1, #1
 8017e3a:	e7e7      	b.n	8017e0c <_printf_float+0x16c>
 8017e3c:	2900      	cmp	r1, #0
 8017e3e:	bfd4      	ite	le
 8017e40:	f1c1 0202 	rsble	r2, r1, #2
 8017e44:	2201      	movgt	r2, #1
 8017e46:	4413      	add	r3, r2
 8017e48:	e7e0      	b.n	8017e0c <_printf_float+0x16c>
 8017e4a:	6823      	ldr	r3, [r4, #0]
 8017e4c:	055a      	lsls	r2, r3, #21
 8017e4e:	d407      	bmi.n	8017e60 <_printf_float+0x1c0>
 8017e50:	6923      	ldr	r3, [r4, #16]
 8017e52:	4642      	mov	r2, r8
 8017e54:	4631      	mov	r1, r6
 8017e56:	4628      	mov	r0, r5
 8017e58:	47b8      	blx	r7
 8017e5a:	3001      	adds	r0, #1
 8017e5c:	d12a      	bne.n	8017eb4 <_printf_float+0x214>
 8017e5e:	e76b      	b.n	8017d38 <_printf_float+0x98>
 8017e60:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017e64:	f240 80e0 	bls.w	8018028 <_printf_float+0x388>
 8017e68:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017e6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e74:	d133      	bne.n	8017ede <_printf_float+0x23e>
 8017e76:	4a38      	ldr	r2, [pc, #224]	@ (8017f58 <_printf_float+0x2b8>)
 8017e78:	2301      	movs	r3, #1
 8017e7a:	4631      	mov	r1, r6
 8017e7c:	4628      	mov	r0, r5
 8017e7e:	47b8      	blx	r7
 8017e80:	3001      	adds	r0, #1
 8017e82:	f43f af59 	beq.w	8017d38 <_printf_float+0x98>
 8017e86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017e8a:	4543      	cmp	r3, r8
 8017e8c:	db02      	blt.n	8017e94 <_printf_float+0x1f4>
 8017e8e:	6823      	ldr	r3, [r4, #0]
 8017e90:	07d8      	lsls	r0, r3, #31
 8017e92:	d50f      	bpl.n	8017eb4 <_printf_float+0x214>
 8017e94:	9b05      	ldr	r3, [sp, #20]
 8017e96:	465a      	mov	r2, fp
 8017e98:	4631      	mov	r1, r6
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	47b8      	blx	r7
 8017e9e:	3001      	adds	r0, #1
 8017ea0:	f43f af4a 	beq.w	8017d38 <_printf_float+0x98>
 8017ea4:	f04f 0900 	mov.w	r9, #0
 8017ea8:	f108 38ff 	add.w	r8, r8, #4294967295
 8017eac:	f104 0a1a 	add.w	sl, r4, #26
 8017eb0:	45c8      	cmp	r8, r9
 8017eb2:	dc09      	bgt.n	8017ec8 <_printf_float+0x228>
 8017eb4:	6823      	ldr	r3, [r4, #0]
 8017eb6:	079b      	lsls	r3, r3, #30
 8017eb8:	f100 8107 	bmi.w	80180ca <_printf_float+0x42a>
 8017ebc:	68e0      	ldr	r0, [r4, #12]
 8017ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017ec0:	4298      	cmp	r0, r3
 8017ec2:	bfb8      	it	lt
 8017ec4:	4618      	movlt	r0, r3
 8017ec6:	e739      	b.n	8017d3c <_printf_float+0x9c>
 8017ec8:	2301      	movs	r3, #1
 8017eca:	4652      	mov	r2, sl
 8017ecc:	4631      	mov	r1, r6
 8017ece:	4628      	mov	r0, r5
 8017ed0:	47b8      	blx	r7
 8017ed2:	3001      	adds	r0, #1
 8017ed4:	f43f af30 	beq.w	8017d38 <_printf_float+0x98>
 8017ed8:	f109 0901 	add.w	r9, r9, #1
 8017edc:	e7e8      	b.n	8017eb0 <_printf_float+0x210>
 8017ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	dc3b      	bgt.n	8017f5c <_printf_float+0x2bc>
 8017ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8017f58 <_printf_float+0x2b8>)
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	4631      	mov	r1, r6
 8017eea:	4628      	mov	r0, r5
 8017eec:	47b8      	blx	r7
 8017eee:	3001      	adds	r0, #1
 8017ef0:	f43f af22 	beq.w	8017d38 <_printf_float+0x98>
 8017ef4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017ef8:	ea59 0303 	orrs.w	r3, r9, r3
 8017efc:	d102      	bne.n	8017f04 <_printf_float+0x264>
 8017efe:	6823      	ldr	r3, [r4, #0]
 8017f00:	07d9      	lsls	r1, r3, #31
 8017f02:	d5d7      	bpl.n	8017eb4 <_printf_float+0x214>
 8017f04:	9b05      	ldr	r3, [sp, #20]
 8017f06:	465a      	mov	r2, fp
 8017f08:	4631      	mov	r1, r6
 8017f0a:	4628      	mov	r0, r5
 8017f0c:	47b8      	blx	r7
 8017f0e:	3001      	adds	r0, #1
 8017f10:	f43f af12 	beq.w	8017d38 <_printf_float+0x98>
 8017f14:	f04f 0a00 	mov.w	sl, #0
 8017f18:	f104 0b1a 	add.w	fp, r4, #26
 8017f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f1e:	425b      	negs	r3, r3
 8017f20:	4553      	cmp	r3, sl
 8017f22:	dc01      	bgt.n	8017f28 <_printf_float+0x288>
 8017f24:	464b      	mov	r3, r9
 8017f26:	e794      	b.n	8017e52 <_printf_float+0x1b2>
 8017f28:	2301      	movs	r3, #1
 8017f2a:	465a      	mov	r2, fp
 8017f2c:	4631      	mov	r1, r6
 8017f2e:	4628      	mov	r0, r5
 8017f30:	47b8      	blx	r7
 8017f32:	3001      	adds	r0, #1
 8017f34:	f43f af00 	beq.w	8017d38 <_printf_float+0x98>
 8017f38:	f10a 0a01 	add.w	sl, sl, #1
 8017f3c:	e7ee      	b.n	8017f1c <_printf_float+0x27c>
 8017f3e:	bf00      	nop
 8017f40:	ffffffff 	.word	0xffffffff
 8017f44:	7fefffff 	.word	0x7fefffff
 8017f48:	08021739 	.word	0x08021739
 8017f4c:	0802173d 	.word	0x0802173d
 8017f50:	08021741 	.word	0x08021741
 8017f54:	08021745 	.word	0x08021745
 8017f58:	08021749 	.word	0x08021749
 8017f5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017f5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017f62:	4553      	cmp	r3, sl
 8017f64:	bfa8      	it	ge
 8017f66:	4653      	movge	r3, sl
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	4699      	mov	r9, r3
 8017f6c:	dc37      	bgt.n	8017fde <_printf_float+0x33e>
 8017f6e:	2300      	movs	r3, #0
 8017f70:	9307      	str	r3, [sp, #28]
 8017f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f76:	f104 021a 	add.w	r2, r4, #26
 8017f7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017f7c:	9907      	ldr	r1, [sp, #28]
 8017f7e:	9306      	str	r3, [sp, #24]
 8017f80:	eba3 0309 	sub.w	r3, r3, r9
 8017f84:	428b      	cmp	r3, r1
 8017f86:	dc31      	bgt.n	8017fec <_printf_float+0x34c>
 8017f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f8a:	459a      	cmp	sl, r3
 8017f8c:	dc3b      	bgt.n	8018006 <_printf_float+0x366>
 8017f8e:	6823      	ldr	r3, [r4, #0]
 8017f90:	07da      	lsls	r2, r3, #31
 8017f92:	d438      	bmi.n	8018006 <_printf_float+0x366>
 8017f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f96:	ebaa 0903 	sub.w	r9, sl, r3
 8017f9a:	9b06      	ldr	r3, [sp, #24]
 8017f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8017fa0:	4599      	cmp	r9, r3
 8017fa2:	bfa8      	it	ge
 8017fa4:	4699      	movge	r9, r3
 8017fa6:	f1b9 0f00 	cmp.w	r9, #0
 8017faa:	dc34      	bgt.n	8018016 <_printf_float+0x376>
 8017fac:	f04f 0800 	mov.w	r8, #0
 8017fb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017fb4:	f104 0b1a 	add.w	fp, r4, #26
 8017fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fba:	ebaa 0303 	sub.w	r3, sl, r3
 8017fbe:	eba3 0309 	sub.w	r3, r3, r9
 8017fc2:	4543      	cmp	r3, r8
 8017fc4:	f77f af76 	ble.w	8017eb4 <_printf_float+0x214>
 8017fc8:	2301      	movs	r3, #1
 8017fca:	465a      	mov	r2, fp
 8017fcc:	4631      	mov	r1, r6
 8017fce:	4628      	mov	r0, r5
 8017fd0:	47b8      	blx	r7
 8017fd2:	3001      	adds	r0, #1
 8017fd4:	f43f aeb0 	beq.w	8017d38 <_printf_float+0x98>
 8017fd8:	f108 0801 	add.w	r8, r8, #1
 8017fdc:	e7ec      	b.n	8017fb8 <_printf_float+0x318>
 8017fde:	4642      	mov	r2, r8
 8017fe0:	4631      	mov	r1, r6
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	47b8      	blx	r7
 8017fe6:	3001      	adds	r0, #1
 8017fe8:	d1c1      	bne.n	8017f6e <_printf_float+0x2ce>
 8017fea:	e6a5      	b.n	8017d38 <_printf_float+0x98>
 8017fec:	2301      	movs	r3, #1
 8017fee:	4631      	mov	r1, r6
 8017ff0:	4628      	mov	r0, r5
 8017ff2:	9206      	str	r2, [sp, #24]
 8017ff4:	47b8      	blx	r7
 8017ff6:	3001      	adds	r0, #1
 8017ff8:	f43f ae9e 	beq.w	8017d38 <_printf_float+0x98>
 8017ffc:	9b07      	ldr	r3, [sp, #28]
 8017ffe:	9a06      	ldr	r2, [sp, #24]
 8018000:	3301      	adds	r3, #1
 8018002:	9307      	str	r3, [sp, #28]
 8018004:	e7b9      	b.n	8017f7a <_printf_float+0x2da>
 8018006:	9b05      	ldr	r3, [sp, #20]
 8018008:	465a      	mov	r2, fp
 801800a:	4631      	mov	r1, r6
 801800c:	4628      	mov	r0, r5
 801800e:	47b8      	blx	r7
 8018010:	3001      	adds	r0, #1
 8018012:	d1bf      	bne.n	8017f94 <_printf_float+0x2f4>
 8018014:	e690      	b.n	8017d38 <_printf_float+0x98>
 8018016:	9a06      	ldr	r2, [sp, #24]
 8018018:	464b      	mov	r3, r9
 801801a:	4442      	add	r2, r8
 801801c:	4631      	mov	r1, r6
 801801e:	4628      	mov	r0, r5
 8018020:	47b8      	blx	r7
 8018022:	3001      	adds	r0, #1
 8018024:	d1c2      	bne.n	8017fac <_printf_float+0x30c>
 8018026:	e687      	b.n	8017d38 <_printf_float+0x98>
 8018028:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801802c:	f1b9 0f01 	cmp.w	r9, #1
 8018030:	dc01      	bgt.n	8018036 <_printf_float+0x396>
 8018032:	07db      	lsls	r3, r3, #31
 8018034:	d536      	bpl.n	80180a4 <_printf_float+0x404>
 8018036:	2301      	movs	r3, #1
 8018038:	4642      	mov	r2, r8
 801803a:	4631      	mov	r1, r6
 801803c:	4628      	mov	r0, r5
 801803e:	47b8      	blx	r7
 8018040:	3001      	adds	r0, #1
 8018042:	f43f ae79 	beq.w	8017d38 <_printf_float+0x98>
 8018046:	9b05      	ldr	r3, [sp, #20]
 8018048:	465a      	mov	r2, fp
 801804a:	4631      	mov	r1, r6
 801804c:	4628      	mov	r0, r5
 801804e:	47b8      	blx	r7
 8018050:	3001      	adds	r0, #1
 8018052:	f43f ae71 	beq.w	8017d38 <_printf_float+0x98>
 8018056:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801805a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801805e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018062:	f109 39ff 	add.w	r9, r9, #4294967295
 8018066:	d018      	beq.n	801809a <_printf_float+0x3fa>
 8018068:	464b      	mov	r3, r9
 801806a:	f108 0201 	add.w	r2, r8, #1
 801806e:	4631      	mov	r1, r6
 8018070:	4628      	mov	r0, r5
 8018072:	47b8      	blx	r7
 8018074:	3001      	adds	r0, #1
 8018076:	d10c      	bne.n	8018092 <_printf_float+0x3f2>
 8018078:	e65e      	b.n	8017d38 <_printf_float+0x98>
 801807a:	2301      	movs	r3, #1
 801807c:	465a      	mov	r2, fp
 801807e:	4631      	mov	r1, r6
 8018080:	4628      	mov	r0, r5
 8018082:	47b8      	blx	r7
 8018084:	3001      	adds	r0, #1
 8018086:	f43f ae57 	beq.w	8017d38 <_printf_float+0x98>
 801808a:	f108 0801 	add.w	r8, r8, #1
 801808e:	45c8      	cmp	r8, r9
 8018090:	dbf3      	blt.n	801807a <_printf_float+0x3da>
 8018092:	4653      	mov	r3, sl
 8018094:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018098:	e6dc      	b.n	8017e54 <_printf_float+0x1b4>
 801809a:	f04f 0800 	mov.w	r8, #0
 801809e:	f104 0b1a 	add.w	fp, r4, #26
 80180a2:	e7f4      	b.n	801808e <_printf_float+0x3ee>
 80180a4:	2301      	movs	r3, #1
 80180a6:	4642      	mov	r2, r8
 80180a8:	e7e1      	b.n	801806e <_printf_float+0x3ce>
 80180aa:	2301      	movs	r3, #1
 80180ac:	464a      	mov	r2, r9
 80180ae:	4631      	mov	r1, r6
 80180b0:	4628      	mov	r0, r5
 80180b2:	47b8      	blx	r7
 80180b4:	3001      	adds	r0, #1
 80180b6:	f43f ae3f 	beq.w	8017d38 <_printf_float+0x98>
 80180ba:	f108 0801 	add.w	r8, r8, #1
 80180be:	68e3      	ldr	r3, [r4, #12]
 80180c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80180c2:	1a5b      	subs	r3, r3, r1
 80180c4:	4543      	cmp	r3, r8
 80180c6:	dcf0      	bgt.n	80180aa <_printf_float+0x40a>
 80180c8:	e6f8      	b.n	8017ebc <_printf_float+0x21c>
 80180ca:	f04f 0800 	mov.w	r8, #0
 80180ce:	f104 0919 	add.w	r9, r4, #25
 80180d2:	e7f4      	b.n	80180be <_printf_float+0x41e>

080180d4 <_printf_common>:
 80180d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180d8:	4616      	mov	r6, r2
 80180da:	4698      	mov	r8, r3
 80180dc:	688a      	ldr	r2, [r1, #8]
 80180de:	690b      	ldr	r3, [r1, #16]
 80180e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80180e4:	4293      	cmp	r3, r2
 80180e6:	bfb8      	it	lt
 80180e8:	4613      	movlt	r3, r2
 80180ea:	6033      	str	r3, [r6, #0]
 80180ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80180f0:	4607      	mov	r7, r0
 80180f2:	460c      	mov	r4, r1
 80180f4:	b10a      	cbz	r2, 80180fa <_printf_common+0x26>
 80180f6:	3301      	adds	r3, #1
 80180f8:	6033      	str	r3, [r6, #0]
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	0699      	lsls	r1, r3, #26
 80180fe:	bf42      	ittt	mi
 8018100:	6833      	ldrmi	r3, [r6, #0]
 8018102:	3302      	addmi	r3, #2
 8018104:	6033      	strmi	r3, [r6, #0]
 8018106:	6825      	ldr	r5, [r4, #0]
 8018108:	f015 0506 	ands.w	r5, r5, #6
 801810c:	d106      	bne.n	801811c <_printf_common+0x48>
 801810e:	f104 0a19 	add.w	sl, r4, #25
 8018112:	68e3      	ldr	r3, [r4, #12]
 8018114:	6832      	ldr	r2, [r6, #0]
 8018116:	1a9b      	subs	r3, r3, r2
 8018118:	42ab      	cmp	r3, r5
 801811a:	dc26      	bgt.n	801816a <_printf_common+0x96>
 801811c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018120:	6822      	ldr	r2, [r4, #0]
 8018122:	3b00      	subs	r3, #0
 8018124:	bf18      	it	ne
 8018126:	2301      	movne	r3, #1
 8018128:	0692      	lsls	r2, r2, #26
 801812a:	d42b      	bmi.n	8018184 <_printf_common+0xb0>
 801812c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018130:	4641      	mov	r1, r8
 8018132:	4638      	mov	r0, r7
 8018134:	47c8      	blx	r9
 8018136:	3001      	adds	r0, #1
 8018138:	d01e      	beq.n	8018178 <_printf_common+0xa4>
 801813a:	6823      	ldr	r3, [r4, #0]
 801813c:	6922      	ldr	r2, [r4, #16]
 801813e:	f003 0306 	and.w	r3, r3, #6
 8018142:	2b04      	cmp	r3, #4
 8018144:	bf02      	ittt	eq
 8018146:	68e5      	ldreq	r5, [r4, #12]
 8018148:	6833      	ldreq	r3, [r6, #0]
 801814a:	1aed      	subeq	r5, r5, r3
 801814c:	68a3      	ldr	r3, [r4, #8]
 801814e:	bf0c      	ite	eq
 8018150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018154:	2500      	movne	r5, #0
 8018156:	4293      	cmp	r3, r2
 8018158:	bfc4      	itt	gt
 801815a:	1a9b      	subgt	r3, r3, r2
 801815c:	18ed      	addgt	r5, r5, r3
 801815e:	2600      	movs	r6, #0
 8018160:	341a      	adds	r4, #26
 8018162:	42b5      	cmp	r5, r6
 8018164:	d11a      	bne.n	801819c <_printf_common+0xc8>
 8018166:	2000      	movs	r0, #0
 8018168:	e008      	b.n	801817c <_printf_common+0xa8>
 801816a:	2301      	movs	r3, #1
 801816c:	4652      	mov	r2, sl
 801816e:	4641      	mov	r1, r8
 8018170:	4638      	mov	r0, r7
 8018172:	47c8      	blx	r9
 8018174:	3001      	adds	r0, #1
 8018176:	d103      	bne.n	8018180 <_printf_common+0xac>
 8018178:	f04f 30ff 	mov.w	r0, #4294967295
 801817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018180:	3501      	adds	r5, #1
 8018182:	e7c6      	b.n	8018112 <_printf_common+0x3e>
 8018184:	18e1      	adds	r1, r4, r3
 8018186:	1c5a      	adds	r2, r3, #1
 8018188:	2030      	movs	r0, #48	@ 0x30
 801818a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801818e:	4422      	add	r2, r4
 8018190:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018194:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018198:	3302      	adds	r3, #2
 801819a:	e7c7      	b.n	801812c <_printf_common+0x58>
 801819c:	2301      	movs	r3, #1
 801819e:	4622      	mov	r2, r4
 80181a0:	4641      	mov	r1, r8
 80181a2:	4638      	mov	r0, r7
 80181a4:	47c8      	blx	r9
 80181a6:	3001      	adds	r0, #1
 80181a8:	d0e6      	beq.n	8018178 <_printf_common+0xa4>
 80181aa:	3601      	adds	r6, #1
 80181ac:	e7d9      	b.n	8018162 <_printf_common+0x8e>
	...

080181b0 <_printf_i>:
 80181b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80181b4:	7e0f      	ldrb	r7, [r1, #24]
 80181b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80181b8:	2f78      	cmp	r7, #120	@ 0x78
 80181ba:	4691      	mov	r9, r2
 80181bc:	4680      	mov	r8, r0
 80181be:	460c      	mov	r4, r1
 80181c0:	469a      	mov	sl, r3
 80181c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80181c6:	d807      	bhi.n	80181d8 <_printf_i+0x28>
 80181c8:	2f62      	cmp	r7, #98	@ 0x62
 80181ca:	d80a      	bhi.n	80181e2 <_printf_i+0x32>
 80181cc:	2f00      	cmp	r7, #0
 80181ce:	f000 80d2 	beq.w	8018376 <_printf_i+0x1c6>
 80181d2:	2f58      	cmp	r7, #88	@ 0x58
 80181d4:	f000 80b9 	beq.w	801834a <_printf_i+0x19a>
 80181d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80181dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80181e0:	e03a      	b.n	8018258 <_printf_i+0xa8>
 80181e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80181e6:	2b15      	cmp	r3, #21
 80181e8:	d8f6      	bhi.n	80181d8 <_printf_i+0x28>
 80181ea:	a101      	add	r1, pc, #4	@ (adr r1, 80181f0 <_printf_i+0x40>)
 80181ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80181f0:	08018249 	.word	0x08018249
 80181f4:	0801825d 	.word	0x0801825d
 80181f8:	080181d9 	.word	0x080181d9
 80181fc:	080181d9 	.word	0x080181d9
 8018200:	080181d9 	.word	0x080181d9
 8018204:	080181d9 	.word	0x080181d9
 8018208:	0801825d 	.word	0x0801825d
 801820c:	080181d9 	.word	0x080181d9
 8018210:	080181d9 	.word	0x080181d9
 8018214:	080181d9 	.word	0x080181d9
 8018218:	080181d9 	.word	0x080181d9
 801821c:	0801835d 	.word	0x0801835d
 8018220:	08018287 	.word	0x08018287
 8018224:	08018317 	.word	0x08018317
 8018228:	080181d9 	.word	0x080181d9
 801822c:	080181d9 	.word	0x080181d9
 8018230:	0801837f 	.word	0x0801837f
 8018234:	080181d9 	.word	0x080181d9
 8018238:	08018287 	.word	0x08018287
 801823c:	080181d9 	.word	0x080181d9
 8018240:	080181d9 	.word	0x080181d9
 8018244:	0801831f 	.word	0x0801831f
 8018248:	6833      	ldr	r3, [r6, #0]
 801824a:	1d1a      	adds	r2, r3, #4
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	6032      	str	r2, [r6, #0]
 8018250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018254:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018258:	2301      	movs	r3, #1
 801825a:	e09d      	b.n	8018398 <_printf_i+0x1e8>
 801825c:	6833      	ldr	r3, [r6, #0]
 801825e:	6820      	ldr	r0, [r4, #0]
 8018260:	1d19      	adds	r1, r3, #4
 8018262:	6031      	str	r1, [r6, #0]
 8018264:	0606      	lsls	r6, r0, #24
 8018266:	d501      	bpl.n	801826c <_printf_i+0xbc>
 8018268:	681d      	ldr	r5, [r3, #0]
 801826a:	e003      	b.n	8018274 <_printf_i+0xc4>
 801826c:	0645      	lsls	r5, r0, #25
 801826e:	d5fb      	bpl.n	8018268 <_printf_i+0xb8>
 8018270:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018274:	2d00      	cmp	r5, #0
 8018276:	da03      	bge.n	8018280 <_printf_i+0xd0>
 8018278:	232d      	movs	r3, #45	@ 0x2d
 801827a:	426d      	negs	r5, r5
 801827c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018280:	4859      	ldr	r0, [pc, #356]	@ (80183e8 <_printf_i+0x238>)
 8018282:	230a      	movs	r3, #10
 8018284:	e011      	b.n	80182aa <_printf_i+0xfa>
 8018286:	6821      	ldr	r1, [r4, #0]
 8018288:	6833      	ldr	r3, [r6, #0]
 801828a:	0608      	lsls	r0, r1, #24
 801828c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018290:	d402      	bmi.n	8018298 <_printf_i+0xe8>
 8018292:	0649      	lsls	r1, r1, #25
 8018294:	bf48      	it	mi
 8018296:	b2ad      	uxthmi	r5, r5
 8018298:	2f6f      	cmp	r7, #111	@ 0x6f
 801829a:	4853      	ldr	r0, [pc, #332]	@ (80183e8 <_printf_i+0x238>)
 801829c:	6033      	str	r3, [r6, #0]
 801829e:	bf14      	ite	ne
 80182a0:	230a      	movne	r3, #10
 80182a2:	2308      	moveq	r3, #8
 80182a4:	2100      	movs	r1, #0
 80182a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80182aa:	6866      	ldr	r6, [r4, #4]
 80182ac:	60a6      	str	r6, [r4, #8]
 80182ae:	2e00      	cmp	r6, #0
 80182b0:	bfa2      	ittt	ge
 80182b2:	6821      	ldrge	r1, [r4, #0]
 80182b4:	f021 0104 	bicge.w	r1, r1, #4
 80182b8:	6021      	strge	r1, [r4, #0]
 80182ba:	b90d      	cbnz	r5, 80182c0 <_printf_i+0x110>
 80182bc:	2e00      	cmp	r6, #0
 80182be:	d04b      	beq.n	8018358 <_printf_i+0x1a8>
 80182c0:	4616      	mov	r6, r2
 80182c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80182c6:	fb03 5711 	mls	r7, r3, r1, r5
 80182ca:	5dc7      	ldrb	r7, [r0, r7]
 80182cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80182d0:	462f      	mov	r7, r5
 80182d2:	42bb      	cmp	r3, r7
 80182d4:	460d      	mov	r5, r1
 80182d6:	d9f4      	bls.n	80182c2 <_printf_i+0x112>
 80182d8:	2b08      	cmp	r3, #8
 80182da:	d10b      	bne.n	80182f4 <_printf_i+0x144>
 80182dc:	6823      	ldr	r3, [r4, #0]
 80182de:	07df      	lsls	r7, r3, #31
 80182e0:	d508      	bpl.n	80182f4 <_printf_i+0x144>
 80182e2:	6923      	ldr	r3, [r4, #16]
 80182e4:	6861      	ldr	r1, [r4, #4]
 80182e6:	4299      	cmp	r1, r3
 80182e8:	bfde      	ittt	le
 80182ea:	2330      	movle	r3, #48	@ 0x30
 80182ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80182f4:	1b92      	subs	r2, r2, r6
 80182f6:	6122      	str	r2, [r4, #16]
 80182f8:	f8cd a000 	str.w	sl, [sp]
 80182fc:	464b      	mov	r3, r9
 80182fe:	aa03      	add	r2, sp, #12
 8018300:	4621      	mov	r1, r4
 8018302:	4640      	mov	r0, r8
 8018304:	f7ff fee6 	bl	80180d4 <_printf_common>
 8018308:	3001      	adds	r0, #1
 801830a:	d14a      	bne.n	80183a2 <_printf_i+0x1f2>
 801830c:	f04f 30ff 	mov.w	r0, #4294967295
 8018310:	b004      	add	sp, #16
 8018312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018316:	6823      	ldr	r3, [r4, #0]
 8018318:	f043 0320 	orr.w	r3, r3, #32
 801831c:	6023      	str	r3, [r4, #0]
 801831e:	4833      	ldr	r0, [pc, #204]	@ (80183ec <_printf_i+0x23c>)
 8018320:	2778      	movs	r7, #120	@ 0x78
 8018322:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018326:	6823      	ldr	r3, [r4, #0]
 8018328:	6831      	ldr	r1, [r6, #0]
 801832a:	061f      	lsls	r7, r3, #24
 801832c:	f851 5b04 	ldr.w	r5, [r1], #4
 8018330:	d402      	bmi.n	8018338 <_printf_i+0x188>
 8018332:	065f      	lsls	r7, r3, #25
 8018334:	bf48      	it	mi
 8018336:	b2ad      	uxthmi	r5, r5
 8018338:	6031      	str	r1, [r6, #0]
 801833a:	07d9      	lsls	r1, r3, #31
 801833c:	bf44      	itt	mi
 801833e:	f043 0320 	orrmi.w	r3, r3, #32
 8018342:	6023      	strmi	r3, [r4, #0]
 8018344:	b11d      	cbz	r5, 801834e <_printf_i+0x19e>
 8018346:	2310      	movs	r3, #16
 8018348:	e7ac      	b.n	80182a4 <_printf_i+0xf4>
 801834a:	4827      	ldr	r0, [pc, #156]	@ (80183e8 <_printf_i+0x238>)
 801834c:	e7e9      	b.n	8018322 <_printf_i+0x172>
 801834e:	6823      	ldr	r3, [r4, #0]
 8018350:	f023 0320 	bic.w	r3, r3, #32
 8018354:	6023      	str	r3, [r4, #0]
 8018356:	e7f6      	b.n	8018346 <_printf_i+0x196>
 8018358:	4616      	mov	r6, r2
 801835a:	e7bd      	b.n	80182d8 <_printf_i+0x128>
 801835c:	6833      	ldr	r3, [r6, #0]
 801835e:	6825      	ldr	r5, [r4, #0]
 8018360:	6961      	ldr	r1, [r4, #20]
 8018362:	1d18      	adds	r0, r3, #4
 8018364:	6030      	str	r0, [r6, #0]
 8018366:	062e      	lsls	r6, r5, #24
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	d501      	bpl.n	8018370 <_printf_i+0x1c0>
 801836c:	6019      	str	r1, [r3, #0]
 801836e:	e002      	b.n	8018376 <_printf_i+0x1c6>
 8018370:	0668      	lsls	r0, r5, #25
 8018372:	d5fb      	bpl.n	801836c <_printf_i+0x1bc>
 8018374:	8019      	strh	r1, [r3, #0]
 8018376:	2300      	movs	r3, #0
 8018378:	6123      	str	r3, [r4, #16]
 801837a:	4616      	mov	r6, r2
 801837c:	e7bc      	b.n	80182f8 <_printf_i+0x148>
 801837e:	6833      	ldr	r3, [r6, #0]
 8018380:	1d1a      	adds	r2, r3, #4
 8018382:	6032      	str	r2, [r6, #0]
 8018384:	681e      	ldr	r6, [r3, #0]
 8018386:	6862      	ldr	r2, [r4, #4]
 8018388:	2100      	movs	r1, #0
 801838a:	4630      	mov	r0, r6
 801838c:	f7e7 ffb8 	bl	8000300 <memchr>
 8018390:	b108      	cbz	r0, 8018396 <_printf_i+0x1e6>
 8018392:	1b80      	subs	r0, r0, r6
 8018394:	6060      	str	r0, [r4, #4]
 8018396:	6863      	ldr	r3, [r4, #4]
 8018398:	6123      	str	r3, [r4, #16]
 801839a:	2300      	movs	r3, #0
 801839c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183a0:	e7aa      	b.n	80182f8 <_printf_i+0x148>
 80183a2:	6923      	ldr	r3, [r4, #16]
 80183a4:	4632      	mov	r2, r6
 80183a6:	4649      	mov	r1, r9
 80183a8:	4640      	mov	r0, r8
 80183aa:	47d0      	blx	sl
 80183ac:	3001      	adds	r0, #1
 80183ae:	d0ad      	beq.n	801830c <_printf_i+0x15c>
 80183b0:	6823      	ldr	r3, [r4, #0]
 80183b2:	079b      	lsls	r3, r3, #30
 80183b4:	d413      	bmi.n	80183de <_printf_i+0x22e>
 80183b6:	68e0      	ldr	r0, [r4, #12]
 80183b8:	9b03      	ldr	r3, [sp, #12]
 80183ba:	4298      	cmp	r0, r3
 80183bc:	bfb8      	it	lt
 80183be:	4618      	movlt	r0, r3
 80183c0:	e7a6      	b.n	8018310 <_printf_i+0x160>
 80183c2:	2301      	movs	r3, #1
 80183c4:	4632      	mov	r2, r6
 80183c6:	4649      	mov	r1, r9
 80183c8:	4640      	mov	r0, r8
 80183ca:	47d0      	blx	sl
 80183cc:	3001      	adds	r0, #1
 80183ce:	d09d      	beq.n	801830c <_printf_i+0x15c>
 80183d0:	3501      	adds	r5, #1
 80183d2:	68e3      	ldr	r3, [r4, #12]
 80183d4:	9903      	ldr	r1, [sp, #12]
 80183d6:	1a5b      	subs	r3, r3, r1
 80183d8:	42ab      	cmp	r3, r5
 80183da:	dcf2      	bgt.n	80183c2 <_printf_i+0x212>
 80183dc:	e7eb      	b.n	80183b6 <_printf_i+0x206>
 80183de:	2500      	movs	r5, #0
 80183e0:	f104 0619 	add.w	r6, r4, #25
 80183e4:	e7f5      	b.n	80183d2 <_printf_i+0x222>
 80183e6:	bf00      	nop
 80183e8:	0802174b 	.word	0x0802174b
 80183ec:	0802175c 	.word	0x0802175c

080183f0 <std>:
 80183f0:	2300      	movs	r3, #0
 80183f2:	b510      	push	{r4, lr}
 80183f4:	4604      	mov	r4, r0
 80183f6:	e9c0 3300 	strd	r3, r3, [r0]
 80183fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80183fe:	6083      	str	r3, [r0, #8]
 8018400:	8181      	strh	r1, [r0, #12]
 8018402:	6643      	str	r3, [r0, #100]	@ 0x64
 8018404:	81c2      	strh	r2, [r0, #14]
 8018406:	6183      	str	r3, [r0, #24]
 8018408:	4619      	mov	r1, r3
 801840a:	2208      	movs	r2, #8
 801840c:	305c      	adds	r0, #92	@ 0x5c
 801840e:	f000 fa6b 	bl	80188e8 <memset>
 8018412:	4b0d      	ldr	r3, [pc, #52]	@ (8018448 <std+0x58>)
 8018414:	6263      	str	r3, [r4, #36]	@ 0x24
 8018416:	4b0d      	ldr	r3, [pc, #52]	@ (801844c <std+0x5c>)
 8018418:	62a3      	str	r3, [r4, #40]	@ 0x28
 801841a:	4b0d      	ldr	r3, [pc, #52]	@ (8018450 <std+0x60>)
 801841c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801841e:	4b0d      	ldr	r3, [pc, #52]	@ (8018454 <std+0x64>)
 8018420:	6323      	str	r3, [r4, #48]	@ 0x30
 8018422:	4b0d      	ldr	r3, [pc, #52]	@ (8018458 <std+0x68>)
 8018424:	6224      	str	r4, [r4, #32]
 8018426:	429c      	cmp	r4, r3
 8018428:	d006      	beq.n	8018438 <std+0x48>
 801842a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801842e:	4294      	cmp	r4, r2
 8018430:	d002      	beq.n	8018438 <std+0x48>
 8018432:	33d0      	adds	r3, #208	@ 0xd0
 8018434:	429c      	cmp	r4, r3
 8018436:	d105      	bne.n	8018444 <std+0x54>
 8018438:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801843c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018440:	f000 bb06 	b.w	8018a50 <__retarget_lock_init_recursive>
 8018444:	bd10      	pop	{r4, pc}
 8018446:	bf00      	nop
 8018448:	08018695 	.word	0x08018695
 801844c:	080186b7 	.word	0x080186b7
 8018450:	080186ef 	.word	0x080186ef
 8018454:	08018713 	.word	0x08018713
 8018458:	240030cc 	.word	0x240030cc

0801845c <stdio_exit_handler>:
 801845c:	4a02      	ldr	r2, [pc, #8]	@ (8018468 <stdio_exit_handler+0xc>)
 801845e:	4903      	ldr	r1, [pc, #12]	@ (801846c <stdio_exit_handler+0x10>)
 8018460:	4803      	ldr	r0, [pc, #12]	@ (8018470 <stdio_exit_handler+0x14>)
 8018462:	f000 b87b 	b.w	801855c <_fwalk_sglue>
 8018466:	bf00      	nop
 8018468:	240001cc 	.word	0x240001cc
 801846c:	0801ad45 	.word	0x0801ad45
 8018470:	24000348 	.word	0x24000348

08018474 <cleanup_stdio>:
 8018474:	6841      	ldr	r1, [r0, #4]
 8018476:	4b0c      	ldr	r3, [pc, #48]	@ (80184a8 <cleanup_stdio+0x34>)
 8018478:	4299      	cmp	r1, r3
 801847a:	b510      	push	{r4, lr}
 801847c:	4604      	mov	r4, r0
 801847e:	d001      	beq.n	8018484 <cleanup_stdio+0x10>
 8018480:	f002 fc60 	bl	801ad44 <_fflush_r>
 8018484:	68a1      	ldr	r1, [r4, #8]
 8018486:	4b09      	ldr	r3, [pc, #36]	@ (80184ac <cleanup_stdio+0x38>)
 8018488:	4299      	cmp	r1, r3
 801848a:	d002      	beq.n	8018492 <cleanup_stdio+0x1e>
 801848c:	4620      	mov	r0, r4
 801848e:	f002 fc59 	bl	801ad44 <_fflush_r>
 8018492:	68e1      	ldr	r1, [r4, #12]
 8018494:	4b06      	ldr	r3, [pc, #24]	@ (80184b0 <cleanup_stdio+0x3c>)
 8018496:	4299      	cmp	r1, r3
 8018498:	d004      	beq.n	80184a4 <cleanup_stdio+0x30>
 801849a:	4620      	mov	r0, r4
 801849c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184a0:	f002 bc50 	b.w	801ad44 <_fflush_r>
 80184a4:	bd10      	pop	{r4, pc}
 80184a6:	bf00      	nop
 80184a8:	240030cc 	.word	0x240030cc
 80184ac:	24003134 	.word	0x24003134
 80184b0:	2400319c 	.word	0x2400319c

080184b4 <global_stdio_init.part.0>:
 80184b4:	b510      	push	{r4, lr}
 80184b6:	4b0b      	ldr	r3, [pc, #44]	@ (80184e4 <global_stdio_init.part.0+0x30>)
 80184b8:	4c0b      	ldr	r4, [pc, #44]	@ (80184e8 <global_stdio_init.part.0+0x34>)
 80184ba:	4a0c      	ldr	r2, [pc, #48]	@ (80184ec <global_stdio_init.part.0+0x38>)
 80184bc:	601a      	str	r2, [r3, #0]
 80184be:	4620      	mov	r0, r4
 80184c0:	2200      	movs	r2, #0
 80184c2:	2104      	movs	r1, #4
 80184c4:	f7ff ff94 	bl	80183f0 <std>
 80184c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80184cc:	2201      	movs	r2, #1
 80184ce:	2109      	movs	r1, #9
 80184d0:	f7ff ff8e 	bl	80183f0 <std>
 80184d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80184d8:	2202      	movs	r2, #2
 80184da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184de:	2112      	movs	r1, #18
 80184e0:	f7ff bf86 	b.w	80183f0 <std>
 80184e4:	24003204 	.word	0x24003204
 80184e8:	240030cc 	.word	0x240030cc
 80184ec:	0801845d 	.word	0x0801845d

080184f0 <__sfp_lock_acquire>:
 80184f0:	4801      	ldr	r0, [pc, #4]	@ (80184f8 <__sfp_lock_acquire+0x8>)
 80184f2:	f000 baae 	b.w	8018a52 <__retarget_lock_acquire_recursive>
 80184f6:	bf00      	nop
 80184f8:	2400320d 	.word	0x2400320d

080184fc <__sfp_lock_release>:
 80184fc:	4801      	ldr	r0, [pc, #4]	@ (8018504 <__sfp_lock_release+0x8>)
 80184fe:	f000 baa9 	b.w	8018a54 <__retarget_lock_release_recursive>
 8018502:	bf00      	nop
 8018504:	2400320d 	.word	0x2400320d

08018508 <__sinit>:
 8018508:	b510      	push	{r4, lr}
 801850a:	4604      	mov	r4, r0
 801850c:	f7ff fff0 	bl	80184f0 <__sfp_lock_acquire>
 8018510:	6a23      	ldr	r3, [r4, #32]
 8018512:	b11b      	cbz	r3, 801851c <__sinit+0x14>
 8018514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018518:	f7ff bff0 	b.w	80184fc <__sfp_lock_release>
 801851c:	4b04      	ldr	r3, [pc, #16]	@ (8018530 <__sinit+0x28>)
 801851e:	6223      	str	r3, [r4, #32]
 8018520:	4b04      	ldr	r3, [pc, #16]	@ (8018534 <__sinit+0x2c>)
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d1f5      	bne.n	8018514 <__sinit+0xc>
 8018528:	f7ff ffc4 	bl	80184b4 <global_stdio_init.part.0>
 801852c:	e7f2      	b.n	8018514 <__sinit+0xc>
 801852e:	bf00      	nop
 8018530:	08018475 	.word	0x08018475
 8018534:	24003204 	.word	0x24003204

08018538 <fiprintf>:
 8018538:	b40e      	push	{r1, r2, r3}
 801853a:	b503      	push	{r0, r1, lr}
 801853c:	4601      	mov	r1, r0
 801853e:	ab03      	add	r3, sp, #12
 8018540:	4805      	ldr	r0, [pc, #20]	@ (8018558 <fiprintf+0x20>)
 8018542:	f853 2b04 	ldr.w	r2, [r3], #4
 8018546:	6800      	ldr	r0, [r0, #0]
 8018548:	9301      	str	r3, [sp, #4]
 801854a:	f002 fa5f 	bl	801aa0c <_vfiprintf_r>
 801854e:	b002      	add	sp, #8
 8018550:	f85d eb04 	ldr.w	lr, [sp], #4
 8018554:	b003      	add	sp, #12
 8018556:	4770      	bx	lr
 8018558:	24000344 	.word	0x24000344

0801855c <_fwalk_sglue>:
 801855c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018560:	4607      	mov	r7, r0
 8018562:	4688      	mov	r8, r1
 8018564:	4614      	mov	r4, r2
 8018566:	2600      	movs	r6, #0
 8018568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801856c:	f1b9 0901 	subs.w	r9, r9, #1
 8018570:	d505      	bpl.n	801857e <_fwalk_sglue+0x22>
 8018572:	6824      	ldr	r4, [r4, #0]
 8018574:	2c00      	cmp	r4, #0
 8018576:	d1f7      	bne.n	8018568 <_fwalk_sglue+0xc>
 8018578:	4630      	mov	r0, r6
 801857a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801857e:	89ab      	ldrh	r3, [r5, #12]
 8018580:	2b01      	cmp	r3, #1
 8018582:	d907      	bls.n	8018594 <_fwalk_sglue+0x38>
 8018584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018588:	3301      	adds	r3, #1
 801858a:	d003      	beq.n	8018594 <_fwalk_sglue+0x38>
 801858c:	4629      	mov	r1, r5
 801858e:	4638      	mov	r0, r7
 8018590:	47c0      	blx	r8
 8018592:	4306      	orrs	r6, r0
 8018594:	3568      	adds	r5, #104	@ 0x68
 8018596:	e7e9      	b.n	801856c <_fwalk_sglue+0x10>

08018598 <_puts_r>:
 8018598:	6a03      	ldr	r3, [r0, #32]
 801859a:	b570      	push	{r4, r5, r6, lr}
 801859c:	6884      	ldr	r4, [r0, #8]
 801859e:	4605      	mov	r5, r0
 80185a0:	460e      	mov	r6, r1
 80185a2:	b90b      	cbnz	r3, 80185a8 <_puts_r+0x10>
 80185a4:	f7ff ffb0 	bl	8018508 <__sinit>
 80185a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80185aa:	07db      	lsls	r3, r3, #31
 80185ac:	d405      	bmi.n	80185ba <_puts_r+0x22>
 80185ae:	89a3      	ldrh	r3, [r4, #12]
 80185b0:	0598      	lsls	r0, r3, #22
 80185b2:	d402      	bmi.n	80185ba <_puts_r+0x22>
 80185b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185b6:	f000 fa4c 	bl	8018a52 <__retarget_lock_acquire_recursive>
 80185ba:	89a3      	ldrh	r3, [r4, #12]
 80185bc:	0719      	lsls	r1, r3, #28
 80185be:	d502      	bpl.n	80185c6 <_puts_r+0x2e>
 80185c0:	6923      	ldr	r3, [r4, #16]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d135      	bne.n	8018632 <_puts_r+0x9a>
 80185c6:	4621      	mov	r1, r4
 80185c8:	4628      	mov	r0, r5
 80185ca:	f000 f91d 	bl	8018808 <__swsetup_r>
 80185ce:	b380      	cbz	r0, 8018632 <_puts_r+0x9a>
 80185d0:	f04f 35ff 	mov.w	r5, #4294967295
 80185d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80185d6:	07da      	lsls	r2, r3, #31
 80185d8:	d405      	bmi.n	80185e6 <_puts_r+0x4e>
 80185da:	89a3      	ldrh	r3, [r4, #12]
 80185dc:	059b      	lsls	r3, r3, #22
 80185de:	d402      	bmi.n	80185e6 <_puts_r+0x4e>
 80185e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185e2:	f000 fa37 	bl	8018a54 <__retarget_lock_release_recursive>
 80185e6:	4628      	mov	r0, r5
 80185e8:	bd70      	pop	{r4, r5, r6, pc}
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	da04      	bge.n	80185f8 <_puts_r+0x60>
 80185ee:	69a2      	ldr	r2, [r4, #24]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	dc17      	bgt.n	8018624 <_puts_r+0x8c>
 80185f4:	290a      	cmp	r1, #10
 80185f6:	d015      	beq.n	8018624 <_puts_r+0x8c>
 80185f8:	6823      	ldr	r3, [r4, #0]
 80185fa:	1c5a      	adds	r2, r3, #1
 80185fc:	6022      	str	r2, [r4, #0]
 80185fe:	7019      	strb	r1, [r3, #0]
 8018600:	68a3      	ldr	r3, [r4, #8]
 8018602:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018606:	3b01      	subs	r3, #1
 8018608:	60a3      	str	r3, [r4, #8]
 801860a:	2900      	cmp	r1, #0
 801860c:	d1ed      	bne.n	80185ea <_puts_r+0x52>
 801860e:	2b00      	cmp	r3, #0
 8018610:	da11      	bge.n	8018636 <_puts_r+0x9e>
 8018612:	4622      	mov	r2, r4
 8018614:	210a      	movs	r1, #10
 8018616:	4628      	mov	r0, r5
 8018618:	f000 f8b8 	bl	801878c <__swbuf_r>
 801861c:	3001      	adds	r0, #1
 801861e:	d0d7      	beq.n	80185d0 <_puts_r+0x38>
 8018620:	250a      	movs	r5, #10
 8018622:	e7d7      	b.n	80185d4 <_puts_r+0x3c>
 8018624:	4622      	mov	r2, r4
 8018626:	4628      	mov	r0, r5
 8018628:	f000 f8b0 	bl	801878c <__swbuf_r>
 801862c:	3001      	adds	r0, #1
 801862e:	d1e7      	bne.n	8018600 <_puts_r+0x68>
 8018630:	e7ce      	b.n	80185d0 <_puts_r+0x38>
 8018632:	3e01      	subs	r6, #1
 8018634:	e7e4      	b.n	8018600 <_puts_r+0x68>
 8018636:	6823      	ldr	r3, [r4, #0]
 8018638:	1c5a      	adds	r2, r3, #1
 801863a:	6022      	str	r2, [r4, #0]
 801863c:	220a      	movs	r2, #10
 801863e:	701a      	strb	r2, [r3, #0]
 8018640:	e7ee      	b.n	8018620 <_puts_r+0x88>
	...

08018644 <puts>:
 8018644:	4b02      	ldr	r3, [pc, #8]	@ (8018650 <puts+0xc>)
 8018646:	4601      	mov	r1, r0
 8018648:	6818      	ldr	r0, [r3, #0]
 801864a:	f7ff bfa5 	b.w	8018598 <_puts_r>
 801864e:	bf00      	nop
 8018650:	24000344 	.word	0x24000344

08018654 <siprintf>:
 8018654:	b40e      	push	{r1, r2, r3}
 8018656:	b500      	push	{lr}
 8018658:	b09c      	sub	sp, #112	@ 0x70
 801865a:	ab1d      	add	r3, sp, #116	@ 0x74
 801865c:	9002      	str	r0, [sp, #8]
 801865e:	9006      	str	r0, [sp, #24]
 8018660:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018664:	4809      	ldr	r0, [pc, #36]	@ (801868c <siprintf+0x38>)
 8018666:	9107      	str	r1, [sp, #28]
 8018668:	9104      	str	r1, [sp, #16]
 801866a:	4909      	ldr	r1, [pc, #36]	@ (8018690 <siprintf+0x3c>)
 801866c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018670:	9105      	str	r1, [sp, #20]
 8018672:	6800      	ldr	r0, [r0, #0]
 8018674:	9301      	str	r3, [sp, #4]
 8018676:	a902      	add	r1, sp, #8
 8018678:	f002 f8a2 	bl	801a7c0 <_svfiprintf_r>
 801867c:	9b02      	ldr	r3, [sp, #8]
 801867e:	2200      	movs	r2, #0
 8018680:	701a      	strb	r2, [r3, #0]
 8018682:	b01c      	add	sp, #112	@ 0x70
 8018684:	f85d eb04 	ldr.w	lr, [sp], #4
 8018688:	b003      	add	sp, #12
 801868a:	4770      	bx	lr
 801868c:	24000344 	.word	0x24000344
 8018690:	ffff0208 	.word	0xffff0208

08018694 <__sread>:
 8018694:	b510      	push	{r4, lr}
 8018696:	460c      	mov	r4, r1
 8018698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801869c:	f000 f97a 	bl	8018994 <_read_r>
 80186a0:	2800      	cmp	r0, #0
 80186a2:	bfab      	itete	ge
 80186a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80186a6:	89a3      	ldrhlt	r3, [r4, #12]
 80186a8:	181b      	addge	r3, r3, r0
 80186aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80186ae:	bfac      	ite	ge
 80186b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80186b2:	81a3      	strhlt	r3, [r4, #12]
 80186b4:	bd10      	pop	{r4, pc}

080186b6 <__swrite>:
 80186b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186ba:	461f      	mov	r7, r3
 80186bc:	898b      	ldrh	r3, [r1, #12]
 80186be:	05db      	lsls	r3, r3, #23
 80186c0:	4605      	mov	r5, r0
 80186c2:	460c      	mov	r4, r1
 80186c4:	4616      	mov	r6, r2
 80186c6:	d505      	bpl.n	80186d4 <__swrite+0x1e>
 80186c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186cc:	2302      	movs	r3, #2
 80186ce:	2200      	movs	r2, #0
 80186d0:	f000 f94e 	bl	8018970 <_lseek_r>
 80186d4:	89a3      	ldrh	r3, [r4, #12]
 80186d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80186da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80186de:	81a3      	strh	r3, [r4, #12]
 80186e0:	4632      	mov	r2, r6
 80186e2:	463b      	mov	r3, r7
 80186e4:	4628      	mov	r0, r5
 80186e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186ea:	f000 b975 	b.w	80189d8 <_write_r>

080186ee <__sseek>:
 80186ee:	b510      	push	{r4, lr}
 80186f0:	460c      	mov	r4, r1
 80186f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186f6:	f000 f93b 	bl	8018970 <_lseek_r>
 80186fa:	1c43      	adds	r3, r0, #1
 80186fc:	89a3      	ldrh	r3, [r4, #12]
 80186fe:	bf15      	itete	ne
 8018700:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801870a:	81a3      	strheq	r3, [r4, #12]
 801870c:	bf18      	it	ne
 801870e:	81a3      	strhne	r3, [r4, #12]
 8018710:	bd10      	pop	{r4, pc}

08018712 <__sclose>:
 8018712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018716:	f000 b91b 	b.w	8018950 <_close_r>

0801871a <_vsniprintf_r>:
 801871a:	b530      	push	{r4, r5, lr}
 801871c:	4614      	mov	r4, r2
 801871e:	2c00      	cmp	r4, #0
 8018720:	b09b      	sub	sp, #108	@ 0x6c
 8018722:	4605      	mov	r5, r0
 8018724:	461a      	mov	r2, r3
 8018726:	da05      	bge.n	8018734 <_vsniprintf_r+0x1a>
 8018728:	238b      	movs	r3, #139	@ 0x8b
 801872a:	6003      	str	r3, [r0, #0]
 801872c:	f04f 30ff 	mov.w	r0, #4294967295
 8018730:	b01b      	add	sp, #108	@ 0x6c
 8018732:	bd30      	pop	{r4, r5, pc}
 8018734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018738:	f8ad 300c 	strh.w	r3, [sp, #12]
 801873c:	bf14      	ite	ne
 801873e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018742:	4623      	moveq	r3, r4
 8018744:	9302      	str	r3, [sp, #8]
 8018746:	9305      	str	r3, [sp, #20]
 8018748:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801874c:	9100      	str	r1, [sp, #0]
 801874e:	9104      	str	r1, [sp, #16]
 8018750:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018754:	4669      	mov	r1, sp
 8018756:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018758:	f002 f832 	bl	801a7c0 <_svfiprintf_r>
 801875c:	1c43      	adds	r3, r0, #1
 801875e:	bfbc      	itt	lt
 8018760:	238b      	movlt	r3, #139	@ 0x8b
 8018762:	602b      	strlt	r3, [r5, #0]
 8018764:	2c00      	cmp	r4, #0
 8018766:	d0e3      	beq.n	8018730 <_vsniprintf_r+0x16>
 8018768:	9b00      	ldr	r3, [sp, #0]
 801876a:	2200      	movs	r2, #0
 801876c:	701a      	strb	r2, [r3, #0]
 801876e:	e7df      	b.n	8018730 <_vsniprintf_r+0x16>

08018770 <vsniprintf>:
 8018770:	b507      	push	{r0, r1, r2, lr}
 8018772:	9300      	str	r3, [sp, #0]
 8018774:	4613      	mov	r3, r2
 8018776:	460a      	mov	r2, r1
 8018778:	4601      	mov	r1, r0
 801877a:	4803      	ldr	r0, [pc, #12]	@ (8018788 <vsniprintf+0x18>)
 801877c:	6800      	ldr	r0, [r0, #0]
 801877e:	f7ff ffcc 	bl	801871a <_vsniprintf_r>
 8018782:	b003      	add	sp, #12
 8018784:	f85d fb04 	ldr.w	pc, [sp], #4
 8018788:	24000344 	.word	0x24000344

0801878c <__swbuf_r>:
 801878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801878e:	460e      	mov	r6, r1
 8018790:	4614      	mov	r4, r2
 8018792:	4605      	mov	r5, r0
 8018794:	b118      	cbz	r0, 801879e <__swbuf_r+0x12>
 8018796:	6a03      	ldr	r3, [r0, #32]
 8018798:	b90b      	cbnz	r3, 801879e <__swbuf_r+0x12>
 801879a:	f7ff feb5 	bl	8018508 <__sinit>
 801879e:	69a3      	ldr	r3, [r4, #24]
 80187a0:	60a3      	str	r3, [r4, #8]
 80187a2:	89a3      	ldrh	r3, [r4, #12]
 80187a4:	071a      	lsls	r2, r3, #28
 80187a6:	d501      	bpl.n	80187ac <__swbuf_r+0x20>
 80187a8:	6923      	ldr	r3, [r4, #16]
 80187aa:	b943      	cbnz	r3, 80187be <__swbuf_r+0x32>
 80187ac:	4621      	mov	r1, r4
 80187ae:	4628      	mov	r0, r5
 80187b0:	f000 f82a 	bl	8018808 <__swsetup_r>
 80187b4:	b118      	cbz	r0, 80187be <__swbuf_r+0x32>
 80187b6:	f04f 37ff 	mov.w	r7, #4294967295
 80187ba:	4638      	mov	r0, r7
 80187bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187be:	6823      	ldr	r3, [r4, #0]
 80187c0:	6922      	ldr	r2, [r4, #16]
 80187c2:	1a98      	subs	r0, r3, r2
 80187c4:	6963      	ldr	r3, [r4, #20]
 80187c6:	b2f6      	uxtb	r6, r6
 80187c8:	4283      	cmp	r3, r0
 80187ca:	4637      	mov	r7, r6
 80187cc:	dc05      	bgt.n	80187da <__swbuf_r+0x4e>
 80187ce:	4621      	mov	r1, r4
 80187d0:	4628      	mov	r0, r5
 80187d2:	f002 fab7 	bl	801ad44 <_fflush_r>
 80187d6:	2800      	cmp	r0, #0
 80187d8:	d1ed      	bne.n	80187b6 <__swbuf_r+0x2a>
 80187da:	68a3      	ldr	r3, [r4, #8]
 80187dc:	3b01      	subs	r3, #1
 80187de:	60a3      	str	r3, [r4, #8]
 80187e0:	6823      	ldr	r3, [r4, #0]
 80187e2:	1c5a      	adds	r2, r3, #1
 80187e4:	6022      	str	r2, [r4, #0]
 80187e6:	701e      	strb	r6, [r3, #0]
 80187e8:	6962      	ldr	r2, [r4, #20]
 80187ea:	1c43      	adds	r3, r0, #1
 80187ec:	429a      	cmp	r2, r3
 80187ee:	d004      	beq.n	80187fa <__swbuf_r+0x6e>
 80187f0:	89a3      	ldrh	r3, [r4, #12]
 80187f2:	07db      	lsls	r3, r3, #31
 80187f4:	d5e1      	bpl.n	80187ba <__swbuf_r+0x2e>
 80187f6:	2e0a      	cmp	r6, #10
 80187f8:	d1df      	bne.n	80187ba <__swbuf_r+0x2e>
 80187fa:	4621      	mov	r1, r4
 80187fc:	4628      	mov	r0, r5
 80187fe:	f002 faa1 	bl	801ad44 <_fflush_r>
 8018802:	2800      	cmp	r0, #0
 8018804:	d0d9      	beq.n	80187ba <__swbuf_r+0x2e>
 8018806:	e7d6      	b.n	80187b6 <__swbuf_r+0x2a>

08018808 <__swsetup_r>:
 8018808:	b538      	push	{r3, r4, r5, lr}
 801880a:	4b29      	ldr	r3, [pc, #164]	@ (80188b0 <__swsetup_r+0xa8>)
 801880c:	4605      	mov	r5, r0
 801880e:	6818      	ldr	r0, [r3, #0]
 8018810:	460c      	mov	r4, r1
 8018812:	b118      	cbz	r0, 801881c <__swsetup_r+0x14>
 8018814:	6a03      	ldr	r3, [r0, #32]
 8018816:	b90b      	cbnz	r3, 801881c <__swsetup_r+0x14>
 8018818:	f7ff fe76 	bl	8018508 <__sinit>
 801881c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018820:	0719      	lsls	r1, r3, #28
 8018822:	d422      	bmi.n	801886a <__swsetup_r+0x62>
 8018824:	06da      	lsls	r2, r3, #27
 8018826:	d407      	bmi.n	8018838 <__swsetup_r+0x30>
 8018828:	2209      	movs	r2, #9
 801882a:	602a      	str	r2, [r5, #0]
 801882c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018830:	81a3      	strh	r3, [r4, #12]
 8018832:	f04f 30ff 	mov.w	r0, #4294967295
 8018836:	e033      	b.n	80188a0 <__swsetup_r+0x98>
 8018838:	0758      	lsls	r0, r3, #29
 801883a:	d512      	bpl.n	8018862 <__swsetup_r+0x5a>
 801883c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801883e:	b141      	cbz	r1, 8018852 <__swsetup_r+0x4a>
 8018840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018844:	4299      	cmp	r1, r3
 8018846:	d002      	beq.n	801884e <__swsetup_r+0x46>
 8018848:	4628      	mov	r0, r5
 801884a:	f000 ff03 	bl	8019654 <_free_r>
 801884e:	2300      	movs	r3, #0
 8018850:	6363      	str	r3, [r4, #52]	@ 0x34
 8018852:	89a3      	ldrh	r3, [r4, #12]
 8018854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018858:	81a3      	strh	r3, [r4, #12]
 801885a:	2300      	movs	r3, #0
 801885c:	6063      	str	r3, [r4, #4]
 801885e:	6923      	ldr	r3, [r4, #16]
 8018860:	6023      	str	r3, [r4, #0]
 8018862:	89a3      	ldrh	r3, [r4, #12]
 8018864:	f043 0308 	orr.w	r3, r3, #8
 8018868:	81a3      	strh	r3, [r4, #12]
 801886a:	6923      	ldr	r3, [r4, #16]
 801886c:	b94b      	cbnz	r3, 8018882 <__swsetup_r+0x7a>
 801886e:	89a3      	ldrh	r3, [r4, #12]
 8018870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018878:	d003      	beq.n	8018882 <__swsetup_r+0x7a>
 801887a:	4621      	mov	r1, r4
 801887c:	4628      	mov	r0, r5
 801887e:	f002 faaf 	bl	801ade0 <__smakebuf_r>
 8018882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018886:	f013 0201 	ands.w	r2, r3, #1
 801888a:	d00a      	beq.n	80188a2 <__swsetup_r+0x9a>
 801888c:	2200      	movs	r2, #0
 801888e:	60a2      	str	r2, [r4, #8]
 8018890:	6962      	ldr	r2, [r4, #20]
 8018892:	4252      	negs	r2, r2
 8018894:	61a2      	str	r2, [r4, #24]
 8018896:	6922      	ldr	r2, [r4, #16]
 8018898:	b942      	cbnz	r2, 80188ac <__swsetup_r+0xa4>
 801889a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801889e:	d1c5      	bne.n	801882c <__swsetup_r+0x24>
 80188a0:	bd38      	pop	{r3, r4, r5, pc}
 80188a2:	0799      	lsls	r1, r3, #30
 80188a4:	bf58      	it	pl
 80188a6:	6962      	ldrpl	r2, [r4, #20]
 80188a8:	60a2      	str	r2, [r4, #8]
 80188aa:	e7f4      	b.n	8018896 <__swsetup_r+0x8e>
 80188ac:	2000      	movs	r0, #0
 80188ae:	e7f7      	b.n	80188a0 <__swsetup_r+0x98>
 80188b0:	24000344 	.word	0x24000344

080188b4 <memmove>:
 80188b4:	4288      	cmp	r0, r1
 80188b6:	b510      	push	{r4, lr}
 80188b8:	eb01 0402 	add.w	r4, r1, r2
 80188bc:	d902      	bls.n	80188c4 <memmove+0x10>
 80188be:	4284      	cmp	r4, r0
 80188c0:	4623      	mov	r3, r4
 80188c2:	d807      	bhi.n	80188d4 <memmove+0x20>
 80188c4:	1e43      	subs	r3, r0, #1
 80188c6:	42a1      	cmp	r1, r4
 80188c8:	d008      	beq.n	80188dc <memmove+0x28>
 80188ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80188ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80188d2:	e7f8      	b.n	80188c6 <memmove+0x12>
 80188d4:	4402      	add	r2, r0
 80188d6:	4601      	mov	r1, r0
 80188d8:	428a      	cmp	r2, r1
 80188da:	d100      	bne.n	80188de <memmove+0x2a>
 80188dc:	bd10      	pop	{r4, pc}
 80188de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80188e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80188e6:	e7f7      	b.n	80188d8 <memmove+0x24>

080188e8 <memset>:
 80188e8:	4402      	add	r2, r0
 80188ea:	4603      	mov	r3, r0
 80188ec:	4293      	cmp	r3, r2
 80188ee:	d100      	bne.n	80188f2 <memset+0xa>
 80188f0:	4770      	bx	lr
 80188f2:	f803 1b01 	strb.w	r1, [r3], #1
 80188f6:	e7f9      	b.n	80188ec <memset+0x4>

080188f8 <strncmp>:
 80188f8:	b510      	push	{r4, lr}
 80188fa:	b16a      	cbz	r2, 8018918 <strncmp+0x20>
 80188fc:	3901      	subs	r1, #1
 80188fe:	1884      	adds	r4, r0, r2
 8018900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018908:	429a      	cmp	r2, r3
 801890a:	d103      	bne.n	8018914 <strncmp+0x1c>
 801890c:	42a0      	cmp	r0, r4
 801890e:	d001      	beq.n	8018914 <strncmp+0x1c>
 8018910:	2a00      	cmp	r2, #0
 8018912:	d1f5      	bne.n	8018900 <strncmp+0x8>
 8018914:	1ad0      	subs	r0, r2, r3
 8018916:	bd10      	pop	{r4, pc}
 8018918:	4610      	mov	r0, r2
 801891a:	e7fc      	b.n	8018916 <strncmp+0x1e>

0801891c <strstr>:
 801891c:	780a      	ldrb	r2, [r1, #0]
 801891e:	b570      	push	{r4, r5, r6, lr}
 8018920:	b96a      	cbnz	r2, 801893e <strstr+0x22>
 8018922:	bd70      	pop	{r4, r5, r6, pc}
 8018924:	429a      	cmp	r2, r3
 8018926:	d109      	bne.n	801893c <strstr+0x20>
 8018928:	460c      	mov	r4, r1
 801892a:	4605      	mov	r5, r0
 801892c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018930:	2b00      	cmp	r3, #0
 8018932:	d0f6      	beq.n	8018922 <strstr+0x6>
 8018934:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018938:	429e      	cmp	r6, r3
 801893a:	d0f7      	beq.n	801892c <strstr+0x10>
 801893c:	3001      	adds	r0, #1
 801893e:	7803      	ldrb	r3, [r0, #0]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d1ef      	bne.n	8018924 <strstr+0x8>
 8018944:	4618      	mov	r0, r3
 8018946:	e7ec      	b.n	8018922 <strstr+0x6>

08018948 <_localeconv_r>:
 8018948:	4800      	ldr	r0, [pc, #0]	@ (801894c <_localeconv_r+0x4>)
 801894a:	4770      	bx	lr
 801894c:	240002c8 	.word	0x240002c8

08018950 <_close_r>:
 8018950:	b538      	push	{r3, r4, r5, lr}
 8018952:	4d06      	ldr	r5, [pc, #24]	@ (801896c <_close_r+0x1c>)
 8018954:	2300      	movs	r3, #0
 8018956:	4604      	mov	r4, r0
 8018958:	4608      	mov	r0, r1
 801895a:	602b      	str	r3, [r5, #0]
 801895c:	f7e8 ffb0 	bl	80018c0 <_close>
 8018960:	1c43      	adds	r3, r0, #1
 8018962:	d102      	bne.n	801896a <_close_r+0x1a>
 8018964:	682b      	ldr	r3, [r5, #0]
 8018966:	b103      	cbz	r3, 801896a <_close_r+0x1a>
 8018968:	6023      	str	r3, [r4, #0]
 801896a:	bd38      	pop	{r3, r4, r5, pc}
 801896c:	24003208 	.word	0x24003208

08018970 <_lseek_r>:
 8018970:	b538      	push	{r3, r4, r5, lr}
 8018972:	4d07      	ldr	r5, [pc, #28]	@ (8018990 <_lseek_r+0x20>)
 8018974:	4604      	mov	r4, r0
 8018976:	4608      	mov	r0, r1
 8018978:	4611      	mov	r1, r2
 801897a:	2200      	movs	r2, #0
 801897c:	602a      	str	r2, [r5, #0]
 801897e:	461a      	mov	r2, r3
 8018980:	f7e8 ffc5 	bl	800190e <_lseek>
 8018984:	1c43      	adds	r3, r0, #1
 8018986:	d102      	bne.n	801898e <_lseek_r+0x1e>
 8018988:	682b      	ldr	r3, [r5, #0]
 801898a:	b103      	cbz	r3, 801898e <_lseek_r+0x1e>
 801898c:	6023      	str	r3, [r4, #0]
 801898e:	bd38      	pop	{r3, r4, r5, pc}
 8018990:	24003208 	.word	0x24003208

08018994 <_read_r>:
 8018994:	b538      	push	{r3, r4, r5, lr}
 8018996:	4d07      	ldr	r5, [pc, #28]	@ (80189b4 <_read_r+0x20>)
 8018998:	4604      	mov	r4, r0
 801899a:	4608      	mov	r0, r1
 801899c:	4611      	mov	r1, r2
 801899e:	2200      	movs	r2, #0
 80189a0:	602a      	str	r2, [r5, #0]
 80189a2:	461a      	mov	r2, r3
 80189a4:	f7e8 ff6f 	bl	8001886 <_read>
 80189a8:	1c43      	adds	r3, r0, #1
 80189aa:	d102      	bne.n	80189b2 <_read_r+0x1e>
 80189ac:	682b      	ldr	r3, [r5, #0]
 80189ae:	b103      	cbz	r3, 80189b2 <_read_r+0x1e>
 80189b0:	6023      	str	r3, [r4, #0]
 80189b2:	bd38      	pop	{r3, r4, r5, pc}
 80189b4:	24003208 	.word	0x24003208

080189b8 <_sbrk_r>:
 80189b8:	b538      	push	{r3, r4, r5, lr}
 80189ba:	4d06      	ldr	r5, [pc, #24]	@ (80189d4 <_sbrk_r+0x1c>)
 80189bc:	2300      	movs	r3, #0
 80189be:	4604      	mov	r4, r0
 80189c0:	4608      	mov	r0, r1
 80189c2:	602b      	str	r3, [r5, #0]
 80189c4:	f7e8 ffc6 	bl	8001954 <_sbrk>
 80189c8:	1c43      	adds	r3, r0, #1
 80189ca:	d102      	bne.n	80189d2 <_sbrk_r+0x1a>
 80189cc:	682b      	ldr	r3, [r5, #0]
 80189ce:	b103      	cbz	r3, 80189d2 <_sbrk_r+0x1a>
 80189d0:	6023      	str	r3, [r4, #0]
 80189d2:	bd38      	pop	{r3, r4, r5, pc}
 80189d4:	24003208 	.word	0x24003208

080189d8 <_write_r>:
 80189d8:	b538      	push	{r3, r4, r5, lr}
 80189da:	4d07      	ldr	r5, [pc, #28]	@ (80189f8 <_write_r+0x20>)
 80189dc:	4604      	mov	r4, r0
 80189de:	4608      	mov	r0, r1
 80189e0:	4611      	mov	r1, r2
 80189e2:	2200      	movs	r2, #0
 80189e4:	602a      	str	r2, [r5, #0]
 80189e6:	461a      	mov	r2, r3
 80189e8:	f7e8 ff9e 	bl	8001928 <_write>
 80189ec:	1c43      	adds	r3, r0, #1
 80189ee:	d102      	bne.n	80189f6 <_write_r+0x1e>
 80189f0:	682b      	ldr	r3, [r5, #0]
 80189f2:	b103      	cbz	r3, 80189f6 <_write_r+0x1e>
 80189f4:	6023      	str	r3, [r4, #0]
 80189f6:	bd38      	pop	{r3, r4, r5, pc}
 80189f8:	24003208 	.word	0x24003208

080189fc <__errno>:
 80189fc:	4b01      	ldr	r3, [pc, #4]	@ (8018a04 <__errno+0x8>)
 80189fe:	6818      	ldr	r0, [r3, #0]
 8018a00:	4770      	bx	lr
 8018a02:	bf00      	nop
 8018a04:	24000344 	.word	0x24000344

08018a08 <__libc_init_array>:
 8018a08:	b570      	push	{r4, r5, r6, lr}
 8018a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8018a40 <__libc_init_array+0x38>)
 8018a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8018a44 <__libc_init_array+0x3c>)
 8018a0e:	1b64      	subs	r4, r4, r5
 8018a10:	10a4      	asrs	r4, r4, #2
 8018a12:	2600      	movs	r6, #0
 8018a14:	42a6      	cmp	r6, r4
 8018a16:	d109      	bne.n	8018a2c <__libc_init_array+0x24>
 8018a18:	4d0b      	ldr	r5, [pc, #44]	@ (8018a48 <__libc_init_array+0x40>)
 8018a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8018a4c <__libc_init_array+0x44>)
 8018a1c:	f002 fc72 	bl	801b304 <_init>
 8018a20:	1b64      	subs	r4, r4, r5
 8018a22:	10a4      	asrs	r4, r4, #2
 8018a24:	2600      	movs	r6, #0
 8018a26:	42a6      	cmp	r6, r4
 8018a28:	d105      	bne.n	8018a36 <__libc_init_array+0x2e>
 8018a2a:	bd70      	pop	{r4, r5, r6, pc}
 8018a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a30:	4798      	blx	r3
 8018a32:	3601      	adds	r6, #1
 8018a34:	e7ee      	b.n	8018a14 <__libc_init_array+0xc>
 8018a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a3a:	4798      	blx	r3
 8018a3c:	3601      	adds	r6, #1
 8018a3e:	e7f2      	b.n	8018a26 <__libc_init_array+0x1e>
 8018a40:	08021b18 	.word	0x08021b18
 8018a44:	08021b18 	.word	0x08021b18
 8018a48:	08021b18 	.word	0x08021b18
 8018a4c:	08021b1c 	.word	0x08021b1c

08018a50 <__retarget_lock_init_recursive>:
 8018a50:	4770      	bx	lr

08018a52 <__retarget_lock_acquire_recursive>:
 8018a52:	4770      	bx	lr

08018a54 <__retarget_lock_release_recursive>:
 8018a54:	4770      	bx	lr

08018a56 <memcpy>:
 8018a56:	440a      	add	r2, r1
 8018a58:	4291      	cmp	r1, r2
 8018a5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8018a5e:	d100      	bne.n	8018a62 <memcpy+0xc>
 8018a60:	4770      	bx	lr
 8018a62:	b510      	push	{r4, lr}
 8018a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a6c:	4291      	cmp	r1, r2
 8018a6e:	d1f9      	bne.n	8018a64 <memcpy+0xe>
 8018a70:	bd10      	pop	{r4, pc}
 8018a72:	0000      	movs	r0, r0
 8018a74:	0000      	movs	r0, r0
	...

08018a78 <nan>:
 8018a78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018a80 <nan+0x8>
 8018a7c:	4770      	bx	lr
 8018a7e:	bf00      	nop
 8018a80:	00000000 	.word	0x00000000
 8018a84:	7ff80000 	.word	0x7ff80000

08018a88 <abort>:
 8018a88:	b508      	push	{r3, lr}
 8018a8a:	2006      	movs	r0, #6
 8018a8c:	f002 fa0c 	bl	801aea8 <raise>
 8018a90:	2001      	movs	r0, #1
 8018a92:	f7e8 feed 	bl	8001870 <_exit>

08018a96 <quorem>:
 8018a96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a9a:	6903      	ldr	r3, [r0, #16]
 8018a9c:	690c      	ldr	r4, [r1, #16]
 8018a9e:	42a3      	cmp	r3, r4
 8018aa0:	4607      	mov	r7, r0
 8018aa2:	db7e      	blt.n	8018ba2 <quorem+0x10c>
 8018aa4:	3c01      	subs	r4, #1
 8018aa6:	f101 0814 	add.w	r8, r1, #20
 8018aaa:	00a3      	lsls	r3, r4, #2
 8018aac:	f100 0514 	add.w	r5, r0, #20
 8018ab0:	9300      	str	r3, [sp, #0]
 8018ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018ab6:	9301      	str	r3, [sp, #4]
 8018ab8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018ac0:	3301      	adds	r3, #1
 8018ac2:	429a      	cmp	r2, r3
 8018ac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018ac8:	fbb2 f6f3 	udiv	r6, r2, r3
 8018acc:	d32e      	bcc.n	8018b2c <quorem+0x96>
 8018ace:	f04f 0a00 	mov.w	sl, #0
 8018ad2:	46c4      	mov	ip, r8
 8018ad4:	46ae      	mov	lr, r5
 8018ad6:	46d3      	mov	fp, sl
 8018ad8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018adc:	b298      	uxth	r0, r3
 8018ade:	fb06 a000 	mla	r0, r6, r0, sl
 8018ae2:	0c02      	lsrs	r2, r0, #16
 8018ae4:	0c1b      	lsrs	r3, r3, #16
 8018ae6:	fb06 2303 	mla	r3, r6, r3, r2
 8018aea:	f8de 2000 	ldr.w	r2, [lr]
 8018aee:	b280      	uxth	r0, r0
 8018af0:	b292      	uxth	r2, r2
 8018af2:	1a12      	subs	r2, r2, r0
 8018af4:	445a      	add	r2, fp
 8018af6:	f8de 0000 	ldr.w	r0, [lr]
 8018afa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018afe:	b29b      	uxth	r3, r3
 8018b00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018b04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018b08:	b292      	uxth	r2, r2
 8018b0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018b0e:	45e1      	cmp	r9, ip
 8018b10:	f84e 2b04 	str.w	r2, [lr], #4
 8018b14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018b18:	d2de      	bcs.n	8018ad8 <quorem+0x42>
 8018b1a:	9b00      	ldr	r3, [sp, #0]
 8018b1c:	58eb      	ldr	r3, [r5, r3]
 8018b1e:	b92b      	cbnz	r3, 8018b2c <quorem+0x96>
 8018b20:	9b01      	ldr	r3, [sp, #4]
 8018b22:	3b04      	subs	r3, #4
 8018b24:	429d      	cmp	r5, r3
 8018b26:	461a      	mov	r2, r3
 8018b28:	d32f      	bcc.n	8018b8a <quorem+0xf4>
 8018b2a:	613c      	str	r4, [r7, #16]
 8018b2c:	4638      	mov	r0, r7
 8018b2e:	f001 fbeb 	bl	801a308 <__mcmp>
 8018b32:	2800      	cmp	r0, #0
 8018b34:	db25      	blt.n	8018b82 <quorem+0xec>
 8018b36:	4629      	mov	r1, r5
 8018b38:	2000      	movs	r0, #0
 8018b3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8018b3e:	f8d1 c000 	ldr.w	ip, [r1]
 8018b42:	fa1f fe82 	uxth.w	lr, r2
 8018b46:	fa1f f38c 	uxth.w	r3, ip
 8018b4a:	eba3 030e 	sub.w	r3, r3, lr
 8018b4e:	4403      	add	r3, r0
 8018b50:	0c12      	lsrs	r2, r2, #16
 8018b52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018b56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018b5a:	b29b      	uxth	r3, r3
 8018b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018b60:	45c1      	cmp	r9, r8
 8018b62:	f841 3b04 	str.w	r3, [r1], #4
 8018b66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018b6a:	d2e6      	bcs.n	8018b3a <quorem+0xa4>
 8018b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018b70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018b74:	b922      	cbnz	r2, 8018b80 <quorem+0xea>
 8018b76:	3b04      	subs	r3, #4
 8018b78:	429d      	cmp	r5, r3
 8018b7a:	461a      	mov	r2, r3
 8018b7c:	d30b      	bcc.n	8018b96 <quorem+0x100>
 8018b7e:	613c      	str	r4, [r7, #16]
 8018b80:	3601      	adds	r6, #1
 8018b82:	4630      	mov	r0, r6
 8018b84:	b003      	add	sp, #12
 8018b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b8a:	6812      	ldr	r2, [r2, #0]
 8018b8c:	3b04      	subs	r3, #4
 8018b8e:	2a00      	cmp	r2, #0
 8018b90:	d1cb      	bne.n	8018b2a <quorem+0x94>
 8018b92:	3c01      	subs	r4, #1
 8018b94:	e7c6      	b.n	8018b24 <quorem+0x8e>
 8018b96:	6812      	ldr	r2, [r2, #0]
 8018b98:	3b04      	subs	r3, #4
 8018b9a:	2a00      	cmp	r2, #0
 8018b9c:	d1ef      	bne.n	8018b7e <quorem+0xe8>
 8018b9e:	3c01      	subs	r4, #1
 8018ba0:	e7ea      	b.n	8018b78 <quorem+0xe2>
 8018ba2:	2000      	movs	r0, #0
 8018ba4:	e7ee      	b.n	8018b84 <quorem+0xee>
	...

08018ba8 <_dtoa_r>:
 8018ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bac:	ed2d 8b02 	vpush	{d8}
 8018bb0:	69c7      	ldr	r7, [r0, #28]
 8018bb2:	b091      	sub	sp, #68	@ 0x44
 8018bb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018bb8:	ec55 4b10 	vmov	r4, r5, d0
 8018bbc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8018bbe:	9107      	str	r1, [sp, #28]
 8018bc0:	4681      	mov	r9, r0
 8018bc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8018bc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8018bc6:	b97f      	cbnz	r7, 8018be8 <_dtoa_r+0x40>
 8018bc8:	2010      	movs	r0, #16
 8018bca:	f7fe f92b 	bl	8016e24 <malloc>
 8018bce:	4602      	mov	r2, r0
 8018bd0:	f8c9 001c 	str.w	r0, [r9, #28]
 8018bd4:	b920      	cbnz	r0, 8018be0 <_dtoa_r+0x38>
 8018bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8018e58 <_dtoa_r+0x2b0>)
 8018bd8:	21ef      	movs	r1, #239	@ 0xef
 8018bda:	48a0      	ldr	r0, [pc, #640]	@ (8018e5c <_dtoa_r+0x2b4>)
 8018bdc:	f7fe f8f0 	bl	8016dc0 <__assert_func>
 8018be0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018be4:	6007      	str	r7, [r0, #0]
 8018be6:	60c7      	str	r7, [r0, #12]
 8018be8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018bec:	6819      	ldr	r1, [r3, #0]
 8018bee:	b159      	cbz	r1, 8018c08 <_dtoa_r+0x60>
 8018bf0:	685a      	ldr	r2, [r3, #4]
 8018bf2:	604a      	str	r2, [r1, #4]
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	4093      	lsls	r3, r2
 8018bf8:	608b      	str	r3, [r1, #8]
 8018bfa:	4648      	mov	r0, r9
 8018bfc:	f001 f900 	bl	8019e00 <_Bfree>
 8018c00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018c04:	2200      	movs	r2, #0
 8018c06:	601a      	str	r2, [r3, #0]
 8018c08:	1e2b      	subs	r3, r5, #0
 8018c0a:	bfbb      	ittet	lt
 8018c0c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018c10:	9303      	strlt	r3, [sp, #12]
 8018c12:	2300      	movge	r3, #0
 8018c14:	2201      	movlt	r2, #1
 8018c16:	bfac      	ite	ge
 8018c18:	6033      	strge	r3, [r6, #0]
 8018c1a:	6032      	strlt	r2, [r6, #0]
 8018c1c:	4b90      	ldr	r3, [pc, #576]	@ (8018e60 <_dtoa_r+0x2b8>)
 8018c1e:	9e03      	ldr	r6, [sp, #12]
 8018c20:	43b3      	bics	r3, r6
 8018c22:	d110      	bne.n	8018c46 <_dtoa_r+0x9e>
 8018c24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018c26:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018c2a:	6013      	str	r3, [r2, #0]
 8018c2c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8018c30:	4323      	orrs	r3, r4
 8018c32:	f000 84de 	beq.w	80195f2 <_dtoa_r+0xa4a>
 8018c36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018c38:	4f8a      	ldr	r7, [pc, #552]	@ (8018e64 <_dtoa_r+0x2bc>)
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	f000 84e0 	beq.w	8019600 <_dtoa_r+0xa58>
 8018c40:	1cfb      	adds	r3, r7, #3
 8018c42:	f000 bcdb 	b.w	80195fc <_dtoa_r+0xa54>
 8018c46:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018c4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c52:	d10a      	bne.n	8018c6a <_dtoa_r+0xc2>
 8018c54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018c56:	2301      	movs	r3, #1
 8018c58:	6013      	str	r3, [r2, #0]
 8018c5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018c5c:	b113      	cbz	r3, 8018c64 <_dtoa_r+0xbc>
 8018c5e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018c60:	4b81      	ldr	r3, [pc, #516]	@ (8018e68 <_dtoa_r+0x2c0>)
 8018c62:	6013      	str	r3, [r2, #0]
 8018c64:	4f81      	ldr	r7, [pc, #516]	@ (8018e6c <_dtoa_r+0x2c4>)
 8018c66:	f000 bccb 	b.w	8019600 <_dtoa_r+0xa58>
 8018c6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8018c6c:	a90f      	add	r1, sp, #60	@ 0x3c
 8018c6e:	4648      	mov	r0, r9
 8018c70:	eeb0 0b48 	vmov.f64	d0, d8
 8018c74:	f001 fc68 	bl	801a548 <__d2b>
 8018c78:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8018c7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018c7e:	9001      	str	r0, [sp, #4]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d045      	beq.n	8018d10 <_dtoa_r+0x168>
 8018c84:	eeb0 7b48 	vmov.f64	d7, d8
 8018c88:	ee18 1a90 	vmov	r1, s17
 8018c8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018c90:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8018c94:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8018c98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8018c9c:	2500      	movs	r5, #0
 8018c9e:	ee07 1a90 	vmov	s15, r1
 8018ca2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8018ca6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018e40 <_dtoa_r+0x298>
 8018caa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018cae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018e48 <_dtoa_r+0x2a0>
 8018cb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018cb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018e50 <_dtoa_r+0x2a8>
 8018cba:	ee07 3a90 	vmov	s15, r3
 8018cbe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018cc2:	eeb0 7b46 	vmov.f64	d7, d6
 8018cc6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018cca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018cce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd6:	ee16 8a90 	vmov	r8, s13
 8018cda:	d508      	bpl.n	8018cee <_dtoa_r+0x146>
 8018cdc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018ce0:	eeb4 6b47 	vcmp.f64	d6, d7
 8018ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce8:	bf18      	it	ne
 8018cea:	f108 38ff 	addne.w	r8, r8, #4294967295
 8018cee:	f1b8 0f16 	cmp.w	r8, #22
 8018cf2:	d82b      	bhi.n	8018d4c <_dtoa_r+0x1a4>
 8018cf4:	495e      	ldr	r1, [pc, #376]	@ (8018e70 <_dtoa_r+0x2c8>)
 8018cf6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8018cfa:	ed91 7b00 	vldr	d7, [r1]
 8018cfe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d06:	d501      	bpl.n	8018d0c <_dtoa_r+0x164>
 8018d08:	f108 38ff 	add.w	r8, r8, #4294967295
 8018d0c:	2100      	movs	r1, #0
 8018d0e:	e01e      	b.n	8018d4e <_dtoa_r+0x1a6>
 8018d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d12:	4413      	add	r3, r2
 8018d14:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8018d18:	2920      	cmp	r1, #32
 8018d1a:	bfc1      	itttt	gt
 8018d1c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8018d20:	408e      	lslgt	r6, r1
 8018d22:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8018d26:	fa24 f101 	lsrgt.w	r1, r4, r1
 8018d2a:	bfd6      	itet	le
 8018d2c:	f1c1 0120 	rsble	r1, r1, #32
 8018d30:	4331      	orrgt	r1, r6
 8018d32:	fa04 f101 	lslle.w	r1, r4, r1
 8018d36:	ee07 1a90 	vmov	s15, r1
 8018d3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018d3e:	3b01      	subs	r3, #1
 8018d40:	ee17 1a90 	vmov	r1, s15
 8018d44:	2501      	movs	r5, #1
 8018d46:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8018d4a:	e7a8      	b.n	8018c9e <_dtoa_r+0xf6>
 8018d4c:	2101      	movs	r1, #1
 8018d4e:	1ad2      	subs	r2, r2, r3
 8018d50:	1e53      	subs	r3, r2, #1
 8018d52:	9306      	str	r3, [sp, #24]
 8018d54:	bf45      	ittet	mi
 8018d56:	f1c2 0301 	rsbmi	r3, r2, #1
 8018d5a:	9305      	strmi	r3, [sp, #20]
 8018d5c:	2300      	movpl	r3, #0
 8018d5e:	2300      	movmi	r3, #0
 8018d60:	bf4c      	ite	mi
 8018d62:	9306      	strmi	r3, [sp, #24]
 8018d64:	9305      	strpl	r3, [sp, #20]
 8018d66:	f1b8 0f00 	cmp.w	r8, #0
 8018d6a:	910c      	str	r1, [sp, #48]	@ 0x30
 8018d6c:	db18      	blt.n	8018da0 <_dtoa_r+0x1f8>
 8018d6e:	9b06      	ldr	r3, [sp, #24]
 8018d70:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8018d74:	4443      	add	r3, r8
 8018d76:	9306      	str	r3, [sp, #24]
 8018d78:	2300      	movs	r3, #0
 8018d7a:	9a07      	ldr	r2, [sp, #28]
 8018d7c:	2a09      	cmp	r2, #9
 8018d7e:	d849      	bhi.n	8018e14 <_dtoa_r+0x26c>
 8018d80:	2a05      	cmp	r2, #5
 8018d82:	bfc4      	itt	gt
 8018d84:	3a04      	subgt	r2, #4
 8018d86:	9207      	strgt	r2, [sp, #28]
 8018d88:	9a07      	ldr	r2, [sp, #28]
 8018d8a:	f1a2 0202 	sub.w	r2, r2, #2
 8018d8e:	bfcc      	ite	gt
 8018d90:	2400      	movgt	r4, #0
 8018d92:	2401      	movle	r4, #1
 8018d94:	2a03      	cmp	r2, #3
 8018d96:	d848      	bhi.n	8018e2a <_dtoa_r+0x282>
 8018d98:	e8df f002 	tbb	[pc, r2]
 8018d9c:	3a2c2e0b 	.word	0x3a2c2e0b
 8018da0:	9b05      	ldr	r3, [sp, #20]
 8018da2:	2200      	movs	r2, #0
 8018da4:	eba3 0308 	sub.w	r3, r3, r8
 8018da8:	9305      	str	r3, [sp, #20]
 8018daa:	920a      	str	r2, [sp, #40]	@ 0x28
 8018dac:	f1c8 0300 	rsb	r3, r8, #0
 8018db0:	e7e3      	b.n	8018d7a <_dtoa_r+0x1d2>
 8018db2:	2200      	movs	r2, #0
 8018db4:	9208      	str	r2, [sp, #32]
 8018db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018db8:	2a00      	cmp	r2, #0
 8018dba:	dc39      	bgt.n	8018e30 <_dtoa_r+0x288>
 8018dbc:	f04f 0b01 	mov.w	fp, #1
 8018dc0:	46da      	mov	sl, fp
 8018dc2:	465a      	mov	r2, fp
 8018dc4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018dc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8018dcc:	2100      	movs	r1, #0
 8018dce:	2004      	movs	r0, #4
 8018dd0:	f100 0614 	add.w	r6, r0, #20
 8018dd4:	4296      	cmp	r6, r2
 8018dd6:	d930      	bls.n	8018e3a <_dtoa_r+0x292>
 8018dd8:	6079      	str	r1, [r7, #4]
 8018dda:	4648      	mov	r0, r9
 8018ddc:	9304      	str	r3, [sp, #16]
 8018dde:	f000 ffcf 	bl	8019d80 <_Balloc>
 8018de2:	9b04      	ldr	r3, [sp, #16]
 8018de4:	4607      	mov	r7, r0
 8018de6:	2800      	cmp	r0, #0
 8018de8:	d146      	bne.n	8018e78 <_dtoa_r+0x2d0>
 8018dea:	4b22      	ldr	r3, [pc, #136]	@ (8018e74 <_dtoa_r+0x2cc>)
 8018dec:	4602      	mov	r2, r0
 8018dee:	f240 11af 	movw	r1, #431	@ 0x1af
 8018df2:	e6f2      	b.n	8018bda <_dtoa_r+0x32>
 8018df4:	2201      	movs	r2, #1
 8018df6:	e7dd      	b.n	8018db4 <_dtoa_r+0x20c>
 8018df8:	2200      	movs	r2, #0
 8018dfa:	9208      	str	r2, [sp, #32]
 8018dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018dfe:	eb08 0b02 	add.w	fp, r8, r2
 8018e02:	f10b 0a01 	add.w	sl, fp, #1
 8018e06:	4652      	mov	r2, sl
 8018e08:	2a01      	cmp	r2, #1
 8018e0a:	bfb8      	it	lt
 8018e0c:	2201      	movlt	r2, #1
 8018e0e:	e7db      	b.n	8018dc8 <_dtoa_r+0x220>
 8018e10:	2201      	movs	r2, #1
 8018e12:	e7f2      	b.n	8018dfa <_dtoa_r+0x252>
 8018e14:	2401      	movs	r4, #1
 8018e16:	2200      	movs	r2, #0
 8018e18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8018e1c:	f04f 3bff 	mov.w	fp, #4294967295
 8018e20:	2100      	movs	r1, #0
 8018e22:	46da      	mov	sl, fp
 8018e24:	2212      	movs	r2, #18
 8018e26:	9109      	str	r1, [sp, #36]	@ 0x24
 8018e28:	e7ce      	b.n	8018dc8 <_dtoa_r+0x220>
 8018e2a:	2201      	movs	r2, #1
 8018e2c:	9208      	str	r2, [sp, #32]
 8018e2e:	e7f5      	b.n	8018e1c <_dtoa_r+0x274>
 8018e30:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8018e34:	46da      	mov	sl, fp
 8018e36:	465a      	mov	r2, fp
 8018e38:	e7c6      	b.n	8018dc8 <_dtoa_r+0x220>
 8018e3a:	3101      	adds	r1, #1
 8018e3c:	0040      	lsls	r0, r0, #1
 8018e3e:	e7c7      	b.n	8018dd0 <_dtoa_r+0x228>
 8018e40:	636f4361 	.word	0x636f4361
 8018e44:	3fd287a7 	.word	0x3fd287a7
 8018e48:	8b60c8b3 	.word	0x8b60c8b3
 8018e4c:	3fc68a28 	.word	0x3fc68a28
 8018e50:	509f79fb 	.word	0x509f79fb
 8018e54:	3fd34413 	.word	0x3fd34413
 8018e58:	08021782 	.word	0x08021782
 8018e5c:	08021799 	.word	0x08021799
 8018e60:	7ff00000 	.word	0x7ff00000
 8018e64:	0802177e 	.word	0x0802177e
 8018e68:	0802174a 	.word	0x0802174a
 8018e6c:	08021749 	.word	0x08021749
 8018e70:	080218f0 	.word	0x080218f0
 8018e74:	080217f1 	.word	0x080217f1
 8018e78:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8018e7c:	f1ba 0f0e 	cmp.w	sl, #14
 8018e80:	6010      	str	r0, [r2, #0]
 8018e82:	d86f      	bhi.n	8018f64 <_dtoa_r+0x3bc>
 8018e84:	2c00      	cmp	r4, #0
 8018e86:	d06d      	beq.n	8018f64 <_dtoa_r+0x3bc>
 8018e88:	f1b8 0f00 	cmp.w	r8, #0
 8018e8c:	f340 80c2 	ble.w	8019014 <_dtoa_r+0x46c>
 8018e90:	4aca      	ldr	r2, [pc, #808]	@ (80191bc <_dtoa_r+0x614>)
 8018e92:	f008 010f 	and.w	r1, r8, #15
 8018e96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018e9a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8018e9e:	ed92 7b00 	vldr	d7, [r2]
 8018ea2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8018ea6:	f000 80a9 	beq.w	8018ffc <_dtoa_r+0x454>
 8018eaa:	4ac5      	ldr	r2, [pc, #788]	@ (80191c0 <_dtoa_r+0x618>)
 8018eac:	ed92 6b08 	vldr	d6, [r2, #32]
 8018eb0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018eb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018eb8:	f001 010f 	and.w	r1, r1, #15
 8018ebc:	2203      	movs	r2, #3
 8018ebe:	48c0      	ldr	r0, [pc, #768]	@ (80191c0 <_dtoa_r+0x618>)
 8018ec0:	2900      	cmp	r1, #0
 8018ec2:	f040 809d 	bne.w	8019000 <_dtoa_r+0x458>
 8018ec6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018eca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018ece:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018ed2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018ed4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ed8:	2900      	cmp	r1, #0
 8018eda:	f000 80c1 	beq.w	8019060 <_dtoa_r+0x4b8>
 8018ede:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8018ee2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eea:	f140 80b9 	bpl.w	8019060 <_dtoa_r+0x4b8>
 8018eee:	f1ba 0f00 	cmp.w	sl, #0
 8018ef2:	f000 80b5 	beq.w	8019060 <_dtoa_r+0x4b8>
 8018ef6:	f1bb 0f00 	cmp.w	fp, #0
 8018efa:	dd31      	ble.n	8018f60 <_dtoa_r+0x3b8>
 8018efc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8018f00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018f04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018f08:	f108 31ff 	add.w	r1, r8, #4294967295
 8018f0c:	9104      	str	r1, [sp, #16]
 8018f0e:	3201      	adds	r2, #1
 8018f10:	465c      	mov	r4, fp
 8018f12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018f16:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8018f1a:	ee07 2a90 	vmov	s15, r2
 8018f1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018f22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018f26:	ee15 2a90 	vmov	r2, s11
 8018f2a:	ec51 0b15 	vmov	r0, r1, d5
 8018f2e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8018f32:	2c00      	cmp	r4, #0
 8018f34:	f040 8098 	bne.w	8019068 <_dtoa_r+0x4c0>
 8018f38:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018f3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018f40:	ec41 0b17 	vmov	d7, r0, r1
 8018f44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f4c:	f300 8261 	bgt.w	8019412 <_dtoa_r+0x86a>
 8018f50:	eeb1 7b47 	vneg.f64	d7, d7
 8018f54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f5c:	f100 80f5 	bmi.w	801914a <_dtoa_r+0x5a2>
 8018f60:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018f64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018f66:	2a00      	cmp	r2, #0
 8018f68:	f2c0 812c 	blt.w	80191c4 <_dtoa_r+0x61c>
 8018f6c:	f1b8 0f0e 	cmp.w	r8, #14
 8018f70:	f300 8128 	bgt.w	80191c4 <_dtoa_r+0x61c>
 8018f74:	4b91      	ldr	r3, [pc, #580]	@ (80191bc <_dtoa_r+0x614>)
 8018f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018f7a:	ed93 6b00 	vldr	d6, [r3]
 8018f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	da03      	bge.n	8018f8c <_dtoa_r+0x3e4>
 8018f84:	f1ba 0f00 	cmp.w	sl, #0
 8018f88:	f340 80d2 	ble.w	8019130 <_dtoa_r+0x588>
 8018f8c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8018f90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018f94:	463e      	mov	r6, r7
 8018f96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018f9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018f9e:	ee15 3a10 	vmov	r3, s10
 8018fa2:	3330      	adds	r3, #48	@ 0x30
 8018fa4:	f806 3b01 	strb.w	r3, [r6], #1
 8018fa8:	1bf3      	subs	r3, r6, r7
 8018faa:	459a      	cmp	sl, r3
 8018fac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018fb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018fb4:	f040 80f8 	bne.w	80191a8 <_dtoa_r+0x600>
 8018fb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018fbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc4:	f300 80dd 	bgt.w	8019182 <_dtoa_r+0x5da>
 8018fc8:	eeb4 7b46 	vcmp.f64	d7, d6
 8018fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd0:	d104      	bne.n	8018fdc <_dtoa_r+0x434>
 8018fd2:	ee15 3a10 	vmov	r3, s10
 8018fd6:	07db      	lsls	r3, r3, #31
 8018fd8:	f100 80d3 	bmi.w	8019182 <_dtoa_r+0x5da>
 8018fdc:	9901      	ldr	r1, [sp, #4]
 8018fde:	4648      	mov	r0, r9
 8018fe0:	f000 ff0e 	bl	8019e00 <_Bfree>
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fe8:	7033      	strb	r3, [r6, #0]
 8018fea:	f108 0301 	add.w	r3, r8, #1
 8018fee:	6013      	str	r3, [r2, #0]
 8018ff0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	f000 8304 	beq.w	8019600 <_dtoa_r+0xa58>
 8018ff8:	601e      	str	r6, [r3, #0]
 8018ffa:	e301      	b.n	8019600 <_dtoa_r+0xa58>
 8018ffc:	2202      	movs	r2, #2
 8018ffe:	e75e      	b.n	8018ebe <_dtoa_r+0x316>
 8019000:	07cc      	lsls	r4, r1, #31
 8019002:	d504      	bpl.n	801900e <_dtoa_r+0x466>
 8019004:	ed90 6b00 	vldr	d6, [r0]
 8019008:	3201      	adds	r2, #1
 801900a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801900e:	1049      	asrs	r1, r1, #1
 8019010:	3008      	adds	r0, #8
 8019012:	e755      	b.n	8018ec0 <_dtoa_r+0x318>
 8019014:	d022      	beq.n	801905c <_dtoa_r+0x4b4>
 8019016:	f1c8 0100 	rsb	r1, r8, #0
 801901a:	4a68      	ldr	r2, [pc, #416]	@ (80191bc <_dtoa_r+0x614>)
 801901c:	f001 000f 	and.w	r0, r1, #15
 8019020:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019024:	ed92 7b00 	vldr	d7, [r2]
 8019028:	ee28 7b07 	vmul.f64	d7, d8, d7
 801902c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019030:	4863      	ldr	r0, [pc, #396]	@ (80191c0 <_dtoa_r+0x618>)
 8019032:	1109      	asrs	r1, r1, #4
 8019034:	2400      	movs	r4, #0
 8019036:	2202      	movs	r2, #2
 8019038:	b929      	cbnz	r1, 8019046 <_dtoa_r+0x49e>
 801903a:	2c00      	cmp	r4, #0
 801903c:	f43f af49 	beq.w	8018ed2 <_dtoa_r+0x32a>
 8019040:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019044:	e745      	b.n	8018ed2 <_dtoa_r+0x32a>
 8019046:	07ce      	lsls	r6, r1, #31
 8019048:	d505      	bpl.n	8019056 <_dtoa_r+0x4ae>
 801904a:	ed90 6b00 	vldr	d6, [r0]
 801904e:	3201      	adds	r2, #1
 8019050:	2401      	movs	r4, #1
 8019052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019056:	1049      	asrs	r1, r1, #1
 8019058:	3008      	adds	r0, #8
 801905a:	e7ed      	b.n	8019038 <_dtoa_r+0x490>
 801905c:	2202      	movs	r2, #2
 801905e:	e738      	b.n	8018ed2 <_dtoa_r+0x32a>
 8019060:	f8cd 8010 	str.w	r8, [sp, #16]
 8019064:	4654      	mov	r4, sl
 8019066:	e754      	b.n	8018f12 <_dtoa_r+0x36a>
 8019068:	4a54      	ldr	r2, [pc, #336]	@ (80191bc <_dtoa_r+0x614>)
 801906a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801906e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8019072:	9a08      	ldr	r2, [sp, #32]
 8019074:	ec41 0b17 	vmov	d7, r0, r1
 8019078:	443c      	add	r4, r7
 801907a:	b34a      	cbz	r2, 80190d0 <_dtoa_r+0x528>
 801907c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8019080:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8019084:	463e      	mov	r6, r7
 8019086:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801908a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801908e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019092:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019096:	ee14 2a90 	vmov	r2, s9
 801909a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801909e:	3230      	adds	r2, #48	@ 0x30
 80190a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80190a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80190a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ac:	f806 2b01 	strb.w	r2, [r6], #1
 80190b0:	d438      	bmi.n	8019124 <_dtoa_r+0x57c>
 80190b2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80190b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80190ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190be:	d462      	bmi.n	8019186 <_dtoa_r+0x5de>
 80190c0:	42a6      	cmp	r6, r4
 80190c2:	f43f af4d 	beq.w	8018f60 <_dtoa_r+0x3b8>
 80190c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80190ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80190ce:	e7e0      	b.n	8019092 <_dtoa_r+0x4ea>
 80190d0:	4621      	mov	r1, r4
 80190d2:	463e      	mov	r6, r7
 80190d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80190d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80190dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80190e0:	ee14 2a90 	vmov	r2, s9
 80190e4:	3230      	adds	r2, #48	@ 0x30
 80190e6:	f806 2b01 	strb.w	r2, [r6], #1
 80190ea:	42a6      	cmp	r6, r4
 80190ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80190f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80190f4:	d119      	bne.n	801912a <_dtoa_r+0x582>
 80190f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80190fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80190fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019106:	dc3e      	bgt.n	8019186 <_dtoa_r+0x5de>
 8019108:	ee35 5b47 	vsub.f64	d5, d5, d7
 801910c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019114:	f57f af24 	bpl.w	8018f60 <_dtoa_r+0x3b8>
 8019118:	460e      	mov	r6, r1
 801911a:	3901      	subs	r1, #1
 801911c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019120:	2b30      	cmp	r3, #48	@ 0x30
 8019122:	d0f9      	beq.n	8019118 <_dtoa_r+0x570>
 8019124:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019128:	e758      	b.n	8018fdc <_dtoa_r+0x434>
 801912a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801912e:	e7d5      	b.n	80190dc <_dtoa_r+0x534>
 8019130:	d10b      	bne.n	801914a <_dtoa_r+0x5a2>
 8019132:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019136:	ee26 6b07 	vmul.f64	d6, d6, d7
 801913a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801913e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019146:	f2c0 8161 	blt.w	801940c <_dtoa_r+0x864>
 801914a:	2400      	movs	r4, #0
 801914c:	4625      	mov	r5, r4
 801914e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019150:	43db      	mvns	r3, r3
 8019152:	9304      	str	r3, [sp, #16]
 8019154:	463e      	mov	r6, r7
 8019156:	f04f 0800 	mov.w	r8, #0
 801915a:	4621      	mov	r1, r4
 801915c:	4648      	mov	r0, r9
 801915e:	f000 fe4f 	bl	8019e00 <_Bfree>
 8019162:	2d00      	cmp	r5, #0
 8019164:	d0de      	beq.n	8019124 <_dtoa_r+0x57c>
 8019166:	f1b8 0f00 	cmp.w	r8, #0
 801916a:	d005      	beq.n	8019178 <_dtoa_r+0x5d0>
 801916c:	45a8      	cmp	r8, r5
 801916e:	d003      	beq.n	8019178 <_dtoa_r+0x5d0>
 8019170:	4641      	mov	r1, r8
 8019172:	4648      	mov	r0, r9
 8019174:	f000 fe44 	bl	8019e00 <_Bfree>
 8019178:	4629      	mov	r1, r5
 801917a:	4648      	mov	r0, r9
 801917c:	f000 fe40 	bl	8019e00 <_Bfree>
 8019180:	e7d0      	b.n	8019124 <_dtoa_r+0x57c>
 8019182:	f8cd 8010 	str.w	r8, [sp, #16]
 8019186:	4633      	mov	r3, r6
 8019188:	461e      	mov	r6, r3
 801918a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801918e:	2a39      	cmp	r2, #57	@ 0x39
 8019190:	d106      	bne.n	80191a0 <_dtoa_r+0x5f8>
 8019192:	429f      	cmp	r7, r3
 8019194:	d1f8      	bne.n	8019188 <_dtoa_r+0x5e0>
 8019196:	9a04      	ldr	r2, [sp, #16]
 8019198:	3201      	adds	r2, #1
 801919a:	9204      	str	r2, [sp, #16]
 801919c:	2230      	movs	r2, #48	@ 0x30
 801919e:	703a      	strb	r2, [r7, #0]
 80191a0:	781a      	ldrb	r2, [r3, #0]
 80191a2:	3201      	adds	r2, #1
 80191a4:	701a      	strb	r2, [r3, #0]
 80191a6:	e7bd      	b.n	8019124 <_dtoa_r+0x57c>
 80191a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80191ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80191b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191b4:	f47f aeef 	bne.w	8018f96 <_dtoa_r+0x3ee>
 80191b8:	e710      	b.n	8018fdc <_dtoa_r+0x434>
 80191ba:	bf00      	nop
 80191bc:	080218f0 	.word	0x080218f0
 80191c0:	080218c8 	.word	0x080218c8
 80191c4:	9908      	ldr	r1, [sp, #32]
 80191c6:	2900      	cmp	r1, #0
 80191c8:	f000 80e3 	beq.w	8019392 <_dtoa_r+0x7ea>
 80191cc:	9907      	ldr	r1, [sp, #28]
 80191ce:	2901      	cmp	r1, #1
 80191d0:	f300 80c8 	bgt.w	8019364 <_dtoa_r+0x7bc>
 80191d4:	2d00      	cmp	r5, #0
 80191d6:	f000 80c1 	beq.w	801935c <_dtoa_r+0x7b4>
 80191da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80191de:	9e05      	ldr	r6, [sp, #20]
 80191e0:	461c      	mov	r4, r3
 80191e2:	9304      	str	r3, [sp, #16]
 80191e4:	9b05      	ldr	r3, [sp, #20]
 80191e6:	4413      	add	r3, r2
 80191e8:	9305      	str	r3, [sp, #20]
 80191ea:	9b06      	ldr	r3, [sp, #24]
 80191ec:	2101      	movs	r1, #1
 80191ee:	4413      	add	r3, r2
 80191f0:	4648      	mov	r0, r9
 80191f2:	9306      	str	r3, [sp, #24]
 80191f4:	f000 ff02 	bl	8019ffc <__i2b>
 80191f8:	9b04      	ldr	r3, [sp, #16]
 80191fa:	4605      	mov	r5, r0
 80191fc:	b166      	cbz	r6, 8019218 <_dtoa_r+0x670>
 80191fe:	9a06      	ldr	r2, [sp, #24]
 8019200:	2a00      	cmp	r2, #0
 8019202:	dd09      	ble.n	8019218 <_dtoa_r+0x670>
 8019204:	42b2      	cmp	r2, r6
 8019206:	9905      	ldr	r1, [sp, #20]
 8019208:	bfa8      	it	ge
 801920a:	4632      	movge	r2, r6
 801920c:	1a89      	subs	r1, r1, r2
 801920e:	9105      	str	r1, [sp, #20]
 8019210:	9906      	ldr	r1, [sp, #24]
 8019212:	1ab6      	subs	r6, r6, r2
 8019214:	1a8a      	subs	r2, r1, r2
 8019216:	9206      	str	r2, [sp, #24]
 8019218:	b1fb      	cbz	r3, 801925a <_dtoa_r+0x6b2>
 801921a:	9a08      	ldr	r2, [sp, #32]
 801921c:	2a00      	cmp	r2, #0
 801921e:	f000 80bc 	beq.w	801939a <_dtoa_r+0x7f2>
 8019222:	b19c      	cbz	r4, 801924c <_dtoa_r+0x6a4>
 8019224:	4629      	mov	r1, r5
 8019226:	4622      	mov	r2, r4
 8019228:	4648      	mov	r0, r9
 801922a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801922c:	f000 ffa6 	bl	801a17c <__pow5mult>
 8019230:	9a01      	ldr	r2, [sp, #4]
 8019232:	4601      	mov	r1, r0
 8019234:	4605      	mov	r5, r0
 8019236:	4648      	mov	r0, r9
 8019238:	f000 fef6 	bl	801a028 <__multiply>
 801923c:	9901      	ldr	r1, [sp, #4]
 801923e:	9004      	str	r0, [sp, #16]
 8019240:	4648      	mov	r0, r9
 8019242:	f000 fddd 	bl	8019e00 <_Bfree>
 8019246:	9a04      	ldr	r2, [sp, #16]
 8019248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801924a:	9201      	str	r2, [sp, #4]
 801924c:	1b1a      	subs	r2, r3, r4
 801924e:	d004      	beq.n	801925a <_dtoa_r+0x6b2>
 8019250:	9901      	ldr	r1, [sp, #4]
 8019252:	4648      	mov	r0, r9
 8019254:	f000 ff92 	bl	801a17c <__pow5mult>
 8019258:	9001      	str	r0, [sp, #4]
 801925a:	2101      	movs	r1, #1
 801925c:	4648      	mov	r0, r9
 801925e:	f000 fecd 	bl	8019ffc <__i2b>
 8019262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019264:	4604      	mov	r4, r0
 8019266:	2b00      	cmp	r3, #0
 8019268:	f000 81d0 	beq.w	801960c <_dtoa_r+0xa64>
 801926c:	461a      	mov	r2, r3
 801926e:	4601      	mov	r1, r0
 8019270:	4648      	mov	r0, r9
 8019272:	f000 ff83 	bl	801a17c <__pow5mult>
 8019276:	9b07      	ldr	r3, [sp, #28]
 8019278:	2b01      	cmp	r3, #1
 801927a:	4604      	mov	r4, r0
 801927c:	f300 8095 	bgt.w	80193aa <_dtoa_r+0x802>
 8019280:	9b02      	ldr	r3, [sp, #8]
 8019282:	2b00      	cmp	r3, #0
 8019284:	f040 808b 	bne.w	801939e <_dtoa_r+0x7f6>
 8019288:	9b03      	ldr	r3, [sp, #12]
 801928a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801928e:	2a00      	cmp	r2, #0
 8019290:	f040 8087 	bne.w	80193a2 <_dtoa_r+0x7fa>
 8019294:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019298:	0d12      	lsrs	r2, r2, #20
 801929a:	0512      	lsls	r2, r2, #20
 801929c:	2a00      	cmp	r2, #0
 801929e:	f000 8082 	beq.w	80193a6 <_dtoa_r+0x7fe>
 80192a2:	9b05      	ldr	r3, [sp, #20]
 80192a4:	3301      	adds	r3, #1
 80192a6:	9305      	str	r3, [sp, #20]
 80192a8:	9b06      	ldr	r3, [sp, #24]
 80192aa:	3301      	adds	r3, #1
 80192ac:	9306      	str	r3, [sp, #24]
 80192ae:	2301      	movs	r3, #1
 80192b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80192b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	f000 81af 	beq.w	8019618 <_dtoa_r+0xa70>
 80192ba:	6922      	ldr	r2, [r4, #16]
 80192bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80192c0:	6910      	ldr	r0, [r2, #16]
 80192c2:	f000 fe4f 	bl	8019f64 <__hi0bits>
 80192c6:	f1c0 0020 	rsb	r0, r0, #32
 80192ca:	9b06      	ldr	r3, [sp, #24]
 80192cc:	4418      	add	r0, r3
 80192ce:	f010 001f 	ands.w	r0, r0, #31
 80192d2:	d076      	beq.n	80193c2 <_dtoa_r+0x81a>
 80192d4:	f1c0 0220 	rsb	r2, r0, #32
 80192d8:	2a04      	cmp	r2, #4
 80192da:	dd69      	ble.n	80193b0 <_dtoa_r+0x808>
 80192dc:	9b05      	ldr	r3, [sp, #20]
 80192de:	f1c0 001c 	rsb	r0, r0, #28
 80192e2:	4403      	add	r3, r0
 80192e4:	9305      	str	r3, [sp, #20]
 80192e6:	9b06      	ldr	r3, [sp, #24]
 80192e8:	4406      	add	r6, r0
 80192ea:	4403      	add	r3, r0
 80192ec:	9306      	str	r3, [sp, #24]
 80192ee:	9b05      	ldr	r3, [sp, #20]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	dd05      	ble.n	8019300 <_dtoa_r+0x758>
 80192f4:	9901      	ldr	r1, [sp, #4]
 80192f6:	461a      	mov	r2, r3
 80192f8:	4648      	mov	r0, r9
 80192fa:	f000 ff99 	bl	801a230 <__lshift>
 80192fe:	9001      	str	r0, [sp, #4]
 8019300:	9b06      	ldr	r3, [sp, #24]
 8019302:	2b00      	cmp	r3, #0
 8019304:	dd05      	ble.n	8019312 <_dtoa_r+0x76a>
 8019306:	4621      	mov	r1, r4
 8019308:	461a      	mov	r2, r3
 801930a:	4648      	mov	r0, r9
 801930c:	f000 ff90 	bl	801a230 <__lshift>
 8019310:	4604      	mov	r4, r0
 8019312:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019314:	2b00      	cmp	r3, #0
 8019316:	d056      	beq.n	80193c6 <_dtoa_r+0x81e>
 8019318:	9801      	ldr	r0, [sp, #4]
 801931a:	4621      	mov	r1, r4
 801931c:	f000 fff4 	bl	801a308 <__mcmp>
 8019320:	2800      	cmp	r0, #0
 8019322:	da50      	bge.n	80193c6 <_dtoa_r+0x81e>
 8019324:	f108 33ff 	add.w	r3, r8, #4294967295
 8019328:	9304      	str	r3, [sp, #16]
 801932a:	9901      	ldr	r1, [sp, #4]
 801932c:	2300      	movs	r3, #0
 801932e:	220a      	movs	r2, #10
 8019330:	4648      	mov	r0, r9
 8019332:	f000 fd87 	bl	8019e44 <__multadd>
 8019336:	9b08      	ldr	r3, [sp, #32]
 8019338:	9001      	str	r0, [sp, #4]
 801933a:	2b00      	cmp	r3, #0
 801933c:	f000 816e 	beq.w	801961c <_dtoa_r+0xa74>
 8019340:	4629      	mov	r1, r5
 8019342:	2300      	movs	r3, #0
 8019344:	220a      	movs	r2, #10
 8019346:	4648      	mov	r0, r9
 8019348:	f000 fd7c 	bl	8019e44 <__multadd>
 801934c:	f1bb 0f00 	cmp.w	fp, #0
 8019350:	4605      	mov	r5, r0
 8019352:	dc64      	bgt.n	801941e <_dtoa_r+0x876>
 8019354:	9b07      	ldr	r3, [sp, #28]
 8019356:	2b02      	cmp	r3, #2
 8019358:	dc3e      	bgt.n	80193d8 <_dtoa_r+0x830>
 801935a:	e060      	b.n	801941e <_dtoa_r+0x876>
 801935c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801935e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019362:	e73c      	b.n	80191de <_dtoa_r+0x636>
 8019364:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019368:	42a3      	cmp	r3, r4
 801936a:	bfbf      	itttt	lt
 801936c:	1ae2      	sublt	r2, r4, r3
 801936e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019370:	189b      	addlt	r3, r3, r2
 8019372:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8019374:	bfae      	itee	ge
 8019376:	1b1c      	subge	r4, r3, r4
 8019378:	4623      	movlt	r3, r4
 801937a:	2400      	movlt	r4, #0
 801937c:	f1ba 0f00 	cmp.w	sl, #0
 8019380:	bfb5      	itete	lt
 8019382:	9a05      	ldrlt	r2, [sp, #20]
 8019384:	9e05      	ldrge	r6, [sp, #20]
 8019386:	eba2 060a 	sublt.w	r6, r2, sl
 801938a:	4652      	movge	r2, sl
 801938c:	bfb8      	it	lt
 801938e:	2200      	movlt	r2, #0
 8019390:	e727      	b.n	80191e2 <_dtoa_r+0x63a>
 8019392:	9e05      	ldr	r6, [sp, #20]
 8019394:	9d08      	ldr	r5, [sp, #32]
 8019396:	461c      	mov	r4, r3
 8019398:	e730      	b.n	80191fc <_dtoa_r+0x654>
 801939a:	461a      	mov	r2, r3
 801939c:	e758      	b.n	8019250 <_dtoa_r+0x6a8>
 801939e:	2300      	movs	r3, #0
 80193a0:	e786      	b.n	80192b0 <_dtoa_r+0x708>
 80193a2:	9b02      	ldr	r3, [sp, #8]
 80193a4:	e784      	b.n	80192b0 <_dtoa_r+0x708>
 80193a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80193a8:	e783      	b.n	80192b2 <_dtoa_r+0x70a>
 80193aa:	2300      	movs	r3, #0
 80193ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80193ae:	e784      	b.n	80192ba <_dtoa_r+0x712>
 80193b0:	d09d      	beq.n	80192ee <_dtoa_r+0x746>
 80193b2:	9b05      	ldr	r3, [sp, #20]
 80193b4:	321c      	adds	r2, #28
 80193b6:	4413      	add	r3, r2
 80193b8:	9305      	str	r3, [sp, #20]
 80193ba:	9b06      	ldr	r3, [sp, #24]
 80193bc:	4416      	add	r6, r2
 80193be:	4413      	add	r3, r2
 80193c0:	e794      	b.n	80192ec <_dtoa_r+0x744>
 80193c2:	4602      	mov	r2, r0
 80193c4:	e7f5      	b.n	80193b2 <_dtoa_r+0x80a>
 80193c6:	f1ba 0f00 	cmp.w	sl, #0
 80193ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80193ce:	46d3      	mov	fp, sl
 80193d0:	dc21      	bgt.n	8019416 <_dtoa_r+0x86e>
 80193d2:	9b07      	ldr	r3, [sp, #28]
 80193d4:	2b02      	cmp	r3, #2
 80193d6:	dd1e      	ble.n	8019416 <_dtoa_r+0x86e>
 80193d8:	f1bb 0f00 	cmp.w	fp, #0
 80193dc:	f47f aeb7 	bne.w	801914e <_dtoa_r+0x5a6>
 80193e0:	4621      	mov	r1, r4
 80193e2:	465b      	mov	r3, fp
 80193e4:	2205      	movs	r2, #5
 80193e6:	4648      	mov	r0, r9
 80193e8:	f000 fd2c 	bl	8019e44 <__multadd>
 80193ec:	4601      	mov	r1, r0
 80193ee:	4604      	mov	r4, r0
 80193f0:	9801      	ldr	r0, [sp, #4]
 80193f2:	f000 ff89 	bl	801a308 <__mcmp>
 80193f6:	2800      	cmp	r0, #0
 80193f8:	f77f aea9 	ble.w	801914e <_dtoa_r+0x5a6>
 80193fc:	463e      	mov	r6, r7
 80193fe:	2331      	movs	r3, #49	@ 0x31
 8019400:	f806 3b01 	strb.w	r3, [r6], #1
 8019404:	9b04      	ldr	r3, [sp, #16]
 8019406:	3301      	adds	r3, #1
 8019408:	9304      	str	r3, [sp, #16]
 801940a:	e6a4      	b.n	8019156 <_dtoa_r+0x5ae>
 801940c:	f8cd 8010 	str.w	r8, [sp, #16]
 8019410:	4654      	mov	r4, sl
 8019412:	4625      	mov	r5, r4
 8019414:	e7f2      	b.n	80193fc <_dtoa_r+0x854>
 8019416:	9b08      	ldr	r3, [sp, #32]
 8019418:	2b00      	cmp	r3, #0
 801941a:	f000 8103 	beq.w	8019624 <_dtoa_r+0xa7c>
 801941e:	2e00      	cmp	r6, #0
 8019420:	dd05      	ble.n	801942e <_dtoa_r+0x886>
 8019422:	4629      	mov	r1, r5
 8019424:	4632      	mov	r2, r6
 8019426:	4648      	mov	r0, r9
 8019428:	f000 ff02 	bl	801a230 <__lshift>
 801942c:	4605      	mov	r5, r0
 801942e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019430:	2b00      	cmp	r3, #0
 8019432:	d058      	beq.n	80194e6 <_dtoa_r+0x93e>
 8019434:	6869      	ldr	r1, [r5, #4]
 8019436:	4648      	mov	r0, r9
 8019438:	f000 fca2 	bl	8019d80 <_Balloc>
 801943c:	4606      	mov	r6, r0
 801943e:	b928      	cbnz	r0, 801944c <_dtoa_r+0x8a4>
 8019440:	4b82      	ldr	r3, [pc, #520]	@ (801964c <_dtoa_r+0xaa4>)
 8019442:	4602      	mov	r2, r0
 8019444:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019448:	f7ff bbc7 	b.w	8018bda <_dtoa_r+0x32>
 801944c:	692a      	ldr	r2, [r5, #16]
 801944e:	3202      	adds	r2, #2
 8019450:	0092      	lsls	r2, r2, #2
 8019452:	f105 010c 	add.w	r1, r5, #12
 8019456:	300c      	adds	r0, #12
 8019458:	f7ff fafd 	bl	8018a56 <memcpy>
 801945c:	2201      	movs	r2, #1
 801945e:	4631      	mov	r1, r6
 8019460:	4648      	mov	r0, r9
 8019462:	f000 fee5 	bl	801a230 <__lshift>
 8019466:	1c7b      	adds	r3, r7, #1
 8019468:	9305      	str	r3, [sp, #20]
 801946a:	eb07 030b 	add.w	r3, r7, fp
 801946e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019470:	9b02      	ldr	r3, [sp, #8]
 8019472:	f003 0301 	and.w	r3, r3, #1
 8019476:	46a8      	mov	r8, r5
 8019478:	9308      	str	r3, [sp, #32]
 801947a:	4605      	mov	r5, r0
 801947c:	9b05      	ldr	r3, [sp, #20]
 801947e:	9801      	ldr	r0, [sp, #4]
 8019480:	4621      	mov	r1, r4
 8019482:	f103 3bff 	add.w	fp, r3, #4294967295
 8019486:	f7ff fb06 	bl	8018a96 <quorem>
 801948a:	4641      	mov	r1, r8
 801948c:	9002      	str	r0, [sp, #8]
 801948e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019492:	9801      	ldr	r0, [sp, #4]
 8019494:	f000 ff38 	bl	801a308 <__mcmp>
 8019498:	462a      	mov	r2, r5
 801949a:	9006      	str	r0, [sp, #24]
 801949c:	4621      	mov	r1, r4
 801949e:	4648      	mov	r0, r9
 80194a0:	f000 ff4e 	bl	801a340 <__mdiff>
 80194a4:	68c2      	ldr	r2, [r0, #12]
 80194a6:	4606      	mov	r6, r0
 80194a8:	b9fa      	cbnz	r2, 80194ea <_dtoa_r+0x942>
 80194aa:	4601      	mov	r1, r0
 80194ac:	9801      	ldr	r0, [sp, #4]
 80194ae:	f000 ff2b 	bl	801a308 <__mcmp>
 80194b2:	4602      	mov	r2, r0
 80194b4:	4631      	mov	r1, r6
 80194b6:	4648      	mov	r0, r9
 80194b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80194ba:	f000 fca1 	bl	8019e00 <_Bfree>
 80194be:	9b07      	ldr	r3, [sp, #28]
 80194c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80194c2:	9e05      	ldr	r6, [sp, #20]
 80194c4:	ea43 0102 	orr.w	r1, r3, r2
 80194c8:	9b08      	ldr	r3, [sp, #32]
 80194ca:	4319      	orrs	r1, r3
 80194cc:	d10f      	bne.n	80194ee <_dtoa_r+0x946>
 80194ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80194d2:	d028      	beq.n	8019526 <_dtoa_r+0x97e>
 80194d4:	9b06      	ldr	r3, [sp, #24]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	dd02      	ble.n	80194e0 <_dtoa_r+0x938>
 80194da:	9b02      	ldr	r3, [sp, #8]
 80194dc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80194e0:	f88b a000 	strb.w	sl, [fp]
 80194e4:	e639      	b.n	801915a <_dtoa_r+0x5b2>
 80194e6:	4628      	mov	r0, r5
 80194e8:	e7bd      	b.n	8019466 <_dtoa_r+0x8be>
 80194ea:	2201      	movs	r2, #1
 80194ec:	e7e2      	b.n	80194b4 <_dtoa_r+0x90c>
 80194ee:	9b06      	ldr	r3, [sp, #24]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	db04      	blt.n	80194fe <_dtoa_r+0x956>
 80194f4:	9907      	ldr	r1, [sp, #28]
 80194f6:	430b      	orrs	r3, r1
 80194f8:	9908      	ldr	r1, [sp, #32]
 80194fa:	430b      	orrs	r3, r1
 80194fc:	d120      	bne.n	8019540 <_dtoa_r+0x998>
 80194fe:	2a00      	cmp	r2, #0
 8019500:	ddee      	ble.n	80194e0 <_dtoa_r+0x938>
 8019502:	9901      	ldr	r1, [sp, #4]
 8019504:	2201      	movs	r2, #1
 8019506:	4648      	mov	r0, r9
 8019508:	f000 fe92 	bl	801a230 <__lshift>
 801950c:	4621      	mov	r1, r4
 801950e:	9001      	str	r0, [sp, #4]
 8019510:	f000 fefa 	bl	801a308 <__mcmp>
 8019514:	2800      	cmp	r0, #0
 8019516:	dc03      	bgt.n	8019520 <_dtoa_r+0x978>
 8019518:	d1e2      	bne.n	80194e0 <_dtoa_r+0x938>
 801951a:	f01a 0f01 	tst.w	sl, #1
 801951e:	d0df      	beq.n	80194e0 <_dtoa_r+0x938>
 8019520:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019524:	d1d9      	bne.n	80194da <_dtoa_r+0x932>
 8019526:	2339      	movs	r3, #57	@ 0x39
 8019528:	f88b 3000 	strb.w	r3, [fp]
 801952c:	4633      	mov	r3, r6
 801952e:	461e      	mov	r6, r3
 8019530:	3b01      	subs	r3, #1
 8019532:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019536:	2a39      	cmp	r2, #57	@ 0x39
 8019538:	d053      	beq.n	80195e2 <_dtoa_r+0xa3a>
 801953a:	3201      	adds	r2, #1
 801953c:	701a      	strb	r2, [r3, #0]
 801953e:	e60c      	b.n	801915a <_dtoa_r+0x5b2>
 8019540:	2a00      	cmp	r2, #0
 8019542:	dd07      	ble.n	8019554 <_dtoa_r+0x9ac>
 8019544:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019548:	d0ed      	beq.n	8019526 <_dtoa_r+0x97e>
 801954a:	f10a 0301 	add.w	r3, sl, #1
 801954e:	f88b 3000 	strb.w	r3, [fp]
 8019552:	e602      	b.n	801915a <_dtoa_r+0x5b2>
 8019554:	9b05      	ldr	r3, [sp, #20]
 8019556:	9a05      	ldr	r2, [sp, #20]
 8019558:	f803 ac01 	strb.w	sl, [r3, #-1]
 801955c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801955e:	4293      	cmp	r3, r2
 8019560:	d029      	beq.n	80195b6 <_dtoa_r+0xa0e>
 8019562:	9901      	ldr	r1, [sp, #4]
 8019564:	2300      	movs	r3, #0
 8019566:	220a      	movs	r2, #10
 8019568:	4648      	mov	r0, r9
 801956a:	f000 fc6b 	bl	8019e44 <__multadd>
 801956e:	45a8      	cmp	r8, r5
 8019570:	9001      	str	r0, [sp, #4]
 8019572:	f04f 0300 	mov.w	r3, #0
 8019576:	f04f 020a 	mov.w	r2, #10
 801957a:	4641      	mov	r1, r8
 801957c:	4648      	mov	r0, r9
 801957e:	d107      	bne.n	8019590 <_dtoa_r+0x9e8>
 8019580:	f000 fc60 	bl	8019e44 <__multadd>
 8019584:	4680      	mov	r8, r0
 8019586:	4605      	mov	r5, r0
 8019588:	9b05      	ldr	r3, [sp, #20]
 801958a:	3301      	adds	r3, #1
 801958c:	9305      	str	r3, [sp, #20]
 801958e:	e775      	b.n	801947c <_dtoa_r+0x8d4>
 8019590:	f000 fc58 	bl	8019e44 <__multadd>
 8019594:	4629      	mov	r1, r5
 8019596:	4680      	mov	r8, r0
 8019598:	2300      	movs	r3, #0
 801959a:	220a      	movs	r2, #10
 801959c:	4648      	mov	r0, r9
 801959e:	f000 fc51 	bl	8019e44 <__multadd>
 80195a2:	4605      	mov	r5, r0
 80195a4:	e7f0      	b.n	8019588 <_dtoa_r+0x9e0>
 80195a6:	f1bb 0f00 	cmp.w	fp, #0
 80195aa:	bfcc      	ite	gt
 80195ac:	465e      	movgt	r6, fp
 80195ae:	2601      	movle	r6, #1
 80195b0:	443e      	add	r6, r7
 80195b2:	f04f 0800 	mov.w	r8, #0
 80195b6:	9901      	ldr	r1, [sp, #4]
 80195b8:	2201      	movs	r2, #1
 80195ba:	4648      	mov	r0, r9
 80195bc:	f000 fe38 	bl	801a230 <__lshift>
 80195c0:	4621      	mov	r1, r4
 80195c2:	9001      	str	r0, [sp, #4]
 80195c4:	f000 fea0 	bl	801a308 <__mcmp>
 80195c8:	2800      	cmp	r0, #0
 80195ca:	dcaf      	bgt.n	801952c <_dtoa_r+0x984>
 80195cc:	d102      	bne.n	80195d4 <_dtoa_r+0xa2c>
 80195ce:	f01a 0f01 	tst.w	sl, #1
 80195d2:	d1ab      	bne.n	801952c <_dtoa_r+0x984>
 80195d4:	4633      	mov	r3, r6
 80195d6:	461e      	mov	r6, r3
 80195d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80195dc:	2a30      	cmp	r2, #48	@ 0x30
 80195de:	d0fa      	beq.n	80195d6 <_dtoa_r+0xa2e>
 80195e0:	e5bb      	b.n	801915a <_dtoa_r+0x5b2>
 80195e2:	429f      	cmp	r7, r3
 80195e4:	d1a3      	bne.n	801952e <_dtoa_r+0x986>
 80195e6:	9b04      	ldr	r3, [sp, #16]
 80195e8:	3301      	adds	r3, #1
 80195ea:	9304      	str	r3, [sp, #16]
 80195ec:	2331      	movs	r3, #49	@ 0x31
 80195ee:	703b      	strb	r3, [r7, #0]
 80195f0:	e5b3      	b.n	801915a <_dtoa_r+0x5b2>
 80195f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80195f4:	4f16      	ldr	r7, [pc, #88]	@ (8019650 <_dtoa_r+0xaa8>)
 80195f6:	b11b      	cbz	r3, 8019600 <_dtoa_r+0xa58>
 80195f8:	f107 0308 	add.w	r3, r7, #8
 80195fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80195fe:	6013      	str	r3, [r2, #0]
 8019600:	4638      	mov	r0, r7
 8019602:	b011      	add	sp, #68	@ 0x44
 8019604:	ecbd 8b02 	vpop	{d8}
 8019608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801960c:	9b07      	ldr	r3, [sp, #28]
 801960e:	2b01      	cmp	r3, #1
 8019610:	f77f ae36 	ble.w	8019280 <_dtoa_r+0x6d8>
 8019614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019618:	2001      	movs	r0, #1
 801961a:	e656      	b.n	80192ca <_dtoa_r+0x722>
 801961c:	f1bb 0f00 	cmp.w	fp, #0
 8019620:	f77f aed7 	ble.w	80193d2 <_dtoa_r+0x82a>
 8019624:	463e      	mov	r6, r7
 8019626:	9801      	ldr	r0, [sp, #4]
 8019628:	4621      	mov	r1, r4
 801962a:	f7ff fa34 	bl	8018a96 <quorem>
 801962e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019632:	f806 ab01 	strb.w	sl, [r6], #1
 8019636:	1bf2      	subs	r2, r6, r7
 8019638:	4593      	cmp	fp, r2
 801963a:	ddb4      	ble.n	80195a6 <_dtoa_r+0x9fe>
 801963c:	9901      	ldr	r1, [sp, #4]
 801963e:	2300      	movs	r3, #0
 8019640:	220a      	movs	r2, #10
 8019642:	4648      	mov	r0, r9
 8019644:	f000 fbfe 	bl	8019e44 <__multadd>
 8019648:	9001      	str	r0, [sp, #4]
 801964a:	e7ec      	b.n	8019626 <_dtoa_r+0xa7e>
 801964c:	080217f1 	.word	0x080217f1
 8019650:	08021775 	.word	0x08021775

08019654 <_free_r>:
 8019654:	b538      	push	{r3, r4, r5, lr}
 8019656:	4605      	mov	r5, r0
 8019658:	2900      	cmp	r1, #0
 801965a:	d041      	beq.n	80196e0 <_free_r+0x8c>
 801965c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019660:	1f0c      	subs	r4, r1, #4
 8019662:	2b00      	cmp	r3, #0
 8019664:	bfb8      	it	lt
 8019666:	18e4      	addlt	r4, r4, r3
 8019668:	f7fd fc8e 	bl	8016f88 <__malloc_lock>
 801966c:	4a1d      	ldr	r2, [pc, #116]	@ (80196e4 <_free_r+0x90>)
 801966e:	6813      	ldr	r3, [r2, #0]
 8019670:	b933      	cbnz	r3, 8019680 <_free_r+0x2c>
 8019672:	6063      	str	r3, [r4, #4]
 8019674:	6014      	str	r4, [r2, #0]
 8019676:	4628      	mov	r0, r5
 8019678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801967c:	f7fd bc8a 	b.w	8016f94 <__malloc_unlock>
 8019680:	42a3      	cmp	r3, r4
 8019682:	d908      	bls.n	8019696 <_free_r+0x42>
 8019684:	6820      	ldr	r0, [r4, #0]
 8019686:	1821      	adds	r1, r4, r0
 8019688:	428b      	cmp	r3, r1
 801968a:	bf01      	itttt	eq
 801968c:	6819      	ldreq	r1, [r3, #0]
 801968e:	685b      	ldreq	r3, [r3, #4]
 8019690:	1809      	addeq	r1, r1, r0
 8019692:	6021      	streq	r1, [r4, #0]
 8019694:	e7ed      	b.n	8019672 <_free_r+0x1e>
 8019696:	461a      	mov	r2, r3
 8019698:	685b      	ldr	r3, [r3, #4]
 801969a:	b10b      	cbz	r3, 80196a0 <_free_r+0x4c>
 801969c:	42a3      	cmp	r3, r4
 801969e:	d9fa      	bls.n	8019696 <_free_r+0x42>
 80196a0:	6811      	ldr	r1, [r2, #0]
 80196a2:	1850      	adds	r0, r2, r1
 80196a4:	42a0      	cmp	r0, r4
 80196a6:	d10b      	bne.n	80196c0 <_free_r+0x6c>
 80196a8:	6820      	ldr	r0, [r4, #0]
 80196aa:	4401      	add	r1, r0
 80196ac:	1850      	adds	r0, r2, r1
 80196ae:	4283      	cmp	r3, r0
 80196b0:	6011      	str	r1, [r2, #0]
 80196b2:	d1e0      	bne.n	8019676 <_free_r+0x22>
 80196b4:	6818      	ldr	r0, [r3, #0]
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	6053      	str	r3, [r2, #4]
 80196ba:	4408      	add	r0, r1
 80196bc:	6010      	str	r0, [r2, #0]
 80196be:	e7da      	b.n	8019676 <_free_r+0x22>
 80196c0:	d902      	bls.n	80196c8 <_free_r+0x74>
 80196c2:	230c      	movs	r3, #12
 80196c4:	602b      	str	r3, [r5, #0]
 80196c6:	e7d6      	b.n	8019676 <_free_r+0x22>
 80196c8:	6820      	ldr	r0, [r4, #0]
 80196ca:	1821      	adds	r1, r4, r0
 80196cc:	428b      	cmp	r3, r1
 80196ce:	bf04      	itt	eq
 80196d0:	6819      	ldreq	r1, [r3, #0]
 80196d2:	685b      	ldreq	r3, [r3, #4]
 80196d4:	6063      	str	r3, [r4, #4]
 80196d6:	bf04      	itt	eq
 80196d8:	1809      	addeq	r1, r1, r0
 80196da:	6021      	streq	r1, [r4, #0]
 80196dc:	6054      	str	r4, [r2, #4]
 80196de:	e7ca      	b.n	8019676 <_free_r+0x22>
 80196e0:	bd38      	pop	{r3, r4, r5, pc}
 80196e2:	bf00      	nop
 80196e4:	240030c8 	.word	0x240030c8

080196e8 <rshift>:
 80196e8:	6903      	ldr	r3, [r0, #16]
 80196ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80196ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80196f6:	f100 0414 	add.w	r4, r0, #20
 80196fa:	dd45      	ble.n	8019788 <rshift+0xa0>
 80196fc:	f011 011f 	ands.w	r1, r1, #31
 8019700:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019704:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019708:	d10c      	bne.n	8019724 <rshift+0x3c>
 801970a:	f100 0710 	add.w	r7, r0, #16
 801970e:	4629      	mov	r1, r5
 8019710:	42b1      	cmp	r1, r6
 8019712:	d334      	bcc.n	801977e <rshift+0x96>
 8019714:	1a9b      	subs	r3, r3, r2
 8019716:	009b      	lsls	r3, r3, #2
 8019718:	1eea      	subs	r2, r5, #3
 801971a:	4296      	cmp	r6, r2
 801971c:	bf38      	it	cc
 801971e:	2300      	movcc	r3, #0
 8019720:	4423      	add	r3, r4
 8019722:	e015      	b.n	8019750 <rshift+0x68>
 8019724:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019728:	f1c1 0820 	rsb	r8, r1, #32
 801972c:	40cf      	lsrs	r7, r1
 801972e:	f105 0e04 	add.w	lr, r5, #4
 8019732:	46a1      	mov	r9, r4
 8019734:	4576      	cmp	r6, lr
 8019736:	46f4      	mov	ip, lr
 8019738:	d815      	bhi.n	8019766 <rshift+0x7e>
 801973a:	1a9a      	subs	r2, r3, r2
 801973c:	0092      	lsls	r2, r2, #2
 801973e:	3a04      	subs	r2, #4
 8019740:	3501      	adds	r5, #1
 8019742:	42ae      	cmp	r6, r5
 8019744:	bf38      	it	cc
 8019746:	2200      	movcc	r2, #0
 8019748:	18a3      	adds	r3, r4, r2
 801974a:	50a7      	str	r7, [r4, r2]
 801974c:	b107      	cbz	r7, 8019750 <rshift+0x68>
 801974e:	3304      	adds	r3, #4
 8019750:	1b1a      	subs	r2, r3, r4
 8019752:	42a3      	cmp	r3, r4
 8019754:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019758:	bf08      	it	eq
 801975a:	2300      	moveq	r3, #0
 801975c:	6102      	str	r2, [r0, #16]
 801975e:	bf08      	it	eq
 8019760:	6143      	streq	r3, [r0, #20]
 8019762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019766:	f8dc c000 	ldr.w	ip, [ip]
 801976a:	fa0c fc08 	lsl.w	ip, ip, r8
 801976e:	ea4c 0707 	orr.w	r7, ip, r7
 8019772:	f849 7b04 	str.w	r7, [r9], #4
 8019776:	f85e 7b04 	ldr.w	r7, [lr], #4
 801977a:	40cf      	lsrs	r7, r1
 801977c:	e7da      	b.n	8019734 <rshift+0x4c>
 801977e:	f851 cb04 	ldr.w	ip, [r1], #4
 8019782:	f847 cf04 	str.w	ip, [r7, #4]!
 8019786:	e7c3      	b.n	8019710 <rshift+0x28>
 8019788:	4623      	mov	r3, r4
 801978a:	e7e1      	b.n	8019750 <rshift+0x68>

0801978c <__hexdig_fun>:
 801978c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8019790:	2b09      	cmp	r3, #9
 8019792:	d802      	bhi.n	801979a <__hexdig_fun+0xe>
 8019794:	3820      	subs	r0, #32
 8019796:	b2c0      	uxtb	r0, r0
 8019798:	4770      	bx	lr
 801979a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801979e:	2b05      	cmp	r3, #5
 80197a0:	d801      	bhi.n	80197a6 <__hexdig_fun+0x1a>
 80197a2:	3847      	subs	r0, #71	@ 0x47
 80197a4:	e7f7      	b.n	8019796 <__hexdig_fun+0xa>
 80197a6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80197aa:	2b05      	cmp	r3, #5
 80197ac:	d801      	bhi.n	80197b2 <__hexdig_fun+0x26>
 80197ae:	3827      	subs	r0, #39	@ 0x27
 80197b0:	e7f1      	b.n	8019796 <__hexdig_fun+0xa>
 80197b2:	2000      	movs	r0, #0
 80197b4:	4770      	bx	lr
	...

080197b8 <__gethex>:
 80197b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197bc:	b085      	sub	sp, #20
 80197be:	468a      	mov	sl, r1
 80197c0:	9302      	str	r3, [sp, #8]
 80197c2:	680b      	ldr	r3, [r1, #0]
 80197c4:	9001      	str	r0, [sp, #4]
 80197c6:	4690      	mov	r8, r2
 80197c8:	1c9c      	adds	r4, r3, #2
 80197ca:	46a1      	mov	r9, r4
 80197cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80197d0:	2830      	cmp	r0, #48	@ 0x30
 80197d2:	d0fa      	beq.n	80197ca <__gethex+0x12>
 80197d4:	eba9 0303 	sub.w	r3, r9, r3
 80197d8:	f1a3 0b02 	sub.w	fp, r3, #2
 80197dc:	f7ff ffd6 	bl	801978c <__hexdig_fun>
 80197e0:	4605      	mov	r5, r0
 80197e2:	2800      	cmp	r0, #0
 80197e4:	d168      	bne.n	80198b8 <__gethex+0x100>
 80197e6:	49a0      	ldr	r1, [pc, #640]	@ (8019a68 <__gethex+0x2b0>)
 80197e8:	2201      	movs	r2, #1
 80197ea:	4648      	mov	r0, r9
 80197ec:	f7ff f884 	bl	80188f8 <strncmp>
 80197f0:	4607      	mov	r7, r0
 80197f2:	2800      	cmp	r0, #0
 80197f4:	d167      	bne.n	80198c6 <__gethex+0x10e>
 80197f6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80197fa:	4626      	mov	r6, r4
 80197fc:	f7ff ffc6 	bl	801978c <__hexdig_fun>
 8019800:	2800      	cmp	r0, #0
 8019802:	d062      	beq.n	80198ca <__gethex+0x112>
 8019804:	4623      	mov	r3, r4
 8019806:	7818      	ldrb	r0, [r3, #0]
 8019808:	2830      	cmp	r0, #48	@ 0x30
 801980a:	4699      	mov	r9, r3
 801980c:	f103 0301 	add.w	r3, r3, #1
 8019810:	d0f9      	beq.n	8019806 <__gethex+0x4e>
 8019812:	f7ff ffbb 	bl	801978c <__hexdig_fun>
 8019816:	fab0 f580 	clz	r5, r0
 801981a:	096d      	lsrs	r5, r5, #5
 801981c:	f04f 0b01 	mov.w	fp, #1
 8019820:	464a      	mov	r2, r9
 8019822:	4616      	mov	r6, r2
 8019824:	3201      	adds	r2, #1
 8019826:	7830      	ldrb	r0, [r6, #0]
 8019828:	f7ff ffb0 	bl	801978c <__hexdig_fun>
 801982c:	2800      	cmp	r0, #0
 801982e:	d1f8      	bne.n	8019822 <__gethex+0x6a>
 8019830:	498d      	ldr	r1, [pc, #564]	@ (8019a68 <__gethex+0x2b0>)
 8019832:	2201      	movs	r2, #1
 8019834:	4630      	mov	r0, r6
 8019836:	f7ff f85f 	bl	80188f8 <strncmp>
 801983a:	2800      	cmp	r0, #0
 801983c:	d13f      	bne.n	80198be <__gethex+0x106>
 801983e:	b944      	cbnz	r4, 8019852 <__gethex+0x9a>
 8019840:	1c74      	adds	r4, r6, #1
 8019842:	4622      	mov	r2, r4
 8019844:	4616      	mov	r6, r2
 8019846:	3201      	adds	r2, #1
 8019848:	7830      	ldrb	r0, [r6, #0]
 801984a:	f7ff ff9f 	bl	801978c <__hexdig_fun>
 801984e:	2800      	cmp	r0, #0
 8019850:	d1f8      	bne.n	8019844 <__gethex+0x8c>
 8019852:	1ba4      	subs	r4, r4, r6
 8019854:	00a7      	lsls	r7, r4, #2
 8019856:	7833      	ldrb	r3, [r6, #0]
 8019858:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801985c:	2b50      	cmp	r3, #80	@ 0x50
 801985e:	d13e      	bne.n	80198de <__gethex+0x126>
 8019860:	7873      	ldrb	r3, [r6, #1]
 8019862:	2b2b      	cmp	r3, #43	@ 0x2b
 8019864:	d033      	beq.n	80198ce <__gethex+0x116>
 8019866:	2b2d      	cmp	r3, #45	@ 0x2d
 8019868:	d034      	beq.n	80198d4 <__gethex+0x11c>
 801986a:	1c71      	adds	r1, r6, #1
 801986c:	2400      	movs	r4, #0
 801986e:	7808      	ldrb	r0, [r1, #0]
 8019870:	f7ff ff8c 	bl	801978c <__hexdig_fun>
 8019874:	1e43      	subs	r3, r0, #1
 8019876:	b2db      	uxtb	r3, r3
 8019878:	2b18      	cmp	r3, #24
 801987a:	d830      	bhi.n	80198de <__gethex+0x126>
 801987c:	f1a0 0210 	sub.w	r2, r0, #16
 8019880:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019884:	f7ff ff82 	bl	801978c <__hexdig_fun>
 8019888:	f100 3cff 	add.w	ip, r0, #4294967295
 801988c:	fa5f fc8c 	uxtb.w	ip, ip
 8019890:	f1bc 0f18 	cmp.w	ip, #24
 8019894:	f04f 030a 	mov.w	r3, #10
 8019898:	d91e      	bls.n	80198d8 <__gethex+0x120>
 801989a:	b104      	cbz	r4, 801989e <__gethex+0xe6>
 801989c:	4252      	negs	r2, r2
 801989e:	4417      	add	r7, r2
 80198a0:	f8ca 1000 	str.w	r1, [sl]
 80198a4:	b1ed      	cbz	r5, 80198e2 <__gethex+0x12a>
 80198a6:	f1bb 0f00 	cmp.w	fp, #0
 80198aa:	bf0c      	ite	eq
 80198ac:	2506      	moveq	r5, #6
 80198ae:	2500      	movne	r5, #0
 80198b0:	4628      	mov	r0, r5
 80198b2:	b005      	add	sp, #20
 80198b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b8:	2500      	movs	r5, #0
 80198ba:	462c      	mov	r4, r5
 80198bc:	e7b0      	b.n	8019820 <__gethex+0x68>
 80198be:	2c00      	cmp	r4, #0
 80198c0:	d1c7      	bne.n	8019852 <__gethex+0x9a>
 80198c2:	4627      	mov	r7, r4
 80198c4:	e7c7      	b.n	8019856 <__gethex+0x9e>
 80198c6:	464e      	mov	r6, r9
 80198c8:	462f      	mov	r7, r5
 80198ca:	2501      	movs	r5, #1
 80198cc:	e7c3      	b.n	8019856 <__gethex+0x9e>
 80198ce:	2400      	movs	r4, #0
 80198d0:	1cb1      	adds	r1, r6, #2
 80198d2:	e7cc      	b.n	801986e <__gethex+0xb6>
 80198d4:	2401      	movs	r4, #1
 80198d6:	e7fb      	b.n	80198d0 <__gethex+0x118>
 80198d8:	fb03 0002 	mla	r0, r3, r2, r0
 80198dc:	e7ce      	b.n	801987c <__gethex+0xc4>
 80198de:	4631      	mov	r1, r6
 80198e0:	e7de      	b.n	80198a0 <__gethex+0xe8>
 80198e2:	eba6 0309 	sub.w	r3, r6, r9
 80198e6:	3b01      	subs	r3, #1
 80198e8:	4629      	mov	r1, r5
 80198ea:	2b07      	cmp	r3, #7
 80198ec:	dc0a      	bgt.n	8019904 <__gethex+0x14c>
 80198ee:	9801      	ldr	r0, [sp, #4]
 80198f0:	f000 fa46 	bl	8019d80 <_Balloc>
 80198f4:	4604      	mov	r4, r0
 80198f6:	b940      	cbnz	r0, 801990a <__gethex+0x152>
 80198f8:	4b5c      	ldr	r3, [pc, #368]	@ (8019a6c <__gethex+0x2b4>)
 80198fa:	4602      	mov	r2, r0
 80198fc:	21e4      	movs	r1, #228	@ 0xe4
 80198fe:	485c      	ldr	r0, [pc, #368]	@ (8019a70 <__gethex+0x2b8>)
 8019900:	f7fd fa5e 	bl	8016dc0 <__assert_func>
 8019904:	3101      	adds	r1, #1
 8019906:	105b      	asrs	r3, r3, #1
 8019908:	e7ef      	b.n	80198ea <__gethex+0x132>
 801990a:	f100 0a14 	add.w	sl, r0, #20
 801990e:	2300      	movs	r3, #0
 8019910:	4655      	mov	r5, sl
 8019912:	469b      	mov	fp, r3
 8019914:	45b1      	cmp	r9, r6
 8019916:	d337      	bcc.n	8019988 <__gethex+0x1d0>
 8019918:	f845 bb04 	str.w	fp, [r5], #4
 801991c:	eba5 050a 	sub.w	r5, r5, sl
 8019920:	10ad      	asrs	r5, r5, #2
 8019922:	6125      	str	r5, [r4, #16]
 8019924:	4658      	mov	r0, fp
 8019926:	f000 fb1d 	bl	8019f64 <__hi0bits>
 801992a:	016d      	lsls	r5, r5, #5
 801992c:	f8d8 6000 	ldr.w	r6, [r8]
 8019930:	1a2d      	subs	r5, r5, r0
 8019932:	42b5      	cmp	r5, r6
 8019934:	dd54      	ble.n	80199e0 <__gethex+0x228>
 8019936:	1bad      	subs	r5, r5, r6
 8019938:	4629      	mov	r1, r5
 801993a:	4620      	mov	r0, r4
 801993c:	f000 feae 	bl	801a69c <__any_on>
 8019940:	4681      	mov	r9, r0
 8019942:	b178      	cbz	r0, 8019964 <__gethex+0x1ac>
 8019944:	1e6b      	subs	r3, r5, #1
 8019946:	1159      	asrs	r1, r3, #5
 8019948:	f003 021f 	and.w	r2, r3, #31
 801994c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019950:	f04f 0901 	mov.w	r9, #1
 8019954:	fa09 f202 	lsl.w	r2, r9, r2
 8019958:	420a      	tst	r2, r1
 801995a:	d003      	beq.n	8019964 <__gethex+0x1ac>
 801995c:	454b      	cmp	r3, r9
 801995e:	dc36      	bgt.n	80199ce <__gethex+0x216>
 8019960:	f04f 0902 	mov.w	r9, #2
 8019964:	4629      	mov	r1, r5
 8019966:	4620      	mov	r0, r4
 8019968:	f7ff febe 	bl	80196e8 <rshift>
 801996c:	442f      	add	r7, r5
 801996e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019972:	42bb      	cmp	r3, r7
 8019974:	da42      	bge.n	80199fc <__gethex+0x244>
 8019976:	9801      	ldr	r0, [sp, #4]
 8019978:	4621      	mov	r1, r4
 801997a:	f000 fa41 	bl	8019e00 <_Bfree>
 801997e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019980:	2300      	movs	r3, #0
 8019982:	6013      	str	r3, [r2, #0]
 8019984:	25a3      	movs	r5, #163	@ 0xa3
 8019986:	e793      	b.n	80198b0 <__gethex+0xf8>
 8019988:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801998c:	2a2e      	cmp	r2, #46	@ 0x2e
 801998e:	d012      	beq.n	80199b6 <__gethex+0x1fe>
 8019990:	2b20      	cmp	r3, #32
 8019992:	d104      	bne.n	801999e <__gethex+0x1e6>
 8019994:	f845 bb04 	str.w	fp, [r5], #4
 8019998:	f04f 0b00 	mov.w	fp, #0
 801999c:	465b      	mov	r3, fp
 801999e:	7830      	ldrb	r0, [r6, #0]
 80199a0:	9303      	str	r3, [sp, #12]
 80199a2:	f7ff fef3 	bl	801978c <__hexdig_fun>
 80199a6:	9b03      	ldr	r3, [sp, #12]
 80199a8:	f000 000f 	and.w	r0, r0, #15
 80199ac:	4098      	lsls	r0, r3
 80199ae:	ea4b 0b00 	orr.w	fp, fp, r0
 80199b2:	3304      	adds	r3, #4
 80199b4:	e7ae      	b.n	8019914 <__gethex+0x15c>
 80199b6:	45b1      	cmp	r9, r6
 80199b8:	d8ea      	bhi.n	8019990 <__gethex+0x1d8>
 80199ba:	492b      	ldr	r1, [pc, #172]	@ (8019a68 <__gethex+0x2b0>)
 80199bc:	9303      	str	r3, [sp, #12]
 80199be:	2201      	movs	r2, #1
 80199c0:	4630      	mov	r0, r6
 80199c2:	f7fe ff99 	bl	80188f8 <strncmp>
 80199c6:	9b03      	ldr	r3, [sp, #12]
 80199c8:	2800      	cmp	r0, #0
 80199ca:	d1e1      	bne.n	8019990 <__gethex+0x1d8>
 80199cc:	e7a2      	b.n	8019914 <__gethex+0x15c>
 80199ce:	1ea9      	subs	r1, r5, #2
 80199d0:	4620      	mov	r0, r4
 80199d2:	f000 fe63 	bl	801a69c <__any_on>
 80199d6:	2800      	cmp	r0, #0
 80199d8:	d0c2      	beq.n	8019960 <__gethex+0x1a8>
 80199da:	f04f 0903 	mov.w	r9, #3
 80199de:	e7c1      	b.n	8019964 <__gethex+0x1ac>
 80199e0:	da09      	bge.n	80199f6 <__gethex+0x23e>
 80199e2:	1b75      	subs	r5, r6, r5
 80199e4:	4621      	mov	r1, r4
 80199e6:	9801      	ldr	r0, [sp, #4]
 80199e8:	462a      	mov	r2, r5
 80199ea:	f000 fc21 	bl	801a230 <__lshift>
 80199ee:	1b7f      	subs	r7, r7, r5
 80199f0:	4604      	mov	r4, r0
 80199f2:	f100 0a14 	add.w	sl, r0, #20
 80199f6:	f04f 0900 	mov.w	r9, #0
 80199fa:	e7b8      	b.n	801996e <__gethex+0x1b6>
 80199fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019a00:	42bd      	cmp	r5, r7
 8019a02:	dd6f      	ble.n	8019ae4 <__gethex+0x32c>
 8019a04:	1bed      	subs	r5, r5, r7
 8019a06:	42ae      	cmp	r6, r5
 8019a08:	dc34      	bgt.n	8019a74 <__gethex+0x2bc>
 8019a0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019a0e:	2b02      	cmp	r3, #2
 8019a10:	d022      	beq.n	8019a58 <__gethex+0x2a0>
 8019a12:	2b03      	cmp	r3, #3
 8019a14:	d024      	beq.n	8019a60 <__gethex+0x2a8>
 8019a16:	2b01      	cmp	r3, #1
 8019a18:	d115      	bne.n	8019a46 <__gethex+0x28e>
 8019a1a:	42ae      	cmp	r6, r5
 8019a1c:	d113      	bne.n	8019a46 <__gethex+0x28e>
 8019a1e:	2e01      	cmp	r6, #1
 8019a20:	d10b      	bne.n	8019a3a <__gethex+0x282>
 8019a22:	9a02      	ldr	r2, [sp, #8]
 8019a24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019a28:	6013      	str	r3, [r2, #0]
 8019a2a:	2301      	movs	r3, #1
 8019a2c:	6123      	str	r3, [r4, #16]
 8019a2e:	f8ca 3000 	str.w	r3, [sl]
 8019a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019a34:	2562      	movs	r5, #98	@ 0x62
 8019a36:	601c      	str	r4, [r3, #0]
 8019a38:	e73a      	b.n	80198b0 <__gethex+0xf8>
 8019a3a:	1e71      	subs	r1, r6, #1
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	f000 fe2d 	bl	801a69c <__any_on>
 8019a42:	2800      	cmp	r0, #0
 8019a44:	d1ed      	bne.n	8019a22 <__gethex+0x26a>
 8019a46:	9801      	ldr	r0, [sp, #4]
 8019a48:	4621      	mov	r1, r4
 8019a4a:	f000 f9d9 	bl	8019e00 <_Bfree>
 8019a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019a50:	2300      	movs	r3, #0
 8019a52:	6013      	str	r3, [r2, #0]
 8019a54:	2550      	movs	r5, #80	@ 0x50
 8019a56:	e72b      	b.n	80198b0 <__gethex+0xf8>
 8019a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d1f3      	bne.n	8019a46 <__gethex+0x28e>
 8019a5e:	e7e0      	b.n	8019a22 <__gethex+0x26a>
 8019a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d1dd      	bne.n	8019a22 <__gethex+0x26a>
 8019a66:	e7ee      	b.n	8019a46 <__gethex+0x28e>
 8019a68:	080215e3 	.word	0x080215e3
 8019a6c:	080217f1 	.word	0x080217f1
 8019a70:	08021802 	.word	0x08021802
 8019a74:	1e6f      	subs	r7, r5, #1
 8019a76:	f1b9 0f00 	cmp.w	r9, #0
 8019a7a:	d130      	bne.n	8019ade <__gethex+0x326>
 8019a7c:	b127      	cbz	r7, 8019a88 <__gethex+0x2d0>
 8019a7e:	4639      	mov	r1, r7
 8019a80:	4620      	mov	r0, r4
 8019a82:	f000 fe0b 	bl	801a69c <__any_on>
 8019a86:	4681      	mov	r9, r0
 8019a88:	117a      	asrs	r2, r7, #5
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019a90:	f007 071f 	and.w	r7, r7, #31
 8019a94:	40bb      	lsls	r3, r7
 8019a96:	4213      	tst	r3, r2
 8019a98:	4629      	mov	r1, r5
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	bf18      	it	ne
 8019a9e:	f049 0902 	orrne.w	r9, r9, #2
 8019aa2:	f7ff fe21 	bl	80196e8 <rshift>
 8019aa6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019aaa:	1b76      	subs	r6, r6, r5
 8019aac:	2502      	movs	r5, #2
 8019aae:	f1b9 0f00 	cmp.w	r9, #0
 8019ab2:	d047      	beq.n	8019b44 <__gethex+0x38c>
 8019ab4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019ab8:	2b02      	cmp	r3, #2
 8019aba:	d015      	beq.n	8019ae8 <__gethex+0x330>
 8019abc:	2b03      	cmp	r3, #3
 8019abe:	d017      	beq.n	8019af0 <__gethex+0x338>
 8019ac0:	2b01      	cmp	r3, #1
 8019ac2:	d109      	bne.n	8019ad8 <__gethex+0x320>
 8019ac4:	f019 0f02 	tst.w	r9, #2
 8019ac8:	d006      	beq.n	8019ad8 <__gethex+0x320>
 8019aca:	f8da 3000 	ldr.w	r3, [sl]
 8019ace:	ea49 0903 	orr.w	r9, r9, r3
 8019ad2:	f019 0f01 	tst.w	r9, #1
 8019ad6:	d10e      	bne.n	8019af6 <__gethex+0x33e>
 8019ad8:	f045 0510 	orr.w	r5, r5, #16
 8019adc:	e032      	b.n	8019b44 <__gethex+0x38c>
 8019ade:	f04f 0901 	mov.w	r9, #1
 8019ae2:	e7d1      	b.n	8019a88 <__gethex+0x2d0>
 8019ae4:	2501      	movs	r5, #1
 8019ae6:	e7e2      	b.n	8019aae <__gethex+0x2f6>
 8019ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019aea:	f1c3 0301 	rsb	r3, r3, #1
 8019aee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d0f0      	beq.n	8019ad8 <__gethex+0x320>
 8019af6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019afa:	f104 0314 	add.w	r3, r4, #20
 8019afe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019b02:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019b06:	f04f 0c00 	mov.w	ip, #0
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b10:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019b14:	d01b      	beq.n	8019b4e <__gethex+0x396>
 8019b16:	3201      	adds	r2, #1
 8019b18:	6002      	str	r2, [r0, #0]
 8019b1a:	2d02      	cmp	r5, #2
 8019b1c:	f104 0314 	add.w	r3, r4, #20
 8019b20:	d13c      	bne.n	8019b9c <__gethex+0x3e4>
 8019b22:	f8d8 2000 	ldr.w	r2, [r8]
 8019b26:	3a01      	subs	r2, #1
 8019b28:	42b2      	cmp	r2, r6
 8019b2a:	d109      	bne.n	8019b40 <__gethex+0x388>
 8019b2c:	1171      	asrs	r1, r6, #5
 8019b2e:	2201      	movs	r2, #1
 8019b30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019b34:	f006 061f 	and.w	r6, r6, #31
 8019b38:	fa02 f606 	lsl.w	r6, r2, r6
 8019b3c:	421e      	tst	r6, r3
 8019b3e:	d13a      	bne.n	8019bb6 <__gethex+0x3fe>
 8019b40:	f045 0520 	orr.w	r5, r5, #32
 8019b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b46:	601c      	str	r4, [r3, #0]
 8019b48:	9b02      	ldr	r3, [sp, #8]
 8019b4a:	601f      	str	r7, [r3, #0]
 8019b4c:	e6b0      	b.n	80198b0 <__gethex+0xf8>
 8019b4e:	4299      	cmp	r1, r3
 8019b50:	f843 cc04 	str.w	ip, [r3, #-4]
 8019b54:	d8d9      	bhi.n	8019b0a <__gethex+0x352>
 8019b56:	68a3      	ldr	r3, [r4, #8]
 8019b58:	459b      	cmp	fp, r3
 8019b5a:	db17      	blt.n	8019b8c <__gethex+0x3d4>
 8019b5c:	6861      	ldr	r1, [r4, #4]
 8019b5e:	9801      	ldr	r0, [sp, #4]
 8019b60:	3101      	adds	r1, #1
 8019b62:	f000 f90d 	bl	8019d80 <_Balloc>
 8019b66:	4681      	mov	r9, r0
 8019b68:	b918      	cbnz	r0, 8019b72 <__gethex+0x3ba>
 8019b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8019bd4 <__gethex+0x41c>)
 8019b6c:	4602      	mov	r2, r0
 8019b6e:	2184      	movs	r1, #132	@ 0x84
 8019b70:	e6c5      	b.n	80198fe <__gethex+0x146>
 8019b72:	6922      	ldr	r2, [r4, #16]
 8019b74:	3202      	adds	r2, #2
 8019b76:	f104 010c 	add.w	r1, r4, #12
 8019b7a:	0092      	lsls	r2, r2, #2
 8019b7c:	300c      	adds	r0, #12
 8019b7e:	f7fe ff6a 	bl	8018a56 <memcpy>
 8019b82:	4621      	mov	r1, r4
 8019b84:	9801      	ldr	r0, [sp, #4]
 8019b86:	f000 f93b 	bl	8019e00 <_Bfree>
 8019b8a:	464c      	mov	r4, r9
 8019b8c:	6923      	ldr	r3, [r4, #16]
 8019b8e:	1c5a      	adds	r2, r3, #1
 8019b90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019b94:	6122      	str	r2, [r4, #16]
 8019b96:	2201      	movs	r2, #1
 8019b98:	615a      	str	r2, [r3, #20]
 8019b9a:	e7be      	b.n	8019b1a <__gethex+0x362>
 8019b9c:	6922      	ldr	r2, [r4, #16]
 8019b9e:	455a      	cmp	r2, fp
 8019ba0:	dd0b      	ble.n	8019bba <__gethex+0x402>
 8019ba2:	2101      	movs	r1, #1
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	f7ff fd9f 	bl	80196e8 <rshift>
 8019baa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019bae:	3701      	adds	r7, #1
 8019bb0:	42bb      	cmp	r3, r7
 8019bb2:	f6ff aee0 	blt.w	8019976 <__gethex+0x1be>
 8019bb6:	2501      	movs	r5, #1
 8019bb8:	e7c2      	b.n	8019b40 <__gethex+0x388>
 8019bba:	f016 061f 	ands.w	r6, r6, #31
 8019bbe:	d0fa      	beq.n	8019bb6 <__gethex+0x3fe>
 8019bc0:	4453      	add	r3, sl
 8019bc2:	f1c6 0620 	rsb	r6, r6, #32
 8019bc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019bca:	f000 f9cb 	bl	8019f64 <__hi0bits>
 8019bce:	42b0      	cmp	r0, r6
 8019bd0:	dbe7      	blt.n	8019ba2 <__gethex+0x3ea>
 8019bd2:	e7f0      	b.n	8019bb6 <__gethex+0x3fe>
 8019bd4:	080217f1 	.word	0x080217f1

08019bd8 <L_shift>:
 8019bd8:	f1c2 0208 	rsb	r2, r2, #8
 8019bdc:	0092      	lsls	r2, r2, #2
 8019bde:	b570      	push	{r4, r5, r6, lr}
 8019be0:	f1c2 0620 	rsb	r6, r2, #32
 8019be4:	6843      	ldr	r3, [r0, #4]
 8019be6:	6804      	ldr	r4, [r0, #0]
 8019be8:	fa03 f506 	lsl.w	r5, r3, r6
 8019bec:	432c      	orrs	r4, r5
 8019bee:	40d3      	lsrs	r3, r2
 8019bf0:	6004      	str	r4, [r0, #0]
 8019bf2:	f840 3f04 	str.w	r3, [r0, #4]!
 8019bf6:	4288      	cmp	r0, r1
 8019bf8:	d3f4      	bcc.n	8019be4 <L_shift+0xc>
 8019bfa:	bd70      	pop	{r4, r5, r6, pc}

08019bfc <__match>:
 8019bfc:	b530      	push	{r4, r5, lr}
 8019bfe:	6803      	ldr	r3, [r0, #0]
 8019c00:	3301      	adds	r3, #1
 8019c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c06:	b914      	cbnz	r4, 8019c0e <__match+0x12>
 8019c08:	6003      	str	r3, [r0, #0]
 8019c0a:	2001      	movs	r0, #1
 8019c0c:	bd30      	pop	{r4, r5, pc}
 8019c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c12:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8019c16:	2d19      	cmp	r5, #25
 8019c18:	bf98      	it	ls
 8019c1a:	3220      	addls	r2, #32
 8019c1c:	42a2      	cmp	r2, r4
 8019c1e:	d0f0      	beq.n	8019c02 <__match+0x6>
 8019c20:	2000      	movs	r0, #0
 8019c22:	e7f3      	b.n	8019c0c <__match+0x10>

08019c24 <__hexnan>:
 8019c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c28:	680b      	ldr	r3, [r1, #0]
 8019c2a:	6801      	ldr	r1, [r0, #0]
 8019c2c:	115e      	asrs	r6, r3, #5
 8019c2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019c32:	f013 031f 	ands.w	r3, r3, #31
 8019c36:	b087      	sub	sp, #28
 8019c38:	bf18      	it	ne
 8019c3a:	3604      	addne	r6, #4
 8019c3c:	2500      	movs	r5, #0
 8019c3e:	1f37      	subs	r7, r6, #4
 8019c40:	4682      	mov	sl, r0
 8019c42:	4690      	mov	r8, r2
 8019c44:	9301      	str	r3, [sp, #4]
 8019c46:	f846 5c04 	str.w	r5, [r6, #-4]
 8019c4a:	46b9      	mov	r9, r7
 8019c4c:	463c      	mov	r4, r7
 8019c4e:	9502      	str	r5, [sp, #8]
 8019c50:	46ab      	mov	fp, r5
 8019c52:	784a      	ldrb	r2, [r1, #1]
 8019c54:	1c4b      	adds	r3, r1, #1
 8019c56:	9303      	str	r3, [sp, #12]
 8019c58:	b342      	cbz	r2, 8019cac <__hexnan+0x88>
 8019c5a:	4610      	mov	r0, r2
 8019c5c:	9105      	str	r1, [sp, #20]
 8019c5e:	9204      	str	r2, [sp, #16]
 8019c60:	f7ff fd94 	bl	801978c <__hexdig_fun>
 8019c64:	2800      	cmp	r0, #0
 8019c66:	d151      	bne.n	8019d0c <__hexnan+0xe8>
 8019c68:	9a04      	ldr	r2, [sp, #16]
 8019c6a:	9905      	ldr	r1, [sp, #20]
 8019c6c:	2a20      	cmp	r2, #32
 8019c6e:	d818      	bhi.n	8019ca2 <__hexnan+0x7e>
 8019c70:	9b02      	ldr	r3, [sp, #8]
 8019c72:	459b      	cmp	fp, r3
 8019c74:	dd13      	ble.n	8019c9e <__hexnan+0x7a>
 8019c76:	454c      	cmp	r4, r9
 8019c78:	d206      	bcs.n	8019c88 <__hexnan+0x64>
 8019c7a:	2d07      	cmp	r5, #7
 8019c7c:	dc04      	bgt.n	8019c88 <__hexnan+0x64>
 8019c7e:	462a      	mov	r2, r5
 8019c80:	4649      	mov	r1, r9
 8019c82:	4620      	mov	r0, r4
 8019c84:	f7ff ffa8 	bl	8019bd8 <L_shift>
 8019c88:	4544      	cmp	r4, r8
 8019c8a:	d952      	bls.n	8019d32 <__hexnan+0x10e>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	f1a4 0904 	sub.w	r9, r4, #4
 8019c92:	f844 3c04 	str.w	r3, [r4, #-4]
 8019c96:	f8cd b008 	str.w	fp, [sp, #8]
 8019c9a:	464c      	mov	r4, r9
 8019c9c:	461d      	mov	r5, r3
 8019c9e:	9903      	ldr	r1, [sp, #12]
 8019ca0:	e7d7      	b.n	8019c52 <__hexnan+0x2e>
 8019ca2:	2a29      	cmp	r2, #41	@ 0x29
 8019ca4:	d157      	bne.n	8019d56 <__hexnan+0x132>
 8019ca6:	3102      	adds	r1, #2
 8019ca8:	f8ca 1000 	str.w	r1, [sl]
 8019cac:	f1bb 0f00 	cmp.w	fp, #0
 8019cb0:	d051      	beq.n	8019d56 <__hexnan+0x132>
 8019cb2:	454c      	cmp	r4, r9
 8019cb4:	d206      	bcs.n	8019cc4 <__hexnan+0xa0>
 8019cb6:	2d07      	cmp	r5, #7
 8019cb8:	dc04      	bgt.n	8019cc4 <__hexnan+0xa0>
 8019cba:	462a      	mov	r2, r5
 8019cbc:	4649      	mov	r1, r9
 8019cbe:	4620      	mov	r0, r4
 8019cc0:	f7ff ff8a 	bl	8019bd8 <L_shift>
 8019cc4:	4544      	cmp	r4, r8
 8019cc6:	d936      	bls.n	8019d36 <__hexnan+0x112>
 8019cc8:	f1a8 0204 	sub.w	r2, r8, #4
 8019ccc:	4623      	mov	r3, r4
 8019cce:	f853 1b04 	ldr.w	r1, [r3], #4
 8019cd2:	f842 1f04 	str.w	r1, [r2, #4]!
 8019cd6:	429f      	cmp	r7, r3
 8019cd8:	d2f9      	bcs.n	8019cce <__hexnan+0xaa>
 8019cda:	1b3b      	subs	r3, r7, r4
 8019cdc:	f023 0303 	bic.w	r3, r3, #3
 8019ce0:	3304      	adds	r3, #4
 8019ce2:	3401      	adds	r4, #1
 8019ce4:	3e03      	subs	r6, #3
 8019ce6:	42b4      	cmp	r4, r6
 8019ce8:	bf88      	it	hi
 8019cea:	2304      	movhi	r3, #4
 8019cec:	4443      	add	r3, r8
 8019cee:	2200      	movs	r2, #0
 8019cf0:	f843 2b04 	str.w	r2, [r3], #4
 8019cf4:	429f      	cmp	r7, r3
 8019cf6:	d2fb      	bcs.n	8019cf0 <__hexnan+0xcc>
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	b91b      	cbnz	r3, 8019d04 <__hexnan+0xe0>
 8019cfc:	4547      	cmp	r7, r8
 8019cfe:	d128      	bne.n	8019d52 <__hexnan+0x12e>
 8019d00:	2301      	movs	r3, #1
 8019d02:	603b      	str	r3, [r7, #0]
 8019d04:	2005      	movs	r0, #5
 8019d06:	b007      	add	sp, #28
 8019d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d0c:	3501      	adds	r5, #1
 8019d0e:	2d08      	cmp	r5, #8
 8019d10:	f10b 0b01 	add.w	fp, fp, #1
 8019d14:	dd06      	ble.n	8019d24 <__hexnan+0x100>
 8019d16:	4544      	cmp	r4, r8
 8019d18:	d9c1      	bls.n	8019c9e <__hexnan+0x7a>
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019d20:	2501      	movs	r5, #1
 8019d22:	3c04      	subs	r4, #4
 8019d24:	6822      	ldr	r2, [r4, #0]
 8019d26:	f000 000f 	and.w	r0, r0, #15
 8019d2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019d2e:	6020      	str	r0, [r4, #0]
 8019d30:	e7b5      	b.n	8019c9e <__hexnan+0x7a>
 8019d32:	2508      	movs	r5, #8
 8019d34:	e7b3      	b.n	8019c9e <__hexnan+0x7a>
 8019d36:	9b01      	ldr	r3, [sp, #4]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d0dd      	beq.n	8019cf8 <__hexnan+0xd4>
 8019d3c:	f1c3 0320 	rsb	r3, r3, #32
 8019d40:	f04f 32ff 	mov.w	r2, #4294967295
 8019d44:	40da      	lsrs	r2, r3
 8019d46:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019d4a:	4013      	ands	r3, r2
 8019d4c:	f846 3c04 	str.w	r3, [r6, #-4]
 8019d50:	e7d2      	b.n	8019cf8 <__hexnan+0xd4>
 8019d52:	3f04      	subs	r7, #4
 8019d54:	e7d0      	b.n	8019cf8 <__hexnan+0xd4>
 8019d56:	2004      	movs	r0, #4
 8019d58:	e7d5      	b.n	8019d06 <__hexnan+0xe2>

08019d5a <__ascii_mbtowc>:
 8019d5a:	b082      	sub	sp, #8
 8019d5c:	b901      	cbnz	r1, 8019d60 <__ascii_mbtowc+0x6>
 8019d5e:	a901      	add	r1, sp, #4
 8019d60:	b142      	cbz	r2, 8019d74 <__ascii_mbtowc+0x1a>
 8019d62:	b14b      	cbz	r3, 8019d78 <__ascii_mbtowc+0x1e>
 8019d64:	7813      	ldrb	r3, [r2, #0]
 8019d66:	600b      	str	r3, [r1, #0]
 8019d68:	7812      	ldrb	r2, [r2, #0]
 8019d6a:	1e10      	subs	r0, r2, #0
 8019d6c:	bf18      	it	ne
 8019d6e:	2001      	movne	r0, #1
 8019d70:	b002      	add	sp, #8
 8019d72:	4770      	bx	lr
 8019d74:	4610      	mov	r0, r2
 8019d76:	e7fb      	b.n	8019d70 <__ascii_mbtowc+0x16>
 8019d78:	f06f 0001 	mvn.w	r0, #1
 8019d7c:	e7f8      	b.n	8019d70 <__ascii_mbtowc+0x16>
	...

08019d80 <_Balloc>:
 8019d80:	b570      	push	{r4, r5, r6, lr}
 8019d82:	69c6      	ldr	r6, [r0, #28]
 8019d84:	4604      	mov	r4, r0
 8019d86:	460d      	mov	r5, r1
 8019d88:	b976      	cbnz	r6, 8019da8 <_Balloc+0x28>
 8019d8a:	2010      	movs	r0, #16
 8019d8c:	f7fd f84a 	bl	8016e24 <malloc>
 8019d90:	4602      	mov	r2, r0
 8019d92:	61e0      	str	r0, [r4, #28]
 8019d94:	b920      	cbnz	r0, 8019da0 <_Balloc+0x20>
 8019d96:	4b18      	ldr	r3, [pc, #96]	@ (8019df8 <_Balloc+0x78>)
 8019d98:	4818      	ldr	r0, [pc, #96]	@ (8019dfc <_Balloc+0x7c>)
 8019d9a:	216b      	movs	r1, #107	@ 0x6b
 8019d9c:	f7fd f810 	bl	8016dc0 <__assert_func>
 8019da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019da4:	6006      	str	r6, [r0, #0]
 8019da6:	60c6      	str	r6, [r0, #12]
 8019da8:	69e6      	ldr	r6, [r4, #28]
 8019daa:	68f3      	ldr	r3, [r6, #12]
 8019dac:	b183      	cbz	r3, 8019dd0 <_Balloc+0x50>
 8019dae:	69e3      	ldr	r3, [r4, #28]
 8019db0:	68db      	ldr	r3, [r3, #12]
 8019db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019db6:	b9b8      	cbnz	r0, 8019de8 <_Balloc+0x68>
 8019db8:	2101      	movs	r1, #1
 8019dba:	fa01 f605 	lsl.w	r6, r1, r5
 8019dbe:	1d72      	adds	r2, r6, #5
 8019dc0:	0092      	lsls	r2, r2, #2
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	f7fd f81a 	bl	8016dfc <_calloc_r>
 8019dc8:	b160      	cbz	r0, 8019de4 <_Balloc+0x64>
 8019dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019dce:	e00e      	b.n	8019dee <_Balloc+0x6e>
 8019dd0:	2221      	movs	r2, #33	@ 0x21
 8019dd2:	2104      	movs	r1, #4
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	f7fd f811 	bl	8016dfc <_calloc_r>
 8019dda:	69e3      	ldr	r3, [r4, #28]
 8019ddc:	60f0      	str	r0, [r6, #12]
 8019dde:	68db      	ldr	r3, [r3, #12]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d1e4      	bne.n	8019dae <_Balloc+0x2e>
 8019de4:	2000      	movs	r0, #0
 8019de6:	bd70      	pop	{r4, r5, r6, pc}
 8019de8:	6802      	ldr	r2, [r0, #0]
 8019dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019dee:	2300      	movs	r3, #0
 8019df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019df4:	e7f7      	b.n	8019de6 <_Balloc+0x66>
 8019df6:	bf00      	nop
 8019df8:	08021782 	.word	0x08021782
 8019dfc:	08021862 	.word	0x08021862

08019e00 <_Bfree>:
 8019e00:	b570      	push	{r4, r5, r6, lr}
 8019e02:	69c6      	ldr	r6, [r0, #28]
 8019e04:	4605      	mov	r5, r0
 8019e06:	460c      	mov	r4, r1
 8019e08:	b976      	cbnz	r6, 8019e28 <_Bfree+0x28>
 8019e0a:	2010      	movs	r0, #16
 8019e0c:	f7fd f80a 	bl	8016e24 <malloc>
 8019e10:	4602      	mov	r2, r0
 8019e12:	61e8      	str	r0, [r5, #28]
 8019e14:	b920      	cbnz	r0, 8019e20 <_Bfree+0x20>
 8019e16:	4b09      	ldr	r3, [pc, #36]	@ (8019e3c <_Bfree+0x3c>)
 8019e18:	4809      	ldr	r0, [pc, #36]	@ (8019e40 <_Bfree+0x40>)
 8019e1a:	218f      	movs	r1, #143	@ 0x8f
 8019e1c:	f7fc ffd0 	bl	8016dc0 <__assert_func>
 8019e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019e24:	6006      	str	r6, [r0, #0]
 8019e26:	60c6      	str	r6, [r0, #12]
 8019e28:	b13c      	cbz	r4, 8019e3a <_Bfree+0x3a>
 8019e2a:	69eb      	ldr	r3, [r5, #28]
 8019e2c:	6862      	ldr	r2, [r4, #4]
 8019e2e:	68db      	ldr	r3, [r3, #12]
 8019e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019e34:	6021      	str	r1, [r4, #0]
 8019e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019e3a:	bd70      	pop	{r4, r5, r6, pc}
 8019e3c:	08021782 	.word	0x08021782
 8019e40:	08021862 	.word	0x08021862

08019e44 <__multadd>:
 8019e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e48:	690d      	ldr	r5, [r1, #16]
 8019e4a:	4607      	mov	r7, r0
 8019e4c:	460c      	mov	r4, r1
 8019e4e:	461e      	mov	r6, r3
 8019e50:	f101 0c14 	add.w	ip, r1, #20
 8019e54:	2000      	movs	r0, #0
 8019e56:	f8dc 3000 	ldr.w	r3, [ip]
 8019e5a:	b299      	uxth	r1, r3
 8019e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8019e60:	0c1e      	lsrs	r6, r3, #16
 8019e62:	0c0b      	lsrs	r3, r1, #16
 8019e64:	fb02 3306 	mla	r3, r2, r6, r3
 8019e68:	b289      	uxth	r1, r1
 8019e6a:	3001      	adds	r0, #1
 8019e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019e70:	4285      	cmp	r5, r0
 8019e72:	f84c 1b04 	str.w	r1, [ip], #4
 8019e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019e7a:	dcec      	bgt.n	8019e56 <__multadd+0x12>
 8019e7c:	b30e      	cbz	r6, 8019ec2 <__multadd+0x7e>
 8019e7e:	68a3      	ldr	r3, [r4, #8]
 8019e80:	42ab      	cmp	r3, r5
 8019e82:	dc19      	bgt.n	8019eb8 <__multadd+0x74>
 8019e84:	6861      	ldr	r1, [r4, #4]
 8019e86:	4638      	mov	r0, r7
 8019e88:	3101      	adds	r1, #1
 8019e8a:	f7ff ff79 	bl	8019d80 <_Balloc>
 8019e8e:	4680      	mov	r8, r0
 8019e90:	b928      	cbnz	r0, 8019e9e <__multadd+0x5a>
 8019e92:	4602      	mov	r2, r0
 8019e94:	4b0c      	ldr	r3, [pc, #48]	@ (8019ec8 <__multadd+0x84>)
 8019e96:	480d      	ldr	r0, [pc, #52]	@ (8019ecc <__multadd+0x88>)
 8019e98:	21ba      	movs	r1, #186	@ 0xba
 8019e9a:	f7fc ff91 	bl	8016dc0 <__assert_func>
 8019e9e:	6922      	ldr	r2, [r4, #16]
 8019ea0:	3202      	adds	r2, #2
 8019ea2:	f104 010c 	add.w	r1, r4, #12
 8019ea6:	0092      	lsls	r2, r2, #2
 8019ea8:	300c      	adds	r0, #12
 8019eaa:	f7fe fdd4 	bl	8018a56 <memcpy>
 8019eae:	4621      	mov	r1, r4
 8019eb0:	4638      	mov	r0, r7
 8019eb2:	f7ff ffa5 	bl	8019e00 <_Bfree>
 8019eb6:	4644      	mov	r4, r8
 8019eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019ebc:	3501      	adds	r5, #1
 8019ebe:	615e      	str	r6, [r3, #20]
 8019ec0:	6125      	str	r5, [r4, #16]
 8019ec2:	4620      	mov	r0, r4
 8019ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ec8:	080217f1 	.word	0x080217f1
 8019ecc:	08021862 	.word	0x08021862

08019ed0 <__s2b>:
 8019ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ed4:	460c      	mov	r4, r1
 8019ed6:	4615      	mov	r5, r2
 8019ed8:	461f      	mov	r7, r3
 8019eda:	2209      	movs	r2, #9
 8019edc:	3308      	adds	r3, #8
 8019ede:	4606      	mov	r6, r0
 8019ee0:	fb93 f3f2 	sdiv	r3, r3, r2
 8019ee4:	2100      	movs	r1, #0
 8019ee6:	2201      	movs	r2, #1
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	db09      	blt.n	8019f00 <__s2b+0x30>
 8019eec:	4630      	mov	r0, r6
 8019eee:	f7ff ff47 	bl	8019d80 <_Balloc>
 8019ef2:	b940      	cbnz	r0, 8019f06 <__s2b+0x36>
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	4b19      	ldr	r3, [pc, #100]	@ (8019f5c <__s2b+0x8c>)
 8019ef8:	4819      	ldr	r0, [pc, #100]	@ (8019f60 <__s2b+0x90>)
 8019efa:	21d3      	movs	r1, #211	@ 0xd3
 8019efc:	f7fc ff60 	bl	8016dc0 <__assert_func>
 8019f00:	0052      	lsls	r2, r2, #1
 8019f02:	3101      	adds	r1, #1
 8019f04:	e7f0      	b.n	8019ee8 <__s2b+0x18>
 8019f06:	9b08      	ldr	r3, [sp, #32]
 8019f08:	6143      	str	r3, [r0, #20]
 8019f0a:	2d09      	cmp	r5, #9
 8019f0c:	f04f 0301 	mov.w	r3, #1
 8019f10:	6103      	str	r3, [r0, #16]
 8019f12:	dd16      	ble.n	8019f42 <__s2b+0x72>
 8019f14:	f104 0909 	add.w	r9, r4, #9
 8019f18:	46c8      	mov	r8, r9
 8019f1a:	442c      	add	r4, r5
 8019f1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019f20:	4601      	mov	r1, r0
 8019f22:	3b30      	subs	r3, #48	@ 0x30
 8019f24:	220a      	movs	r2, #10
 8019f26:	4630      	mov	r0, r6
 8019f28:	f7ff ff8c 	bl	8019e44 <__multadd>
 8019f2c:	45a0      	cmp	r8, r4
 8019f2e:	d1f5      	bne.n	8019f1c <__s2b+0x4c>
 8019f30:	f1a5 0408 	sub.w	r4, r5, #8
 8019f34:	444c      	add	r4, r9
 8019f36:	1b2d      	subs	r5, r5, r4
 8019f38:	1963      	adds	r3, r4, r5
 8019f3a:	42bb      	cmp	r3, r7
 8019f3c:	db04      	blt.n	8019f48 <__s2b+0x78>
 8019f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f42:	340a      	adds	r4, #10
 8019f44:	2509      	movs	r5, #9
 8019f46:	e7f6      	b.n	8019f36 <__s2b+0x66>
 8019f48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019f4c:	4601      	mov	r1, r0
 8019f4e:	3b30      	subs	r3, #48	@ 0x30
 8019f50:	220a      	movs	r2, #10
 8019f52:	4630      	mov	r0, r6
 8019f54:	f7ff ff76 	bl	8019e44 <__multadd>
 8019f58:	e7ee      	b.n	8019f38 <__s2b+0x68>
 8019f5a:	bf00      	nop
 8019f5c:	080217f1 	.word	0x080217f1
 8019f60:	08021862 	.word	0x08021862

08019f64 <__hi0bits>:
 8019f64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8019f68:	4603      	mov	r3, r0
 8019f6a:	bf36      	itet	cc
 8019f6c:	0403      	lslcc	r3, r0, #16
 8019f6e:	2000      	movcs	r0, #0
 8019f70:	2010      	movcc	r0, #16
 8019f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019f76:	bf3c      	itt	cc
 8019f78:	021b      	lslcc	r3, r3, #8
 8019f7a:	3008      	addcc	r0, #8
 8019f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019f80:	bf3c      	itt	cc
 8019f82:	011b      	lslcc	r3, r3, #4
 8019f84:	3004      	addcc	r0, #4
 8019f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019f8a:	bf3c      	itt	cc
 8019f8c:	009b      	lslcc	r3, r3, #2
 8019f8e:	3002      	addcc	r0, #2
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	db05      	blt.n	8019fa0 <__hi0bits+0x3c>
 8019f94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8019f98:	f100 0001 	add.w	r0, r0, #1
 8019f9c:	bf08      	it	eq
 8019f9e:	2020      	moveq	r0, #32
 8019fa0:	4770      	bx	lr

08019fa2 <__lo0bits>:
 8019fa2:	6803      	ldr	r3, [r0, #0]
 8019fa4:	4602      	mov	r2, r0
 8019fa6:	f013 0007 	ands.w	r0, r3, #7
 8019faa:	d00b      	beq.n	8019fc4 <__lo0bits+0x22>
 8019fac:	07d9      	lsls	r1, r3, #31
 8019fae:	d421      	bmi.n	8019ff4 <__lo0bits+0x52>
 8019fb0:	0798      	lsls	r0, r3, #30
 8019fb2:	bf49      	itett	mi
 8019fb4:	085b      	lsrmi	r3, r3, #1
 8019fb6:	089b      	lsrpl	r3, r3, #2
 8019fb8:	2001      	movmi	r0, #1
 8019fba:	6013      	strmi	r3, [r2, #0]
 8019fbc:	bf5c      	itt	pl
 8019fbe:	6013      	strpl	r3, [r2, #0]
 8019fc0:	2002      	movpl	r0, #2
 8019fc2:	4770      	bx	lr
 8019fc4:	b299      	uxth	r1, r3
 8019fc6:	b909      	cbnz	r1, 8019fcc <__lo0bits+0x2a>
 8019fc8:	0c1b      	lsrs	r3, r3, #16
 8019fca:	2010      	movs	r0, #16
 8019fcc:	b2d9      	uxtb	r1, r3
 8019fce:	b909      	cbnz	r1, 8019fd4 <__lo0bits+0x32>
 8019fd0:	3008      	adds	r0, #8
 8019fd2:	0a1b      	lsrs	r3, r3, #8
 8019fd4:	0719      	lsls	r1, r3, #28
 8019fd6:	bf04      	itt	eq
 8019fd8:	091b      	lsreq	r3, r3, #4
 8019fda:	3004      	addeq	r0, #4
 8019fdc:	0799      	lsls	r1, r3, #30
 8019fde:	bf04      	itt	eq
 8019fe0:	089b      	lsreq	r3, r3, #2
 8019fe2:	3002      	addeq	r0, #2
 8019fe4:	07d9      	lsls	r1, r3, #31
 8019fe6:	d403      	bmi.n	8019ff0 <__lo0bits+0x4e>
 8019fe8:	085b      	lsrs	r3, r3, #1
 8019fea:	f100 0001 	add.w	r0, r0, #1
 8019fee:	d003      	beq.n	8019ff8 <__lo0bits+0x56>
 8019ff0:	6013      	str	r3, [r2, #0]
 8019ff2:	4770      	bx	lr
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	4770      	bx	lr
 8019ff8:	2020      	movs	r0, #32
 8019ffa:	4770      	bx	lr

08019ffc <__i2b>:
 8019ffc:	b510      	push	{r4, lr}
 8019ffe:	460c      	mov	r4, r1
 801a000:	2101      	movs	r1, #1
 801a002:	f7ff febd 	bl	8019d80 <_Balloc>
 801a006:	4602      	mov	r2, r0
 801a008:	b928      	cbnz	r0, 801a016 <__i2b+0x1a>
 801a00a:	4b05      	ldr	r3, [pc, #20]	@ (801a020 <__i2b+0x24>)
 801a00c:	4805      	ldr	r0, [pc, #20]	@ (801a024 <__i2b+0x28>)
 801a00e:	f240 1145 	movw	r1, #325	@ 0x145
 801a012:	f7fc fed5 	bl	8016dc0 <__assert_func>
 801a016:	2301      	movs	r3, #1
 801a018:	6144      	str	r4, [r0, #20]
 801a01a:	6103      	str	r3, [r0, #16]
 801a01c:	bd10      	pop	{r4, pc}
 801a01e:	bf00      	nop
 801a020:	080217f1 	.word	0x080217f1
 801a024:	08021862 	.word	0x08021862

0801a028 <__multiply>:
 801a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02c:	4614      	mov	r4, r2
 801a02e:	690a      	ldr	r2, [r1, #16]
 801a030:	6923      	ldr	r3, [r4, #16]
 801a032:	429a      	cmp	r2, r3
 801a034:	bfa8      	it	ge
 801a036:	4623      	movge	r3, r4
 801a038:	460f      	mov	r7, r1
 801a03a:	bfa4      	itt	ge
 801a03c:	460c      	movge	r4, r1
 801a03e:	461f      	movge	r7, r3
 801a040:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a044:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a048:	68a3      	ldr	r3, [r4, #8]
 801a04a:	6861      	ldr	r1, [r4, #4]
 801a04c:	eb0a 0609 	add.w	r6, sl, r9
 801a050:	42b3      	cmp	r3, r6
 801a052:	b085      	sub	sp, #20
 801a054:	bfb8      	it	lt
 801a056:	3101      	addlt	r1, #1
 801a058:	f7ff fe92 	bl	8019d80 <_Balloc>
 801a05c:	b930      	cbnz	r0, 801a06c <__multiply+0x44>
 801a05e:	4602      	mov	r2, r0
 801a060:	4b44      	ldr	r3, [pc, #272]	@ (801a174 <__multiply+0x14c>)
 801a062:	4845      	ldr	r0, [pc, #276]	@ (801a178 <__multiply+0x150>)
 801a064:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a068:	f7fc feaa 	bl	8016dc0 <__assert_func>
 801a06c:	f100 0514 	add.w	r5, r0, #20
 801a070:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a074:	462b      	mov	r3, r5
 801a076:	2200      	movs	r2, #0
 801a078:	4543      	cmp	r3, r8
 801a07a:	d321      	bcc.n	801a0c0 <__multiply+0x98>
 801a07c:	f107 0114 	add.w	r1, r7, #20
 801a080:	f104 0214 	add.w	r2, r4, #20
 801a084:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a088:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a08c:	9302      	str	r3, [sp, #8]
 801a08e:	1b13      	subs	r3, r2, r4
 801a090:	3b15      	subs	r3, #21
 801a092:	f023 0303 	bic.w	r3, r3, #3
 801a096:	3304      	adds	r3, #4
 801a098:	f104 0715 	add.w	r7, r4, #21
 801a09c:	42ba      	cmp	r2, r7
 801a09e:	bf38      	it	cc
 801a0a0:	2304      	movcc	r3, #4
 801a0a2:	9301      	str	r3, [sp, #4]
 801a0a4:	9b02      	ldr	r3, [sp, #8]
 801a0a6:	9103      	str	r1, [sp, #12]
 801a0a8:	428b      	cmp	r3, r1
 801a0aa:	d80c      	bhi.n	801a0c6 <__multiply+0x9e>
 801a0ac:	2e00      	cmp	r6, #0
 801a0ae:	dd03      	ble.n	801a0b8 <__multiply+0x90>
 801a0b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d05b      	beq.n	801a170 <__multiply+0x148>
 801a0b8:	6106      	str	r6, [r0, #16]
 801a0ba:	b005      	add	sp, #20
 801a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0c0:	f843 2b04 	str.w	r2, [r3], #4
 801a0c4:	e7d8      	b.n	801a078 <__multiply+0x50>
 801a0c6:	f8b1 a000 	ldrh.w	sl, [r1]
 801a0ca:	f1ba 0f00 	cmp.w	sl, #0
 801a0ce:	d024      	beq.n	801a11a <__multiply+0xf2>
 801a0d0:	f104 0e14 	add.w	lr, r4, #20
 801a0d4:	46a9      	mov	r9, r5
 801a0d6:	f04f 0c00 	mov.w	ip, #0
 801a0da:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a0de:	f8d9 3000 	ldr.w	r3, [r9]
 801a0e2:	fa1f fb87 	uxth.w	fp, r7
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	fb0a 330b 	mla	r3, sl, fp, r3
 801a0ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a0f0:	f8d9 7000 	ldr.w	r7, [r9]
 801a0f4:	4463      	add	r3, ip
 801a0f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a0fa:	fb0a c70b 	mla	r7, sl, fp, ip
 801a0fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a102:	b29b      	uxth	r3, r3
 801a104:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a108:	4572      	cmp	r2, lr
 801a10a:	f849 3b04 	str.w	r3, [r9], #4
 801a10e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a112:	d8e2      	bhi.n	801a0da <__multiply+0xb2>
 801a114:	9b01      	ldr	r3, [sp, #4]
 801a116:	f845 c003 	str.w	ip, [r5, r3]
 801a11a:	9b03      	ldr	r3, [sp, #12]
 801a11c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a120:	3104      	adds	r1, #4
 801a122:	f1b9 0f00 	cmp.w	r9, #0
 801a126:	d021      	beq.n	801a16c <__multiply+0x144>
 801a128:	682b      	ldr	r3, [r5, #0]
 801a12a:	f104 0c14 	add.w	ip, r4, #20
 801a12e:	46ae      	mov	lr, r5
 801a130:	f04f 0a00 	mov.w	sl, #0
 801a134:	f8bc b000 	ldrh.w	fp, [ip]
 801a138:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801a13c:	fb09 770b 	mla	r7, r9, fp, r7
 801a140:	4457      	add	r7, sl
 801a142:	b29b      	uxth	r3, r3
 801a144:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a148:	f84e 3b04 	str.w	r3, [lr], #4
 801a14c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a154:	f8be 3000 	ldrh.w	r3, [lr]
 801a158:	fb09 330a 	mla	r3, r9, sl, r3
 801a15c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801a160:	4562      	cmp	r2, ip
 801a162:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a166:	d8e5      	bhi.n	801a134 <__multiply+0x10c>
 801a168:	9f01      	ldr	r7, [sp, #4]
 801a16a:	51eb      	str	r3, [r5, r7]
 801a16c:	3504      	adds	r5, #4
 801a16e:	e799      	b.n	801a0a4 <__multiply+0x7c>
 801a170:	3e01      	subs	r6, #1
 801a172:	e79b      	b.n	801a0ac <__multiply+0x84>
 801a174:	080217f1 	.word	0x080217f1
 801a178:	08021862 	.word	0x08021862

0801a17c <__pow5mult>:
 801a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a180:	4615      	mov	r5, r2
 801a182:	f012 0203 	ands.w	r2, r2, #3
 801a186:	4607      	mov	r7, r0
 801a188:	460e      	mov	r6, r1
 801a18a:	d007      	beq.n	801a19c <__pow5mult+0x20>
 801a18c:	4c25      	ldr	r4, [pc, #148]	@ (801a224 <__pow5mult+0xa8>)
 801a18e:	3a01      	subs	r2, #1
 801a190:	2300      	movs	r3, #0
 801a192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a196:	f7ff fe55 	bl	8019e44 <__multadd>
 801a19a:	4606      	mov	r6, r0
 801a19c:	10ad      	asrs	r5, r5, #2
 801a19e:	d03d      	beq.n	801a21c <__pow5mult+0xa0>
 801a1a0:	69fc      	ldr	r4, [r7, #28]
 801a1a2:	b97c      	cbnz	r4, 801a1c4 <__pow5mult+0x48>
 801a1a4:	2010      	movs	r0, #16
 801a1a6:	f7fc fe3d 	bl	8016e24 <malloc>
 801a1aa:	4602      	mov	r2, r0
 801a1ac:	61f8      	str	r0, [r7, #28]
 801a1ae:	b928      	cbnz	r0, 801a1bc <__pow5mult+0x40>
 801a1b0:	4b1d      	ldr	r3, [pc, #116]	@ (801a228 <__pow5mult+0xac>)
 801a1b2:	481e      	ldr	r0, [pc, #120]	@ (801a22c <__pow5mult+0xb0>)
 801a1b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a1b8:	f7fc fe02 	bl	8016dc0 <__assert_func>
 801a1bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a1c0:	6004      	str	r4, [r0, #0]
 801a1c2:	60c4      	str	r4, [r0, #12]
 801a1c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a1c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a1cc:	b94c      	cbnz	r4, 801a1e2 <__pow5mult+0x66>
 801a1ce:	f240 2171 	movw	r1, #625	@ 0x271
 801a1d2:	4638      	mov	r0, r7
 801a1d4:	f7ff ff12 	bl	8019ffc <__i2b>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	f8c8 0008 	str.w	r0, [r8, #8]
 801a1de:	4604      	mov	r4, r0
 801a1e0:	6003      	str	r3, [r0, #0]
 801a1e2:	f04f 0900 	mov.w	r9, #0
 801a1e6:	07eb      	lsls	r3, r5, #31
 801a1e8:	d50a      	bpl.n	801a200 <__pow5mult+0x84>
 801a1ea:	4631      	mov	r1, r6
 801a1ec:	4622      	mov	r2, r4
 801a1ee:	4638      	mov	r0, r7
 801a1f0:	f7ff ff1a 	bl	801a028 <__multiply>
 801a1f4:	4631      	mov	r1, r6
 801a1f6:	4680      	mov	r8, r0
 801a1f8:	4638      	mov	r0, r7
 801a1fa:	f7ff fe01 	bl	8019e00 <_Bfree>
 801a1fe:	4646      	mov	r6, r8
 801a200:	106d      	asrs	r5, r5, #1
 801a202:	d00b      	beq.n	801a21c <__pow5mult+0xa0>
 801a204:	6820      	ldr	r0, [r4, #0]
 801a206:	b938      	cbnz	r0, 801a218 <__pow5mult+0x9c>
 801a208:	4622      	mov	r2, r4
 801a20a:	4621      	mov	r1, r4
 801a20c:	4638      	mov	r0, r7
 801a20e:	f7ff ff0b 	bl	801a028 <__multiply>
 801a212:	6020      	str	r0, [r4, #0]
 801a214:	f8c0 9000 	str.w	r9, [r0]
 801a218:	4604      	mov	r4, r0
 801a21a:	e7e4      	b.n	801a1e6 <__pow5mult+0x6a>
 801a21c:	4630      	mov	r0, r6
 801a21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a222:	bf00      	nop
 801a224:	080218bc 	.word	0x080218bc
 801a228:	08021782 	.word	0x08021782
 801a22c:	08021862 	.word	0x08021862

0801a230 <__lshift>:
 801a230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a234:	460c      	mov	r4, r1
 801a236:	6849      	ldr	r1, [r1, #4]
 801a238:	6923      	ldr	r3, [r4, #16]
 801a23a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a23e:	68a3      	ldr	r3, [r4, #8]
 801a240:	4607      	mov	r7, r0
 801a242:	4691      	mov	r9, r2
 801a244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a248:	f108 0601 	add.w	r6, r8, #1
 801a24c:	42b3      	cmp	r3, r6
 801a24e:	db0b      	blt.n	801a268 <__lshift+0x38>
 801a250:	4638      	mov	r0, r7
 801a252:	f7ff fd95 	bl	8019d80 <_Balloc>
 801a256:	4605      	mov	r5, r0
 801a258:	b948      	cbnz	r0, 801a26e <__lshift+0x3e>
 801a25a:	4602      	mov	r2, r0
 801a25c:	4b28      	ldr	r3, [pc, #160]	@ (801a300 <__lshift+0xd0>)
 801a25e:	4829      	ldr	r0, [pc, #164]	@ (801a304 <__lshift+0xd4>)
 801a260:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a264:	f7fc fdac 	bl	8016dc0 <__assert_func>
 801a268:	3101      	adds	r1, #1
 801a26a:	005b      	lsls	r3, r3, #1
 801a26c:	e7ee      	b.n	801a24c <__lshift+0x1c>
 801a26e:	2300      	movs	r3, #0
 801a270:	f100 0114 	add.w	r1, r0, #20
 801a274:	f100 0210 	add.w	r2, r0, #16
 801a278:	4618      	mov	r0, r3
 801a27a:	4553      	cmp	r3, sl
 801a27c:	db33      	blt.n	801a2e6 <__lshift+0xb6>
 801a27e:	6920      	ldr	r0, [r4, #16]
 801a280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a284:	f104 0314 	add.w	r3, r4, #20
 801a288:	f019 091f 	ands.w	r9, r9, #31
 801a28c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a290:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a294:	d02b      	beq.n	801a2ee <__lshift+0xbe>
 801a296:	f1c9 0e20 	rsb	lr, r9, #32
 801a29a:	468a      	mov	sl, r1
 801a29c:	2200      	movs	r2, #0
 801a29e:	6818      	ldr	r0, [r3, #0]
 801a2a0:	fa00 f009 	lsl.w	r0, r0, r9
 801a2a4:	4310      	orrs	r0, r2
 801a2a6:	f84a 0b04 	str.w	r0, [sl], #4
 801a2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2ae:	459c      	cmp	ip, r3
 801a2b0:	fa22 f20e 	lsr.w	r2, r2, lr
 801a2b4:	d8f3      	bhi.n	801a29e <__lshift+0x6e>
 801a2b6:	ebac 0304 	sub.w	r3, ip, r4
 801a2ba:	3b15      	subs	r3, #21
 801a2bc:	f023 0303 	bic.w	r3, r3, #3
 801a2c0:	3304      	adds	r3, #4
 801a2c2:	f104 0015 	add.w	r0, r4, #21
 801a2c6:	4584      	cmp	ip, r0
 801a2c8:	bf38      	it	cc
 801a2ca:	2304      	movcc	r3, #4
 801a2cc:	50ca      	str	r2, [r1, r3]
 801a2ce:	b10a      	cbz	r2, 801a2d4 <__lshift+0xa4>
 801a2d0:	f108 0602 	add.w	r6, r8, #2
 801a2d4:	3e01      	subs	r6, #1
 801a2d6:	4638      	mov	r0, r7
 801a2d8:	612e      	str	r6, [r5, #16]
 801a2da:	4621      	mov	r1, r4
 801a2dc:	f7ff fd90 	bl	8019e00 <_Bfree>
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2e6:	f842 0f04 	str.w	r0, [r2, #4]!
 801a2ea:	3301      	adds	r3, #1
 801a2ec:	e7c5      	b.n	801a27a <__lshift+0x4a>
 801a2ee:	3904      	subs	r1, #4
 801a2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2f4:	f841 2f04 	str.w	r2, [r1, #4]!
 801a2f8:	459c      	cmp	ip, r3
 801a2fa:	d8f9      	bhi.n	801a2f0 <__lshift+0xc0>
 801a2fc:	e7ea      	b.n	801a2d4 <__lshift+0xa4>
 801a2fe:	bf00      	nop
 801a300:	080217f1 	.word	0x080217f1
 801a304:	08021862 	.word	0x08021862

0801a308 <__mcmp>:
 801a308:	690a      	ldr	r2, [r1, #16]
 801a30a:	4603      	mov	r3, r0
 801a30c:	6900      	ldr	r0, [r0, #16]
 801a30e:	1a80      	subs	r0, r0, r2
 801a310:	b530      	push	{r4, r5, lr}
 801a312:	d10e      	bne.n	801a332 <__mcmp+0x2a>
 801a314:	3314      	adds	r3, #20
 801a316:	3114      	adds	r1, #20
 801a318:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a31c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a328:	4295      	cmp	r5, r2
 801a32a:	d003      	beq.n	801a334 <__mcmp+0x2c>
 801a32c:	d205      	bcs.n	801a33a <__mcmp+0x32>
 801a32e:	f04f 30ff 	mov.w	r0, #4294967295
 801a332:	bd30      	pop	{r4, r5, pc}
 801a334:	42a3      	cmp	r3, r4
 801a336:	d3f3      	bcc.n	801a320 <__mcmp+0x18>
 801a338:	e7fb      	b.n	801a332 <__mcmp+0x2a>
 801a33a:	2001      	movs	r0, #1
 801a33c:	e7f9      	b.n	801a332 <__mcmp+0x2a>
	...

0801a340 <__mdiff>:
 801a340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a344:	4689      	mov	r9, r1
 801a346:	4606      	mov	r6, r0
 801a348:	4611      	mov	r1, r2
 801a34a:	4648      	mov	r0, r9
 801a34c:	4614      	mov	r4, r2
 801a34e:	f7ff ffdb 	bl	801a308 <__mcmp>
 801a352:	1e05      	subs	r5, r0, #0
 801a354:	d112      	bne.n	801a37c <__mdiff+0x3c>
 801a356:	4629      	mov	r1, r5
 801a358:	4630      	mov	r0, r6
 801a35a:	f7ff fd11 	bl	8019d80 <_Balloc>
 801a35e:	4602      	mov	r2, r0
 801a360:	b928      	cbnz	r0, 801a36e <__mdiff+0x2e>
 801a362:	4b3f      	ldr	r3, [pc, #252]	@ (801a460 <__mdiff+0x120>)
 801a364:	f240 2137 	movw	r1, #567	@ 0x237
 801a368:	483e      	ldr	r0, [pc, #248]	@ (801a464 <__mdiff+0x124>)
 801a36a:	f7fc fd29 	bl	8016dc0 <__assert_func>
 801a36e:	2301      	movs	r3, #1
 801a370:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a374:	4610      	mov	r0, r2
 801a376:	b003      	add	sp, #12
 801a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a37c:	bfbc      	itt	lt
 801a37e:	464b      	movlt	r3, r9
 801a380:	46a1      	movlt	r9, r4
 801a382:	4630      	mov	r0, r6
 801a384:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a388:	bfba      	itte	lt
 801a38a:	461c      	movlt	r4, r3
 801a38c:	2501      	movlt	r5, #1
 801a38e:	2500      	movge	r5, #0
 801a390:	f7ff fcf6 	bl	8019d80 <_Balloc>
 801a394:	4602      	mov	r2, r0
 801a396:	b918      	cbnz	r0, 801a3a0 <__mdiff+0x60>
 801a398:	4b31      	ldr	r3, [pc, #196]	@ (801a460 <__mdiff+0x120>)
 801a39a:	f240 2145 	movw	r1, #581	@ 0x245
 801a39e:	e7e3      	b.n	801a368 <__mdiff+0x28>
 801a3a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a3a4:	6926      	ldr	r6, [r4, #16]
 801a3a6:	60c5      	str	r5, [r0, #12]
 801a3a8:	f109 0310 	add.w	r3, r9, #16
 801a3ac:	f109 0514 	add.w	r5, r9, #20
 801a3b0:	f104 0e14 	add.w	lr, r4, #20
 801a3b4:	f100 0b14 	add.w	fp, r0, #20
 801a3b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a3bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a3c0:	9301      	str	r3, [sp, #4]
 801a3c2:	46d9      	mov	r9, fp
 801a3c4:	f04f 0c00 	mov.w	ip, #0
 801a3c8:	9b01      	ldr	r3, [sp, #4]
 801a3ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a3ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a3d2:	9301      	str	r3, [sp, #4]
 801a3d4:	fa1f f38a 	uxth.w	r3, sl
 801a3d8:	4619      	mov	r1, r3
 801a3da:	b283      	uxth	r3, r0
 801a3dc:	1acb      	subs	r3, r1, r3
 801a3de:	0c00      	lsrs	r0, r0, #16
 801a3e0:	4463      	add	r3, ip
 801a3e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a3e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a3ea:	b29b      	uxth	r3, r3
 801a3ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a3f0:	4576      	cmp	r6, lr
 801a3f2:	f849 3b04 	str.w	r3, [r9], #4
 801a3f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a3fa:	d8e5      	bhi.n	801a3c8 <__mdiff+0x88>
 801a3fc:	1b33      	subs	r3, r6, r4
 801a3fe:	3b15      	subs	r3, #21
 801a400:	f023 0303 	bic.w	r3, r3, #3
 801a404:	3415      	adds	r4, #21
 801a406:	3304      	adds	r3, #4
 801a408:	42a6      	cmp	r6, r4
 801a40a:	bf38      	it	cc
 801a40c:	2304      	movcc	r3, #4
 801a40e:	441d      	add	r5, r3
 801a410:	445b      	add	r3, fp
 801a412:	461e      	mov	r6, r3
 801a414:	462c      	mov	r4, r5
 801a416:	4544      	cmp	r4, r8
 801a418:	d30e      	bcc.n	801a438 <__mdiff+0xf8>
 801a41a:	f108 0103 	add.w	r1, r8, #3
 801a41e:	1b49      	subs	r1, r1, r5
 801a420:	f021 0103 	bic.w	r1, r1, #3
 801a424:	3d03      	subs	r5, #3
 801a426:	45a8      	cmp	r8, r5
 801a428:	bf38      	it	cc
 801a42a:	2100      	movcc	r1, #0
 801a42c:	440b      	add	r3, r1
 801a42e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a432:	b191      	cbz	r1, 801a45a <__mdiff+0x11a>
 801a434:	6117      	str	r7, [r2, #16]
 801a436:	e79d      	b.n	801a374 <__mdiff+0x34>
 801a438:	f854 1b04 	ldr.w	r1, [r4], #4
 801a43c:	46e6      	mov	lr, ip
 801a43e:	0c08      	lsrs	r0, r1, #16
 801a440:	fa1c fc81 	uxtah	ip, ip, r1
 801a444:	4471      	add	r1, lr
 801a446:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a44a:	b289      	uxth	r1, r1
 801a44c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a450:	f846 1b04 	str.w	r1, [r6], #4
 801a454:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a458:	e7dd      	b.n	801a416 <__mdiff+0xd6>
 801a45a:	3f01      	subs	r7, #1
 801a45c:	e7e7      	b.n	801a42e <__mdiff+0xee>
 801a45e:	bf00      	nop
 801a460:	080217f1 	.word	0x080217f1
 801a464:	08021862 	.word	0x08021862

0801a468 <__ulp>:
 801a468:	b082      	sub	sp, #8
 801a46a:	ed8d 0b00 	vstr	d0, [sp]
 801a46e:	9a01      	ldr	r2, [sp, #4]
 801a470:	4b0f      	ldr	r3, [pc, #60]	@ (801a4b0 <__ulp+0x48>)
 801a472:	4013      	ands	r3, r2
 801a474:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801a478:	2b00      	cmp	r3, #0
 801a47a:	dc08      	bgt.n	801a48e <__ulp+0x26>
 801a47c:	425b      	negs	r3, r3
 801a47e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801a482:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a486:	da04      	bge.n	801a492 <__ulp+0x2a>
 801a488:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801a48c:	4113      	asrs	r3, r2
 801a48e:	2200      	movs	r2, #0
 801a490:	e008      	b.n	801a4a4 <__ulp+0x3c>
 801a492:	f1a2 0314 	sub.w	r3, r2, #20
 801a496:	2b1e      	cmp	r3, #30
 801a498:	bfda      	itte	le
 801a49a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801a49e:	40da      	lsrle	r2, r3
 801a4a0:	2201      	movgt	r2, #1
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	4619      	mov	r1, r3
 801a4a6:	4610      	mov	r0, r2
 801a4a8:	ec41 0b10 	vmov	d0, r0, r1
 801a4ac:	b002      	add	sp, #8
 801a4ae:	4770      	bx	lr
 801a4b0:	7ff00000 	.word	0x7ff00000

0801a4b4 <__b2d>:
 801a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4b8:	6906      	ldr	r6, [r0, #16]
 801a4ba:	f100 0814 	add.w	r8, r0, #20
 801a4be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a4c2:	1f37      	subs	r7, r6, #4
 801a4c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a4c8:	4610      	mov	r0, r2
 801a4ca:	f7ff fd4b 	bl	8019f64 <__hi0bits>
 801a4ce:	f1c0 0320 	rsb	r3, r0, #32
 801a4d2:	280a      	cmp	r0, #10
 801a4d4:	600b      	str	r3, [r1, #0]
 801a4d6:	491b      	ldr	r1, [pc, #108]	@ (801a544 <__b2d+0x90>)
 801a4d8:	dc15      	bgt.n	801a506 <__b2d+0x52>
 801a4da:	f1c0 0c0b 	rsb	ip, r0, #11
 801a4de:	fa22 f30c 	lsr.w	r3, r2, ip
 801a4e2:	45b8      	cmp	r8, r7
 801a4e4:	ea43 0501 	orr.w	r5, r3, r1
 801a4e8:	bf34      	ite	cc
 801a4ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a4ee:	2300      	movcs	r3, #0
 801a4f0:	3015      	adds	r0, #21
 801a4f2:	fa02 f000 	lsl.w	r0, r2, r0
 801a4f6:	fa23 f30c 	lsr.w	r3, r3, ip
 801a4fa:	4303      	orrs	r3, r0
 801a4fc:	461c      	mov	r4, r3
 801a4fe:	ec45 4b10 	vmov	d0, r4, r5
 801a502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a506:	45b8      	cmp	r8, r7
 801a508:	bf3a      	itte	cc
 801a50a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a50e:	f1a6 0708 	subcc.w	r7, r6, #8
 801a512:	2300      	movcs	r3, #0
 801a514:	380b      	subs	r0, #11
 801a516:	d012      	beq.n	801a53e <__b2d+0x8a>
 801a518:	f1c0 0120 	rsb	r1, r0, #32
 801a51c:	fa23 f401 	lsr.w	r4, r3, r1
 801a520:	4082      	lsls	r2, r0
 801a522:	4322      	orrs	r2, r4
 801a524:	4547      	cmp	r7, r8
 801a526:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801a52a:	bf8c      	ite	hi
 801a52c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a530:	2200      	movls	r2, #0
 801a532:	4083      	lsls	r3, r0
 801a534:	40ca      	lsrs	r2, r1
 801a536:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a53a:	4313      	orrs	r3, r2
 801a53c:	e7de      	b.n	801a4fc <__b2d+0x48>
 801a53e:	ea42 0501 	orr.w	r5, r2, r1
 801a542:	e7db      	b.n	801a4fc <__b2d+0x48>
 801a544:	3ff00000 	.word	0x3ff00000

0801a548 <__d2b>:
 801a548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a54c:	460f      	mov	r7, r1
 801a54e:	2101      	movs	r1, #1
 801a550:	ec59 8b10 	vmov	r8, r9, d0
 801a554:	4616      	mov	r6, r2
 801a556:	f7ff fc13 	bl	8019d80 <_Balloc>
 801a55a:	4604      	mov	r4, r0
 801a55c:	b930      	cbnz	r0, 801a56c <__d2b+0x24>
 801a55e:	4602      	mov	r2, r0
 801a560:	4b23      	ldr	r3, [pc, #140]	@ (801a5f0 <__d2b+0xa8>)
 801a562:	4824      	ldr	r0, [pc, #144]	@ (801a5f4 <__d2b+0xac>)
 801a564:	f240 310f 	movw	r1, #783	@ 0x30f
 801a568:	f7fc fc2a 	bl	8016dc0 <__assert_func>
 801a56c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a574:	b10d      	cbz	r5, 801a57a <__d2b+0x32>
 801a576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a57a:	9301      	str	r3, [sp, #4]
 801a57c:	f1b8 0300 	subs.w	r3, r8, #0
 801a580:	d023      	beq.n	801a5ca <__d2b+0x82>
 801a582:	4668      	mov	r0, sp
 801a584:	9300      	str	r3, [sp, #0]
 801a586:	f7ff fd0c 	bl	8019fa2 <__lo0bits>
 801a58a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a58e:	b1d0      	cbz	r0, 801a5c6 <__d2b+0x7e>
 801a590:	f1c0 0320 	rsb	r3, r0, #32
 801a594:	fa02 f303 	lsl.w	r3, r2, r3
 801a598:	430b      	orrs	r3, r1
 801a59a:	40c2      	lsrs	r2, r0
 801a59c:	6163      	str	r3, [r4, #20]
 801a59e:	9201      	str	r2, [sp, #4]
 801a5a0:	9b01      	ldr	r3, [sp, #4]
 801a5a2:	61a3      	str	r3, [r4, #24]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	bf0c      	ite	eq
 801a5a8:	2201      	moveq	r2, #1
 801a5aa:	2202      	movne	r2, #2
 801a5ac:	6122      	str	r2, [r4, #16]
 801a5ae:	b1a5      	cbz	r5, 801a5da <__d2b+0x92>
 801a5b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a5b4:	4405      	add	r5, r0
 801a5b6:	603d      	str	r5, [r7, #0]
 801a5b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a5bc:	6030      	str	r0, [r6, #0]
 801a5be:	4620      	mov	r0, r4
 801a5c0:	b003      	add	sp, #12
 801a5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5c6:	6161      	str	r1, [r4, #20]
 801a5c8:	e7ea      	b.n	801a5a0 <__d2b+0x58>
 801a5ca:	a801      	add	r0, sp, #4
 801a5cc:	f7ff fce9 	bl	8019fa2 <__lo0bits>
 801a5d0:	9b01      	ldr	r3, [sp, #4]
 801a5d2:	6163      	str	r3, [r4, #20]
 801a5d4:	3020      	adds	r0, #32
 801a5d6:	2201      	movs	r2, #1
 801a5d8:	e7e8      	b.n	801a5ac <__d2b+0x64>
 801a5da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a5de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a5e2:	6038      	str	r0, [r7, #0]
 801a5e4:	6918      	ldr	r0, [r3, #16]
 801a5e6:	f7ff fcbd 	bl	8019f64 <__hi0bits>
 801a5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a5ee:	e7e5      	b.n	801a5bc <__d2b+0x74>
 801a5f0:	080217f1 	.word	0x080217f1
 801a5f4:	08021862 	.word	0x08021862

0801a5f8 <__ratio>:
 801a5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5fc:	4688      	mov	r8, r1
 801a5fe:	4669      	mov	r1, sp
 801a600:	4681      	mov	r9, r0
 801a602:	f7ff ff57 	bl	801a4b4 <__b2d>
 801a606:	a901      	add	r1, sp, #4
 801a608:	4640      	mov	r0, r8
 801a60a:	ec55 4b10 	vmov	r4, r5, d0
 801a60e:	f7ff ff51 	bl	801a4b4 <__b2d>
 801a612:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a616:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801a61a:	1ad2      	subs	r2, r2, r3
 801a61c:	e9dd 3100 	ldrd	r3, r1, [sp]
 801a620:	1a5b      	subs	r3, r3, r1
 801a622:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801a626:	ec57 6b10 	vmov	r6, r7, d0
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	bfd6      	itet	le
 801a62e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a632:	462a      	movgt	r2, r5
 801a634:	463a      	movle	r2, r7
 801a636:	46ab      	mov	fp, r5
 801a638:	46a2      	mov	sl, r4
 801a63a:	bfce      	itee	gt
 801a63c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801a640:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801a644:	ee00 3a90 	vmovle	s1, r3
 801a648:	ec4b ab17 	vmov	d7, sl, fp
 801a64c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801a650:	b003      	add	sp, #12
 801a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a656 <__copybits>:
 801a656:	3901      	subs	r1, #1
 801a658:	b570      	push	{r4, r5, r6, lr}
 801a65a:	1149      	asrs	r1, r1, #5
 801a65c:	6914      	ldr	r4, [r2, #16]
 801a65e:	3101      	adds	r1, #1
 801a660:	f102 0314 	add.w	r3, r2, #20
 801a664:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a668:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a66c:	1f05      	subs	r5, r0, #4
 801a66e:	42a3      	cmp	r3, r4
 801a670:	d30c      	bcc.n	801a68c <__copybits+0x36>
 801a672:	1aa3      	subs	r3, r4, r2
 801a674:	3b11      	subs	r3, #17
 801a676:	f023 0303 	bic.w	r3, r3, #3
 801a67a:	3211      	adds	r2, #17
 801a67c:	42a2      	cmp	r2, r4
 801a67e:	bf88      	it	hi
 801a680:	2300      	movhi	r3, #0
 801a682:	4418      	add	r0, r3
 801a684:	2300      	movs	r3, #0
 801a686:	4288      	cmp	r0, r1
 801a688:	d305      	bcc.n	801a696 <__copybits+0x40>
 801a68a:	bd70      	pop	{r4, r5, r6, pc}
 801a68c:	f853 6b04 	ldr.w	r6, [r3], #4
 801a690:	f845 6f04 	str.w	r6, [r5, #4]!
 801a694:	e7eb      	b.n	801a66e <__copybits+0x18>
 801a696:	f840 3b04 	str.w	r3, [r0], #4
 801a69a:	e7f4      	b.n	801a686 <__copybits+0x30>

0801a69c <__any_on>:
 801a69c:	f100 0214 	add.w	r2, r0, #20
 801a6a0:	6900      	ldr	r0, [r0, #16]
 801a6a2:	114b      	asrs	r3, r1, #5
 801a6a4:	4298      	cmp	r0, r3
 801a6a6:	b510      	push	{r4, lr}
 801a6a8:	db11      	blt.n	801a6ce <__any_on+0x32>
 801a6aa:	dd0a      	ble.n	801a6c2 <__any_on+0x26>
 801a6ac:	f011 011f 	ands.w	r1, r1, #31
 801a6b0:	d007      	beq.n	801a6c2 <__any_on+0x26>
 801a6b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a6b6:	fa24 f001 	lsr.w	r0, r4, r1
 801a6ba:	fa00 f101 	lsl.w	r1, r0, r1
 801a6be:	428c      	cmp	r4, r1
 801a6c0:	d10b      	bne.n	801a6da <__any_on+0x3e>
 801a6c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6c6:	4293      	cmp	r3, r2
 801a6c8:	d803      	bhi.n	801a6d2 <__any_on+0x36>
 801a6ca:	2000      	movs	r0, #0
 801a6cc:	bd10      	pop	{r4, pc}
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	e7f7      	b.n	801a6c2 <__any_on+0x26>
 801a6d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a6d6:	2900      	cmp	r1, #0
 801a6d8:	d0f5      	beq.n	801a6c6 <__any_on+0x2a>
 801a6da:	2001      	movs	r0, #1
 801a6dc:	e7f6      	b.n	801a6cc <__any_on+0x30>

0801a6de <_malloc_usable_size_r>:
 801a6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6e2:	1f18      	subs	r0, r3, #4
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	bfbc      	itt	lt
 801a6e8:	580b      	ldrlt	r3, [r1, r0]
 801a6ea:	18c0      	addlt	r0, r0, r3
 801a6ec:	4770      	bx	lr

0801a6ee <__ascii_wctomb>:
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	4608      	mov	r0, r1
 801a6f2:	b141      	cbz	r1, 801a706 <__ascii_wctomb+0x18>
 801a6f4:	2aff      	cmp	r2, #255	@ 0xff
 801a6f6:	d904      	bls.n	801a702 <__ascii_wctomb+0x14>
 801a6f8:	228a      	movs	r2, #138	@ 0x8a
 801a6fa:	601a      	str	r2, [r3, #0]
 801a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 801a700:	4770      	bx	lr
 801a702:	700a      	strb	r2, [r1, #0]
 801a704:	2001      	movs	r0, #1
 801a706:	4770      	bx	lr

0801a708 <__ssputs_r>:
 801a708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a70c:	688e      	ldr	r6, [r1, #8]
 801a70e:	461f      	mov	r7, r3
 801a710:	42be      	cmp	r6, r7
 801a712:	680b      	ldr	r3, [r1, #0]
 801a714:	4682      	mov	sl, r0
 801a716:	460c      	mov	r4, r1
 801a718:	4690      	mov	r8, r2
 801a71a:	d82d      	bhi.n	801a778 <__ssputs_r+0x70>
 801a71c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a724:	d026      	beq.n	801a774 <__ssputs_r+0x6c>
 801a726:	6965      	ldr	r5, [r4, #20]
 801a728:	6909      	ldr	r1, [r1, #16]
 801a72a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a72e:	eba3 0901 	sub.w	r9, r3, r1
 801a732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a736:	1c7b      	adds	r3, r7, #1
 801a738:	444b      	add	r3, r9
 801a73a:	106d      	asrs	r5, r5, #1
 801a73c:	429d      	cmp	r5, r3
 801a73e:	bf38      	it	cc
 801a740:	461d      	movcc	r5, r3
 801a742:	0553      	lsls	r3, r2, #21
 801a744:	d527      	bpl.n	801a796 <__ssputs_r+0x8e>
 801a746:	4629      	mov	r1, r5
 801a748:	f7fc fb9e 	bl	8016e88 <_malloc_r>
 801a74c:	4606      	mov	r6, r0
 801a74e:	b360      	cbz	r0, 801a7aa <__ssputs_r+0xa2>
 801a750:	6921      	ldr	r1, [r4, #16]
 801a752:	464a      	mov	r2, r9
 801a754:	f7fe f97f 	bl	8018a56 <memcpy>
 801a758:	89a3      	ldrh	r3, [r4, #12]
 801a75a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a762:	81a3      	strh	r3, [r4, #12]
 801a764:	6126      	str	r6, [r4, #16]
 801a766:	6165      	str	r5, [r4, #20]
 801a768:	444e      	add	r6, r9
 801a76a:	eba5 0509 	sub.w	r5, r5, r9
 801a76e:	6026      	str	r6, [r4, #0]
 801a770:	60a5      	str	r5, [r4, #8]
 801a772:	463e      	mov	r6, r7
 801a774:	42be      	cmp	r6, r7
 801a776:	d900      	bls.n	801a77a <__ssputs_r+0x72>
 801a778:	463e      	mov	r6, r7
 801a77a:	6820      	ldr	r0, [r4, #0]
 801a77c:	4632      	mov	r2, r6
 801a77e:	4641      	mov	r1, r8
 801a780:	f7fe f898 	bl	80188b4 <memmove>
 801a784:	68a3      	ldr	r3, [r4, #8]
 801a786:	1b9b      	subs	r3, r3, r6
 801a788:	60a3      	str	r3, [r4, #8]
 801a78a:	6823      	ldr	r3, [r4, #0]
 801a78c:	4433      	add	r3, r6
 801a78e:	6023      	str	r3, [r4, #0]
 801a790:	2000      	movs	r0, #0
 801a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a796:	462a      	mov	r2, r5
 801a798:	f7fc fc0a 	bl	8016fb0 <_realloc_r>
 801a79c:	4606      	mov	r6, r0
 801a79e:	2800      	cmp	r0, #0
 801a7a0:	d1e0      	bne.n	801a764 <__ssputs_r+0x5c>
 801a7a2:	6921      	ldr	r1, [r4, #16]
 801a7a4:	4650      	mov	r0, sl
 801a7a6:	f7fe ff55 	bl	8019654 <_free_r>
 801a7aa:	230c      	movs	r3, #12
 801a7ac:	f8ca 3000 	str.w	r3, [sl]
 801a7b0:	89a3      	ldrh	r3, [r4, #12]
 801a7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7b6:	81a3      	strh	r3, [r4, #12]
 801a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a7bc:	e7e9      	b.n	801a792 <__ssputs_r+0x8a>
	...

0801a7c0 <_svfiprintf_r>:
 801a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c4:	4698      	mov	r8, r3
 801a7c6:	898b      	ldrh	r3, [r1, #12]
 801a7c8:	061b      	lsls	r3, r3, #24
 801a7ca:	b09d      	sub	sp, #116	@ 0x74
 801a7cc:	4607      	mov	r7, r0
 801a7ce:	460d      	mov	r5, r1
 801a7d0:	4614      	mov	r4, r2
 801a7d2:	d510      	bpl.n	801a7f6 <_svfiprintf_r+0x36>
 801a7d4:	690b      	ldr	r3, [r1, #16]
 801a7d6:	b973      	cbnz	r3, 801a7f6 <_svfiprintf_r+0x36>
 801a7d8:	2140      	movs	r1, #64	@ 0x40
 801a7da:	f7fc fb55 	bl	8016e88 <_malloc_r>
 801a7de:	6028      	str	r0, [r5, #0]
 801a7e0:	6128      	str	r0, [r5, #16]
 801a7e2:	b930      	cbnz	r0, 801a7f2 <_svfiprintf_r+0x32>
 801a7e4:	230c      	movs	r3, #12
 801a7e6:	603b      	str	r3, [r7, #0]
 801a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a7ec:	b01d      	add	sp, #116	@ 0x74
 801a7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7f2:	2340      	movs	r3, #64	@ 0x40
 801a7f4:	616b      	str	r3, [r5, #20]
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7fa:	2320      	movs	r3, #32
 801a7fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a800:	f8cd 800c 	str.w	r8, [sp, #12]
 801a804:	2330      	movs	r3, #48	@ 0x30
 801a806:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a9a4 <_svfiprintf_r+0x1e4>
 801a80a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a80e:	f04f 0901 	mov.w	r9, #1
 801a812:	4623      	mov	r3, r4
 801a814:	469a      	mov	sl, r3
 801a816:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a81a:	b10a      	cbz	r2, 801a820 <_svfiprintf_r+0x60>
 801a81c:	2a25      	cmp	r2, #37	@ 0x25
 801a81e:	d1f9      	bne.n	801a814 <_svfiprintf_r+0x54>
 801a820:	ebba 0b04 	subs.w	fp, sl, r4
 801a824:	d00b      	beq.n	801a83e <_svfiprintf_r+0x7e>
 801a826:	465b      	mov	r3, fp
 801a828:	4622      	mov	r2, r4
 801a82a:	4629      	mov	r1, r5
 801a82c:	4638      	mov	r0, r7
 801a82e:	f7ff ff6b 	bl	801a708 <__ssputs_r>
 801a832:	3001      	adds	r0, #1
 801a834:	f000 80a7 	beq.w	801a986 <_svfiprintf_r+0x1c6>
 801a838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a83a:	445a      	add	r2, fp
 801a83c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a83e:	f89a 3000 	ldrb.w	r3, [sl]
 801a842:	2b00      	cmp	r3, #0
 801a844:	f000 809f 	beq.w	801a986 <_svfiprintf_r+0x1c6>
 801a848:	2300      	movs	r3, #0
 801a84a:	f04f 32ff 	mov.w	r2, #4294967295
 801a84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a852:	f10a 0a01 	add.w	sl, sl, #1
 801a856:	9304      	str	r3, [sp, #16]
 801a858:	9307      	str	r3, [sp, #28]
 801a85a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a85e:	931a      	str	r3, [sp, #104]	@ 0x68
 801a860:	4654      	mov	r4, sl
 801a862:	2205      	movs	r2, #5
 801a864:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a868:	484e      	ldr	r0, [pc, #312]	@ (801a9a4 <_svfiprintf_r+0x1e4>)
 801a86a:	f7e5 fd49 	bl	8000300 <memchr>
 801a86e:	9a04      	ldr	r2, [sp, #16]
 801a870:	b9d8      	cbnz	r0, 801a8aa <_svfiprintf_r+0xea>
 801a872:	06d0      	lsls	r0, r2, #27
 801a874:	bf44      	itt	mi
 801a876:	2320      	movmi	r3, #32
 801a878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a87c:	0711      	lsls	r1, r2, #28
 801a87e:	bf44      	itt	mi
 801a880:	232b      	movmi	r3, #43	@ 0x2b
 801a882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a886:	f89a 3000 	ldrb.w	r3, [sl]
 801a88a:	2b2a      	cmp	r3, #42	@ 0x2a
 801a88c:	d015      	beq.n	801a8ba <_svfiprintf_r+0xfa>
 801a88e:	9a07      	ldr	r2, [sp, #28]
 801a890:	4654      	mov	r4, sl
 801a892:	2000      	movs	r0, #0
 801a894:	f04f 0c0a 	mov.w	ip, #10
 801a898:	4621      	mov	r1, r4
 801a89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a89e:	3b30      	subs	r3, #48	@ 0x30
 801a8a0:	2b09      	cmp	r3, #9
 801a8a2:	d94b      	bls.n	801a93c <_svfiprintf_r+0x17c>
 801a8a4:	b1b0      	cbz	r0, 801a8d4 <_svfiprintf_r+0x114>
 801a8a6:	9207      	str	r2, [sp, #28]
 801a8a8:	e014      	b.n	801a8d4 <_svfiprintf_r+0x114>
 801a8aa:	eba0 0308 	sub.w	r3, r0, r8
 801a8ae:	fa09 f303 	lsl.w	r3, r9, r3
 801a8b2:	4313      	orrs	r3, r2
 801a8b4:	9304      	str	r3, [sp, #16]
 801a8b6:	46a2      	mov	sl, r4
 801a8b8:	e7d2      	b.n	801a860 <_svfiprintf_r+0xa0>
 801a8ba:	9b03      	ldr	r3, [sp, #12]
 801a8bc:	1d19      	adds	r1, r3, #4
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	9103      	str	r1, [sp, #12]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	bfbb      	ittet	lt
 801a8c6:	425b      	neglt	r3, r3
 801a8c8:	f042 0202 	orrlt.w	r2, r2, #2
 801a8cc:	9307      	strge	r3, [sp, #28]
 801a8ce:	9307      	strlt	r3, [sp, #28]
 801a8d0:	bfb8      	it	lt
 801a8d2:	9204      	strlt	r2, [sp, #16]
 801a8d4:	7823      	ldrb	r3, [r4, #0]
 801a8d6:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8d8:	d10a      	bne.n	801a8f0 <_svfiprintf_r+0x130>
 801a8da:	7863      	ldrb	r3, [r4, #1]
 801a8dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a8de:	d132      	bne.n	801a946 <_svfiprintf_r+0x186>
 801a8e0:	9b03      	ldr	r3, [sp, #12]
 801a8e2:	1d1a      	adds	r2, r3, #4
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	9203      	str	r2, [sp, #12]
 801a8e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a8ec:	3402      	adds	r4, #2
 801a8ee:	9305      	str	r3, [sp, #20]
 801a8f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a9b4 <_svfiprintf_r+0x1f4>
 801a8f4:	7821      	ldrb	r1, [r4, #0]
 801a8f6:	2203      	movs	r2, #3
 801a8f8:	4650      	mov	r0, sl
 801a8fa:	f7e5 fd01 	bl	8000300 <memchr>
 801a8fe:	b138      	cbz	r0, 801a910 <_svfiprintf_r+0x150>
 801a900:	9b04      	ldr	r3, [sp, #16]
 801a902:	eba0 000a 	sub.w	r0, r0, sl
 801a906:	2240      	movs	r2, #64	@ 0x40
 801a908:	4082      	lsls	r2, r0
 801a90a:	4313      	orrs	r3, r2
 801a90c:	3401      	adds	r4, #1
 801a90e:	9304      	str	r3, [sp, #16]
 801a910:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a914:	4824      	ldr	r0, [pc, #144]	@ (801a9a8 <_svfiprintf_r+0x1e8>)
 801a916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a91a:	2206      	movs	r2, #6
 801a91c:	f7e5 fcf0 	bl	8000300 <memchr>
 801a920:	2800      	cmp	r0, #0
 801a922:	d036      	beq.n	801a992 <_svfiprintf_r+0x1d2>
 801a924:	4b21      	ldr	r3, [pc, #132]	@ (801a9ac <_svfiprintf_r+0x1ec>)
 801a926:	bb1b      	cbnz	r3, 801a970 <_svfiprintf_r+0x1b0>
 801a928:	9b03      	ldr	r3, [sp, #12]
 801a92a:	3307      	adds	r3, #7
 801a92c:	f023 0307 	bic.w	r3, r3, #7
 801a930:	3308      	adds	r3, #8
 801a932:	9303      	str	r3, [sp, #12]
 801a934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a936:	4433      	add	r3, r6
 801a938:	9309      	str	r3, [sp, #36]	@ 0x24
 801a93a:	e76a      	b.n	801a812 <_svfiprintf_r+0x52>
 801a93c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a940:	460c      	mov	r4, r1
 801a942:	2001      	movs	r0, #1
 801a944:	e7a8      	b.n	801a898 <_svfiprintf_r+0xd8>
 801a946:	2300      	movs	r3, #0
 801a948:	3401      	adds	r4, #1
 801a94a:	9305      	str	r3, [sp, #20]
 801a94c:	4619      	mov	r1, r3
 801a94e:	f04f 0c0a 	mov.w	ip, #10
 801a952:	4620      	mov	r0, r4
 801a954:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a958:	3a30      	subs	r2, #48	@ 0x30
 801a95a:	2a09      	cmp	r2, #9
 801a95c:	d903      	bls.n	801a966 <_svfiprintf_r+0x1a6>
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d0c6      	beq.n	801a8f0 <_svfiprintf_r+0x130>
 801a962:	9105      	str	r1, [sp, #20]
 801a964:	e7c4      	b.n	801a8f0 <_svfiprintf_r+0x130>
 801a966:	fb0c 2101 	mla	r1, ip, r1, r2
 801a96a:	4604      	mov	r4, r0
 801a96c:	2301      	movs	r3, #1
 801a96e:	e7f0      	b.n	801a952 <_svfiprintf_r+0x192>
 801a970:	ab03      	add	r3, sp, #12
 801a972:	9300      	str	r3, [sp, #0]
 801a974:	462a      	mov	r2, r5
 801a976:	4b0e      	ldr	r3, [pc, #56]	@ (801a9b0 <_svfiprintf_r+0x1f0>)
 801a978:	a904      	add	r1, sp, #16
 801a97a:	4638      	mov	r0, r7
 801a97c:	f7fd f990 	bl	8017ca0 <_printf_float>
 801a980:	1c42      	adds	r2, r0, #1
 801a982:	4606      	mov	r6, r0
 801a984:	d1d6      	bne.n	801a934 <_svfiprintf_r+0x174>
 801a986:	89ab      	ldrh	r3, [r5, #12]
 801a988:	065b      	lsls	r3, r3, #25
 801a98a:	f53f af2d 	bmi.w	801a7e8 <_svfiprintf_r+0x28>
 801a98e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a990:	e72c      	b.n	801a7ec <_svfiprintf_r+0x2c>
 801a992:	ab03      	add	r3, sp, #12
 801a994:	9300      	str	r3, [sp, #0]
 801a996:	462a      	mov	r2, r5
 801a998:	4b05      	ldr	r3, [pc, #20]	@ (801a9b0 <_svfiprintf_r+0x1f0>)
 801a99a:	a904      	add	r1, sp, #16
 801a99c:	4638      	mov	r0, r7
 801a99e:	f7fd fc07 	bl	80181b0 <_printf_i>
 801a9a2:	e7ed      	b.n	801a980 <_svfiprintf_r+0x1c0>
 801a9a4:	080219b8 	.word	0x080219b8
 801a9a8:	080219c2 	.word	0x080219c2
 801a9ac:	08017ca1 	.word	0x08017ca1
 801a9b0:	0801a709 	.word	0x0801a709
 801a9b4:	080219be 	.word	0x080219be

0801a9b8 <__sfputc_r>:
 801a9b8:	6893      	ldr	r3, [r2, #8]
 801a9ba:	3b01      	subs	r3, #1
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	b410      	push	{r4}
 801a9c0:	6093      	str	r3, [r2, #8]
 801a9c2:	da08      	bge.n	801a9d6 <__sfputc_r+0x1e>
 801a9c4:	6994      	ldr	r4, [r2, #24]
 801a9c6:	42a3      	cmp	r3, r4
 801a9c8:	db01      	blt.n	801a9ce <__sfputc_r+0x16>
 801a9ca:	290a      	cmp	r1, #10
 801a9cc:	d103      	bne.n	801a9d6 <__sfputc_r+0x1e>
 801a9ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9d2:	f7fd bedb 	b.w	801878c <__swbuf_r>
 801a9d6:	6813      	ldr	r3, [r2, #0]
 801a9d8:	1c58      	adds	r0, r3, #1
 801a9da:	6010      	str	r0, [r2, #0]
 801a9dc:	7019      	strb	r1, [r3, #0]
 801a9de:	4608      	mov	r0, r1
 801a9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9e4:	4770      	bx	lr

0801a9e6 <__sfputs_r>:
 801a9e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9e8:	4606      	mov	r6, r0
 801a9ea:	460f      	mov	r7, r1
 801a9ec:	4614      	mov	r4, r2
 801a9ee:	18d5      	adds	r5, r2, r3
 801a9f0:	42ac      	cmp	r4, r5
 801a9f2:	d101      	bne.n	801a9f8 <__sfputs_r+0x12>
 801a9f4:	2000      	movs	r0, #0
 801a9f6:	e007      	b.n	801aa08 <__sfputs_r+0x22>
 801a9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9fc:	463a      	mov	r2, r7
 801a9fe:	4630      	mov	r0, r6
 801aa00:	f7ff ffda 	bl	801a9b8 <__sfputc_r>
 801aa04:	1c43      	adds	r3, r0, #1
 801aa06:	d1f3      	bne.n	801a9f0 <__sfputs_r+0xa>
 801aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aa0c <_vfiprintf_r>:
 801aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa10:	460d      	mov	r5, r1
 801aa12:	b09d      	sub	sp, #116	@ 0x74
 801aa14:	4614      	mov	r4, r2
 801aa16:	4698      	mov	r8, r3
 801aa18:	4606      	mov	r6, r0
 801aa1a:	b118      	cbz	r0, 801aa24 <_vfiprintf_r+0x18>
 801aa1c:	6a03      	ldr	r3, [r0, #32]
 801aa1e:	b90b      	cbnz	r3, 801aa24 <_vfiprintf_r+0x18>
 801aa20:	f7fd fd72 	bl	8018508 <__sinit>
 801aa24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aa26:	07d9      	lsls	r1, r3, #31
 801aa28:	d405      	bmi.n	801aa36 <_vfiprintf_r+0x2a>
 801aa2a:	89ab      	ldrh	r3, [r5, #12]
 801aa2c:	059a      	lsls	r2, r3, #22
 801aa2e:	d402      	bmi.n	801aa36 <_vfiprintf_r+0x2a>
 801aa30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aa32:	f7fe f80e 	bl	8018a52 <__retarget_lock_acquire_recursive>
 801aa36:	89ab      	ldrh	r3, [r5, #12]
 801aa38:	071b      	lsls	r3, r3, #28
 801aa3a:	d501      	bpl.n	801aa40 <_vfiprintf_r+0x34>
 801aa3c:	692b      	ldr	r3, [r5, #16]
 801aa3e:	b99b      	cbnz	r3, 801aa68 <_vfiprintf_r+0x5c>
 801aa40:	4629      	mov	r1, r5
 801aa42:	4630      	mov	r0, r6
 801aa44:	f7fd fee0 	bl	8018808 <__swsetup_r>
 801aa48:	b170      	cbz	r0, 801aa68 <_vfiprintf_r+0x5c>
 801aa4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aa4c:	07dc      	lsls	r4, r3, #31
 801aa4e:	d504      	bpl.n	801aa5a <_vfiprintf_r+0x4e>
 801aa50:	f04f 30ff 	mov.w	r0, #4294967295
 801aa54:	b01d      	add	sp, #116	@ 0x74
 801aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa5a:	89ab      	ldrh	r3, [r5, #12]
 801aa5c:	0598      	lsls	r0, r3, #22
 801aa5e:	d4f7      	bmi.n	801aa50 <_vfiprintf_r+0x44>
 801aa60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aa62:	f7fd fff7 	bl	8018a54 <__retarget_lock_release_recursive>
 801aa66:	e7f3      	b.n	801aa50 <_vfiprintf_r+0x44>
 801aa68:	2300      	movs	r3, #0
 801aa6a:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa6c:	2320      	movs	r3, #32
 801aa6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801aa72:	f8cd 800c 	str.w	r8, [sp, #12]
 801aa76:	2330      	movs	r3, #48	@ 0x30
 801aa78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ac28 <_vfiprintf_r+0x21c>
 801aa7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801aa80:	f04f 0901 	mov.w	r9, #1
 801aa84:	4623      	mov	r3, r4
 801aa86:	469a      	mov	sl, r3
 801aa88:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa8c:	b10a      	cbz	r2, 801aa92 <_vfiprintf_r+0x86>
 801aa8e:	2a25      	cmp	r2, #37	@ 0x25
 801aa90:	d1f9      	bne.n	801aa86 <_vfiprintf_r+0x7a>
 801aa92:	ebba 0b04 	subs.w	fp, sl, r4
 801aa96:	d00b      	beq.n	801aab0 <_vfiprintf_r+0xa4>
 801aa98:	465b      	mov	r3, fp
 801aa9a:	4622      	mov	r2, r4
 801aa9c:	4629      	mov	r1, r5
 801aa9e:	4630      	mov	r0, r6
 801aaa0:	f7ff ffa1 	bl	801a9e6 <__sfputs_r>
 801aaa4:	3001      	adds	r0, #1
 801aaa6:	f000 80a7 	beq.w	801abf8 <_vfiprintf_r+0x1ec>
 801aaaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aaac:	445a      	add	r2, fp
 801aaae:	9209      	str	r2, [sp, #36]	@ 0x24
 801aab0:	f89a 3000 	ldrb.w	r3, [sl]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	f000 809f 	beq.w	801abf8 <_vfiprintf_r+0x1ec>
 801aaba:	2300      	movs	r3, #0
 801aabc:	f04f 32ff 	mov.w	r2, #4294967295
 801aac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aac4:	f10a 0a01 	add.w	sl, sl, #1
 801aac8:	9304      	str	r3, [sp, #16]
 801aaca:	9307      	str	r3, [sp, #28]
 801aacc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801aad0:	931a      	str	r3, [sp, #104]	@ 0x68
 801aad2:	4654      	mov	r4, sl
 801aad4:	2205      	movs	r2, #5
 801aad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aada:	4853      	ldr	r0, [pc, #332]	@ (801ac28 <_vfiprintf_r+0x21c>)
 801aadc:	f7e5 fc10 	bl	8000300 <memchr>
 801aae0:	9a04      	ldr	r2, [sp, #16]
 801aae2:	b9d8      	cbnz	r0, 801ab1c <_vfiprintf_r+0x110>
 801aae4:	06d1      	lsls	r1, r2, #27
 801aae6:	bf44      	itt	mi
 801aae8:	2320      	movmi	r3, #32
 801aaea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aaee:	0713      	lsls	r3, r2, #28
 801aaf0:	bf44      	itt	mi
 801aaf2:	232b      	movmi	r3, #43	@ 0x2b
 801aaf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aaf8:	f89a 3000 	ldrb.w	r3, [sl]
 801aafc:	2b2a      	cmp	r3, #42	@ 0x2a
 801aafe:	d015      	beq.n	801ab2c <_vfiprintf_r+0x120>
 801ab00:	9a07      	ldr	r2, [sp, #28]
 801ab02:	4654      	mov	r4, sl
 801ab04:	2000      	movs	r0, #0
 801ab06:	f04f 0c0a 	mov.w	ip, #10
 801ab0a:	4621      	mov	r1, r4
 801ab0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ab10:	3b30      	subs	r3, #48	@ 0x30
 801ab12:	2b09      	cmp	r3, #9
 801ab14:	d94b      	bls.n	801abae <_vfiprintf_r+0x1a2>
 801ab16:	b1b0      	cbz	r0, 801ab46 <_vfiprintf_r+0x13a>
 801ab18:	9207      	str	r2, [sp, #28]
 801ab1a:	e014      	b.n	801ab46 <_vfiprintf_r+0x13a>
 801ab1c:	eba0 0308 	sub.w	r3, r0, r8
 801ab20:	fa09 f303 	lsl.w	r3, r9, r3
 801ab24:	4313      	orrs	r3, r2
 801ab26:	9304      	str	r3, [sp, #16]
 801ab28:	46a2      	mov	sl, r4
 801ab2a:	e7d2      	b.n	801aad2 <_vfiprintf_r+0xc6>
 801ab2c:	9b03      	ldr	r3, [sp, #12]
 801ab2e:	1d19      	adds	r1, r3, #4
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	9103      	str	r1, [sp, #12]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	bfbb      	ittet	lt
 801ab38:	425b      	neglt	r3, r3
 801ab3a:	f042 0202 	orrlt.w	r2, r2, #2
 801ab3e:	9307      	strge	r3, [sp, #28]
 801ab40:	9307      	strlt	r3, [sp, #28]
 801ab42:	bfb8      	it	lt
 801ab44:	9204      	strlt	r2, [sp, #16]
 801ab46:	7823      	ldrb	r3, [r4, #0]
 801ab48:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab4a:	d10a      	bne.n	801ab62 <_vfiprintf_r+0x156>
 801ab4c:	7863      	ldrb	r3, [r4, #1]
 801ab4e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ab50:	d132      	bne.n	801abb8 <_vfiprintf_r+0x1ac>
 801ab52:	9b03      	ldr	r3, [sp, #12]
 801ab54:	1d1a      	adds	r2, r3, #4
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	9203      	str	r2, [sp, #12]
 801ab5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ab5e:	3402      	adds	r4, #2
 801ab60:	9305      	str	r3, [sp, #20]
 801ab62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ac38 <_vfiprintf_r+0x22c>
 801ab66:	7821      	ldrb	r1, [r4, #0]
 801ab68:	2203      	movs	r2, #3
 801ab6a:	4650      	mov	r0, sl
 801ab6c:	f7e5 fbc8 	bl	8000300 <memchr>
 801ab70:	b138      	cbz	r0, 801ab82 <_vfiprintf_r+0x176>
 801ab72:	9b04      	ldr	r3, [sp, #16]
 801ab74:	eba0 000a 	sub.w	r0, r0, sl
 801ab78:	2240      	movs	r2, #64	@ 0x40
 801ab7a:	4082      	lsls	r2, r0
 801ab7c:	4313      	orrs	r3, r2
 801ab7e:	3401      	adds	r4, #1
 801ab80:	9304      	str	r3, [sp, #16]
 801ab82:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab86:	4829      	ldr	r0, [pc, #164]	@ (801ac2c <_vfiprintf_r+0x220>)
 801ab88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ab8c:	2206      	movs	r2, #6
 801ab8e:	f7e5 fbb7 	bl	8000300 <memchr>
 801ab92:	2800      	cmp	r0, #0
 801ab94:	d03f      	beq.n	801ac16 <_vfiprintf_r+0x20a>
 801ab96:	4b26      	ldr	r3, [pc, #152]	@ (801ac30 <_vfiprintf_r+0x224>)
 801ab98:	bb1b      	cbnz	r3, 801abe2 <_vfiprintf_r+0x1d6>
 801ab9a:	9b03      	ldr	r3, [sp, #12]
 801ab9c:	3307      	adds	r3, #7
 801ab9e:	f023 0307 	bic.w	r3, r3, #7
 801aba2:	3308      	adds	r3, #8
 801aba4:	9303      	str	r3, [sp, #12]
 801aba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aba8:	443b      	add	r3, r7
 801abaa:	9309      	str	r3, [sp, #36]	@ 0x24
 801abac:	e76a      	b.n	801aa84 <_vfiprintf_r+0x78>
 801abae:	fb0c 3202 	mla	r2, ip, r2, r3
 801abb2:	460c      	mov	r4, r1
 801abb4:	2001      	movs	r0, #1
 801abb6:	e7a8      	b.n	801ab0a <_vfiprintf_r+0xfe>
 801abb8:	2300      	movs	r3, #0
 801abba:	3401      	adds	r4, #1
 801abbc:	9305      	str	r3, [sp, #20]
 801abbe:	4619      	mov	r1, r3
 801abc0:	f04f 0c0a 	mov.w	ip, #10
 801abc4:	4620      	mov	r0, r4
 801abc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801abca:	3a30      	subs	r2, #48	@ 0x30
 801abcc:	2a09      	cmp	r2, #9
 801abce:	d903      	bls.n	801abd8 <_vfiprintf_r+0x1cc>
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d0c6      	beq.n	801ab62 <_vfiprintf_r+0x156>
 801abd4:	9105      	str	r1, [sp, #20]
 801abd6:	e7c4      	b.n	801ab62 <_vfiprintf_r+0x156>
 801abd8:	fb0c 2101 	mla	r1, ip, r1, r2
 801abdc:	4604      	mov	r4, r0
 801abde:	2301      	movs	r3, #1
 801abe0:	e7f0      	b.n	801abc4 <_vfiprintf_r+0x1b8>
 801abe2:	ab03      	add	r3, sp, #12
 801abe4:	9300      	str	r3, [sp, #0]
 801abe6:	462a      	mov	r2, r5
 801abe8:	4b12      	ldr	r3, [pc, #72]	@ (801ac34 <_vfiprintf_r+0x228>)
 801abea:	a904      	add	r1, sp, #16
 801abec:	4630      	mov	r0, r6
 801abee:	f7fd f857 	bl	8017ca0 <_printf_float>
 801abf2:	4607      	mov	r7, r0
 801abf4:	1c78      	adds	r0, r7, #1
 801abf6:	d1d6      	bne.n	801aba6 <_vfiprintf_r+0x19a>
 801abf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801abfa:	07d9      	lsls	r1, r3, #31
 801abfc:	d405      	bmi.n	801ac0a <_vfiprintf_r+0x1fe>
 801abfe:	89ab      	ldrh	r3, [r5, #12]
 801ac00:	059a      	lsls	r2, r3, #22
 801ac02:	d402      	bmi.n	801ac0a <_vfiprintf_r+0x1fe>
 801ac04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ac06:	f7fd ff25 	bl	8018a54 <__retarget_lock_release_recursive>
 801ac0a:	89ab      	ldrh	r3, [r5, #12]
 801ac0c:	065b      	lsls	r3, r3, #25
 801ac0e:	f53f af1f 	bmi.w	801aa50 <_vfiprintf_r+0x44>
 801ac12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ac14:	e71e      	b.n	801aa54 <_vfiprintf_r+0x48>
 801ac16:	ab03      	add	r3, sp, #12
 801ac18:	9300      	str	r3, [sp, #0]
 801ac1a:	462a      	mov	r2, r5
 801ac1c:	4b05      	ldr	r3, [pc, #20]	@ (801ac34 <_vfiprintf_r+0x228>)
 801ac1e:	a904      	add	r1, sp, #16
 801ac20:	4630      	mov	r0, r6
 801ac22:	f7fd fac5 	bl	80181b0 <_printf_i>
 801ac26:	e7e4      	b.n	801abf2 <_vfiprintf_r+0x1e6>
 801ac28:	080219b8 	.word	0x080219b8
 801ac2c:	080219c2 	.word	0x080219c2
 801ac30:	08017ca1 	.word	0x08017ca1
 801ac34:	0801a9e7 	.word	0x0801a9e7
 801ac38:	080219be 	.word	0x080219be

0801ac3c <__sflush_r>:
 801ac3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac44:	0716      	lsls	r6, r2, #28
 801ac46:	4605      	mov	r5, r0
 801ac48:	460c      	mov	r4, r1
 801ac4a:	d454      	bmi.n	801acf6 <__sflush_r+0xba>
 801ac4c:	684b      	ldr	r3, [r1, #4]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	dc02      	bgt.n	801ac58 <__sflush_r+0x1c>
 801ac52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	dd48      	ble.n	801acea <__sflush_r+0xae>
 801ac58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ac5a:	2e00      	cmp	r6, #0
 801ac5c:	d045      	beq.n	801acea <__sflush_r+0xae>
 801ac5e:	2300      	movs	r3, #0
 801ac60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ac64:	682f      	ldr	r7, [r5, #0]
 801ac66:	6a21      	ldr	r1, [r4, #32]
 801ac68:	602b      	str	r3, [r5, #0]
 801ac6a:	d030      	beq.n	801acce <__sflush_r+0x92>
 801ac6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ac6e:	89a3      	ldrh	r3, [r4, #12]
 801ac70:	0759      	lsls	r1, r3, #29
 801ac72:	d505      	bpl.n	801ac80 <__sflush_r+0x44>
 801ac74:	6863      	ldr	r3, [r4, #4]
 801ac76:	1ad2      	subs	r2, r2, r3
 801ac78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ac7a:	b10b      	cbz	r3, 801ac80 <__sflush_r+0x44>
 801ac7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ac7e:	1ad2      	subs	r2, r2, r3
 801ac80:	2300      	movs	r3, #0
 801ac82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ac84:	6a21      	ldr	r1, [r4, #32]
 801ac86:	4628      	mov	r0, r5
 801ac88:	47b0      	blx	r6
 801ac8a:	1c43      	adds	r3, r0, #1
 801ac8c:	89a3      	ldrh	r3, [r4, #12]
 801ac8e:	d106      	bne.n	801ac9e <__sflush_r+0x62>
 801ac90:	6829      	ldr	r1, [r5, #0]
 801ac92:	291d      	cmp	r1, #29
 801ac94:	d82b      	bhi.n	801acee <__sflush_r+0xb2>
 801ac96:	4a2a      	ldr	r2, [pc, #168]	@ (801ad40 <__sflush_r+0x104>)
 801ac98:	410a      	asrs	r2, r1
 801ac9a:	07d6      	lsls	r6, r2, #31
 801ac9c:	d427      	bmi.n	801acee <__sflush_r+0xb2>
 801ac9e:	2200      	movs	r2, #0
 801aca0:	6062      	str	r2, [r4, #4]
 801aca2:	04d9      	lsls	r1, r3, #19
 801aca4:	6922      	ldr	r2, [r4, #16]
 801aca6:	6022      	str	r2, [r4, #0]
 801aca8:	d504      	bpl.n	801acb4 <__sflush_r+0x78>
 801acaa:	1c42      	adds	r2, r0, #1
 801acac:	d101      	bne.n	801acb2 <__sflush_r+0x76>
 801acae:	682b      	ldr	r3, [r5, #0]
 801acb0:	b903      	cbnz	r3, 801acb4 <__sflush_r+0x78>
 801acb2:	6560      	str	r0, [r4, #84]	@ 0x54
 801acb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801acb6:	602f      	str	r7, [r5, #0]
 801acb8:	b1b9      	cbz	r1, 801acea <__sflush_r+0xae>
 801acba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801acbe:	4299      	cmp	r1, r3
 801acc0:	d002      	beq.n	801acc8 <__sflush_r+0x8c>
 801acc2:	4628      	mov	r0, r5
 801acc4:	f7fe fcc6 	bl	8019654 <_free_r>
 801acc8:	2300      	movs	r3, #0
 801acca:	6363      	str	r3, [r4, #52]	@ 0x34
 801accc:	e00d      	b.n	801acea <__sflush_r+0xae>
 801acce:	2301      	movs	r3, #1
 801acd0:	4628      	mov	r0, r5
 801acd2:	47b0      	blx	r6
 801acd4:	4602      	mov	r2, r0
 801acd6:	1c50      	adds	r0, r2, #1
 801acd8:	d1c9      	bne.n	801ac6e <__sflush_r+0x32>
 801acda:	682b      	ldr	r3, [r5, #0]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d0c6      	beq.n	801ac6e <__sflush_r+0x32>
 801ace0:	2b1d      	cmp	r3, #29
 801ace2:	d001      	beq.n	801ace8 <__sflush_r+0xac>
 801ace4:	2b16      	cmp	r3, #22
 801ace6:	d11e      	bne.n	801ad26 <__sflush_r+0xea>
 801ace8:	602f      	str	r7, [r5, #0]
 801acea:	2000      	movs	r0, #0
 801acec:	e022      	b.n	801ad34 <__sflush_r+0xf8>
 801acee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801acf2:	b21b      	sxth	r3, r3
 801acf4:	e01b      	b.n	801ad2e <__sflush_r+0xf2>
 801acf6:	690f      	ldr	r7, [r1, #16]
 801acf8:	2f00      	cmp	r7, #0
 801acfa:	d0f6      	beq.n	801acea <__sflush_r+0xae>
 801acfc:	0793      	lsls	r3, r2, #30
 801acfe:	680e      	ldr	r6, [r1, #0]
 801ad00:	bf08      	it	eq
 801ad02:	694b      	ldreq	r3, [r1, #20]
 801ad04:	600f      	str	r7, [r1, #0]
 801ad06:	bf18      	it	ne
 801ad08:	2300      	movne	r3, #0
 801ad0a:	eba6 0807 	sub.w	r8, r6, r7
 801ad0e:	608b      	str	r3, [r1, #8]
 801ad10:	f1b8 0f00 	cmp.w	r8, #0
 801ad14:	dde9      	ble.n	801acea <__sflush_r+0xae>
 801ad16:	6a21      	ldr	r1, [r4, #32]
 801ad18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ad1a:	4643      	mov	r3, r8
 801ad1c:	463a      	mov	r2, r7
 801ad1e:	4628      	mov	r0, r5
 801ad20:	47b0      	blx	r6
 801ad22:	2800      	cmp	r0, #0
 801ad24:	dc08      	bgt.n	801ad38 <__sflush_r+0xfc>
 801ad26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad2e:	81a3      	strh	r3, [r4, #12]
 801ad30:	f04f 30ff 	mov.w	r0, #4294967295
 801ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad38:	4407      	add	r7, r0
 801ad3a:	eba8 0800 	sub.w	r8, r8, r0
 801ad3e:	e7e7      	b.n	801ad10 <__sflush_r+0xd4>
 801ad40:	dfbffffe 	.word	0xdfbffffe

0801ad44 <_fflush_r>:
 801ad44:	b538      	push	{r3, r4, r5, lr}
 801ad46:	690b      	ldr	r3, [r1, #16]
 801ad48:	4605      	mov	r5, r0
 801ad4a:	460c      	mov	r4, r1
 801ad4c:	b913      	cbnz	r3, 801ad54 <_fflush_r+0x10>
 801ad4e:	2500      	movs	r5, #0
 801ad50:	4628      	mov	r0, r5
 801ad52:	bd38      	pop	{r3, r4, r5, pc}
 801ad54:	b118      	cbz	r0, 801ad5e <_fflush_r+0x1a>
 801ad56:	6a03      	ldr	r3, [r0, #32]
 801ad58:	b90b      	cbnz	r3, 801ad5e <_fflush_r+0x1a>
 801ad5a:	f7fd fbd5 	bl	8018508 <__sinit>
 801ad5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d0f3      	beq.n	801ad4e <_fflush_r+0xa>
 801ad66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ad68:	07d0      	lsls	r0, r2, #31
 801ad6a:	d404      	bmi.n	801ad76 <_fflush_r+0x32>
 801ad6c:	0599      	lsls	r1, r3, #22
 801ad6e:	d402      	bmi.n	801ad76 <_fflush_r+0x32>
 801ad70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ad72:	f7fd fe6e 	bl	8018a52 <__retarget_lock_acquire_recursive>
 801ad76:	4628      	mov	r0, r5
 801ad78:	4621      	mov	r1, r4
 801ad7a:	f7ff ff5f 	bl	801ac3c <__sflush_r>
 801ad7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ad80:	07da      	lsls	r2, r3, #31
 801ad82:	4605      	mov	r5, r0
 801ad84:	d4e4      	bmi.n	801ad50 <_fflush_r+0xc>
 801ad86:	89a3      	ldrh	r3, [r4, #12]
 801ad88:	059b      	lsls	r3, r3, #22
 801ad8a:	d4e1      	bmi.n	801ad50 <_fflush_r+0xc>
 801ad8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ad8e:	f7fd fe61 	bl	8018a54 <__retarget_lock_release_recursive>
 801ad92:	e7dd      	b.n	801ad50 <_fflush_r+0xc>

0801ad94 <__swhatbuf_r>:
 801ad94:	b570      	push	{r4, r5, r6, lr}
 801ad96:	460c      	mov	r4, r1
 801ad98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad9c:	2900      	cmp	r1, #0
 801ad9e:	b096      	sub	sp, #88	@ 0x58
 801ada0:	4615      	mov	r5, r2
 801ada2:	461e      	mov	r6, r3
 801ada4:	da0d      	bge.n	801adc2 <__swhatbuf_r+0x2e>
 801ada6:	89a3      	ldrh	r3, [r4, #12]
 801ada8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801adac:	f04f 0100 	mov.w	r1, #0
 801adb0:	bf14      	ite	ne
 801adb2:	2340      	movne	r3, #64	@ 0x40
 801adb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801adb8:	2000      	movs	r0, #0
 801adba:	6031      	str	r1, [r6, #0]
 801adbc:	602b      	str	r3, [r5, #0]
 801adbe:	b016      	add	sp, #88	@ 0x58
 801adc0:	bd70      	pop	{r4, r5, r6, pc}
 801adc2:	466a      	mov	r2, sp
 801adc4:	f000 f878 	bl	801aeb8 <_fstat_r>
 801adc8:	2800      	cmp	r0, #0
 801adca:	dbec      	blt.n	801ada6 <__swhatbuf_r+0x12>
 801adcc:	9901      	ldr	r1, [sp, #4]
 801adce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801add2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801add6:	4259      	negs	r1, r3
 801add8:	4159      	adcs	r1, r3
 801adda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801adde:	e7eb      	b.n	801adb8 <__swhatbuf_r+0x24>

0801ade0 <__smakebuf_r>:
 801ade0:	898b      	ldrh	r3, [r1, #12]
 801ade2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ade4:	079d      	lsls	r5, r3, #30
 801ade6:	4606      	mov	r6, r0
 801ade8:	460c      	mov	r4, r1
 801adea:	d507      	bpl.n	801adfc <__smakebuf_r+0x1c>
 801adec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801adf0:	6023      	str	r3, [r4, #0]
 801adf2:	6123      	str	r3, [r4, #16]
 801adf4:	2301      	movs	r3, #1
 801adf6:	6163      	str	r3, [r4, #20]
 801adf8:	b003      	add	sp, #12
 801adfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adfc:	ab01      	add	r3, sp, #4
 801adfe:	466a      	mov	r2, sp
 801ae00:	f7ff ffc8 	bl	801ad94 <__swhatbuf_r>
 801ae04:	9f00      	ldr	r7, [sp, #0]
 801ae06:	4605      	mov	r5, r0
 801ae08:	4639      	mov	r1, r7
 801ae0a:	4630      	mov	r0, r6
 801ae0c:	f7fc f83c 	bl	8016e88 <_malloc_r>
 801ae10:	b948      	cbnz	r0, 801ae26 <__smakebuf_r+0x46>
 801ae12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae16:	059a      	lsls	r2, r3, #22
 801ae18:	d4ee      	bmi.n	801adf8 <__smakebuf_r+0x18>
 801ae1a:	f023 0303 	bic.w	r3, r3, #3
 801ae1e:	f043 0302 	orr.w	r3, r3, #2
 801ae22:	81a3      	strh	r3, [r4, #12]
 801ae24:	e7e2      	b.n	801adec <__smakebuf_r+0xc>
 801ae26:	89a3      	ldrh	r3, [r4, #12]
 801ae28:	6020      	str	r0, [r4, #0]
 801ae2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae2e:	81a3      	strh	r3, [r4, #12]
 801ae30:	9b01      	ldr	r3, [sp, #4]
 801ae32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ae36:	b15b      	cbz	r3, 801ae50 <__smakebuf_r+0x70>
 801ae38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae3c:	4630      	mov	r0, r6
 801ae3e:	f000 f84d 	bl	801aedc <_isatty_r>
 801ae42:	b128      	cbz	r0, 801ae50 <__smakebuf_r+0x70>
 801ae44:	89a3      	ldrh	r3, [r4, #12]
 801ae46:	f023 0303 	bic.w	r3, r3, #3
 801ae4a:	f043 0301 	orr.w	r3, r3, #1
 801ae4e:	81a3      	strh	r3, [r4, #12]
 801ae50:	89a3      	ldrh	r3, [r4, #12]
 801ae52:	431d      	orrs	r5, r3
 801ae54:	81a5      	strh	r5, [r4, #12]
 801ae56:	e7cf      	b.n	801adf8 <__smakebuf_r+0x18>

0801ae58 <_raise_r>:
 801ae58:	291f      	cmp	r1, #31
 801ae5a:	b538      	push	{r3, r4, r5, lr}
 801ae5c:	4605      	mov	r5, r0
 801ae5e:	460c      	mov	r4, r1
 801ae60:	d904      	bls.n	801ae6c <_raise_r+0x14>
 801ae62:	2316      	movs	r3, #22
 801ae64:	6003      	str	r3, [r0, #0]
 801ae66:	f04f 30ff 	mov.w	r0, #4294967295
 801ae6a:	bd38      	pop	{r3, r4, r5, pc}
 801ae6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ae6e:	b112      	cbz	r2, 801ae76 <_raise_r+0x1e>
 801ae70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ae74:	b94b      	cbnz	r3, 801ae8a <_raise_r+0x32>
 801ae76:	4628      	mov	r0, r5
 801ae78:	f000 f852 	bl	801af20 <_getpid_r>
 801ae7c:	4622      	mov	r2, r4
 801ae7e:	4601      	mov	r1, r0
 801ae80:	4628      	mov	r0, r5
 801ae82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae86:	f000 b839 	b.w	801aefc <_kill_r>
 801ae8a:	2b01      	cmp	r3, #1
 801ae8c:	d00a      	beq.n	801aea4 <_raise_r+0x4c>
 801ae8e:	1c59      	adds	r1, r3, #1
 801ae90:	d103      	bne.n	801ae9a <_raise_r+0x42>
 801ae92:	2316      	movs	r3, #22
 801ae94:	6003      	str	r3, [r0, #0]
 801ae96:	2001      	movs	r0, #1
 801ae98:	e7e7      	b.n	801ae6a <_raise_r+0x12>
 801ae9a:	2100      	movs	r1, #0
 801ae9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801aea0:	4620      	mov	r0, r4
 801aea2:	4798      	blx	r3
 801aea4:	2000      	movs	r0, #0
 801aea6:	e7e0      	b.n	801ae6a <_raise_r+0x12>

0801aea8 <raise>:
 801aea8:	4b02      	ldr	r3, [pc, #8]	@ (801aeb4 <raise+0xc>)
 801aeaa:	4601      	mov	r1, r0
 801aeac:	6818      	ldr	r0, [r3, #0]
 801aeae:	f7ff bfd3 	b.w	801ae58 <_raise_r>
 801aeb2:	bf00      	nop
 801aeb4:	24000344 	.word	0x24000344

0801aeb8 <_fstat_r>:
 801aeb8:	b538      	push	{r3, r4, r5, lr}
 801aeba:	4d07      	ldr	r5, [pc, #28]	@ (801aed8 <_fstat_r+0x20>)
 801aebc:	2300      	movs	r3, #0
 801aebe:	4604      	mov	r4, r0
 801aec0:	4608      	mov	r0, r1
 801aec2:	4611      	mov	r1, r2
 801aec4:	602b      	str	r3, [r5, #0]
 801aec6:	f7e6 fd07 	bl	80018d8 <_fstat>
 801aeca:	1c43      	adds	r3, r0, #1
 801aecc:	d102      	bne.n	801aed4 <_fstat_r+0x1c>
 801aece:	682b      	ldr	r3, [r5, #0]
 801aed0:	b103      	cbz	r3, 801aed4 <_fstat_r+0x1c>
 801aed2:	6023      	str	r3, [r4, #0]
 801aed4:	bd38      	pop	{r3, r4, r5, pc}
 801aed6:	bf00      	nop
 801aed8:	24003208 	.word	0x24003208

0801aedc <_isatty_r>:
 801aedc:	b538      	push	{r3, r4, r5, lr}
 801aede:	4d06      	ldr	r5, [pc, #24]	@ (801aef8 <_isatty_r+0x1c>)
 801aee0:	2300      	movs	r3, #0
 801aee2:	4604      	mov	r4, r0
 801aee4:	4608      	mov	r0, r1
 801aee6:	602b      	str	r3, [r5, #0]
 801aee8:	f7e6 fd06 	bl	80018f8 <_isatty>
 801aeec:	1c43      	adds	r3, r0, #1
 801aeee:	d102      	bne.n	801aef6 <_isatty_r+0x1a>
 801aef0:	682b      	ldr	r3, [r5, #0]
 801aef2:	b103      	cbz	r3, 801aef6 <_isatty_r+0x1a>
 801aef4:	6023      	str	r3, [r4, #0]
 801aef6:	bd38      	pop	{r3, r4, r5, pc}
 801aef8:	24003208 	.word	0x24003208

0801aefc <_kill_r>:
 801aefc:	b538      	push	{r3, r4, r5, lr}
 801aefe:	4d07      	ldr	r5, [pc, #28]	@ (801af1c <_kill_r+0x20>)
 801af00:	2300      	movs	r3, #0
 801af02:	4604      	mov	r4, r0
 801af04:	4608      	mov	r0, r1
 801af06:	4611      	mov	r1, r2
 801af08:	602b      	str	r3, [r5, #0]
 801af0a:	f7e6 fca1 	bl	8001850 <_kill>
 801af0e:	1c43      	adds	r3, r0, #1
 801af10:	d102      	bne.n	801af18 <_kill_r+0x1c>
 801af12:	682b      	ldr	r3, [r5, #0]
 801af14:	b103      	cbz	r3, 801af18 <_kill_r+0x1c>
 801af16:	6023      	str	r3, [r4, #0]
 801af18:	bd38      	pop	{r3, r4, r5, pc}
 801af1a:	bf00      	nop
 801af1c:	24003208 	.word	0x24003208

0801af20 <_getpid_r>:
 801af20:	f7e6 bc8e 	b.w	8001840 <_getpid>

0801af24 <sinf_poly>:
 801af24:	07cb      	lsls	r3, r1, #31
 801af26:	d412      	bmi.n	801af4e <sinf_poly+0x2a>
 801af28:	ee21 5b00 	vmul.f64	d5, d1, d0
 801af2c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801af30:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801af34:	eea6 7b01 	vfma.f64	d7, d6, d1
 801af38:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801af3c:	ee21 1b05 	vmul.f64	d1, d1, d5
 801af40:	eea6 0b05 	vfma.f64	d0, d6, d5
 801af44:	eea7 0b01 	vfma.f64	d0, d7, d1
 801af48:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801af4c:	4770      	bx	lr
 801af4e:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801af52:	ee21 5b01 	vmul.f64	d5, d1, d1
 801af56:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801af5a:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801af5e:	eea1 7b06 	vfma.f64	d7, d1, d6
 801af62:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801af66:	eea1 0b06 	vfma.f64	d0, d1, d6
 801af6a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801af6e:	ee21 1b05 	vmul.f64	d1, d1, d5
 801af72:	eea5 0b06 	vfma.f64	d0, d5, d6
 801af76:	e7e5      	b.n	801af44 <sinf_poly+0x20>

0801af78 <sinf>:
 801af78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af7a:	ee10 4a10 	vmov	r4, s0
 801af7e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801af82:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801af86:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801af8a:	eef0 7a40 	vmov.f32	s15, s0
 801af8e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801af92:	d218      	bcs.n	801afc6 <sinf+0x4e>
 801af94:	ee26 1b06 	vmul.f64	d1, d6, d6
 801af98:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801af9c:	d20a      	bcs.n	801afb4 <sinf+0x3c>
 801af9e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801afa2:	d103      	bne.n	801afac <sinf+0x34>
 801afa4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801afa8:	ed8d 1a01 	vstr	s2, [sp, #4]
 801afac:	eeb0 0a67 	vmov.f32	s0, s15
 801afb0:	b003      	add	sp, #12
 801afb2:	bd30      	pop	{r4, r5, pc}
 801afb4:	483a      	ldr	r0, [pc, #232]	@ (801b0a0 <sinf+0x128>)
 801afb6:	eeb0 0b46 	vmov.f64	d0, d6
 801afba:	2100      	movs	r1, #0
 801afbc:	b003      	add	sp, #12
 801afbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801afc2:	f7ff bfaf 	b.w	801af24 <sinf_poly>
 801afc6:	f240 422e 	movw	r2, #1070	@ 0x42e
 801afca:	4293      	cmp	r3, r2
 801afcc:	d824      	bhi.n	801b018 <sinf+0xa0>
 801afce:	4b34      	ldr	r3, [pc, #208]	@ (801b0a0 <sinf+0x128>)
 801afd0:	ed93 7b08 	vldr	d7, [r3, #32]
 801afd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801afd8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801afdc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801afe0:	ee17 1a90 	vmov	r1, s15
 801afe4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801afe8:	1609      	asrs	r1, r1, #24
 801afea:	ee07 1a90 	vmov	s15, r1
 801afee:	f001 0203 	and.w	r2, r1, #3
 801aff2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801aff6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801affa:	ed92 0b00 	vldr	d0, [r2]
 801affe:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801b002:	f011 0f02 	tst.w	r1, #2
 801b006:	eea5 6b47 	vfms.f64	d6, d5, d7
 801b00a:	bf08      	it	eq
 801b00c:	4618      	moveq	r0, r3
 801b00e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801b012:	ee20 0b06 	vmul.f64	d0, d0, d6
 801b016:	e7d1      	b.n	801afbc <sinf+0x44>
 801b018:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801b01c:	d237      	bcs.n	801b08e <sinf+0x116>
 801b01e:	4921      	ldr	r1, [pc, #132]	@ (801b0a4 <sinf+0x12c>)
 801b020:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801b024:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801b028:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801b02c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801b030:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b034:	6a10      	ldr	r0, [r2, #32]
 801b036:	6912      	ldr	r2, [r2, #16]
 801b038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801b03c:	40ab      	lsls	r3, r5
 801b03e:	fba0 5003 	umull	r5, r0, r0, r3
 801b042:	4359      	muls	r1, r3
 801b044:	fbe3 0102 	umlal	r0, r1, r3, r2
 801b048:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801b04c:	0f9d      	lsrs	r5, r3, #30
 801b04e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801b052:	1ac9      	subs	r1, r1, r3
 801b054:	f7e5 fb3a 	bl	80006cc <__aeabi_l2d>
 801b058:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801b05c:	4b10      	ldr	r3, [pc, #64]	@ (801b0a0 <sinf+0x128>)
 801b05e:	f004 0203 	and.w	r2, r4, #3
 801b062:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801b066:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801b098 <sinf+0x120>
 801b06a:	ed92 0b00 	vldr	d0, [r2]
 801b06e:	ec41 0b17 	vmov	d7, r0, r1
 801b072:	f014 0f02 	tst.w	r4, #2
 801b076:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b07a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801b07e:	4629      	mov	r1, r5
 801b080:	bf08      	it	eq
 801b082:	4618      	moveq	r0, r3
 801b084:	ee27 1b07 	vmul.f64	d1, d7, d7
 801b088:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b08c:	e796      	b.n	801afbc <sinf+0x44>
 801b08e:	b003      	add	sp, #12
 801b090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b094:	f000 b8e2 	b.w	801b25c <__math_invalidf>
 801b098:	54442d18 	.word	0x54442d18
 801b09c:	3c1921fb 	.word	0x3c1921fb
 801b0a0:	08021a30 	.word	0x08021a30
 801b0a4:	080219cc 	.word	0x080219cc

0801b0a8 <sinf_poly>:
 801b0a8:	07cb      	lsls	r3, r1, #31
 801b0aa:	d412      	bmi.n	801b0d2 <sinf_poly+0x2a>
 801b0ac:	ee21 5b00 	vmul.f64	d5, d1, d0
 801b0b0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801b0b4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801b0b8:	eea6 7b01 	vfma.f64	d7, d6, d1
 801b0bc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801b0c0:	ee21 1b05 	vmul.f64	d1, d1, d5
 801b0c4:	eea6 0b05 	vfma.f64	d0, d6, d5
 801b0c8:	eea7 0b01 	vfma.f64	d0, d7, d1
 801b0cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b0d0:	4770      	bx	lr
 801b0d2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801b0d6:	ee21 5b01 	vmul.f64	d5, d1, d1
 801b0da:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801b0de:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801b0e2:	eea1 7b06 	vfma.f64	d7, d1, d6
 801b0e6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801b0ea:	eea1 0b06 	vfma.f64	d0, d1, d6
 801b0ee:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801b0f2:	ee21 1b05 	vmul.f64	d1, d1, d5
 801b0f6:	eea5 0b06 	vfma.f64	d0, d5, d6
 801b0fa:	e7e5      	b.n	801b0c8 <sinf_poly+0x20>
 801b0fc:	0000      	movs	r0, r0
	...

0801b100 <cosf>:
 801b100:	b538      	push	{r3, r4, r5, lr}
 801b102:	ee10 4a10 	vmov	r4, s0
 801b106:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b10a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801b10e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801b112:	d21f      	bcs.n	801b154 <cosf+0x54>
 801b114:	ee27 7b07 	vmul.f64	d7, d7, d7
 801b118:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801b11c:	f0c0 8082 	bcc.w	801b224 <cosf+0x124>
 801b120:	ee27 4b07 	vmul.f64	d4, d7, d7
 801b124:	4b44      	ldr	r3, [pc, #272]	@ (801b238 <cosf+0x138>)
 801b126:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801b12a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801b12e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801b132:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b136:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801b13a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801b13e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801b142:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b146:	eea4 0b05 	vfma.f64	d0, d4, d5
 801b14a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801b14e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b152:	bd38      	pop	{r3, r4, r5, pc}
 801b154:	f240 422e 	movw	r2, #1070	@ 0x42e
 801b158:	4293      	cmp	r3, r2
 801b15a:	d829      	bhi.n	801b1b0 <cosf+0xb0>
 801b15c:	4b36      	ldr	r3, [pc, #216]	@ (801b238 <cosf+0x138>)
 801b15e:	ed93 6b08 	vldr	d6, [r3, #32]
 801b162:	ee27 6b06 	vmul.f64	d6, d7, d6
 801b166:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801b16a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801b16e:	ee16 1a90 	vmov	r1, s13
 801b172:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801b176:	1609      	asrs	r1, r1, #24
 801b178:	ee06 1a90 	vmov	s13, r1
 801b17c:	f001 0203 	and.w	r2, r1, #3
 801b180:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801b184:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801b188:	ed92 0b00 	vldr	d0, [r2]
 801b18c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 801b190:	f011 0f02 	tst.w	r1, #2
 801b194:	f081 0101 	eor.w	r1, r1, #1
 801b198:	eea5 7b46 	vfms.f64	d7, d5, d6
 801b19c:	bf08      	it	eq
 801b19e:	4618      	moveq	r0, r3
 801b1a0:	ee27 1b07 	vmul.f64	d1, d7, d7
 801b1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b1ac:	f7ff bf7c 	b.w	801b0a8 <sinf_poly>
 801b1b0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801b1b4:	d232      	bcs.n	801b21c <cosf+0x11c>
 801b1b6:	4921      	ldr	r1, [pc, #132]	@ (801b23c <cosf+0x13c>)
 801b1b8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801b1bc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801b1c0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801b1c4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801b1c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b1cc:	6a10      	ldr	r0, [r2, #32]
 801b1ce:	6912      	ldr	r2, [r2, #16]
 801b1d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801b1d4:	40ab      	lsls	r3, r5
 801b1d6:	fba0 5003 	umull	r5, r0, r0, r3
 801b1da:	4359      	muls	r1, r3
 801b1dc:	fbe3 0102 	umlal	r0, r1, r3, r2
 801b1e0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801b1e4:	0f9d      	lsrs	r5, r3, #30
 801b1e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801b1ea:	1ac9      	subs	r1, r1, r3
 801b1ec:	f7e5 fa6e 	bl	80006cc <__aeabi_l2d>
 801b1f0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801b1f4:	4b10      	ldr	r3, [pc, #64]	@ (801b238 <cosf+0x138>)
 801b1f6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801b230 <cosf+0x130>
 801b1fa:	ec41 0b17 	vmov	d7, r0, r1
 801b1fe:	f004 0203 	and.w	r2, r4, #3
 801b202:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801b206:	ed92 0b00 	vldr	d0, [r2]
 801b20a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b20e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801b212:	f014 0f02 	tst.w	r4, #2
 801b216:	f085 0101 	eor.w	r1, r5, #1
 801b21a:	e7bf      	b.n	801b19c <cosf+0x9c>
 801b21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b220:	f000 b81c 	b.w	801b25c <__math_invalidf>
 801b224:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b228:	e793      	b.n	801b152 <cosf+0x52>
 801b22a:	bf00      	nop
 801b22c:	f3af 8000 	nop.w
 801b230:	54442d18 	.word	0x54442d18
 801b234:	3c1921fb 	.word	0x3c1921fb
 801b238:	08021a30 	.word	0x08021a30
 801b23c:	080219cc 	.word	0x080219cc

0801b240 <with_errnof>:
 801b240:	b510      	push	{r4, lr}
 801b242:	ed2d 8b02 	vpush	{d8}
 801b246:	eeb0 8a40 	vmov.f32	s16, s0
 801b24a:	4604      	mov	r4, r0
 801b24c:	f7fd fbd6 	bl	80189fc <__errno>
 801b250:	eeb0 0a48 	vmov.f32	s0, s16
 801b254:	ecbd 8b02 	vpop	{d8}
 801b258:	6004      	str	r4, [r0, #0]
 801b25a:	bd10      	pop	{r4, pc}

0801b25c <__math_invalidf>:
 801b25c:	eef0 7a40 	vmov.f32	s15, s0
 801b260:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b264:	eef4 7a67 	vcmp.f32	s15, s15
 801b268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b26c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801b270:	d602      	bvs.n	801b278 <__math_invalidf+0x1c>
 801b272:	2021      	movs	r0, #33	@ 0x21
 801b274:	f7ff bfe4 	b.w	801b240 <with_errnof>
 801b278:	4770      	bx	lr
	...

0801b27c <round>:
 801b27c:	ee10 3a90 	vmov	r3, s1
 801b280:	f3c3 510a 	ubfx	r1, r3, #20, #11
 801b284:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 801b288:	2a13      	cmp	r2, #19
 801b28a:	b510      	push	{r4, lr}
 801b28c:	ee10 4a10 	vmov	r4, s0
 801b290:	dc1d      	bgt.n	801b2ce <round+0x52>
 801b292:	2a00      	cmp	r2, #0
 801b294:	da0d      	bge.n	801b2b2 <round+0x36>
 801b296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801b29a:	3201      	adds	r2, #1
 801b29c:	bf04      	itt	eq
 801b29e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801b2a2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	4619      	mov	r1, r3
 801b2aa:	4610      	mov	r0, r2
 801b2ac:	ec41 0b10 	vmov	d0, r0, r1
 801b2b0:	e014      	b.n	801b2dc <round+0x60>
 801b2b2:	4813      	ldr	r0, [pc, #76]	@ (801b300 <round+0x84>)
 801b2b4:	4110      	asrs	r0, r2
 801b2b6:	ea00 0103 	and.w	r1, r0, r3
 801b2ba:	4321      	orrs	r1, r4
 801b2bc:	d00e      	beq.n	801b2dc <round+0x60>
 801b2be:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801b2c2:	fa41 f202 	asr.w	r2, r1, r2
 801b2c6:	4413      	add	r3, r2
 801b2c8:	ea23 0300 	bic.w	r3, r3, r0
 801b2cc:	e7eb      	b.n	801b2a6 <round+0x2a>
 801b2ce:	2a33      	cmp	r2, #51	@ 0x33
 801b2d0:	dd05      	ble.n	801b2de <round+0x62>
 801b2d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b2d6:	d101      	bne.n	801b2dc <round+0x60>
 801b2d8:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b2dc:	bd10      	pop	{r4, pc}
 801b2de:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 801b2e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b2e6:	40c8      	lsrs	r0, r1
 801b2e8:	4220      	tst	r0, r4
 801b2ea:	d0f7      	beq.n	801b2dc <round+0x60>
 801b2ec:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801b2f0:	2201      	movs	r2, #1
 801b2f2:	408a      	lsls	r2, r1
 801b2f4:	1912      	adds	r2, r2, r4
 801b2f6:	bf28      	it	cs
 801b2f8:	3301      	addcs	r3, #1
 801b2fa:	ea22 0200 	bic.w	r2, r2, r0
 801b2fe:	e7d3      	b.n	801b2a8 <round+0x2c>
 801b300:	000fffff 	.word	0x000fffff

0801b304 <_init>:
 801b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b306:	bf00      	nop
 801b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b30a:	bc08      	pop	{r3}
 801b30c:	469e      	mov	lr, r3
 801b30e:	4770      	bx	lr

0801b310 <_fini>:
 801b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b312:	bf00      	nop
 801b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b316:	bc08      	pop	{r3}
 801b318:	469e      	mov	lr, r3
 801b31a:	4770      	bx	lr
