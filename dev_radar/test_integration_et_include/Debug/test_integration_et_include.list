
test_integration_et_include.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a748  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800a9e8  0800a9e8  0000b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac18  0800ac18  0000bc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac20  0800ac20  0000bc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ac24  0800ac24  0000bc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  0800ac28  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005558  24000070  0800ac98  0000c070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240055c8  0800ac98  0000c5c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000239b6  00000000  00000000  0000c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040a5  00000000  00000000  0002fa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001aa0  00000000  00000000  00033b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014a5  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039681  00000000  00000000  00036a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020f0b  00000000  00000000  000700c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017690a  00000000  00000000  00090fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002078db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078d8  00000000  00000000  00207920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  0020f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a9d0 	.word	0x0800a9d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800a9d0 	.word	0x0800a9d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */

	printf(" \r\n ERROR : stack overflow by " );
 800068a:	4804      	ldr	r0, [pc, #16]	@ (800069c <vApplicationStackOverflowHook+0x1c>)
 800068c:	f009 fb1e 	bl	8009ccc <iprintf>
	printf("%s", (char *)pcTaskName);
 8000690:	6839      	ldr	r1, [r7, #0]
 8000692:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <vApplicationStackOverflowHook+0x20>)
 8000694:	f009 fb1a 	bl	8009ccc <iprintf>
	//  //ERROR : stack overflow by
	while (1) ; // Should replace with a software mcu reset
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <vApplicationStackOverflowHook+0x18>
 800069c:	0800a9e8 	.word	0x0800a9e8
 80006a0:	0800aa08 	.word	0x0800aa08

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a8:	f000 fb40 	bl	8000d2c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fe64 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f84e 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f96a 	bl	800098c <MX_GPIO_Init>
  MX_SPI1_Init();
 80006b8:	f000 f8c6 	bl	8000848 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006bc:	f000 f91a 	bl	80008f4 <MX_USART3_UART_Init>
  // un diagno avant de commencer :
//  acc_example_diagnostic_test(0,NULL);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c0:	f005 fe46 	bl	8006350 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem_de_synchro */
  Sem_de_synchroHandle = osSemaphoreNew(1, 0, &Sem_de_synchro_attributes);
 80006c4:	4a15      	ldr	r2, [pc, #84]	@ (800071c <main+0x78>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	2001      	movs	r0, #1
 80006ca:	f005 ff5f 	bl	800658c <osSemaphoreNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <main+0x7c>)
 80006d2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (1, sizeof(uint32_t), &myQueue01_attributes);
 80006d4:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <main+0x80>)
 80006d6:	2104      	movs	r1, #4
 80006d8:	2001      	movs	r0, #1
 80006da:	f006 f877 	bl	80067cc <osMessageQueueNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <main+0x84>)
 80006e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tache1 */
  tache1Handle = osThreadNew(Start_tache_1, NULL, &tache1_attributes);
 80006e4:	4a11      	ldr	r2, [pc, #68]	@ (800072c <main+0x88>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4811      	ldr	r0, [pc, #68]	@ (8000730 <main+0x8c>)
 80006ea:	f005 fe90 	bl	800640e <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a10      	ldr	r2, [pc, #64]	@ (8000734 <main+0x90>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of tache2 */
  tache2Handle = osThreadNew(Start_tache_2, NULL, &tache2_attributes);
 80006f4:	4a10      	ldr	r2, [pc, #64]	@ (8000738 <main+0x94>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4810      	ldr	r0, [pc, #64]	@ (800073c <main+0x98>)
 80006fa:	f005 fe88 	bl	800640e <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <main+0x9c>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000704:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <main+0xa0>)
 8000706:	2100      	movs	r1, #0
 8000708:	480f      	ldr	r0, [pc, #60]	@ (8000748 <main+0xa4>)
 800070a:	f005 fe80 	bl	800640e <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <main+0xa8>)
 8000712:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000714:	f005 fe40 	bl	8006398 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <main+0x74>
 800071c:	0800ab9c 	.word	0x0800ab9c
 8000720:	24000a04 	.word	0x24000a04
 8000724:	0800ab84 	.word	0x0800ab84
 8000728:	240009ac 	.word	0x240009ac
 800072c:	0800ab18 	.word	0x0800ab18
 8000730:	08000c41 	.word	0x08000c41
 8000734:	240001a8 	.word	0x240001a8
 8000738:	0800ab3c 	.word	0x0800ab3c
 800073c:	08000ca9 	.word	0x08000ca9
 8000740:	24000454 	.word	0x24000454
 8000744:	0800ab60 	.word	0x0800ab60
 8000748:	08000cd1 	.word	0x08000cd1
 800074c:	24000700 	.word	0x24000700

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	@ 0x70
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075a:	224c      	movs	r2, #76	@ 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f009 fbfc 	bl	8009f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f009 fbf6 	bl	8009f5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000770:	2002      	movs	r0, #2
 8000772:	f001 f9a5 	bl	8001ac0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b31      	ldr	r3, [pc, #196]	@ (8000840 <SystemClock_Config+0xf0>)
 800077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077e:	4a30      	ldr	r2, [pc, #192]	@ (8000840 <SystemClock_Config+0xf0>)
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000786:	4b2e      	ldr	r3, [pc, #184]	@ (8000840 <SystemClock_Config+0xf0>)
 8000788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <SystemClock_Config+0xf4>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000798:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <SystemClock_Config+0xf4>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <SystemClock_Config+0xf4>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ac:	bf00      	nop
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <SystemClock_Config+0xf4>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ba:	d1f8      	bne.n	80007ae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2340      	movs	r3, #64	@ 0x40
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007d4:	230c      	movs	r3, #12
 80007d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e4:	230c      	movs	r3, #12
 80007e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f99d 	bl	8001b34 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000800:	f000 fad2 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	233f      	movs	r3, #63	@ 0x3f
 8000806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000818:	2340      	movs	r3, #64	@ 0x40
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fddd 	bl	80023e8 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000834:	f000 fab8 	bl	8000da8 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3770      	adds	r7, #112	@ 0x70
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58000400 	.word	0x58000400
 8000844:	58024800 	.word	0x58024800

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800084e:	4a28      	ldr	r2, [pc, #160]	@ (80008f0 <MX_SPI1_Init+0xa8>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000854:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000862:	2207      	movs	r2, #7
 8000864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000874:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800087c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_SPI1_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_SPI1_Init+0xa4>)
 800089c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_SPI1_Init+0xa4>)
 80008da:	f003 ff7f 	bl	80047dc <HAL_SPI_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008e4:	f000 fa60 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2400008c 	.word	0x2400008c
 80008f0:	40013000 	.word	0x40013000

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 80008fa:	4a23      	ldr	r2, [pc, #140]	@ (8000988 <MX_USART3_UART_Init+0x94>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fe:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093c:	4811      	ldr	r0, [pc, #68]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 800093e:	f004 fb59 	bl	8004ff4 <HAL_UART_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000948:	f000 fa2e 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	480d      	ldr	r0, [pc, #52]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000950:	f005 fbef 	bl	8006132 <HAL_UARTEx_SetTxFifoThreshold>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800095a:	f000 fa25 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4808      	ldr	r0, [pc, #32]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000962:	f005 fc24 	bl	80061ae <HAL_UARTEx_SetRxFifoThreshold>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800096c:	f000 fa1c 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_USART3_UART_Init+0x90>)
 8000972:	f005 fba5 	bl	80060c0 <HAL_UARTEx_DisableFifoMode>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800097c:	f000 fa14 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000114 	.word	0x24000114
 8000988:	40004800 	.word	0x40004800

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b90      	ldr	r3, [pc, #576]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a8e      	ldr	r2, [pc, #568]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b8c      	ldr	r3, [pc, #560]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b88      	ldr	r3, [pc, #544]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a87      	ldr	r2, [pc, #540]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b84      	ldr	r3, [pc, #528]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b81      	ldr	r3, [pc, #516]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a7f      	ldr	r2, [pc, #508]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b7d      	ldr	r3, [pc, #500]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fc:	4b79      	ldr	r3, [pc, #484]	@ (8000be4 <MX_GPIO_Init+0x258>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	4a78      	ldr	r2, [pc, #480]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0c:	4b75      	ldr	r3, [pc, #468]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	4b72      	ldr	r3, [pc, #456]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	4a70      	ldr	r2, [pc, #448]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a38:	4b6a      	ldr	r3, [pc, #424]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3e:	4a69      	ldr	r2, [pc, #420]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a48:	4b66      	ldr	r3, [pc, #408]	@ (8000be4 <MX_GPIO_Init+0x258>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_EN5_GPIO_Port, SEN_EN5_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4863      	ldr	r0, [pc, #396]	@ (8000be8 <MX_GPIO_Init+0x25c>)
 8000a5c:	f000 fffc 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_SEL1_Pin|SPI_SEL2_Pin|SPI_SEL0_Pin|SEN_EN4_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f240 4113 	movw	r1, #1043	@ 0x413
 8000a66:	4861      	ldr	r0, [pc, #388]	@ (8000bec <MX_GPIO_Init+0x260>)
 8000a68:	f000 fff6 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEN_EN1_Pin|LED3_Pin|SEN_EN3_Pin|SEN_EN2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f244 0129 	movw	r1, #16425	@ 0x4029
 8000a72:	485f      	ldr	r0, [pc, #380]	@ (8000bf0 <MX_GPIO_Init+0x264>)
 8000a74:	f000 fff0 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_EN_GPIO_Port, SPI_EN_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a7e:	485d      	ldr	r0, [pc, #372]	@ (8000bf4 <MX_GPIO_Init+0x268>)
 8000a80:	f000 ffea 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2140      	movs	r1, #64	@ 0x40
 8000a88:	4859      	ldr	r0, [pc, #356]	@ (8000bf0 <MX_GPIO_Init+0x264>)
 8000a8a:	f000 ffe5 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2102      	movs	r1, #2
 8000a92:	4859      	ldr	r0, [pc, #356]	@ (8000bf8 <MX_GPIO_Init+0x26c>)
 8000a94:	f000 ffe0 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOUTTON_Bleu_Pin SEN_INT5_Pin */
  GPIO_InitStruct.Pin = BOUTTON_Bleu_Pin|SEN_INT5_Pin;
 8000a98:	f242 0301 	movw	r3, #8193	@ 0x2001
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	484e      	ldr	r0, [pc, #312]	@ (8000be8 <MX_GPIO_Init+0x25c>)
 8000ab0:	f000 fe22 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEN_EN5_Pin */
  GPIO_InitStruct.Pin = SEN_EN5_Pin;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SEN_EN5_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4847      	ldr	r0, [pc, #284]	@ (8000be8 <MX_GPIO_Init+0x25c>)
 8000acc:	f000 fe14 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SEL1_Pin SPI_SEL2_Pin SPI_SEL0_Pin SEN_EN4_Pin */
  GPIO_InitStruct.Pin = SPI_SEL1_Pin|SPI_SEL2_Pin|SPI_SEL0_Pin|SEN_EN4_Pin;
 8000ad0:	f240 4313 	movw	r3, #1043	@ 0x413
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4840      	ldr	r0, [pc, #256]	@ (8000bec <MX_GPIO_Init+0x260>)
 8000aea:	f000 fe05 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEN_EN1_Pin SEN_EN3_Pin SEN_EN2_Pin A121_SPI_SS_Pin */
  GPIO_InitStruct.Pin = SEN_EN1_Pin|SEN_EN3_Pin|SEN_EN2_Pin|A121_SPI_SS_Pin;
 8000aee:	2369      	movs	r3, #105	@ 0x69
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	483a      	ldr	r0, [pc, #232]	@ (8000bf0 <MX_GPIO_Init+0x264>)
 8000b06:	f000 fdf7 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEN_INT3_Pin SEN_INT4_Pin */
  GPIO_InitStruct.Pin = SEN_INT3_Pin|SEN_INT4_Pin;
 8000b0a:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4833      	ldr	r0, [pc, #204]	@ (8000bf0 <MX_GPIO_Init+0x264>)
 8000b22:	f000 fde9 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000b26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482c      	ldr	r0, [pc, #176]	@ (8000bf0 <MX_GPIO_Init+0x264>)
 8000b40:	f000 fdda 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEN_INT2_Pin SEN_INT1_Pin */
  GPIO_InitStruct.Pin = SEN_INT2_Pin|SEN_INT1_Pin;
 8000b44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4824      	ldr	r0, [pc, #144]	@ (8000bec <MX_GPIO_Init+0x260>)
 8000b5c:	f000 fdcc 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_EN_Pin */
  GPIO_InitStruct.Pin = SPI_EN_Pin;
 8000b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_EN_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	481e      	ldr	r0, [pc, #120]	@ (8000bf4 <MX_GPIO_Init+0x268>)
 8000b7a:	f000 fdbd 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4818      	ldr	r0, [pc, #96]	@ (8000bf8 <MX_GPIO_Init+0x26c>)
 8000b96:	f000 fdaf 	bl	80016f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	2006      	movs	r0, #6
 8000ba0:	f000 fd0a 	bl	80015b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ba4:	2006      	movs	r0, #6
 8000ba6:	f000 fd21 	bl	80015ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2105      	movs	r1, #5
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f000 fd02 	bl	80015b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	f000 fd19 	bl	80015ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	2017      	movs	r0, #23
 8000bc0:	f000 fcfa 	bl	80015b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc4:	2017      	movs	r0, #23
 8000bc6:	f000 fd11 	bl	80015ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2105      	movs	r1, #5
 8000bce:	2028      	movs	r0, #40	@ 0x28
 8000bd0:	f000 fcf2 	bl	80015b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd4:	2028      	movs	r0, #40	@ 0x28
 8000bd6:	f000 fd09 	bl	80015ec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	@ 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	58024400 	.word	0x58024400
 8000be8:	58020800 	.word	0x58020800
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	58020400 	.word	0x58020400
 8000bf4:	58021800 	.word	0x58021800
 8000bf8:	58021000 	.word	0x58021000

08000bfc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//Attenction à la configuration de l'uart il faut changer les pin à pd8 et pd9 !!!!
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
  // Implémentez votre gestion de l'interruption ici
      if (GPIO_Pin == GPIO_PIN_13)
      {

      }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_write>:


int _write ( int file , char * ptr , int len )
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	( void ) file ;
	HAL_UART_Transmit (&huart3 , ( uint8_t *) ptr , len , 0xFFFF ) ;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <_write+0x28>)
 8000c2c:	f004 fa32 	bl	8005094 <HAL_UART_Transmit>
	return len ;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	24000114 	.word	0x24000114

08000c40 <Start_tache_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_tache_1 */
void Start_tache_1(void *argument)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t tick = 0 ;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	   tick = osKernelGetTickCount() ;
 8000c4c:	f005 fbca 	bl	80063e4 <osKernelGetTickCount>
 8000c50:	4603      	mov	r3, r0
 8000c52:	60bb      	str	r3, [r7, #8]


	   //printf("tick value  = %ld \n",tick);

	  printf("Tache1 : semaphore given \n");
 8000c54:	4810      	ldr	r0, [pc, #64]	@ (8000c98 <Start_tache_1+0x58>)
 8000c56:	f009 f8a1 	bl	8009d9c <puts>

	  //send tick over the mail box :

	  status = osMessageQueuePut(myQueue01Handle, &tick, 0U, osWaitForever);
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <Start_tache_1+0x5c>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	f107 0108 	add.w	r1, r7, #8
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	2200      	movs	r2, #0
 8000c68:	f005 fe24 	bl	80068b4 <osMessageQueuePut>
 8000c6c:	60f8      	str	r0, [r7, #12]
	  if (status != osOK) {
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <Start_tache_1+0x3a>
	        // Handle error
	        printf("Failed to send message\n");
 8000c74:	480a      	ldr	r0, [pc, #40]	@ (8000ca0 <Start_tache_1+0x60>)
 8000c76:	f009 f891 	bl	8009d9c <puts>
	  }


	  //Give semaphore avec api cmsis
	  osSemaphoreRelease(Sem_de_synchroHandle);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <Start_tache_1+0x64>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 fd60 	bl	8006744 <osSemaphoreRelease>



	  tick+=500U ;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000c8a:	60bb      	str	r3, [r7, #8]
	  // bloacker la tache pendant 500 ms :
	  osDelayUntil(tick);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 fc4f 	bl	8006532 <osDelayUntil>
	   tick = osKernelGetTickCount() ;
 8000c94:	e7da      	b.n	8000c4c <Start_tache_1+0xc>
 8000c96:	bf00      	nop
 8000c98:	0800aa44 	.word	0x0800aa44
 8000c9c:	240009ac 	.word	0x240009ac
 8000ca0:	0800aa60 	.word	0x0800aa60
 8000ca4:	24000a04 	.word	0x24000a04

08000ca8 <Start_tache_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_tache_2 */
void Start_tache_2(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_tache_2 */
  /* Infinite loop */
  for(;;)
  {
	 //wait for semaphore
	  osSemaphoreAcquire(Sem_de_synchroHandle, osWaitForever);
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <Start_tache_2+0x20>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f005 fcf1 	bl	80066a0 <osSemaphoreAcquire>
	  printf("tache 2 synchro avec la tache 1 \n") ;
 8000cbe:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <Start_tache_2+0x24>)
 8000cc0:	f009 f86c 	bl	8009d9c <puts>
	  osSemaphoreAcquire(Sem_de_synchroHandle, osWaitForever);
 8000cc4:	bf00      	nop
 8000cc6:	e7f3      	b.n	8000cb0 <Start_tache_2+0x8>
 8000cc8:	24000a04 	.word	0x24000a04
 8000ccc:	0800aa78 	.word	0x0800aa78

08000cd0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	osStatus_t status;
	uint32_t msg_reciev = 0 ;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	uint32_t tick_actuelle = 0 ;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
	tick_actuelle = osKernelGetTickCount();
 8000ce0:	f005 fb80 	bl	80063e4 <osKernelGetTickCount>
 8000ce4:	6178      	str	r0, [r7, #20]

	/* wait for available message */
    status = osMessageQueueGet(myQueue01Handle, &msg_reciev, NULL, 100U);
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <StartTask03+0x4c>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	f107 010c 	add.w	r1, r7, #12
 8000cee:	2364      	movs	r3, #100	@ 0x64
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f005 fe3f 	bl	8006974 <osMessageQueueGet>
 8000cf6:	6138      	str	r0, [r7, #16]
    if (status == osOK) {
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d108      	bne.n	8000d10 <StartTask03+0x40>
    	printf("tache 3 : msg Recieved :  ");
 8000cfe:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <StartTask03+0x50>)
 8000d00:	f008 ffe4 	bl	8009ccc <iprintf>
    	printf(" tick os that was send is %ld \n", msg_reciev);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <StartTask03+0x54>)
 8000d0a:	f008 ffdf 	bl	8009ccc <iprintf>
 8000d0e:	e7e7      	b.n	8000ce0 <StartTask03+0x10>
    } else {
        // Handle error
        printf("Failed to receive message time : %ld \n", tick_actuelle);
 8000d10:	6979      	ldr	r1, [r7, #20]
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <StartTask03+0x58>)
 8000d14:	f008 ffda 	bl	8009ccc <iprintf>
	tick_actuelle = osKernelGetTickCount();
 8000d18:	e7e2      	b.n	8000ce0 <StartTask03+0x10>
 8000d1a:	bf00      	nop
 8000d1c:	240009ac 	.word	0x240009ac
 8000d20:	0800aa9c 	.word	0x0800aa9c
 8000d24:	0800aab8 	.word	0x0800aab8
 8000d28:	0800aad8 	.word	0x0800aad8

08000d2c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d3e:	f000 fc63 	bl	8001608 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d4e:	231f      	movs	r3, #31
 8000d50:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d52:	2387      	movs	r3, #135	@ 0x87
 8000d54:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fc81 	bl	8001678 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d76:	2004      	movs	r0, #4
 8000d78:	f000 fc5e 	bl	8001638 <HAL_MPU_Enable>

}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d96:	f000 fb2b 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40001800 	.word	0x40001800

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_MspInit+0x38>)
 8000dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_MspInit+0x38>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_MspInit+0x38>)
 8000dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f06f 0001 	mvn.w	r0, #1
 8000de0:	f000 fbea 	bl	80015b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58024400 	.word	0x58024400

08000df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ba      	sub	sp, #232	@ 0xe8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	22c0      	movs	r2, #192	@ 0xc0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f009 f8a3 	bl	8009f5c <memset>
  if(hspi->Instance==SPI1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a26      	ldr	r2, [pc, #152]	@ (8000eb4 <HAL_SPI_MspInit+0xc4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d144      	bne.n	8000eaa <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 fea5 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e40:	f7ff ffb2 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e44:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_SPI_MspInit+0xc8>)
 8000e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_SPI_MspInit+0xc8>)
 8000e4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <HAL_SPI_MspInit+0xc8>)
 8000e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_SPI_MspInit+0xc8>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <HAL_SPI_MspInit+0xc8>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <HAL_SPI_MspInit+0xc8>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e80:	23e0      	movs	r3, #224	@ 0xe0
 8000e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <HAL_SPI_MspInit+0xcc>)
 8000ea6:	f000 fc27 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eaa:	bf00      	nop
 8000eac:	37e8      	adds	r7, #232	@ 0xe8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58020000 	.word	0x58020000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	22c0      	movs	r2, #192	@ 0xc0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f009 f83b 	bl	8009f5c <memset>
  if(huart->Instance==USART3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a27      	ldr	r2, [pc, #156]	@ (8000f88 <HAL_UART_MspInit+0xc8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d146      	bne.n	8000f7e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ef0:	f04f 0202 	mov.w	r2, #2
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fe3c 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f12:	f7ff ff49 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f26:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3a:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f72:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <HAL_UART_MspInit+0xd0>)
 8000f7a:	f000 fbbd 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	37e8      	adds	r7, #232	@ 0xe8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40004800 	.word	0x40004800
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58020c00 	.word	0x58020c00

08000f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b090      	sub	sp, #64	@ 0x40
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	d827      	bhi.n	8000ff2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	202b      	movs	r0, #43	@ 0x2b
 8000fa8:	f000 fb06 	bl	80015b8 <HAL_NVIC_SetPriority>

     /* Enable the TIM12 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000fac:	202b      	movs	r0, #43	@ 0x2b
 8000fae:	f000 fb1d 	bl	80015ec <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000fb2:	4a29      	ldr	r2, [pc, #164]	@ (8001058 <HAL_InitTick+0xc4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <HAL_InitTick+0xc8>)
 8000fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fbe:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_InitTick+0xc8>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fc8:	4b24      	ldr	r3, [pc, #144]	@ (800105c <HAL_InitTick+0xc8>)
 8000fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd6:	f107 0210 	add.w	r2, r7, #16
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fd8d 	bl	8002b00 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM12 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d106      	bne.n	8000ffe <HAL_InitTick+0x6a>
 8000ff0:	e001      	b.n	8000ff6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e02b      	b.n	800104e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ff6:	f001 fd57 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8000ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000ffc:	e004      	b.n	8001008 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ffe:	f001 fd53 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8001002:	4603      	mov	r3, r0
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800100a:	4a15      	ldr	r2, [pc, #84]	@ (8001060 <HAL_InitTick+0xcc>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	0c9b      	lsrs	r3, r3, #18
 8001012:	3b01      	subs	r3, #1
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_InitTick+0xd0>)
 8001018:	4a13      	ldr	r2, [pc, #76]	@ (8001068 <HAL_InitTick+0xd4>)
 800101a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_InitTick+0xd0>)
 800101e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001022:	60da      	str	r2, [r3, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 8001024:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <HAL_InitTick+0xd0>)
 8001026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001028:	6053      	str	r3, [r2, #4]
  htim12.Init.ClockDivision = 0;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_InitTick+0xd0>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_InitTick+0xd0>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8001036:	480b      	ldr	r0, [pc, #44]	@ (8001064 <HAL_InitTick+0xd0>)
 8001038:	f003 fd0f 	bl	8004a5a <HAL_TIM_Base_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d104      	bne.n	800104c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
 8001042:	4808      	ldr	r0, [pc, #32]	@ (8001064 <HAL_InitTick+0xd0>)
 8001044:	f003 fd6a 	bl	8004b1c <HAL_TIM_Base_Start_IT>
 8001048:	4603      	mov	r3, r0
 800104a:	e000      	b.n	800104e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
}
 800104e:	4618      	mov	r0, r3
 8001050:	3740      	adds	r7, #64	@ 0x40
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000008 	.word	0x24000008
 800105c:	58024400 	.word	0x58024400
 8001060:	431bde83 	.word	0x431bde83
 8001064:	24000a58 	.word	0x24000a58
 8001068:	40001800 	.word	0x40001800

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <NMI_Handler+0x4>

08001074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <MemManage_Handler+0x4>

08001084 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <UsageFault_Handler+0x4>

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT5_Pin);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 fcef 	bl	8001a8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT4_Pin);
 80010b4:	2010      	movs	r0, #16
 80010b6:	f000 fce8 	bl	8001a8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}

080010be <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT2_Pin);
 80010c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80010c6:	f000 fce0 	bl	8001a8a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEN_INT1_Pin);
 80010ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010ce:	f000 fcdc 	bl	8001a8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT3_Pin);
 80010da:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80010de:	f000 fcd4 	bl	8001a8a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOUTTON_Bleu_Pin);
 80010e2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010e6:	f000 fcd0 	bl	8001a8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80010f6:	f003 fd89 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	24000a58 	.word	0x24000a58

08001104 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e00a      	b.n	800112c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001116:	f3af 8000 	nop.w
 800111a:	4601      	mov	r1, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	60ba      	str	r2, [r7, #8]
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf0      	blt.n	8001116 <_read+0x12>
  }

  return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_close>:
  }
  return len;
}

int _close(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001166:	605a      	str	r2, [r3, #4]
  return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_isatty>:

int _isatty(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f008 ff74 	bl	800a0c4 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24080000 	.word	0x24080000
 8001208:	00000400 	.word	0x00000400
 800120c:	24000aa4 	.word	0x24000aa4
 8001210:	240055c8 	.word	0x240055c8

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001218:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <SystemInit+0xe4>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121e:	4a36      	ldr	r2, [pc, #216]	@ (80012f8 <SystemInit+0xe4>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001228:	4b34      	ldr	r3, [pc, #208]	@ (80012fc <SystemInit+0xe8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	2b06      	cmp	r3, #6
 8001232:	d807      	bhi.n	8001244 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001234:	4b31      	ldr	r3, [pc, #196]	@ (80012fc <SystemInit+0xe8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 030f 	bic.w	r3, r3, #15
 800123c:	4a2f      	ldr	r2, [pc, #188]	@ (80012fc <SystemInit+0xe8>)
 800123e:	f043 0307 	orr.w	r3, r3, #7
 8001242:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001244:	4b2e      	ldr	r3, [pc, #184]	@ (8001300 <SystemInit+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2d      	ldr	r2, [pc, #180]	@ (8001300 <SystemInit+0xec>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <SystemInit+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <SystemInit+0xec>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4929      	ldr	r1, [pc, #164]	@ (8001300 <SystemInit+0xec>)
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <SystemInit+0xf0>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <SystemInit+0xe8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <SystemInit+0xe8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 030f 	bic.w	r3, r3, #15
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <SystemInit+0xe8>)
 8001278:	f043 0307 	orr.w	r3, r3, #7
 800127c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800127e:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <SystemInit+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <SystemInit+0xec>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <SystemInit+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <SystemInit+0xec>)
 8001292:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <SystemInit+0xf4>)
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <SystemInit+0xec>)
 8001298:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <SystemInit+0xf8>)
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <SystemInit+0xec>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <SystemInit+0xfc>)
 80012a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <SystemInit+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <SystemInit+0xec>)
 80012aa:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <SystemInit+0xfc>)
 80012ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <SystemInit+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <SystemInit+0xec>)
 80012b6:	4a16      	ldr	r2, [pc, #88]	@ (8001310 <SystemInit+0xfc>)
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <SystemInit+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <SystemInit+0xec>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <SystemInit+0xec>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <SystemInit+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <SystemInit+0x100>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <SystemInit+0x104>)
 80012d8:	4013      	ands	r3, r2
 80012da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012de:	d202      	bcs.n	80012e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <SystemInit+0x108>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <SystemInit+0x10c>)
 80012e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	52002000 	.word	0x52002000
 8001300:	58024400 	.word	0x58024400
 8001304:	eaf6ed7f 	.word	0xeaf6ed7f
 8001308:	02020200 	.word	0x02020200
 800130c:	01ff0000 	.word	0x01ff0000
 8001310:	01010280 	.word	0x01010280
 8001314:	5c001000 	.word	0x5c001000
 8001318:	ffff0000 	.word	0xffff0000
 800131c:	51008108 	.word	0x51008108
 8001320:	52004000 	.word	0x52004000

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800135c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001328:	f7ff ff74 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	@ (8001364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f008 febd 	bl	800a0d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff f9a5 	bl	80006a4 <main>
  bx  lr
 800135a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001360:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001364:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001368:	0800ac28 	.word	0x0800ac28
  ldr r2, =_sbss
 800136c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001370:	240055c8 	.word	0x240055c8

08001374 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC3_IRQHandler>
	...

08001378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137e:	2003      	movs	r0, #3
 8001380:	f000 f90f 	bl	80015a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001384:	f001 f9e6 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8001388:	4602      	mov	r2, r0
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_Init+0x68>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	4913      	ldr	r1, [pc, #76]	@ (80013e4 <HAL_Init+0x6c>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
 80013a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_Init+0x68>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	4a0e      	ldr	r2, [pc, #56]	@ (80013e4 <HAL_Init+0x6c>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_Init+0x70>)
 80013ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_Init+0x74>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c2:	200f      	movs	r0, #15
 80013c4:	f7ff fde6 	bl	8000f94 <HAL_InitTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e002      	b.n	80013d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013d2:	f7ff fcef 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	58024400 	.word	0x58024400
 80013e4:	0800abac 	.word	0x0800abac
 80013e8:	24000004 	.word	0x24000004
 80013ec:	24000000 	.word	0x24000000

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2400000c 	.word	0x2400000c
 8001414:	24000aa8 	.word	0x24000aa8

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	24000aa8 	.word	0x24000aa8

08001430 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_GetREVID+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0c1b      	lsrs	r3, r3, #16
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	5c001000 	.word	0x5c001000

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <__NVIC_SetPriorityGrouping+0x40>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	4313      	orrs	r3, r2
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <__NVIC_SetPriorityGrouping+0x40>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	05fa0000 	.word	0x05fa0000

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	@ (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	@ (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	@ (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	@ 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	@ 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff4c 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c6:	f7ff ff63 	bl	8001490 <__NVIC_GetPriorityGrouping>
 80015ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f7ff ffb3 	bl	800153c <NVIC_EncodePriority>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff82 	bl	80014e8 <__NVIC_SetPriority>
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff56 	bl	80014ac <__NVIC_EnableIRQ>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800160c:	f3bf 8f5f 	dmb	sy
}
 8001610:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <HAL_MPU_Disable+0x28>)
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <HAL_MPU_Disable+0x28>)
 8001618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800161e:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_MPU_Disable+0x2c>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	e000ed90 	.word	0xe000ed90

08001638 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001640:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <HAL_MPU_Enable+0x38>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_MPU_Enable+0x3c>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_MPU_Enable+0x3c>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001654:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001656:	f3bf 8f4f 	dsb	sy
}
 800165a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800165c:	f3bf 8f6f 	isb	sy
}
 8001660:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed90 	.word	0xe000ed90
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	785a      	ldrb	r2, [r3, #1]
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001686:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_MPU_ConfigRegion+0x7c>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_MPU_ConfigRegion+0x7c>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001694:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7b1b      	ldrb	r3, [r3, #12]
 80016a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7adb      	ldrb	r3, [r3, #11]
 80016a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7a9b      	ldrb	r3, [r3, #10]
 80016ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7b5b      	ldrb	r3, [r3, #13]
 80016b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7b9b      	ldrb	r3, [r3, #14]
 80016be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7bdb      	ldrb	r3, [r3, #15]
 80016c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7a5b      	ldrb	r3, [r3, #9]
 80016ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7a1b      	ldrb	r3, [r3, #8]
 80016d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e4:	6113      	str	r3, [r2, #16]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed90 	.word	0xe000ed90

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001706:	4b89      	ldr	r3, [pc, #548]	@ (800192c <HAL_GPIO_Init+0x234>)
 8001708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800170a:	e194      	b.n	8001a36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8186 	beq.w	8001a30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d005      	beq.n	800173c <HAL_GPIO_Init+0x44>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d130      	bne.n	800179e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001772:	2201      	movs	r2, #1
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 0201 	and.w	r2, r3, #1
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d017      	beq.n	80017da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d123      	bne.n	800182e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	69b9      	ldr	r1, [r7, #24]
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0203 	and.w	r2, r3, #3
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80e0 	beq.w	8001a30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <HAL_GPIO_Init+0x238>)
 8001872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001876:	4a2e      	ldr	r2, [pc, #184]	@ (8001930 <HAL_GPIO_Init+0x238>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001880:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <HAL_GPIO_Init+0x238>)
 8001882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a29      	ldr	r2, [pc, #164]	@ (8001934 <HAL_GPIO_Init+0x23c>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a20      	ldr	r2, [pc, #128]	@ (8001938 <HAL_GPIO_Init+0x240>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d052      	beq.n	8001960 <HAL_GPIO_Init+0x268>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a1f      	ldr	r2, [pc, #124]	@ (800193c <HAL_GPIO_Init+0x244>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d031      	beq.n	8001926 <HAL_GPIO_Init+0x22e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001940 <HAL_GPIO_Init+0x248>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d02b      	beq.n	8001922 <HAL_GPIO_Init+0x22a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001944 <HAL_GPIO_Init+0x24c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d025      	beq.n	800191e <HAL_GPIO_Init+0x226>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001948 <HAL_GPIO_Init+0x250>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01f      	beq.n	800191a <HAL_GPIO_Init+0x222>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a1b      	ldr	r2, [pc, #108]	@ (800194c <HAL_GPIO_Init+0x254>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d019      	beq.n	8001916 <HAL_GPIO_Init+0x21e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001950 <HAL_GPIO_Init+0x258>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0x21a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <HAL_GPIO_Init+0x25c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00d      	beq.n	800190e <HAL_GPIO_Init+0x216>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a18      	ldr	r2, [pc, #96]	@ (8001958 <HAL_GPIO_Init+0x260>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d007      	beq.n	800190a <HAL_GPIO_Init+0x212>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_GPIO_Init+0x264>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_GPIO_Init+0x20e>
 8001902:	2309      	movs	r3, #9
 8001904:	e02d      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001906:	230a      	movs	r3, #10
 8001908:	e02b      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800190a:	2308      	movs	r3, #8
 800190c:	e029      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800190e:	2307      	movs	r3, #7
 8001910:	e027      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001912:	2306      	movs	r3, #6
 8001914:	e025      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001916:	2305      	movs	r3, #5
 8001918:	e023      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800191a:	2304      	movs	r3, #4
 800191c:	e021      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800191e:	2303      	movs	r3, #3
 8001920:	e01f      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001922:	2302      	movs	r3, #2
 8001924:	e01d      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001926:	2301      	movs	r3, #1
 8001928:	e01b      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800192a:	bf00      	nop
 800192c:	58000080 	.word	0x58000080
 8001930:	58024400 	.word	0x58024400
 8001934:	58000400 	.word	0x58000400
 8001938:	58020000 	.word	0x58020000
 800193c:	58020400 	.word	0x58020400
 8001940:	58020800 	.word	0x58020800
 8001944:	58020c00 	.word	0x58020c00
 8001948:	58021000 	.word	0x58021000
 800194c:	58021400 	.word	0x58021400
 8001950:	58021800 	.word	0x58021800
 8001954:	58021c00 	.word	0x58021c00
 8001958:	58022000 	.word	0x58022000
 800195c:	58022400 	.word	0x58022400
 8001960:	2300      	movs	r3, #0
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001972:	4938      	ldr	r1, [pc, #224]	@ (8001a54 <HAL_GPIO_Init+0x35c>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f ae63 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3724      	adds	r7, #36	@ 0x24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	58000400 	.word	0x58000400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f8a3 	bl	8000bfc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_PWREx_ConfigSupply+0x70>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d00a      	beq.n	8001aea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_PWREx_ConfigSupply+0x70>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e01f      	b.n	8001b26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e01d      	b.n	8001b26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_PWREx_ConfigSupply+0x70>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	490f      	ldr	r1, [pc, #60]	@ (8001b30 <HAL_PWREx_ConfigSupply+0x70>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001afa:	f7ff fc8d 	bl	8001418 <HAL_GetTick>
 8001afe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b00:	e009      	b.n	8001b16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b02:	f7ff fc89 	bl	8001418 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b10:	d901      	bls.n	8001b16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e007      	b.n	8001b26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_PWREx_ConfigSupply+0x70>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b22:	d1ee      	bne.n	8001b02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	58024800 	.word	0x58024800

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f000 bc48 	b.w	80023d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8088 	beq.w	8001c66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b99      	ldr	r3, [pc, #612]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b60:	4b96      	ldr	r3, [pc, #600]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d007      	beq.n	8001b7c <HAL_RCC_OscConfig+0x48>
 8001b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6e:	2b18      	cmp	r3, #24
 8001b70:	d111      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62>
 8001b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d06d      	beq.n	8001c64 <HAL_RCC_OscConfig+0x130>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d169      	bne.n	8001c64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f000 bc21 	b.w	80023d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x7a>
 8001ba0:	4b86      	ldr	r3, [pc, #536]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a85      	ldr	r2, [pc, #532]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e02e      	b.n	8001c0c <HAL_RCC_OscConfig+0xd8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x9c>
 8001bb6:	4b81      	ldr	r3, [pc, #516]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a80      	ldr	r2, [pc, #512]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b7e      	ldr	r3, [pc, #504]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xd8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xc0>
 8001bda:	4b78      	ldr	r3, [pc, #480]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a77      	ldr	r2, [pc, #476]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b75      	ldr	r3, [pc, #468]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a74      	ldr	r2, [pc, #464]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xd8>
 8001bf4:	4b71      	ldr	r3, [pc, #452]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a70      	ldr	r2, [pc, #448]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b6e      	ldr	r3, [pc, #440]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6d      	ldr	r2, [pc, #436]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc00 	bl	8001418 <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fbfc 	bl	8001418 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	@ 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e3d4      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe8>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fbec 	bl	8001418 <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fbe8 	bl	8001418 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e3c0      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c56:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x110>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80ca 	beq.w	8001e08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c74:	4b51      	ldr	r3, [pc, #324]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_RCC_OscConfig+0x166>
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2b18      	cmp	r3, #24
 8001c8e:	d156      	bne.n	8001d3e <HAL_RCC_OscConfig+0x20a>
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d151      	bne.n	8001d3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9a:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x17e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e392      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cb2:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0219 	bic.w	r2, r3, #25
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	493f      	ldr	r1, [pc, #252]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fba8 	bl	8001418 <HAL_GetTick>
 8001cc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fba4 	bl	8001418 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e37c      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cde:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	f7ff fba1 	bl	8001430 <HAL_GetREVID>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d817      	bhi.n	8001d28 <HAL_RCC_OscConfig+0x1f4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b40      	cmp	r3, #64	@ 0x40
 8001cfe:	d108      	bne.n	8001d12 <HAL_RCC_OscConfig+0x1de>
 8001d00:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d08:	4a2c      	ldr	r2, [pc, #176]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	e07a      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	031b      	lsls	r3, r3, #12
 8001d20:	4926      	ldr	r1, [pc, #152]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d26:	e06f      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	4921      	ldr	r1, [pc, #132]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	e064      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d047      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0219 	bic.w	r2, r3, #25
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	491a      	ldr	r1, [pc, #104]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb5e 	bl	8001418 <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fb5a 	bl	8001418 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e332      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	f7ff fb57 	bl	8001430 <HAL_GetREVID>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d819      	bhi.n	8001dc0 <HAL_RCC_OscConfig+0x28c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b40      	cmp	r3, #64	@ 0x40
 8001d92:	d108      	bne.n	8001da6 <HAL_RCC_OscConfig+0x272>
 8001d94:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da2:	6053      	str	r3, [r2, #4]
 8001da4:	e030      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	031b      	lsls	r3, r3, #12
 8001db4:	4901      	ldr	r1, [pc, #4]	@ (8001dbc <HAL_RCC_OscConfig+0x288>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e025      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	4b9a      	ldr	r3, [pc, #616]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	4997      	ldr	r1, [pc, #604]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
 8001dd4:	e018      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	4b95      	ldr	r3, [pc, #596]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a94      	ldr	r2, [pc, #592]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb19 	bl	8001418 <HAL_GetTick>
 8001de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fb15 	bl	8001418 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e2ed      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dfc:	4b8b      	ldr	r3, [pc, #556]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a9 	beq.w	8001f68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e16:	4b85      	ldr	r3, [pc, #532]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e20:	4b82      	ldr	r3, [pc, #520]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_OscConfig+0x308>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b18      	cmp	r3, #24
 8001e30:	d13a      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x374>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d135      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e3c:	4b7b      	ldr	r3, [pc, #492]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_OscConfig+0x320>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b80      	cmp	r3, #128	@ 0x80
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e2c1      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e54:	f7ff faec 	bl	8001430 <HAL_GetREVID>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d817      	bhi.n	8001e92 <HAL_RCC_OscConfig+0x35e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d108      	bne.n	8001e7c <HAL_RCC_OscConfig+0x348>
 8001e6a:	4b70      	ldr	r3, [pc, #448]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e72:	4a6e      	ldr	r2, [pc, #440]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e7a:	e075      	b.n	8001f68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	069b      	lsls	r3, r3, #26
 8001e8a:	4968      	ldr	r1, [pc, #416]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e90:	e06a      	b.n	8001f68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e92:	4b66      	ldr	r3, [pc, #408]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	061b      	lsls	r3, r3, #24
 8001ea0:	4962      	ldr	r1, [pc, #392]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ea6:	e05f      	b.n	8001f68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d042      	beq.n	8001f36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff faac 	bl	8001418 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ec4:	f7ff faa8 	bl	8001418 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e280      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ed6:	4b55      	ldr	r3, [pc, #340]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ee2:	f7ff faa5 	bl	8001430 <HAL_GetREVID>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d817      	bhi.n	8001f20 <HAL_RCC_OscConfig+0x3ec>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d108      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3d6>
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f00:	4a4a      	ldr	r2, [pc, #296]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f06:	6053      	str	r3, [r2, #4]
 8001f08:	e02e      	b.n	8001f68 <HAL_RCC_OscConfig+0x434>
 8001f0a:	4b48      	ldr	r3, [pc, #288]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	069b      	lsls	r3, r3, #26
 8001f18:	4944      	ldr	r1, [pc, #272]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
 8001f1e:	e023      	b.n	8001f68 <HAL_RCC_OscConfig+0x434>
 8001f20:	4b42      	ldr	r3, [pc, #264]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	493f      	ldr	r1, [pc, #252]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60cb      	str	r3, [r1, #12]
 8001f34:	e018      	b.n	8001f68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f36:	4b3d      	ldr	r3, [pc, #244]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fa69 	bl	8001418 <HAL_GetTick>
 8001f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fa65 	bl	8001418 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e23d      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f5c:	4b33      	ldr	r3, [pc, #204]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d036      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d019      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f80:	4a2a      	ldr	r2, [pc, #168]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff fa46 	bl	8001418 <HAL_GetTick>
 8001f8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff fa42 	bl	8001418 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e21a      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fa2:	4b22      	ldr	r3, [pc, #136]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x45c>
 8001fae:	e018      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fa2c 	bl	8001418 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fa28 	bl	8001418 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e200      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d039      	beq.n	8002062 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01c      	beq.n	8002030 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002000:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002002:	f7ff fa09 	bl	8001418 <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800200a:	f7ff fa05 	bl	8001418 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1dd      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_RCC_OscConfig+0x4f8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x4d6>
 8002028:	e01b      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
 800202a:	bf00      	nop
 800202c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002030:	4b9b      	ldr	r3, [pc, #620]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a9a      	ldr	r2, [pc, #616]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800203a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800203c:	f7ff f9ec 	bl	8001418 <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002044:	f7ff f9e8 	bl	8001418 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1c0      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002056:	4b92      	ldr	r3, [pc, #584]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8081 	beq.w	8002172 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002070:	4b8c      	ldr	r3, [pc, #560]	@ (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a8b      	ldr	r2, [pc, #556]	@ (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800207c:	f7ff f9cc 	bl	8001418 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002084:	f7ff f9c8 	bl	8001418 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	@ 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1a0      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002096:	4b83      	ldr	r3, [pc, #524]	@ (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x584>
 80020aa:	4b7d      	ldr	r3, [pc, #500]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a7c      	ldr	r2, [pc, #496]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b6:	e02d      	b.n	8002114 <HAL_RCC_OscConfig+0x5e0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10c      	bne.n	80020da <HAL_RCC_OscConfig+0x5a6>
 80020c0:	4b77      	ldr	r3, [pc, #476]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c4:	4a76      	ldr	r2, [pc, #472]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80020cc:	4b74      	ldr	r3, [pc, #464]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d0:	4a73      	ldr	r2, [pc, #460]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020d2:	f023 0304 	bic.w	r3, r3, #4
 80020d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x5e0>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x5c8>
 80020e2:	4b6f      	ldr	r3, [pc, #444]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	4a6e      	ldr	r2, [pc, #440]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ee:	4b6c      	ldr	r3, [pc, #432]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	4a6b      	ldr	r2, [pc, #428]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0x5e0>
 80020fc:	4b68      	ldr	r3, [pc, #416]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002100:	4a67      	ldr	r2, [pc, #412]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	@ 0x70
 8002108:	4b65      	ldr	r3, [pc, #404]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	4a64      	ldr	r2, [pc, #400]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff f97c 	bl	8001418 <HAL_GetTick>
 8002120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7ff f978 	bl	8001418 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e14e      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800213a:	4b59      	ldr	r3, [pc, #356]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ee      	beq.n	8002124 <HAL_RCC_OscConfig+0x5f0>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff f966 	bl	8001418 <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7ff f962 	bl	8001418 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e138      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002166:	4b4e      	ldr	r3, [pc, #312]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ee      	bne.n	8002150 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 812d 	beq.w	80023d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800217c:	4b48      	ldr	r3, [pc, #288]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002184:	2b18      	cmp	r3, #24
 8002186:	f000 80bd 	beq.w	8002304 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	2b02      	cmp	r3, #2
 8002190:	f040 809e 	bne.w	80022d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	4b42      	ldr	r3, [pc, #264]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a41      	ldr	r2, [pc, #260]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800219a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7ff f93a 	bl	8001418 <HAL_GetTick>
 80021a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f936 	bl	8001418 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e10e      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ba:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ca:	4b37      	ldr	r3, [pc, #220]	@ (80022a8 <HAL_RCC_OscConfig+0x774>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	430a      	orrs	r2, r1
 80021da:	4931      	ldr	r1, [pc, #196]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	628b      	str	r3, [r1, #40]	@ 0x28
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	3b01      	subs	r3, #1
 80021e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ee:	3b01      	subs	r3, #1
 80021f0:	025b      	lsls	r3, r3, #9
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fa:	3b01      	subs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	3b01      	subs	r3, #1
 800220a:	061b      	lsls	r3, r3, #24
 800220c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002210:	4923      	ldr	r1, [pc, #140]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002216:	4b22      	ldr	r3, [pc, #136]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221a:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002222:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <HAL_RCC_OscConfig+0x778>)
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800222e:	00d2      	lsls	r2, r2, #3
 8002230:	491b      	ldr	r1, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223a:	f023 020c 	bic.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4917      	ldr	r1, [pc, #92]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	f023 0202 	bic.w	r2, r3, #2
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002254:	4912      	ldr	r1, [pc, #72]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	4a10      	ldr	r2, [pc, #64]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800226c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002270:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800227c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <HAL_RCC_OscConfig+0x76c>)
 8002290:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff f8bf 	bl	8001418 <HAL_GetTick>
 800229a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800229c:	e011      	b.n	80022c2 <HAL_RCC_OscConfig+0x78e>
 800229e:	bf00      	nop
 80022a0:	58024400 	.word	0x58024400
 80022a4:	58024800 	.word	0x58024800
 80022a8:	fffffc0c 	.word	0xfffffc0c
 80022ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f8b2 	bl	8001418 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e08a      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022c2:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x77c>
 80022ce:	e082      	b.n	80023d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b43      	ldr	r3, [pc, #268]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a42      	ldr	r2, [pc, #264]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80022d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7ff f89c 	bl	8001418 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff f898 	bl	8001418 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e070      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022f6:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x7b0>
 8002302:	e068      	b.n	80023d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002304:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800230a:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	2b01      	cmp	r3, #1
 8002316:	d031      	beq.n	800237c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d12a      	bne.n	800237c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d122      	bne.n	800237c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	0a5b      	lsrs	r3, r3, #9
 800234a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002352:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002364:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d108      	bne.n	800237c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	0e1b      	lsrs	r3, r3, #24
 800236e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e02b      	b.n	80023d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002380:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 8002382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800238a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	429a      	cmp	r2, r3
 8002394:	d01f      	beq.n	80023d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002396:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	4a11      	ldr	r2, [pc, #68]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023a2:	f7ff f839 	bl	8001418 <HAL_GetTick>
 80023a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023a8:	bf00      	nop
 80023aa:	f7ff f835 	bl	8001418 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d0f9      	beq.n	80023aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80023b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_RCC_OscConfig+0x8b0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023c2:	00d2      	lsls	r2, r2, #3
 80023c4:	4906      	ldr	r1, [pc, #24]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <HAL_RCC_OscConfig+0x8ac>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3730      	adds	r7, #48	@ 0x30
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	58024400 	.word	0x58024400
 80023e4:	ffff0007 	.word	0xffff0007

080023e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e19c      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b87      	ldr	r3, [pc, #540]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020f 	bic.w	r2, r3, #15
 8002412:	4985      	ldr	r1, [pc, #532]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b83      	ldr	r3, [pc, #524]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e184      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	4b7b      	ldr	r3, [pc, #492]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002444:	429a      	cmp	r2, r3
 8002446:	d908      	bls.n	800245a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002448:	4b78      	ldr	r3, [pc, #480]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	4975      	ldr	r1, [pc, #468]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	4b70      	ldr	r3, [pc, #448]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002472:	429a      	cmp	r2, r3
 8002474:	d908      	bls.n	8002488 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002476:	4b6d      	ldr	r3, [pc, #436]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	496a      	ldr	r1, [pc, #424]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 8002484:	4313      	orrs	r3, r2
 8002486:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	4b64      	ldr	r3, [pc, #400]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d908      	bls.n	80024b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024a4:	4b61      	ldr	r3, [pc, #388]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	495e      	ldr	r1, [pc, #376]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69da      	ldr	r2, [r3, #28]
 80024c6:	4b59      	ldr	r3, [pc, #356]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d908      	bls.n	80024e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024d2:	4b56      	ldr	r3, [pc, #344]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4953      	ldr	r1, [pc, #332]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4b4d      	ldr	r3, [pc, #308]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d908      	bls.n	8002512 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b4a      	ldr	r3, [pc, #296]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f023 020f 	bic.w	r2, r3, #15
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4947      	ldr	r1, [pc, #284]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800250e:	4313      	orrs	r3, r2
 8002510:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d055      	beq.n	80025ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800251e:	4b43      	ldr	r3, [pc, #268]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4940      	ldr	r1, [pc, #256]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800252c:	4313      	orrs	r3, r2
 800252e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d107      	bne.n	8002548 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002538:	4b3c      	ldr	r3, [pc, #240]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d121      	bne.n	8002588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0f6      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d107      	bne.n	8002560 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002550:	4b36      	ldr	r3, [pc, #216]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d115      	bne.n	8002588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0ea      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002568:	4b30      	ldr	r3, [pc, #192]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0de      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002578:	4b2c      	ldr	r3, [pc, #176]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0d6      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002588:	4b28      	ldr	r3, [pc, #160]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f023 0207 	bic.w	r2, r3, #7
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4925      	ldr	r1, [pc, #148]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 8002596:	4313      	orrs	r3, r2
 8002598:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259a:	f7fe ff3d 	bl	8001418 <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a2:	f7fe ff39 	bl	8001418 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0be      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b8:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d1eb      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	4b14      	ldr	r3, [pc, #80]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d208      	bcs.n	80025f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f023 020f 	bic.w	r2, r3, #15
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	490e      	ldr	r1, [pc, #56]	@ (800262c <HAL_RCC_ClockConfig+0x244>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d214      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 020f 	bic.w	r2, r3, #15
 800260e:	4906      	ldr	r1, [pc, #24]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <HAL_RCC_ClockConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e086      	b.n	8002736 <HAL_RCC_ClockConfig+0x34e>
 8002628:	52002000 	.word	0x52002000
 800262c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	4b3f      	ldr	r3, [pc, #252]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002648:	429a      	cmp	r2, r3
 800264a:	d208      	bcs.n	800265e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800264c:	4b3c      	ldr	r3, [pc, #240]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4939      	ldr	r1, [pc, #228]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 800265a:	4313      	orrs	r3, r2
 800265c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	4b34      	ldr	r3, [pc, #208]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002676:	429a      	cmp	r2, r3
 8002678:	d208      	bcs.n	800268c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800267a:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	492e      	ldr	r1, [pc, #184]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 8002688:	4313      	orrs	r3, r2
 800268a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d208      	bcs.n	80026ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026a8:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4922      	ldr	r1, [pc, #136]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d010      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d208      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4917      	ldr	r1, [pc, #92]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026e8:	f000 f834 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	4912      	ldr	r1, [pc, #72]	@ (8002744 <HAL_RCC_ClockConfig+0x35c>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_RCC_ClockConfig+0x358>)
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <HAL_RCC_ClockConfig+0x35c>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <HAL_RCC_ClockConfig+0x360>)
 800271e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002720:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <HAL_RCC_ClockConfig+0x364>)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_RCC_ClockConfig+0x368>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fc32 	bl	8000f94 <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	58024400 	.word	0x58024400
 8002744:	0800abac 	.word	0x0800abac
 8002748:	24000004 	.word	0x24000004
 800274c:	24000000 	.word	0x24000000
 8002750:	24000008 	.word	0x24000008

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275a:	4bb3      	ldr	r3, [pc, #716]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002762:	2b18      	cmp	r3, #24
 8002764:	f200 8155 	bhi.w	8002a12 <HAL_RCC_GetSysClockFreq+0x2be>
 8002768:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <HAL_RCC_GetSysClockFreq+0x1c>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	080027d5 	.word	0x080027d5
 8002774:	08002a13 	.word	0x08002a13
 8002778:	08002a13 	.word	0x08002a13
 800277c:	08002a13 	.word	0x08002a13
 8002780:	08002a13 	.word	0x08002a13
 8002784:	08002a13 	.word	0x08002a13
 8002788:	08002a13 	.word	0x08002a13
 800278c:	08002a13 	.word	0x08002a13
 8002790:	080027fb 	.word	0x080027fb
 8002794:	08002a13 	.word	0x08002a13
 8002798:	08002a13 	.word	0x08002a13
 800279c:	08002a13 	.word	0x08002a13
 80027a0:	08002a13 	.word	0x08002a13
 80027a4:	08002a13 	.word	0x08002a13
 80027a8:	08002a13 	.word	0x08002a13
 80027ac:	08002a13 	.word	0x08002a13
 80027b0:	08002801 	.word	0x08002801
 80027b4:	08002a13 	.word	0x08002a13
 80027b8:	08002a13 	.word	0x08002a13
 80027bc:	08002a13 	.word	0x08002a13
 80027c0:	08002a13 	.word	0x08002a13
 80027c4:	08002a13 	.word	0x08002a13
 80027c8:	08002a13 	.word	0x08002a13
 80027cc:	08002a13 	.word	0x08002a13
 80027d0:	08002807 	.word	0x08002807
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027d4:	4b94      	ldr	r3, [pc, #592]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027e0:	4b91      	ldr	r3, [pc, #580]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	08db      	lsrs	r3, r3, #3
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	4a90      	ldr	r2, [pc, #576]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
 80027f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027f2:	e111      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027f4:	4b8d      	ldr	r3, [pc, #564]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027f6:	61bb      	str	r3, [r7, #24]
      break;
 80027f8:	e10e      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80027fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027fc:	61bb      	str	r3, [r7, #24]
      break;
 80027fe:	e10b      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002800:	4b8c      	ldr	r3, [pc, #560]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002802:	61bb      	str	r3, [r7, #24]
      break;
 8002804:	e108      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002806:	4b88      	ldr	r3, [pc, #544]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002810:	4b85      	ldr	r3, [pc, #532]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800281c:	4b82      	ldr	r3, [pc, #520]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002826:	4b80      	ldr	r3, [pc, #512]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	08db      	lsrs	r3, r3, #3
 800282c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80e1 	beq.w	8002a0c <HAL_RCC_GetSysClockFreq+0x2b8>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b02      	cmp	r3, #2
 800284e:	f000 8083 	beq.w	8002958 <HAL_RCC_GetSysClockFreq+0x204>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b02      	cmp	r3, #2
 8002856:	f200 80a1 	bhi.w	800299c <HAL_RCC_GetSysClockFreq+0x248>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x114>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d056      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002866:	e099      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002868:	4b6f      	ldr	r3, [pc, #444]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d02d      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002874:	4b6c      	ldr	r3, [pc, #432]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	4a6b      	ldr	r2, [pc, #428]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800289e:	4b62      	ldr	r3, [pc, #392]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80028b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80028ce:	e087      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a3c <HAL_RCC_GetSysClockFreq+0x2e8>
 80028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e2:	4b51      	ldr	r3, [pc, #324]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002912:	e065      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002926:	4b40      	ldr	r3, [pc, #256]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002936:	ed97 6a02 	vldr	s12, [r7, #8]
 800293a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002956:	e043      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297a:	ed97 6a02 	vldr	s12, [r7, #8]
 800297e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800298e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800299a:	e021      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029be:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	0a5b      	lsrs	r3, r3, #9
 80029e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ea:	3301      	adds	r3, #1
 80029ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80029fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a04:	ee17 3a90 	vmov	r3, s15
 8002a08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a0a:	e005      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
      break;
 8002a10:	e002      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a12:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a14:	61bb      	str	r3, [r7, #24]
      break;
 8002a16:	bf00      	nop
  }

  return sysclockfreq;
 8002a18:	69bb      	ldr	r3, [r7, #24]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	@ 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	58024400 	.word	0x58024400
 8002a2c:	03d09000 	.word	0x03d09000
 8002a30:	003d0900 	.word	0x003d0900
 8002a34:	017d7840 	.word	0x017d7840
 8002a38:	46000000 	.word	0x46000000
 8002a3c:	4c742400 	.word	0x4c742400
 8002a40:	4a742400 	.word	0x4a742400
 8002a44:	4bbebc20 	.word	0x4bbebc20

08002a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a4e:	f7ff fe81 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490f      	ldr	r1, [pc, #60]	@ (8002a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a07      	ldr	r2, [pc, #28]	@ (8002aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a86:	4a07      	ldr	r2, [pc, #28]	@ (8002aa4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a8c:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	0800abac 	.word	0x0800abac
 8002aa0:	24000004 	.word	0x24000004
 8002aa4:	24000000 	.word	0x24000000

08002aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002aac:	f7ff ffcc 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4904      	ldr	r1, [pc, #16]	@ (8002ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	0800abac 	.word	0x0800abac

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ad8:	f7ff ffb6 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4904      	ldr	r1, [pc, #16]	@ (8002afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	58024400 	.word	0x58024400
 8002afc:	0800abac 	.word	0x0800abac

08002b00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	223f      	movs	r2, #63	@ 0x3f
 8002b0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_RCC_GetClockConfig+0x7c>)
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f003 0207 	and.w	r2, r3, #7
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_RCC_GetClockConfig+0x7c>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_RCC_GetClockConfig+0x7c>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_RCC_GetClockConfig+0x7c>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002b40:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_RCC_GetClockConfig+0x7c>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_GetClockConfig+0x7c>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_RCC_GetClockConfig+0x7c>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_RCC_GetClockConfig+0x80>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	52002000 	.word	0x52002000

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b0ca      	sub	sp, #296	@ 0x128
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002ba8:	2500      	movs	r5, #0
 8002baa:	ea54 0305 	orrs.w	r3, r4, r5
 8002bae:	d049      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bba:	d02f      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bc0:	d828      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bc6:	d01a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bcc:	d822      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd6:	d007      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bda:	4bb8      	ldr	r3, [pc, #736]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4ab7      	ldr	r2, [pc, #732]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002be6:	e01a      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	3308      	adds	r3, #8
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fc8f 	bl	8004514 <RCCEx_PLL2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bfc:	e00f      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c02:	3328      	adds	r3, #40	@ 0x28
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fd36 	bl	8004678 <RCCEx_PLL3_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c12:	e004      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c1a:	e000      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c26:	4ba5      	ldr	r3, [pc, #660]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c34:	4aa1      	ldr	r2, [pc, #644]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c3a:	e003      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c50:	f04f 0900 	mov.w	r9, #0
 8002c54:	ea58 0309 	orrs.w	r3, r8, r9
 8002c58:	d047      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d82a      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c81 	.word	0x08002c81
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002ca5 	.word	0x08002ca5
 8002c78:	08002cc3 	.word	0x08002cc3
 8002c7c:	08002cc3 	.word	0x08002cc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c80:	4b8e      	ldr	r3, [pc, #568]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	4a8d      	ldr	r2, [pc, #564]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c8c:	e01a      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c92:	3308      	adds	r3, #8
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 fc3c 	bl	8004514 <RCCEx_PLL2_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ca2:	e00f      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca8:	3328      	adds	r3, #40	@ 0x28
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 fce3 	bl	8004678 <RCCEx_PLL3_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cb8:	e004      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd0:	f023 0107 	bic.w	r1, r3, #7
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	4a78      	ldr	r2, [pc, #480]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ce0:	e003      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002cf6:	f04f 0b00 	mov.w	fp, #0
 8002cfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cfe:	d04c      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d0a:	d030      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d10:	d829      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d14:	d02d      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d18:	d825      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d1a:	2b80      	cmp	r3, #128	@ 0x80
 8002d1c:	d018      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d1e:	2b80      	cmp	r3, #128	@ 0x80
 8002d20:	d821      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d26:	2b40      	cmp	r3, #64	@ 0x40
 8002d28:	d007      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d2a:	e01c      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d2c:	4b63      	ldr	r3, [pc, #396]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	4a62      	ldr	r2, [pc, #392]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d38:	e01c      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3e:	3308      	adds	r3, #8
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fbe6 	bl	8004514 <RCCEx_PLL2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d4e:	e011      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d54:	3328      	adds	r3, #40	@ 0x28
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fc8d 	bl	8004678 <RCCEx_PLL3_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d64:	e006      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d80:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8a:	4a4c      	ldr	r2, [pc, #304]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d90:	e003      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002da6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002db0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002db4:	460b      	mov	r3, r1
 8002db6:	4313      	orrs	r3, r2
 8002db8:	d053      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002dc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dc6:	d035      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002dc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dcc:	d82e      	bhi.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002dd2:	d031      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002dd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002dd8:	d828      	bhi.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dde:	d01a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de4:	d822      	bhi.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dee:	d007      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002df0:	e01c      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df2:	4b32      	ldr	r3, [pc, #200]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	4a31      	ldr	r2, [pc, #196]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dfe:	e01c      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e04:	3308      	adds	r3, #8
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fb83 	bl	8004514 <RCCEx_PLL2_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e14:	e011      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1a:	3328      	adds	r3, #40	@ 0x28
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 fc2a 	bl	8004678 <RCCEx_PLL3_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e2a:	e006      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e32:	e002      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e42:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e52:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e58:	e003      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	d056      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e8e:	d038      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e94:	d831      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e9a:	d034      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ea0:	d82b      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ea8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eac:	d825      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002eb8:	e01f      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eba:	bf00      	nop
 8002ebc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec0:	4ba2      	ldr	r3, [pc, #648]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	4aa1      	ldr	r2, [pc, #644]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fb1c 	bl	8004514 <RCCEx_PLL2_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ee2:	e011      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee8:	3328      	adds	r3, #40	@ 0x28
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 fbc3 	bl	8004678 <RCCEx_PLL3_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ef8:	e006      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f00:	e002      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f10:	4b8e      	ldr	r3, [pc, #568]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f20:	4a8a      	ldr	r2, [pc, #552]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f22:	430b      	orrs	r3, r1
 8002f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f26:	e003      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	d03a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	2b30      	cmp	r3, #48	@ 0x30
 8002f58:	d01f      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f5a:	2b30      	cmp	r3, #48	@ 0x30
 8002f5c:	d819      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d815      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d019      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d111      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6e:	4b77      	ldr	r3, [pc, #476]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	4a76      	ldr	r2, [pc, #472]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f7a:	e011      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f80:	3308      	adds	r3, #8
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 fac5 	bl	8004514 <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f90:	e006      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f98:	e002      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fa8:	4b68      	ldr	r3, [pc, #416]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb6:	4a65      	ldr	r2, [pc, #404]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fbc:	e003      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	d051      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff0:	d035      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff6:	d82e      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ff8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ffc:	d031      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ffe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003002:	d828      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003008:	d01a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800300a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800300e:	d822      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003018:	d007      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800301a:	e01c      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301c:	4b4b      	ldr	r3, [pc, #300]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	4a4a      	ldr	r2, [pc, #296]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003028:	e01c      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800302e:	3308      	adds	r3, #8
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fa6e 	bl	8004514 <RCCEx_PLL2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800303e:	e011      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003044:	3328      	adds	r3, #40	@ 0x28
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fb15 	bl	8004678 <RCCEx_PLL3_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800305c:	e002      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800305e:	bf00      	nop
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800306c:	4b37      	ldr	r3, [pc, #220]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800306e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003070:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307a:	4a34      	ldr	r2, [pc, #208]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307c:	430b      	orrs	r3, r1
 800307e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800308a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80030a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80030a4:	460b      	mov	r3, r1
 80030a6:	4313      	orrs	r3, r2
 80030a8:	d056      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d033      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80030b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ba:	d82c      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030c0:	d02f      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80030c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030c6:	d826      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030cc:	d02b      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030d2:	d820      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030d8:	d012      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030de:	d81a      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d022      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e8:	d115      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	3308      	adds	r3, #8
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fa0e 	bl	8004514 <RCCEx_PLL2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030fe:	e015      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003104:	3328      	adds	r3, #40	@ 0x28
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f001 fab5 	bl	8004678 <RCCEx_PLL3_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003114:	e00a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800311c:	e006      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800311e:	bf00      	nop
 8003120:	e004      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800312a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003138:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003142:	4a02      	ldr	r2, [pc, #8]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003144:	430b      	orrs	r3, r1
 8003146:	6513      	str	r3, [r2, #80]	@ 0x50
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800314a:	bf00      	nop
 800314c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800316e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003172:	460b      	mov	r3, r1
 8003174:	4313      	orrs	r3, r2
 8003176:	d055      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003184:	d033      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800318a:	d82c      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d02f      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003196:	d826      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003198:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800319c:	d02b      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800319e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031a2:	d820      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031a8:	d012      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80031aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ae:	d81a      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d022      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80031b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b8:	d115      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031be:	3308      	adds	r3, #8
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f9a6 	bl	8004514 <RCCEx_PLL2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031ce:	e015      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	3328      	adds	r3, #40	@ 0x28
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fa4d 	bl	8004678 <RCCEx_PLL3_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031e4:	e00a      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003204:	4ba3      	ldr	r3, [pc, #652]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003214:	4a9f      	ldr	r2, [pc, #636]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003216:	430b      	orrs	r3, r1
 8003218:	6593      	str	r3, [r2, #88]	@ 0x58
 800321a:	e003      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800323a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800323e:	460b      	mov	r3, r1
 8003240:	4313      	orrs	r3, r2
 8003242:	d037      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800324e:	d00e      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003254:	d816      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800325a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325e:	d111      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	4b8c      	ldr	r3, [pc, #560]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	4a8b      	ldr	r2, [pc, #556]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800326c:	e00f      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003272:	3308      	adds	r3, #8
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f001 f94c 	bl	8004514 <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003282:	e004      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800328c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003296:	4b7f      	ldr	r3, [pc, #508]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	4a7b      	ldr	r2, [pc, #492]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	d039      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d81c      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80032de:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003321 	.word	0x08003321
 80032e8:	080032f5 	.word	0x080032f5
 80032ec:	08003303 	.word	0x08003303
 80032f0:	08003321 	.word	0x08003321
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4b67      	ldr	r3, [pc, #412]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	4a66      	ldr	r2, [pc, #408]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003300:	e00f      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	3308      	adds	r3, #8
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f001 f902 	bl	8004514 <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003316:	e004      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800332a:	4b5a      	ldr	r3, [pc, #360]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332e:	f023 0103 	bic.w	r1, r3, #3
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003338:	4a56      	ldr	r2, [pc, #344]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800333a:	430b      	orrs	r3, r1
 800333c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800333e:	e003      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003354:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800335e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003362:	460b      	mov	r3, r1
 8003364:	4313      	orrs	r3, r2
 8003366:	f000 809f 	beq.w	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336a:	4b4b      	ldr	r3, [pc, #300]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a4a      	ldr	r2, [pc, #296]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003376:	f7fe f84f 	bl	8001418 <HAL_GetTick>
 800337a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800337e:	e00b      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fe f84a 	bl	8001418 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b64      	cmp	r3, #100	@ 0x64
 800338e:	d903      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003398:	4b3f      	ldr	r3, [pc, #252]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ed      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80033a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d179      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033ac:	4b39      	ldr	r3, [pc, #228]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033b8:	4053      	eors	r3, r2
 80033ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d015      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c2:	4b34      	ldr	r3, [pc, #208]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ce:	4b31      	ldr	r3, [pc, #196]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	4a30      	ldr	r2, [pc, #192]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033da:	4b2e      	ldr	r3, [pc, #184]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	4a2d      	ldr	r2, [pc, #180]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fa:	d118      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe f80c 	bl	8001418 <HAL_GetTick>
 8003400:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003404:	e00d      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe f807 	bl	8001418 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003416:	429a      	cmp	r2, r3
 8003418:	d903      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003420:	e005      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003422:	4b1c      	ldr	r3, [pc, #112]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0eb      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800342e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003432:	2b00      	cmp	r3, #0
 8003434:	d129      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800343e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003446:	d10e      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003448:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003458:	091a      	lsrs	r2, r3, #4
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800345c:	4013      	ands	r3, r2
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003460:	430b      	orrs	r3, r1
 8003462:	6113      	str	r3, [r2, #16]
 8003464:	e005      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800346c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003470:	6113      	str	r3, [r2, #16]
 8003472:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003474:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800347e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003482:	4a04      	ldr	r2, [pc, #16]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6713      	str	r3, [r2, #112]	@ 0x70
 8003488:	e00e      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800348a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003492:	e009      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003494:	58024400 	.word	0x58024400
 8003498:	58024800 	.word	0x58024800
 800349c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f002 0301 	and.w	r3, r2, #1
 80034b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f000 8089 	beq.w	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d0:	2b28      	cmp	r3, #40	@ 0x28
 80034d2:	d86b      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80034d4:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080035b5 	.word	0x080035b5
 80034e0:	080035ad 	.word	0x080035ad
 80034e4:	080035ad 	.word	0x080035ad
 80034e8:	080035ad 	.word	0x080035ad
 80034ec:	080035ad 	.word	0x080035ad
 80034f0:	080035ad 	.word	0x080035ad
 80034f4:	080035ad 	.word	0x080035ad
 80034f8:	080035ad 	.word	0x080035ad
 80034fc:	08003581 	.word	0x08003581
 8003500:	080035ad 	.word	0x080035ad
 8003504:	080035ad 	.word	0x080035ad
 8003508:	080035ad 	.word	0x080035ad
 800350c:	080035ad 	.word	0x080035ad
 8003510:	080035ad 	.word	0x080035ad
 8003514:	080035ad 	.word	0x080035ad
 8003518:	080035ad 	.word	0x080035ad
 800351c:	08003597 	.word	0x08003597
 8003520:	080035ad 	.word	0x080035ad
 8003524:	080035ad 	.word	0x080035ad
 8003528:	080035ad 	.word	0x080035ad
 800352c:	080035ad 	.word	0x080035ad
 8003530:	080035ad 	.word	0x080035ad
 8003534:	080035ad 	.word	0x080035ad
 8003538:	080035ad 	.word	0x080035ad
 800353c:	080035b5 	.word	0x080035b5
 8003540:	080035ad 	.word	0x080035ad
 8003544:	080035ad 	.word	0x080035ad
 8003548:	080035ad 	.word	0x080035ad
 800354c:	080035ad 	.word	0x080035ad
 8003550:	080035ad 	.word	0x080035ad
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035ad 	.word	0x080035ad
 8003564:	080035ad 	.word	0x080035ad
 8003568:	080035ad 	.word	0x080035ad
 800356c:	080035ad 	.word	0x080035ad
 8003570:	080035ad 	.word	0x080035ad
 8003574:	080035ad 	.word	0x080035ad
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035b5 	.word	0x080035b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	3308      	adds	r3, #8
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 ffc3 	bl	8004514 <RCCEx_PLL2_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003594:	e00f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	3328      	adds	r3, #40	@ 0x28
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f86a 	bl	8004678 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035be:	4bbf      	ldr	r3, [pc, #764]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035cc:	4abb      	ldr	r2, [pc, #748]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 0302 	and.w	r3, r2, #2
 80035e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d041      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003602:	2b05      	cmp	r3, #5
 8003604:	d824      	bhi.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003606:	a201      	add	r2, pc, #4	@ (adr r2, 800360c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	08003659 	.word	0x08003659
 8003610:	08003625 	.word	0x08003625
 8003614:	0800363b 	.word	0x0800363b
 8003618:	08003659 	.word	0x08003659
 800361c:	08003659 	.word	0x08003659
 8003620:	08003659 	.word	0x08003659
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	3308      	adds	r3, #8
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 ff71 	bl	8004514 <RCCEx_PLL2_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003638:	e00f      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363e:	3328      	adds	r3, #40	@ 0x28
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f818 	bl	8004678 <RCCEx_PLL3_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800364e:	e004      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003656:	e000      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003662:	4b96      	ldr	r3, [pc, #600]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003666:	f023 0107 	bic.w	r1, r3, #7
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003670:	4a92      	ldr	r2, [pc, #584]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003672:	430b      	orrs	r3, r1
 8003674:	6553      	str	r3, [r2, #84]	@ 0x54
 8003676:	e003      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f002 0304 	and.w	r3, r2, #4
 800368c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003696:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800369a:	460b      	mov	r3, r1
 800369c:	4313      	orrs	r3, r2
 800369e:	d044      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d825      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	08003701 	.word	0x08003701
 80036b8:	080036cd 	.word	0x080036cd
 80036bc:	080036e3 	.word	0x080036e3
 80036c0:	08003701 	.word	0x08003701
 80036c4:	08003701 	.word	0x08003701
 80036c8:	08003701 	.word	0x08003701
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d0:	3308      	adds	r3, #8
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 ff1d 	bl	8004514 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036e0:	e00f      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 ffc4 	bl	8004678 <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800370a:	4b6c      	ldr	r3, [pc, #432]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	f023 0107 	bic.w	r1, r3, #7
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800371c:	430b      	orrs	r3, r1
 800371e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f002 0320 	and.w	r3, r2, #32
 8003736:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d055      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003756:	d033      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800375c:	d82c      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003762:	d02f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003768:	d826      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800376a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800376e:	d02b      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003774:	d820      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800377a:	d012      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003780:	d81a      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d022      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378a:	d115      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003790:	3308      	adds	r3, #8
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 febd 	bl	8004514 <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037a0:	e015      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	3328      	adds	r3, #40	@ 0x28
 80037a8:	2102      	movs	r1, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 ff64 	bl	8004678 <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037b6:	e00a      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037be:	e006      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037c0:	bf00      	nop
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037c4:	bf00      	nop
 80037c6:	e002      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037c8:	bf00      	nop
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037d6:	4b39      	ldr	r3, [pc, #228]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a35      	ldr	r2, [pc, #212]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800380c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d058      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800381e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003822:	d033      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003824:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003828:	d82c      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382e:	d02f      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003834:	d826      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003836:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800383a:	d02b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800383c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003840:	d820      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003846:	d012      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384c:	d81a      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003856:	d115      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	3308      	adds	r3, #8
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fe57 	bl	8004514 <RCCEx_PLL2_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800386c:	e015      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	3328      	adds	r3, #40	@ 0x28
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fefe 	bl	8004678 <RCCEx_PLL3_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003882:	e00a      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800388a:	e006      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800388c:	bf00      	nop
 800388e:	e004      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003890:	bf00      	nop
 8003892:	e002      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038b2:	4a02      	ldr	r2, [pc, #8]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	d055      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038f4:	d033      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80038f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038fa:	d82c      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003900:	d02f      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003906:	d826      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003908:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800390c:	d02b      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800390e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003912:	d820      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003914:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003918:	d012      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391e:	d81a      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d022      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003928:	d115      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fdee 	bl	8004514 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800393e:	e015      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	3328      	adds	r3, #40	@ 0x28
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fe95 	bl	8004678 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003954:	e00a      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395c:	e006      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800395e:	bf00      	nop
 8003960:	e004      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800396a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003974:	4ba1      	ldr	r3, [pc, #644]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003978:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003980:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003984:	4a9d      	ldr	r2, [pc, #628]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003986:	430b      	orrs	r3, r1
 8003988:	6593      	str	r3, [r2, #88]	@ 0x58
 800398a:	e003      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f002 0308 	and.w	r3, r2, #8
 80039a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d01e      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c6:	3328      	adds	r3, #40	@ 0x28
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fe54 	bl	8004678 <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039dc:	4b87      	ldr	r3, [pc, #540]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ec:	4a83      	ldr	r2, [pc, #524]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ee:	430b      	orrs	r3, r1
 80039f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f002 0310 	and.w	r3, r2, #16
 80039fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d01e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	3328      	adds	r3, #40	@ 0x28
 8003a26:	2102      	movs	r1, #2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fe25 	bl	8004678 <RCCEx_PLL3_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a3a:	4b70      	ldr	r3, [pc, #448]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	d03e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a7c:	d022      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a82:	d81b      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003a8e:	e015      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	3308      	adds	r3, #8
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fd3b 	bl	8004514 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	3328      	adds	r3, #40	@ 0x28
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fde2 	bl	8004678 <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ace:	4b4b      	ldr	r3, [pc, #300]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ade:	4a47      	ldr	r2, [pc, #284]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003afa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003afc:	2300      	movs	r3, #0
 8003afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b04:	460b      	mov	r3, r1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	d03b      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b16:	d01f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b1c:	d818      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b22:	d003      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003b24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b28:	d007      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2c:	4b33      	ldr	r3, [pc, #204]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	4a32      	ldr	r2, [pc, #200]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b38:	e00f      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	3328      	adds	r3, #40	@ 0x28
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fd98 	bl	8004678 <RCCEx_PLL3_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b4e:	e004      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b62:	4b26      	ldr	r3, [pc, #152]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	4a22      	ldr	r2, [pc, #136]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b90:	2300      	movs	r3, #0
 8003b92:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d034      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bac:	d007      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003bae:	e011      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4a11      	ldr	r2, [pc, #68]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00e      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fca4 	bl	8004514 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	4a02      	ldr	r2, [pc, #8]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf8:	e006      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003bfa:	bf00      	nop
 8003bfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c16:	2300      	movs	r3, #0
 8003c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	d00c      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	3328      	adds	r3, #40	@ 0x28
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fd23 	bl	8004678 <RCCEx_PLL3_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d038      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c66:	d018      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c6c:	d811      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c72:	d014      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c78:	d80b      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d011      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c82:	d106      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4bc3      	ldr	r3, [pc, #780]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	4ac2      	ldr	r2, [pc, #776]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c90:	e008      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c98:	e004      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cac:	4bb9      	ldr	r3, [pc, #740]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cbc:	4ab5      	ldr	r2, [pc, #724]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cda:	2300      	movs	r3, #0
 8003cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ce8:	4baa      	ldr	r3, [pc, #680]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf6:	4aa7      	ldr	r2, [pc, #668]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d08:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d18:	4b9e      	ldr	r3, [pc, #632]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d28:	4a9a      	ldr	r2, [pc, #616]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d44:	460b      	mov	r3, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d4a:	4b92      	ldr	r3, [pc, #584]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d58:	4a8e      	ldr	r2, [pc, #568]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d7a:	4b86      	ldr	r3, [pc, #536]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	4a85      	ldr	r2, [pc, #532]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d84:	6113      	str	r3, [r2, #16]
 8003d86:	4b83      	ldr	r3, [pc, #524]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d88:	6919      	ldr	r1, [r3, #16]
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d92:	4a80      	ldr	r2, [pc, #512]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003da4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003da6:	2300      	movs	r3, #0
 8003da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003daa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003db4:	4b77      	ldr	r3, [pc, #476]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	4a74      	ldr	r2, [pc, #464]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003de4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df4:	4a67      	ldr	r2, [pc, #412]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	2100      	movs	r1, #0
 8003e04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d011      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb78 	bl	8004514 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	2100      	movs	r1, #0
 8003e44:	6239      	str	r1, [r7, #32]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d011      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fb58 	bl	8004514 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	2100      	movs	r1, #0
 8003e84:	61b9      	str	r1, [r7, #24]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d011      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fb38 	bl	8004514 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6139      	str	r1, [r7, #16]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	d011      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	3328      	adds	r3, #40	@ 0x28
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fbca 	bl	8004678 <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	2100      	movs	r1, #0
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f10:	460b      	mov	r3, r1
 8003f12:	4313      	orrs	r3, r2
 8003f14:	d011      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1a:	3328      	adds	r3, #40	@ 0x28
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fbaa 	bl	8004678 <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	2100      	movs	r1, #0
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d011      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5a:	3328      	adds	r3, #40	@ 0x28
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fb8a 	bl	8004678 <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003f7a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f94:	58024400 	.word	0x58024400

08003f98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f9c:	f7fe fd54 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	091b      	lsrs	r3, r3, #4
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	4904      	ldr	r1, [pc, #16]	@ (8003fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	0800abac 	.word	0x0800abac

08003fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	@ 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fcc:	4ba1      	ldr	r3, [pc, #644]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003fd6:	4b9f      	ldr	r3, [pc, #636]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	0b1b      	lsrs	r3, r3, #12
 8003fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003fee:	4b99      	ldr	r3, [pc, #612]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff2:	08db      	lsrs	r3, r3, #3
 8003ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8111 	beq.w	8004234 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b02      	cmp	r3, #2
 8004016:	f000 8083 	beq.w	8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b02      	cmp	r3, #2
 800401e:	f200 80a1 	bhi.w	8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d056      	beq.n	80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800402e:	e099      	b.n	8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004030:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d02d      	beq.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800403c:	4b85      	ldr	r3, [pc, #532]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	08db      	lsrs	r3, r3, #3
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	4a84      	ldr	r2, [pc, #528]	@ (8004258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004066:	4b7b      	ldr	r3, [pc, #492]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004076:	ed97 6a03 	vldr	s12, [r7, #12]
 800407a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800407e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004096:	e087      	b.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80040be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040da:	e065      	b.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ee:	4b59      	ldr	r3, [pc, #356]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004102:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800411e:	e043      	b.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	4b48      	ldr	r3, [pc, #288]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004142:	ed97 6a03 	vldr	s12, [r7, #12]
 8004146:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004162:	e021      	b.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b37      	ldr	r3, [pc, #220]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a03 	vldr	s12, [r7, #12]
 800418a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800425c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	0a5b      	lsrs	r3, r3, #9
 80041ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ce:	ee17 2a90 	vmov	r2, s15
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80041d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041da:	0c1b      	lsrs	r3, r3, #16
 80041dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041fc:	ee17 2a90 	vmov	r2, s15
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004204:	4b13      	ldr	r3, [pc, #76]	@ (8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	0e1b      	lsrs	r3, r3, #24
 800420a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800421a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800421e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800422a:	ee17 2a90 	vmov	r2, s15
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004232:	e008      	b.n	8004246 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	bf00      	nop
 8004248:	3724      	adds	r7, #36	@ 0x24
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	58024400 	.word	0x58024400
 8004258:	03d09000 	.word	0x03d09000
 800425c:	46000000 	.word	0x46000000
 8004260:	4c742400 	.word	0x4c742400
 8004264:	4a742400 	.word	0x4a742400
 8004268:	4bbebc20 	.word	0x4bbebc20

0800426c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800426c:	b480      	push	{r7}
 800426e:	b089      	sub	sp, #36	@ 0x24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004274:	4ba1      	ldr	r3, [pc, #644]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800427e:	4b9f      	ldr	r3, [pc, #636]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	0d1b      	lsrs	r3, r3, #20
 8004284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004288:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800428a:	4b9c      	ldr	r3, [pc, #624]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004296:	4b99      	ldr	r3, [pc, #612]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	08db      	lsrs	r3, r3, #3
 800429c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8111 	beq.w	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	f000 8083 	beq.w	80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	f200 80a1 	bhi.w	800440c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d056      	beq.n	8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042d6:	e099      	b.n	800440c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d8:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d02d      	beq.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042e4:	4b85      	ldr	r3, [pc, #532]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	4a84      	ldr	r2, [pc, #528]	@ (8004500 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
 80042f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	ee07 3a90 	vmov	s15, r3
 80042fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b7b      	ldr	r3, [pc, #492]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800433e:	e087      	b.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b6a      	ldr	r3, [pc, #424]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004382:	e065      	b.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b59      	ldr	r3, [pc, #356]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	e043      	b.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b48      	ldr	r3, [pc, #288]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	e021      	b.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004432:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004450:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	0a5b      	lsrs	r3, r3, #9
 8004456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800446a:	edd7 6a07 	vldr	s13, [r7, #28]
 800446e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004476:	ee17 2a90 	vmov	r2, s15
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800447e:	4b1f      	ldr	r3, [pc, #124]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004490:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004498:	edd7 6a07 	vldr	s13, [r7, #28]
 800449c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a4:	ee17 2a90 	vmov	r2, s15
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044ac:	4b13      	ldr	r3, [pc, #76]	@ (80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	0e1b      	lsrs	r3, r3, #24
 80044b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d2:	ee17 2a90 	vmov	r2, s15
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044da:	e008      	b.n	80044ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
}
 80044ee:	bf00      	nop
 80044f0:	3724      	adds	r7, #36	@ 0x24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	58024400 	.word	0x58024400
 8004500:	03d09000 	.word	0x03d09000
 8004504:	46000000 	.word	0x46000000
 8004508:	4c742400 	.word	0x4c742400
 800450c:	4a742400 	.word	0x4a742400
 8004510:	4bbebc20 	.word	0x4bbebc20

08004514 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004522:	4b53      	ldr	r3, [pc, #332]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b03      	cmp	r3, #3
 800452c:	d101      	bne.n	8004532 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e099      	b.n	8004666 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004532:	4b4f      	ldr	r3, [pc, #316]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a4e      	ldr	r2, [pc, #312]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004538:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800453c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453e:	f7fc ff6b 	bl	8001418 <HAL_GetTick>
 8004542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004544:	e008      	b.n	8004558 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004546:	f7fc ff67 	bl	8001418 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e086      	b.n	8004666 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004558:	4b45      	ldr	r3, [pc, #276]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004564:	4b42      	ldr	r3, [pc, #264]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	031b      	lsls	r3, r3, #12
 8004572:	493f      	ldr	r1, [pc, #252]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004574:	4313      	orrs	r3, r2
 8004576:	628b      	str	r3, [r1, #40]	@ 0x28
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	3b01      	subs	r3, #1
 800457e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	3b01      	subs	r3, #1
 8004588:	025b      	lsls	r3, r3, #9
 800458a:	b29b      	uxth	r3, r3
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	3b01      	subs	r3, #1
 8004594:	041b      	lsls	r3, r3, #16
 8004596:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	061b      	lsls	r3, r3, #24
 80045a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045a8:	4931      	ldr	r1, [pc, #196]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045ae:	4b30      	ldr	r3, [pc, #192]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	492d      	ldr	r1, [pc, #180]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	f023 0220 	bic.w	r2, r3, #32
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	4928      	ldr	r1, [pc, #160]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045d2:	4b27      	ldr	r3, [pc, #156]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	4a26      	ldr	r2, [pc, #152]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045d8:	f023 0310 	bic.w	r3, r3, #16
 80045dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045de:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <RCCEx_PLL2_Config+0x160>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	69d2      	ldr	r2, [r2, #28]
 80045ea:	00d2      	lsls	r2, r2, #3
 80045ec:	4920      	ldr	r1, [pc, #128]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 80045f8:	f043 0310 	orr.w	r3, r3, #16
 80045fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004604:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	4a19      	ldr	r2, [pc, #100]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 800460a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800460e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004610:	e00f      	b.n	8004632 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004618:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 800461e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004622:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004624:	e005      	b.n	8004632 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004626:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 800462c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004630:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004632:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a0e      	ldr	r2, [pc, #56]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 8004638:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800463c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463e:	f7fc feeb 	bl	8001418 <HAL_GetTick>
 8004642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004644:	e008      	b.n	8004658 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004646:	f7fc fee7 	bl	8001418 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e006      	b.n	8004666 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <RCCEx_PLL2_Config+0x15c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	58024400 	.word	0x58024400
 8004674:	ffff0007 	.word	0xffff0007

08004678 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004686:	4b53      	ldr	r3, [pc, #332]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b03      	cmp	r3, #3
 8004690:	d101      	bne.n	8004696 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e099      	b.n	80047ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004696:	4b4f      	ldr	r3, [pc, #316]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a4e      	ldr	r2, [pc, #312]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800469c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a2:	f7fc feb9 	bl	8001418 <HAL_GetTick>
 80046a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046a8:	e008      	b.n	80046bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046aa:	f7fc feb5 	bl	8001418 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e086      	b.n	80047ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046bc:	4b45      	ldr	r3, [pc, #276]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046c8:	4b42      	ldr	r3, [pc, #264]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	051b      	lsls	r3, r3, #20
 80046d6:	493f      	ldr	r1, [pc, #252]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	628b      	str	r3, [r1, #40]	@ 0x28
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	025b      	lsls	r3, r3, #9
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	3b01      	subs	r3, #1
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800470c:	4931      	ldr	r1, [pc, #196]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004712:	4b30      	ldr	r3, [pc, #192]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004716:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	492d      	ldr	r1, [pc, #180]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004724:	4b2b      	ldr	r3, [pc, #172]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	4928      	ldr	r1, [pc, #160]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004736:	4b27      	ldr	r3, [pc, #156]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	4a26      	ldr	r2, [pc, #152]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800473c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004740:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004742:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004746:	4b24      	ldr	r3, [pc, #144]	@ (80047d8 <RCCEx_PLL3_Config+0x160>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	69d2      	ldr	r2, [r2, #28]
 800474e:	00d2      	lsls	r2, r2, #3
 8004750:	4920      	ldr	r1, [pc, #128]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004756:	4b1f      	ldr	r3, [pc, #124]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	4a1e      	ldr	r2, [pc, #120]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004760:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004768:	4b1a      	ldr	r3, [pc, #104]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800476e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004774:	e00f      	b.n	8004796 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800477c:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004782:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004786:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004788:	e005      	b.n	8004796 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800478a:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	4a11      	ldr	r2, [pc, #68]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004790:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004794:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a0e      	ldr	r2, [pc, #56]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a2:	f7fc fe39 	bl	8001418 <HAL_GetTick>
 80047a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047a8:	e008      	b.n	80047bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047aa:	f7fc fe35 	bl	8001418 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e006      	b.n	80047ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <RCCEx_PLL3_Config+0x15c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	58024400 	.word	0x58024400
 80047d8:	ffff0007 	.word	0xffff0007

080047dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e10f      	b.n	8004a0e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a87      	ldr	r2, [pc, #540]	@ (8004a18 <HAL_SPI_Init+0x23c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00f      	beq.n	800481e <HAL_SPI_Init+0x42>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a86      	ldr	r2, [pc, #536]	@ (8004a1c <HAL_SPI_Init+0x240>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00a      	beq.n	800481e <HAL_SPI_Init+0x42>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a84      	ldr	r2, [pc, #528]	@ (8004a20 <HAL_SPI_Init+0x244>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d005      	beq.n	800481e <HAL_SPI_Init+0x42>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d901      	bls.n	800481e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0f7      	b.n	8004a0e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f900 	bl	8004a24 <SPI_GetPacketSize>
 8004824:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a18 <HAL_SPI_Init+0x23c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00c      	beq.n	800484a <HAL_SPI_Init+0x6e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a79      	ldr	r2, [pc, #484]	@ (8004a1c <HAL_SPI_Init+0x240>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <HAL_SPI_Init+0x6e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a78      	ldr	r2, [pc, #480]	@ (8004a20 <HAL_SPI_Init+0x244>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d002      	beq.n	800484a <HAL_SPI_Init+0x6e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b08      	cmp	r3, #8
 8004848:	d811      	bhi.n	800486e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800484e:	4a72      	ldr	r2, [pc, #456]	@ (8004a18 <HAL_SPI_Init+0x23c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a70      	ldr	r2, [pc, #448]	@ (8004a1c <HAL_SPI_Init+0x240>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_SPI_Init+0x8c>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6f      	ldr	r2, [pc, #444]	@ (8004a20 <HAL_SPI_Init+0x244>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d104      	bne.n	8004872 <HAL_SPI_Init+0x96>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b10      	cmp	r3, #16
 800486c:	d901      	bls.n	8004872 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e0cd      	b.n	8004a0e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fc fab2 	bl	8000df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80048ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b8:	d119      	bne.n	80048ee <HAL_SPI_Init+0x112>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048c2:	d103      	bne.n	80048cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10c      	bne.n	80048ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048dc:	d107      	bne.n	80048ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00f      	beq.n	800491a <HAL_SPI_Init+0x13e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d90b      	bls.n	800491a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e007      	b.n	800492a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004928:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	431a      	orrs	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493c:	ea42 0103 	orr.w	r1, r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498a:	ea42 0103 	orr.w	r1, r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d113      	bne.n	80049ca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40013000 	.word	0x40013000
 8004a1c:	40003800 	.word	0x40003800
 8004a20:	40003c00 	.word	0x40003c00

08004a24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3307      	adds	r3, #7
 8004a42:	08db      	lsrs	r3, r3, #3
 8004a44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e049      	b.n	8004b00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f841 	bl	8004b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f000 f9e7 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d001      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e054      	b.n	8004bde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a26      	ldr	r2, [pc, #152]	@ (8004bec <HAL_TIM_Base_Start_IT+0xd0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d022      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5e:	d01d      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a22      	ldr	r2, [pc, #136]	@ (8004bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d018      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	@ (8004bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00e      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1e      	ldr	r2, [pc, #120]	@ (8004bfc <HAL_TIM_Base_Start_IT+0xe0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d009      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c00 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1b      	ldr	r2, [pc, #108]	@ (8004c04 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d115      	bne.n	8004bc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <HAL_TIM_Base_Start_IT+0xec>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d015      	beq.n	8004bda <HAL_TIM_Base_Start_IT+0xbe>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb4:	d011      	beq.n	8004bda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc6:	e008      	b.n	8004bda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e000      	b.n	8004bdc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40001800 	.word	0x40001800
 8004c04:	40014000 	.word	0x40014000
 8004c08:	00010007 	.word	0x00010007

08004c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d020      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0202 	mvn.w	r2, #2
 8004c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8e9 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8db 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8ec 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0204 	mvn.w	r2, #4
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8c3 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8b5 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8c6 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d020      	beq.n	8004d08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0208 	mvn.w	r2, #8
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f89d 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f88f 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f8a0 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d020      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0210 	mvn.w	r2, #16
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f877 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f869 	bl	8004e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f87a 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0201 	mvn.w	r2, #1
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc f806 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f913 	bl	8004fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f90b 	bl	8004fe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00c      	beq.n	8004dee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f834 	bl	8004e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00c      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f06f 0220 	mvn.w	r2, #32
 8004e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f8d3 	bl	8004fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a46      	ldr	r2, [pc, #280]	@ (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8a:	d00f      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a43      	ldr	r2, [pc, #268]	@ (8004f9c <TIM_Base_SetConfig+0x130>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a42      	ldr	r2, [pc, #264]	@ (8004fa0 <TIM_Base_SetConfig+0x134>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a41      	ldr	r2, [pc, #260]	@ (8004fa4 <TIM_Base_SetConfig+0x138>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a40      	ldr	r2, [pc, #256]	@ (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a35      	ldr	r2, [pc, #212]	@ (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01f      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ecc:	d01b      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a32      	ldr	r2, [pc, #200]	@ (8004f9c <TIM_Base_SetConfig+0x130>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d017      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a31      	ldr	r2, [pc, #196]	@ (8004fa0 <TIM_Base_SetConfig+0x134>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a30      	ldr	r2, [pc, #192]	@ (8004fa4 <TIM_Base_SetConfig+0x138>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00f      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8004fac <TIM_Base_SetConfig+0x140>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb0 <TIM_Base_SetConfig+0x144>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_Base_SetConfig+0x9a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb4 <TIM_Base_SetConfig+0x148>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d108      	bne.n	8004f18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00f      	beq.n	8004f64 <TIM_Base_SetConfig+0xf8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_Base_SetConfig+0xf8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <TIM_Base_SetConfig+0x140>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_Base_SetConfig+0xf8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <TIM_Base_SetConfig+0x144>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0xf8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <TIM_Base_SetConfig+0x148>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d103      	bne.n	8004f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d105      	bne.n	8004f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	611a      	str	r2, [r3, #16]
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800

08004fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e042      	b.n	800508c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fb ff51 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2224      	movs	r2, #36	@ 0x24
 8005022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fe1e 	bl	8005c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f8b3 	bl	80051b0 <UART_SetConfig>
 800504a:	4603      	mov	r3, r0
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e01b      	b.n	800508c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fe9d 	bl	8005dc4 <UART_CheckIdleState>
 800508a:	4603      	mov	r3, r0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	@ 0x28
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d17b      	bne.n	80051a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_Transmit+0x26>
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e074      	b.n	80051a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2221      	movs	r2, #33	@ 0x21
 80050ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ce:	f7fc f9a3 	bl	8001418 <HAL_GetTick>
 80050d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ec:	d108      	bne.n	8005100 <HAL_UART_Transmit+0x6c>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	e003      	b.n	8005108 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005108:	e030      	b.n	800516c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	2180      	movs	r1, #128	@ 0x80
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 feff 	bl	8005f18 <UART_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e03d      	b.n	80051a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	3302      	adds	r3, #2
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e007      	b.n	800515a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	781a      	ldrb	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	3301      	adds	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1c8      	bne.n	800510a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2200      	movs	r2, #0
 8005180:	2140      	movs	r1, #64	@ 0x40
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fec8 	bl	8005f18 <UART_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e006      	b.n	80051a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b4:	b092      	sub	sp, #72	@ 0x48
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4bbe      	ldr	r3, [pc, #760]	@ (80054d8 <UART_SetConfig+0x328>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4ab3      	ldr	r2, [pc, #716]	@ (80054dc <UART_SetConfig+0x32c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005218:	4313      	orrs	r3, r2
 800521a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	4baf      	ldr	r3, [pc, #700]	@ (80054e0 <UART_SetConfig+0x330>)
 8005224:	4013      	ands	r3, r2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800522c:	430b      	orrs	r3, r1
 800522e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	f023 010f 	bic.w	r1, r3, #15
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4aa6      	ldr	r2, [pc, #664]	@ (80054e4 <UART_SetConfig+0x334>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d177      	bne.n	8005340 <UART_SetConfig+0x190>
 8005250:	4ba5      	ldr	r3, [pc, #660]	@ (80054e8 <UART_SetConfig+0x338>)
 8005252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005254:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005258:	2b28      	cmp	r3, #40	@ 0x28
 800525a:	d86d      	bhi.n	8005338 <UART_SetConfig+0x188>
 800525c:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <UART_SetConfig+0xb4>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005309 	.word	0x08005309
 8005268:	08005339 	.word	0x08005339
 800526c:	08005339 	.word	0x08005339
 8005270:	08005339 	.word	0x08005339
 8005274:	08005339 	.word	0x08005339
 8005278:	08005339 	.word	0x08005339
 800527c:	08005339 	.word	0x08005339
 8005280:	08005339 	.word	0x08005339
 8005284:	08005311 	.word	0x08005311
 8005288:	08005339 	.word	0x08005339
 800528c:	08005339 	.word	0x08005339
 8005290:	08005339 	.word	0x08005339
 8005294:	08005339 	.word	0x08005339
 8005298:	08005339 	.word	0x08005339
 800529c:	08005339 	.word	0x08005339
 80052a0:	08005339 	.word	0x08005339
 80052a4:	08005319 	.word	0x08005319
 80052a8:	08005339 	.word	0x08005339
 80052ac:	08005339 	.word	0x08005339
 80052b0:	08005339 	.word	0x08005339
 80052b4:	08005339 	.word	0x08005339
 80052b8:	08005339 	.word	0x08005339
 80052bc:	08005339 	.word	0x08005339
 80052c0:	08005339 	.word	0x08005339
 80052c4:	08005321 	.word	0x08005321
 80052c8:	08005339 	.word	0x08005339
 80052cc:	08005339 	.word	0x08005339
 80052d0:	08005339 	.word	0x08005339
 80052d4:	08005339 	.word	0x08005339
 80052d8:	08005339 	.word	0x08005339
 80052dc:	08005339 	.word	0x08005339
 80052e0:	08005339 	.word	0x08005339
 80052e4:	08005329 	.word	0x08005329
 80052e8:	08005339 	.word	0x08005339
 80052ec:	08005339 	.word	0x08005339
 80052f0:	08005339 	.word	0x08005339
 80052f4:	08005339 	.word	0x08005339
 80052f8:	08005339 	.word	0x08005339
 80052fc:	08005339 	.word	0x08005339
 8005300:	08005339 	.word	0x08005339
 8005304:	08005331 	.word	0x08005331
 8005308:	2301      	movs	r3, #1
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530e:	e222      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005316:	e21e      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531e:	e21a      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e216      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005328:	2320      	movs	r3, #32
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e212      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005330:	2340      	movs	r3, #64	@ 0x40
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e20e      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e20a      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a69      	ldr	r2, [pc, #420]	@ (80054ec <UART_SetConfig+0x33c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d130      	bne.n	80053ac <UART_SetConfig+0x1fc>
 800534a:	4b67      	ldr	r3, [pc, #412]	@ (80054e8 <UART_SetConfig+0x338>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b05      	cmp	r3, #5
 8005354:	d826      	bhi.n	80053a4 <UART_SetConfig+0x1f4>
 8005356:	a201      	add	r2, pc, #4	@ (adr r2, 800535c <UART_SetConfig+0x1ac>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	08005375 	.word	0x08005375
 8005360:	0800537d 	.word	0x0800537d
 8005364:	08005385 	.word	0x08005385
 8005368:	0800538d 	.word	0x0800538d
 800536c:	08005395 	.word	0x08005395
 8005370:	0800539d 	.word	0x0800539d
 8005374:	2300      	movs	r3, #0
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537a:	e1ec      	b.n	8005756 <UART_SetConfig+0x5a6>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005382:	e1e8      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e1e4      	b.n	8005756 <UART_SetConfig+0x5a6>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e1e0      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005394:	2320      	movs	r3, #32
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e1dc      	b.n	8005756 <UART_SetConfig+0x5a6>
 800539c:	2340      	movs	r3, #64	@ 0x40
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e1d8      	b.n	8005756 <UART_SetConfig+0x5a6>
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e1d4      	b.n	8005756 <UART_SetConfig+0x5a6>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a4f      	ldr	r2, [pc, #316]	@ (80054f0 <UART_SetConfig+0x340>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d130      	bne.n	8005418 <UART_SetConfig+0x268>
 80053b6:	4b4c      	ldr	r3, [pc, #304]	@ (80054e8 <UART_SetConfig+0x338>)
 80053b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d826      	bhi.n	8005410 <UART_SetConfig+0x260>
 80053c2:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <UART_SetConfig+0x218>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	080053f1 	.word	0x080053f1
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005409 	.word	0x08005409
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e6:	e1b6      	b.n	8005756 <UART_SetConfig+0x5a6>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ee:	e1b2      	b.n	8005756 <UART_SetConfig+0x5a6>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f6:	e1ae      	b.n	8005756 <UART_SetConfig+0x5a6>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e1aa      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005400:	2320      	movs	r3, #32
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e1a6      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005408:	2340      	movs	r3, #64	@ 0x40
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e1a2      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e19e      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a35      	ldr	r2, [pc, #212]	@ (80054f4 <UART_SetConfig+0x344>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d130      	bne.n	8005484 <UART_SetConfig+0x2d4>
 8005422:	4b31      	ldr	r3, [pc, #196]	@ (80054e8 <UART_SetConfig+0x338>)
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b05      	cmp	r3, #5
 800542c:	d826      	bhi.n	800547c <UART_SetConfig+0x2cc>
 800542e:	a201      	add	r2, pc, #4	@ (adr r2, 8005434 <UART_SetConfig+0x284>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	0800544d 	.word	0x0800544d
 8005438:	08005455 	.word	0x08005455
 800543c:	0800545d 	.word	0x0800545d
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005452:	e180      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005454:	2304      	movs	r3, #4
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e17c      	b.n	8005756 <UART_SetConfig+0x5a6>
 800545c:	2308      	movs	r3, #8
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e178      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005464:	2310      	movs	r3, #16
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e174      	b.n	8005756 <UART_SetConfig+0x5a6>
 800546c:	2320      	movs	r3, #32
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e170      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005474:	2340      	movs	r3, #64	@ 0x40
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e16c      	b.n	8005756 <UART_SetConfig+0x5a6>
 800547c:	2380      	movs	r3, #128	@ 0x80
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e168      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1b      	ldr	r2, [pc, #108]	@ (80054f8 <UART_SetConfig+0x348>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d142      	bne.n	8005514 <UART_SetConfig+0x364>
 800548e:	4b16      	ldr	r3, [pc, #88]	@ (80054e8 <UART_SetConfig+0x338>)
 8005490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b05      	cmp	r3, #5
 8005498:	d838      	bhi.n	800550c <UART_SetConfig+0x35c>
 800549a:	a201      	add	r2, pc, #4	@ (adr r2, 80054a0 <UART_SetConfig+0x2f0>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054b9 	.word	0x080054b9
 80054a4:	080054c1 	.word	0x080054c1
 80054a8:	080054c9 	.word	0x080054c9
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054fd 	.word	0x080054fd
 80054b4:	08005505 	.word	0x08005505
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e14a      	b.n	8005756 <UART_SetConfig+0x5a6>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e146      	b.n	8005756 <UART_SetConfig+0x5a6>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e142      	b.n	8005756 <UART_SetConfig+0x5a6>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d6:	e13e      	b.n	8005756 <UART_SetConfig+0x5a6>
 80054d8:	cfff69f3 	.word	0xcfff69f3
 80054dc:	58000c00 	.word	0x58000c00
 80054e0:	11fff4ff 	.word	0x11fff4ff
 80054e4:	40011000 	.word	0x40011000
 80054e8:	58024400 	.word	0x58024400
 80054ec:	40004400 	.word	0x40004400
 80054f0:	40004800 	.word	0x40004800
 80054f4:	40004c00 	.word	0x40004c00
 80054f8:	40005000 	.word	0x40005000
 80054fc:	2320      	movs	r3, #32
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005502:	e128      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005504:	2340      	movs	r3, #64	@ 0x40
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550a:	e124      	b.n	8005756 <UART_SetConfig+0x5a6>
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005512:	e120      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4acb      	ldr	r2, [pc, #812]	@ (8005848 <UART_SetConfig+0x698>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d176      	bne.n	800560c <UART_SetConfig+0x45c>
 800551e:	4bcb      	ldr	r3, [pc, #812]	@ (800584c <UART_SetConfig+0x69c>)
 8005520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005526:	2b28      	cmp	r3, #40	@ 0x28
 8005528:	d86c      	bhi.n	8005604 <UART_SetConfig+0x454>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <UART_SetConfig+0x380>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	080055d5 	.word	0x080055d5
 8005534:	08005605 	.word	0x08005605
 8005538:	08005605 	.word	0x08005605
 800553c:	08005605 	.word	0x08005605
 8005540:	08005605 	.word	0x08005605
 8005544:	08005605 	.word	0x08005605
 8005548:	08005605 	.word	0x08005605
 800554c:	08005605 	.word	0x08005605
 8005550:	080055dd 	.word	0x080055dd
 8005554:	08005605 	.word	0x08005605
 8005558:	08005605 	.word	0x08005605
 800555c:	08005605 	.word	0x08005605
 8005560:	08005605 	.word	0x08005605
 8005564:	08005605 	.word	0x08005605
 8005568:	08005605 	.word	0x08005605
 800556c:	08005605 	.word	0x08005605
 8005570:	080055e5 	.word	0x080055e5
 8005574:	08005605 	.word	0x08005605
 8005578:	08005605 	.word	0x08005605
 800557c:	08005605 	.word	0x08005605
 8005580:	08005605 	.word	0x08005605
 8005584:	08005605 	.word	0x08005605
 8005588:	08005605 	.word	0x08005605
 800558c:	08005605 	.word	0x08005605
 8005590:	080055ed 	.word	0x080055ed
 8005594:	08005605 	.word	0x08005605
 8005598:	08005605 	.word	0x08005605
 800559c:	08005605 	.word	0x08005605
 80055a0:	08005605 	.word	0x08005605
 80055a4:	08005605 	.word	0x08005605
 80055a8:	08005605 	.word	0x08005605
 80055ac:	08005605 	.word	0x08005605
 80055b0:	080055f5 	.word	0x080055f5
 80055b4:	08005605 	.word	0x08005605
 80055b8:	08005605 	.word	0x08005605
 80055bc:	08005605 	.word	0x08005605
 80055c0:	08005605 	.word	0x08005605
 80055c4:	08005605 	.word	0x08005605
 80055c8:	08005605 	.word	0x08005605
 80055cc:	08005605 	.word	0x08005605
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055da:	e0bc      	b.n	8005756 <UART_SetConfig+0x5a6>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e0b8      	b.n	8005756 <UART_SetConfig+0x5a6>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ea:	e0b4      	b.n	8005756 <UART_SetConfig+0x5a6>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e0b0      	b.n	8005756 <UART_SetConfig+0x5a6>
 80055f4:	2320      	movs	r3, #32
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e0ac      	b.n	8005756 <UART_SetConfig+0x5a6>
 80055fc:	2340      	movs	r3, #64	@ 0x40
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e0a8      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e0a4      	b.n	8005756 <UART_SetConfig+0x5a6>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a8f      	ldr	r2, [pc, #572]	@ (8005850 <UART_SetConfig+0x6a0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d130      	bne.n	8005678 <UART_SetConfig+0x4c8>
 8005616:	4b8d      	ldr	r3, [pc, #564]	@ (800584c <UART_SetConfig+0x69c>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	2b05      	cmp	r3, #5
 8005620:	d826      	bhi.n	8005670 <UART_SetConfig+0x4c0>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <UART_SetConfig+0x478>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005641 	.word	0x08005641
 800562c:	08005649 	.word	0x08005649
 8005630:	08005651 	.word	0x08005651
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e086      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e082      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005656:	e07e      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e07a      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005660:	2320      	movs	r3, #32
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e076      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e072      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e06e      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a75      	ldr	r2, [pc, #468]	@ (8005854 <UART_SetConfig+0x6a4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d130      	bne.n	80056e4 <UART_SetConfig+0x534>
 8005682:	4b72      	ldr	r3, [pc, #456]	@ (800584c <UART_SetConfig+0x69c>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b05      	cmp	r3, #5
 800568c:	d826      	bhi.n	80056dc <UART_SetConfig+0x52c>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0x4e4>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056ad 	.word	0x080056ad
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e050      	b.n	8005756 <UART_SetConfig+0x5a6>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ba:	e04c      	b.n	8005756 <UART_SetConfig+0x5a6>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c2:	e048      	b.n	8005756 <UART_SetConfig+0x5a6>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ca:	e044      	b.n	8005756 <UART_SetConfig+0x5a6>
 80056cc:	2320      	movs	r3, #32
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d2:	e040      	b.n	8005756 <UART_SetConfig+0x5a6>
 80056d4:	2340      	movs	r3, #64	@ 0x40
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056da:	e03c      	b.n	8005756 <UART_SetConfig+0x5a6>
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e2:	e038      	b.n	8005756 <UART_SetConfig+0x5a6>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005858 <UART_SetConfig+0x6a8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d130      	bne.n	8005750 <UART_SetConfig+0x5a0>
 80056ee:	4b57      	ldr	r3, [pc, #348]	@ (800584c <UART_SetConfig+0x69c>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d826      	bhi.n	8005748 <UART_SetConfig+0x598>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <UART_SetConfig+0x550>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005719 	.word	0x08005719
 8005704:	08005721 	.word	0x08005721
 8005708:	08005729 	.word	0x08005729
 800570c:	08005731 	.word	0x08005731
 8005710:	08005739 	.word	0x08005739
 8005714:	08005741 	.word	0x08005741
 8005718:	2302      	movs	r3, #2
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e01a      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e016      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e012      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e00e      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005738:	2320      	movs	r3, #32
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e00a      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005740:	2340      	movs	r3, #64	@ 0x40
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005746:	e006      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574e:	e002      	b.n	8005756 <UART_SetConfig+0x5a6>
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3f      	ldr	r2, [pc, #252]	@ (8005858 <UART_SetConfig+0x6a8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	f040 80f8 	bne.w	8005952 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005762:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005766:	2b20      	cmp	r3, #32
 8005768:	dc46      	bgt.n	80057f8 <UART_SetConfig+0x648>
 800576a:	2b02      	cmp	r3, #2
 800576c:	f2c0 8082 	blt.w	8005874 <UART_SetConfig+0x6c4>
 8005770:	3b02      	subs	r3, #2
 8005772:	2b1e      	cmp	r3, #30
 8005774:	d87e      	bhi.n	8005874 <UART_SetConfig+0x6c4>
 8005776:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <UART_SetConfig+0x5cc>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057ff 	.word	0x080057ff
 8005780:	08005875 	.word	0x08005875
 8005784:	08005807 	.word	0x08005807
 8005788:	08005875 	.word	0x08005875
 800578c:	08005875 	.word	0x08005875
 8005790:	08005875 	.word	0x08005875
 8005794:	08005817 	.word	0x08005817
 8005798:	08005875 	.word	0x08005875
 800579c:	08005875 	.word	0x08005875
 80057a0:	08005875 	.word	0x08005875
 80057a4:	08005875 	.word	0x08005875
 80057a8:	08005875 	.word	0x08005875
 80057ac:	08005875 	.word	0x08005875
 80057b0:	08005875 	.word	0x08005875
 80057b4:	08005827 	.word	0x08005827
 80057b8:	08005875 	.word	0x08005875
 80057bc:	08005875 	.word	0x08005875
 80057c0:	08005875 	.word	0x08005875
 80057c4:	08005875 	.word	0x08005875
 80057c8:	08005875 	.word	0x08005875
 80057cc:	08005875 	.word	0x08005875
 80057d0:	08005875 	.word	0x08005875
 80057d4:	08005875 	.word	0x08005875
 80057d8:	08005875 	.word	0x08005875
 80057dc:	08005875 	.word	0x08005875
 80057e0:	08005875 	.word	0x08005875
 80057e4:	08005875 	.word	0x08005875
 80057e8:	08005875 	.word	0x08005875
 80057ec:	08005875 	.word	0x08005875
 80057f0:	08005875 	.word	0x08005875
 80057f4:	08005867 	.word	0x08005867
 80057f8:	2b40      	cmp	r3, #64	@ 0x40
 80057fa:	d037      	beq.n	800586c <UART_SetConfig+0x6bc>
 80057fc:	e03a      	b.n	8005874 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057fe:	f7fe fbcb 	bl	8003f98 <HAL_RCCEx_GetD3PCLK1Freq>
 8005802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005804:	e03c      	b.n	8005880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fbda 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005814:	e034      	b.n	8005880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005816:	f107 0318 	add.w	r3, r7, #24
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fd26 	bl	800426c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005824:	e02c      	b.n	8005880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005826:	4b09      	ldr	r3, [pc, #36]	@ (800584c <UART_SetConfig+0x69c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <UART_SetConfig+0x69c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	08db      	lsrs	r3, r3, #3
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	4a07      	ldr	r2, [pc, #28]	@ (800585c <UART_SetConfig+0x6ac>)
 800583e:	fa22 f303 	lsr.w	r3, r2, r3
 8005842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005844:	e01c      	b.n	8005880 <UART_SetConfig+0x6d0>
 8005846:	bf00      	nop
 8005848:	40011400 	.word	0x40011400
 800584c:	58024400 	.word	0x58024400
 8005850:	40007800 	.word	0x40007800
 8005854:	40007c00 	.word	0x40007c00
 8005858:	58000c00 	.word	0x58000c00
 800585c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005860:	4b9d      	ldr	r3, [pc, #628]	@ (8005ad8 <UART_SetConfig+0x928>)
 8005862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005864:	e00c      	b.n	8005880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005866:	4b9d      	ldr	r3, [pc, #628]	@ (8005adc <UART_SetConfig+0x92c>)
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800586a:	e009      	b.n	8005880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005872:	e005      	b.n	8005880 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800587e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 81de 	beq.w	8005c44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	4a94      	ldr	r2, [pc, #592]	@ (8005ae0 <UART_SetConfig+0x930>)
 800588e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005892:	461a      	mov	r2, r3
 8005894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005896:	fbb3 f3f2 	udiv	r3, r3, r2
 800589a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d305      	bcc.n	80058b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d903      	bls.n	80058c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058be:	e1c1      	b.n	8005c44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c2:	2200      	movs	r2, #0
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	60fa      	str	r2, [r7, #12]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	4a84      	ldr	r2, [pc, #528]	@ (8005ae0 <UART_SetConfig+0x930>)
 80058ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2200      	movs	r2, #0
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058e2:	f7fa fd4d 	bl	8000380 <__aeabi_uldivmod>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	020b      	lsls	r3, r1, #8
 80058f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058fc:	0202      	lsls	r2, r0, #8
 80058fe:	6979      	ldr	r1, [r7, #20]
 8005900:	6849      	ldr	r1, [r1, #4]
 8005902:	0849      	lsrs	r1, r1, #1
 8005904:	2000      	movs	r0, #0
 8005906:	460c      	mov	r4, r1
 8005908:	4605      	mov	r5, r0
 800590a:	eb12 0804 	adds.w	r8, r2, r4
 800590e:	eb43 0905 	adc.w	r9, r3, r5
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	469a      	mov	sl, r3
 800591a:	4693      	mov	fp, r2
 800591c:	4652      	mov	r2, sl
 800591e:	465b      	mov	r3, fp
 8005920:	4640      	mov	r0, r8
 8005922:	4649      	mov	r1, r9
 8005924:	f7fa fd2c 	bl	8000380 <__aeabi_uldivmod>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4613      	mov	r3, r2
 800592e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005936:	d308      	bcc.n	800594a <UART_SetConfig+0x79a>
 8005938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800593e:	d204      	bcs.n	800594a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005946:	60da      	str	r2, [r3, #12]
 8005948:	e17c      	b.n	8005c44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005950:	e178      	b.n	8005c44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800595a:	f040 80c5 	bne.w	8005ae8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800595e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005962:	2b20      	cmp	r3, #32
 8005964:	dc48      	bgt.n	80059f8 <UART_SetConfig+0x848>
 8005966:	2b00      	cmp	r3, #0
 8005968:	db7b      	blt.n	8005a62 <UART_SetConfig+0x8b2>
 800596a:	2b20      	cmp	r3, #32
 800596c:	d879      	bhi.n	8005a62 <UART_SetConfig+0x8b2>
 800596e:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <UART_SetConfig+0x7c4>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	080059ff 	.word	0x080059ff
 8005978:	08005a07 	.word	0x08005a07
 800597c:	08005a63 	.word	0x08005a63
 8005980:	08005a63 	.word	0x08005a63
 8005984:	08005a0f 	.word	0x08005a0f
 8005988:	08005a63 	.word	0x08005a63
 800598c:	08005a63 	.word	0x08005a63
 8005990:	08005a63 	.word	0x08005a63
 8005994:	08005a1f 	.word	0x08005a1f
 8005998:	08005a63 	.word	0x08005a63
 800599c:	08005a63 	.word	0x08005a63
 80059a0:	08005a63 	.word	0x08005a63
 80059a4:	08005a63 	.word	0x08005a63
 80059a8:	08005a63 	.word	0x08005a63
 80059ac:	08005a63 	.word	0x08005a63
 80059b0:	08005a63 	.word	0x08005a63
 80059b4:	08005a2f 	.word	0x08005a2f
 80059b8:	08005a63 	.word	0x08005a63
 80059bc:	08005a63 	.word	0x08005a63
 80059c0:	08005a63 	.word	0x08005a63
 80059c4:	08005a63 	.word	0x08005a63
 80059c8:	08005a63 	.word	0x08005a63
 80059cc:	08005a63 	.word	0x08005a63
 80059d0:	08005a63 	.word	0x08005a63
 80059d4:	08005a63 	.word	0x08005a63
 80059d8:	08005a63 	.word	0x08005a63
 80059dc:	08005a63 	.word	0x08005a63
 80059e0:	08005a63 	.word	0x08005a63
 80059e4:	08005a63 	.word	0x08005a63
 80059e8:	08005a63 	.word	0x08005a63
 80059ec:	08005a63 	.word	0x08005a63
 80059f0:	08005a63 	.word	0x08005a63
 80059f4:	08005a55 	.word	0x08005a55
 80059f8:	2b40      	cmp	r3, #64	@ 0x40
 80059fa:	d02e      	beq.n	8005a5a <UART_SetConfig+0x8aa>
 80059fc:	e031      	b.n	8005a62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fe:	f7fd f853 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8005a02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a04:	e033      	b.n	8005a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a06:	f7fd f865 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8005a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a0c:	e02f      	b.n	8005a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fad6 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a1c:	e027      	b.n	8005a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a1e:	f107 0318 	add.w	r3, r7, #24
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe fc22 	bl	800426c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a2c:	e01f      	b.n	8005a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae4 <UART_SetConfig+0x934>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <UART_SetConfig+0x934>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	08db      	lsrs	r3, r3, #3
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	4a24      	ldr	r2, [pc, #144]	@ (8005ad8 <UART_SetConfig+0x928>)
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a4c:	e00f      	b.n	8005a6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a4e:	4b22      	ldr	r3, [pc, #136]	@ (8005ad8 <UART_SetConfig+0x928>)
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a52:	e00c      	b.n	8005a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a54:	4b21      	ldr	r3, [pc, #132]	@ (8005adc <UART_SetConfig+0x92c>)
 8005a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a58:	e009      	b.n	8005a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a60:	e005      	b.n	8005a6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80e7 	beq.w	8005c44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	4a19      	ldr	r2, [pc, #100]	@ (8005ae0 <UART_SetConfig+0x930>)
 8005a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a80:	461a      	mov	r2, r3
 8005a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a88:	005a      	lsls	r2, r3, #1
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	441a      	add	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	2b0f      	cmp	r3, #15
 8005aa0:	d916      	bls.n	8005ad0 <UART_SetConfig+0x920>
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa8:	d212      	bcs.n	8005ad0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f023 030f 	bic.w	r3, r3, #15
 8005ab2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	e0b9      	b.n	8005c44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ad6:	e0b5      	b.n	8005c44 <UART_SetConfig+0xa94>
 8005ad8:	03d09000 	.word	0x03d09000
 8005adc:	003d0900 	.word	0x003d0900
 8005ae0:	0800abbc 	.word	0x0800abbc
 8005ae4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ae8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	dc49      	bgt.n	8005b84 <UART_SetConfig+0x9d4>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db7c      	blt.n	8005bee <UART_SetConfig+0xa3e>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d87a      	bhi.n	8005bee <UART_SetConfig+0xa3e>
 8005af8:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <UART_SetConfig+0x950>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b8b 	.word	0x08005b8b
 8005b04:	08005b93 	.word	0x08005b93
 8005b08:	08005bef 	.word	0x08005bef
 8005b0c:	08005bef 	.word	0x08005bef
 8005b10:	08005b9b 	.word	0x08005b9b
 8005b14:	08005bef 	.word	0x08005bef
 8005b18:	08005bef 	.word	0x08005bef
 8005b1c:	08005bef 	.word	0x08005bef
 8005b20:	08005bab 	.word	0x08005bab
 8005b24:	08005bef 	.word	0x08005bef
 8005b28:	08005bef 	.word	0x08005bef
 8005b2c:	08005bef 	.word	0x08005bef
 8005b30:	08005bef 	.word	0x08005bef
 8005b34:	08005bef 	.word	0x08005bef
 8005b38:	08005bef 	.word	0x08005bef
 8005b3c:	08005bef 	.word	0x08005bef
 8005b40:	08005bbb 	.word	0x08005bbb
 8005b44:	08005bef 	.word	0x08005bef
 8005b48:	08005bef 	.word	0x08005bef
 8005b4c:	08005bef 	.word	0x08005bef
 8005b50:	08005bef 	.word	0x08005bef
 8005b54:	08005bef 	.word	0x08005bef
 8005b58:	08005bef 	.word	0x08005bef
 8005b5c:	08005bef 	.word	0x08005bef
 8005b60:	08005bef 	.word	0x08005bef
 8005b64:	08005bef 	.word	0x08005bef
 8005b68:	08005bef 	.word	0x08005bef
 8005b6c:	08005bef 	.word	0x08005bef
 8005b70:	08005bef 	.word	0x08005bef
 8005b74:	08005bef 	.word	0x08005bef
 8005b78:	08005bef 	.word	0x08005bef
 8005b7c:	08005bef 	.word	0x08005bef
 8005b80:	08005be1 	.word	0x08005be1
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d02e      	beq.n	8005be6 <UART_SetConfig+0xa36>
 8005b88:	e031      	b.n	8005bee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b8a:	f7fc ff8d 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8005b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b90:	e033      	b.n	8005bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b92:	f7fc ff9f 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8005b96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b98:	e02f      	b.n	8005bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fa10 	bl	8003fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba8:	e027      	b.n	8005bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005baa:	f107 0318 	add.w	r3, r7, #24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fb5c 	bl	800426c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb8:	e01f      	b.n	8005bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bba:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <UART_SetConfig+0xac0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c70 <UART_SetConfig+0xac0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	4a28      	ldr	r2, [pc, #160]	@ (8005c74 <UART_SetConfig+0xac4>)
 8005bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bd8:	e00f      	b.n	8005bfa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005bda:	4b26      	ldr	r3, [pc, #152]	@ (8005c74 <UART_SetConfig+0xac4>)
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bde:	e00c      	b.n	8005bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005be0:	4b25      	ldr	r3, [pc, #148]	@ (8005c78 <UART_SetConfig+0xac8>)
 8005be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be4:	e009      	b.n	8005bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bec:	e005      	b.n	8005bfa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bf8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d021      	beq.n	8005c44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	4a1d      	ldr	r2, [pc, #116]	@ (8005c7c <UART_SetConfig+0xacc>)
 8005c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	441a      	add	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	d909      	bls.n	8005c3e <UART_SetConfig+0xa8e>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c30:	d205      	bcs.n	8005c3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	e002      	b.n	8005c44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2200      	movs	r2, #0
 8005c58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3748      	adds	r7, #72	@ 0x48
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c6e:	bf00      	nop
 8005c70:	58024400 	.word	0x58024400
 8005c74:	03d09000 	.word	0x03d09000
 8005c78:	003d0900 	.word	0x003d0900
 8005c7c:	0800abbc 	.word	0x0800abbc

08005c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d7e:	d10a      	bne.n	8005d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b098      	sub	sp, #96	@ 0x60
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dd4:	f7fb fb20 	bl	8001418 <HAL_GetTick>
 8005dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d12f      	bne.n	8005e48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df0:	2200      	movs	r2, #0
 8005df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f88e 	bl	8005f18 <UART_WaitOnFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d022      	beq.n	8005e48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e6      	bne.n	8005e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e063      	b.n	8005f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d149      	bne.n	8005eea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f857 	bl	8005f18 <UART_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d03c      	beq.n	8005eea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e6      	bne.n	8005e70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ec2:	61fa      	str	r2, [r7, #28]
 8005ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	69b9      	ldr	r1, [r7, #24]
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	617b      	str	r3, [r7, #20]
   return(result);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e5      	bne.n	8005ea2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e012      	b.n	8005f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3758      	adds	r7, #88	@ 0x58
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f28:	e04f      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d04b      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f32:	f7fb fa71 	bl	8001418 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d302      	bcc.n	8005f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e04e      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d037      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b80      	cmp	r3, #128	@ 0x80
 8005f5e:	d034      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	d031      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d110      	bne.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f839 	bl	8005ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2208      	movs	r2, #8
 8005f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e029      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fa4:	d111      	bne.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f81f 	bl	8005ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e00f      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d0a0      	beq.n	8005f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b095      	sub	sp, #84	@ 0x54
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800601a:	643b      	str	r3, [r7, #64]	@ 0x40
 800601c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e6      	bne.n	8005ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	61fb      	str	r3, [r7, #28]
   return(result);
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	4b1e      	ldr	r3, [pc, #120]	@ (80060bc <UART_EndRxTransfer+0xc8>)
 8006042:	4013      	ands	r3, r2
 8006044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800604e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d118      	bne.n	800609c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	60bb      	str	r3, [r7, #8]
   return(result);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 0310 	bic.w	r3, r3, #16
 800607e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	613b      	str	r3, [r7, #16]
   return(result);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80060b0:	bf00      	nop
 80060b2:	3754      	adds	r7, #84	@ 0x54
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	effffffe 	.word	0xeffffffe

080060c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e027      	b.n	8006126 <HAL_UARTEx_DisableFifoMode+0x66>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2224      	movs	r2, #36	@ 0x24
 80060e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006146:	2302      	movs	r3, #2
 8006148:	e02d      	b.n	80061a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2224      	movs	r2, #36	@ 0x24
 8006156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f850 	bl	800622c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e02d      	b.n	8006222 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2224      	movs	r2, #36	@ 0x24
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f812 	bl	800622c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006238:	2b00      	cmp	r3, #0
 800623a:	d108      	bne.n	800624e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800624c:	e031      	b.n	80062b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800624e:	2310      	movs	r3, #16
 8006250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006252:	2310      	movs	r3, #16
 8006254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	0e5b      	lsrs	r3, r3, #25
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	0f5b      	lsrs	r3, r3, #29
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	7b3a      	ldrb	r2, [r7, #12]
 800627a:	4911      	ldr	r1, [pc, #68]	@ (80062c0 <UARTEx_SetNbDataToProcess+0x94>)
 800627c:	5c8a      	ldrb	r2, [r1, r2]
 800627e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006282:	7b3a      	ldrb	r2, [r7, #12]
 8006284:	490f      	ldr	r1, [pc, #60]	@ (80062c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006288:	fb93 f3f2 	sdiv	r3, r3, r2
 800628c:	b29a      	uxth	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	7b7a      	ldrb	r2, [r7, #13]
 8006298:	4909      	ldr	r1, [pc, #36]	@ (80062c0 <UARTEx_SetNbDataToProcess+0x94>)
 800629a:	5c8a      	ldrb	r2, [r1, r2]
 800629c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062a0:	7b7a      	ldrb	r2, [r7, #13]
 80062a2:	4908      	ldr	r1, [pc, #32]	@ (80062c4 <UARTEx_SetNbDataToProcess+0x98>)
 80062a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	0800abd4 	.word	0x0800abd4
 80062c4:	0800abdc 	.word	0x0800abdc

080062c8 <__NVIC_SetPriority>:
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	6039      	str	r1, [r7, #0]
 80062d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	db0a      	blt.n	80062f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	490c      	ldr	r1, [pc, #48]	@ (8006314 <__NVIC_SetPriority+0x4c>)
 80062e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062e6:	0112      	lsls	r2, r2, #4
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	440b      	add	r3, r1
 80062ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80062f0:	e00a      	b.n	8006308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	4908      	ldr	r1, [pc, #32]	@ (8006318 <__NVIC_SetPriority+0x50>)
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	3b04      	subs	r3, #4
 8006300:	0112      	lsls	r2, r2, #4
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	440b      	add	r3, r1
 8006306:	761a      	strb	r2, [r3, #24]
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	e000e100 	.word	0xe000e100
 8006318:	e000ed00 	.word	0xe000ed00

0800631c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <SysTick_Handler+0x1c>)
 8006322:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006324:	f002 fb72 	bl	8008a0c <xTaskGetSchedulerState>
 8006328:	4603      	mov	r3, r0
 800632a:	2b01      	cmp	r3, #1
 800632c:	d001      	beq.n	8006332 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800632e:	f003 fa6b 	bl	8009808 <xPortSysTickHandler>
  }
}
 8006332:	bf00      	nop
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	e000e010 	.word	0xe000e010

0800633c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006340:	2100      	movs	r1, #0
 8006342:	f06f 0004 	mvn.w	r0, #4
 8006346:	f7ff ffbf 	bl	80062c8 <__NVIC_SetPriority>
#endif
}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006356:	f3ef 8305 	mrs	r3, IPSR
 800635a:	603b      	str	r3, [r7, #0]
  return(result);
 800635c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006362:	f06f 0305 	mvn.w	r3, #5
 8006366:	607b      	str	r3, [r7, #4]
 8006368:	e00c      	b.n	8006384 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800636a:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <osKernelInitialize+0x44>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006372:	4b08      	ldr	r3, [pc, #32]	@ (8006394 <osKernelInitialize+0x44>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006378:	2300      	movs	r3, #0
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	e002      	b.n	8006384 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800637e:	f04f 33ff 	mov.w	r3, #4294967295
 8006382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006384:	687b      	ldr	r3, [r7, #4]
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	24000aac 	.word	0x24000aac

08006398 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800639e:	f3ef 8305 	mrs	r3, IPSR
 80063a2:	603b      	str	r3, [r7, #0]
  return(result);
 80063a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80063aa:	f06f 0305 	mvn.w	r3, #5
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	e010      	b.n	80063d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063b2:	4b0b      	ldr	r3, [pc, #44]	@ (80063e0 <osKernelStart+0x48>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d109      	bne.n	80063ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063ba:	f7ff ffbf 	bl	800633c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063be:	4b08      	ldr	r3, [pc, #32]	@ (80063e0 <osKernelStart+0x48>)
 80063c0:	2202      	movs	r2, #2
 80063c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063c4:	f001 fe86 	bl	80080d4 <vTaskStartScheduler>
      stat = osOK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e002      	b.n	80063d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063ce:	f04f 33ff 	mov.w	r3, #4294967295
 80063d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063d4:	687b      	ldr	r3, [r7, #4]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	24000aac 	.word	0x24000aac

080063e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ea:	f3ef 8305 	mrs	r3, IPSR
 80063ee:	603b      	str	r3, [r7, #0]
  return(result);
 80063f0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80063f6:	f001 ff99 	bl	800832c <xTaskGetTickCountFromISR>
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	e002      	b.n	8006404 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80063fe:	f001 ff85 	bl	800830c <xTaskGetTickCount>
 8006402:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006404:	687b      	ldr	r3, [r7, #4]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800640e:	b580      	push	{r7, lr}
 8006410:	b08e      	sub	sp, #56	@ 0x38
 8006412:	af04      	add	r7, sp, #16
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800641e:	f3ef 8305 	mrs	r3, IPSR
 8006422:	617b      	str	r3, [r7, #20]
  return(result);
 8006424:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006426:	2b00      	cmp	r3, #0
 8006428:	d17e      	bne.n	8006528 <osThreadNew+0x11a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d07b      	beq.n	8006528 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006430:	2380      	movs	r3, #128	@ 0x80
 8006432:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006434:	2318      	movs	r3, #24
 8006436:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d045      	beq.n	80064d4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <osThreadNew+0x48>
        name = attr->name;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <osThreadNew+0x6e>
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	2b38      	cmp	r3, #56	@ 0x38
 800646e:	d805      	bhi.n	800647c <osThreadNew+0x6e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <osThreadNew+0x72>
        return (NULL);
 800647c:	2300      	movs	r3, #0
 800647e:	e054      	b.n	800652a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	089b      	lsrs	r3, r3, #2
 800648e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00e      	beq.n	80064b6 <osThreadNew+0xa8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2ba7      	cmp	r3, #167	@ 0xa7
 800649e:	d90a      	bls.n	80064b6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d006      	beq.n	80064b6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <osThreadNew+0xa8>
        mem = 1;
 80064b0:	2301      	movs	r3, #1
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e010      	b.n	80064d8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10c      	bne.n	80064d8 <osThreadNew+0xca>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d108      	bne.n	80064d8 <osThreadNew+0xca>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <osThreadNew+0xca>
          mem = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	e001      	b.n	80064d8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d110      	bne.n	8006500 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064e6:	9202      	str	r2, [sp, #8]
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f001 fbaf 	bl	8007c58 <xTaskCreateStatic>
 80064fa:	4603      	mov	r3, r0
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	e013      	b.n	8006528 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d110      	bne.n	8006528 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	b29a      	uxth	r2, r3
 800650a:	f107 0310 	add.w	r3, r7, #16
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 fbfd 	bl	8007d18 <xTaskCreate>
 800651e:	4603      	mov	r3, r0
 8006520:	2b01      	cmp	r3, #1
 8006522:	d001      	beq.n	8006528 <osThreadNew+0x11a>
            hTask = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006528:	693b      	ldr	r3, [r7, #16]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3728      	adds	r7, #40	@ 0x28
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8006532:	b580      	push	{r7, lr}
 8006534:	b086      	sub	sp, #24
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800653a:	f3ef 8305 	mrs	r3, IPSR
 800653e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006540:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006546:	f06f 0305 	mvn.w	r3, #5
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e019      	b.n	8006582 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006552:	f001 fedb 	bl	800830c <xTaskGetTickCount>
 8006556:	4603      	mov	r3, r0
 8006558:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <osDelayUntil+0x4a>
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	db06      	blt.n	800657c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800656e:	f107 0308 	add.w	r3, r7, #8
 8006572:	6939      	ldr	r1, [r7, #16]
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fd2d 	bl	8007fd4 <vTaskDelayUntil>
 800657a:	e002      	b.n	8006582 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800657c:	f06f 0303 	mvn.w	r3, #3
 8006580:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006582:	697b      	ldr	r3, [r7, #20]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	@ 0x28
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659c:	f3ef 8305 	mrs	r3, IPSR
 80065a0:	613b      	str	r3, [r7, #16]
  return(result);
 80065a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d175      	bne.n	8006694 <osSemaphoreNew+0x108>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d072      	beq.n	8006694 <osSemaphoreNew+0x108>
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d86e      	bhi.n	8006694 <osSemaphoreNew+0x108>
    mem = -1;
 80065b6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d015      	beq.n	80065ee <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <osSemaphoreNew+0x4c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b4f      	cmp	r3, #79	@ 0x4f
 80065d0:	d902      	bls.n	80065d8 <osSemaphoreNew+0x4c>
        mem = 1;
 80065d2:	2301      	movs	r3, #1
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e00c      	b.n	80065f2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d108      	bne.n	80065f2 <osSemaphoreNew+0x66>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <osSemaphoreNew+0x66>
          mem = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e001      	b.n	80065f2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d04c      	beq.n	8006694 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d128      	bne.n	8006652 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10a      	bne.n	800661c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2203      	movs	r2, #3
 800660c:	9200      	str	r2, [sp, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	2100      	movs	r1, #0
 8006612:	2001      	movs	r0, #1
 8006614:	f000 fb5e 	bl	8006cd4 <xQueueGenericCreateStatic>
 8006618:	61f8      	str	r0, [r7, #28]
 800661a:	e005      	b.n	8006628 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800661c:	2203      	movs	r2, #3
 800661e:	2100      	movs	r1, #0
 8006620:	2001      	movs	r0, #1
 8006622:	f000 fbd4 	bl	8006dce <xQueueGenericCreate>
 8006626:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d022      	beq.n	8006674 <osSemaphoreNew+0xe8>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01f      	beq.n	8006674 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006634:	2300      	movs	r3, #0
 8006636:	2200      	movs	r2, #0
 8006638:	2100      	movs	r1, #0
 800663a:	69f8      	ldr	r0, [r7, #28]
 800663c:	f000 fc94 	bl	8006f68 <xQueueGenericSend>
 8006640:	4603      	mov	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d016      	beq.n	8006674 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006646:	69f8      	ldr	r0, [r7, #28]
 8006648:	f001 f932 	bl	80078b0 <vQueueDelete>
            hSemaphore = NULL;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	e010      	b.n	8006674 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d108      	bne.n	800666a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	461a      	mov	r2, r3
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fc12 	bl	8006e8a <xQueueCreateCountingSemaphoreStatic>
 8006666:	61f8      	str	r0, [r7, #28]
 8006668:	e004      	b.n	8006674 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fc45 	bl	8006efc <xQueueCreateCountingSemaphore>
 8006672:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	e001      	b.n	800668c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800668c:	6979      	ldr	r1, [r7, #20]
 800668e:	69f8      	ldr	r0, [r7, #28]
 8006690:	f001 fa5a 	bl	8007b48 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006694:	69fb      	ldr	r3, [r7, #28]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80066b8:	f06f 0303 	mvn.w	r3, #3
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e039      	b.n	8006734 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c0:	f3ef 8305 	mrs	r3, IPSR
 80066c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d022      	beq.n	8006712 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80066d2:	f06f 0303 	mvn.w	r3, #3
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e02c      	b.n	8006734 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80066da:	2300      	movs	r3, #0
 80066dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80066de:	f107 0308 	add.w	r3, r7, #8
 80066e2:	461a      	mov	r2, r3
 80066e4:	2100      	movs	r1, #0
 80066e6:	6938      	ldr	r0, [r7, #16]
 80066e8:	f001 f860 	bl	80077ac <xQueueReceiveFromISR>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d003      	beq.n	80066fa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80066f2:	f06f 0302 	mvn.w	r3, #2
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e01c      	b.n	8006734 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d019      	beq.n	8006734 <osSemaphoreAcquire+0x94>
 8006700:	4b0f      	ldr	r3, [pc, #60]	@ (8006740 <osSemaphoreAcquire+0xa0>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	e010      	b.n	8006734 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6938      	ldr	r0, [r7, #16]
 8006716:	f000 ff39 	bl	800758c <xQueueSemaphoreTake>
 800671a:	4603      	mov	r3, r0
 800671c:	2b01      	cmp	r3, #1
 800671e:	d009      	beq.n	8006734 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006726:	f06f 0301 	mvn.w	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e002      	b.n	8006734 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800672e:	f06f 0302 	mvn.w	r3, #2
 8006732:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006734:	697b      	ldr	r3, [r7, #20]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d103      	bne.n	8006762 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800675a:	f06f 0303 	mvn.w	r3, #3
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e02c      	b.n	80067bc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006762:	f3ef 8305 	mrs	r3, IPSR
 8006766:	60fb      	str	r3, [r7, #12]
  return(result);
 8006768:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01a      	beq.n	80067a4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800676e:	2300      	movs	r3, #0
 8006770:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006772:	f107 0308 	add.w	r3, r7, #8
 8006776:	4619      	mov	r1, r3
 8006778:	6938      	ldr	r0, [r7, #16]
 800677a:	f000 fd95 	bl	80072a8 <xQueueGiveFromISR>
 800677e:	4603      	mov	r3, r0
 8006780:	2b01      	cmp	r3, #1
 8006782:	d003      	beq.n	800678c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006784:	f06f 0302 	mvn.w	r3, #2
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e017      	b.n	80067bc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d014      	beq.n	80067bc <osSemaphoreRelease+0x78>
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <osSemaphoreRelease+0x84>)
 8006794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	e00b      	b.n	80067bc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80067a4:	2300      	movs	r3, #0
 80067a6:	2200      	movs	r2, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	6938      	ldr	r0, [r7, #16]
 80067ac:	f000 fbdc 	bl	8006f68 <xQueueGenericSend>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d002      	beq.n	80067bc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80067b6:	f06f 0302 	mvn.w	r3, #2
 80067ba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80067bc:	697b      	ldr	r3, [r7, #20]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	@ 0x28
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067dc:	f3ef 8305 	mrs	r3, IPSR
 80067e0:	613b      	str	r3, [r7, #16]
  return(result);
 80067e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d15f      	bne.n	80068a8 <osMessageQueueNew+0xdc>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d05c      	beq.n	80068a8 <osMessageQueueNew+0xdc>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d059      	beq.n	80068a8 <osMessageQueueNew+0xdc>
    mem = -1;
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295
 80067f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d029      	beq.n	8006854 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d012      	beq.n	800682e <osMessageQueueNew+0x62>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	2b4f      	cmp	r3, #79	@ 0x4f
 800680e:	d90e      	bls.n	800682e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695a      	ldr	r2, [r3, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	429a      	cmp	r2, r3
 8006826:	d302      	bcc.n	800682e <osMessageQueueNew+0x62>
        mem = 1;
 8006828:	2301      	movs	r3, #1
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	e014      	b.n	8006858 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d110      	bne.n	8006858 <osMessageQueueNew+0x8c>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10c      	bne.n	8006858 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <osMessageQueueNew+0x8c>
          mem = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	61bb      	str	r3, [r7, #24]
 8006852:	e001      	b.n	8006858 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d10b      	bne.n	8006876 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2100      	movs	r1, #0
 8006868:	9100      	str	r1, [sp, #0]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 fa31 	bl	8006cd4 <xQueueGenericCreateStatic>
 8006872:	61f8      	str	r0, [r7, #28]
 8006874:	e008      	b.n	8006888 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800687c:	2200      	movs	r2, #0
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 faa4 	bl	8006dce <xQueueGenericCreate>
 8006886:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	e001      	b.n	80068a0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69f8      	ldr	r0, [r7, #28]
 80068a4:	f001 f950 	bl	8007b48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80068a8:	69fb      	ldr	r3, [r7, #28]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068cc:	f3ef 8305 	mrs	r3, IPSR
 80068d0:	617b      	str	r3, [r7, #20]
  return(result);
 80068d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d028      	beq.n	800692a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <osMessageQueuePut+0x36>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <osMessageQueuePut+0x36>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80068ea:	f06f 0303 	mvn.w	r3, #3
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	e038      	b.n	8006964 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80068f6:	f107 0210 	add.w	r2, r7, #16
 80068fa:	2300      	movs	r3, #0
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	69b8      	ldr	r0, [r7, #24]
 8006900:	f000 fc34 	bl	800716c <xQueueGenericSendFromISR>
 8006904:	4603      	mov	r3, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	d003      	beq.n	8006912 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800690a:	f06f 0302 	mvn.w	r3, #2
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e028      	b.n	8006964 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d025      	beq.n	8006964 <osMessageQueuePut+0xb0>
 8006918:	4b15      	ldr	r3, [pc, #84]	@ (8006970 <osMessageQueuePut+0xbc>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	e01c      	b.n	8006964 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <osMessageQueuePut+0x82>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006936:	f06f 0303 	mvn.w	r3, #3
 800693a:	61fb      	str	r3, [r7, #28]
 800693c:	e012      	b.n	8006964 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800693e:	2300      	movs	r3, #0
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	69b8      	ldr	r0, [r7, #24]
 8006946:	f000 fb0f 	bl	8006f68 <xQueueGenericSend>
 800694a:	4603      	mov	r3, r0
 800694c:	2b01      	cmp	r3, #1
 800694e:	d009      	beq.n	8006964 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006956:	f06f 0301 	mvn.w	r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e002      	b.n	8006964 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800695e:	f06f 0302 	mvn.w	r3, #2
 8006962:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006964:	69fb      	ldr	r3, [r7, #28]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800698a:	f3ef 8305 	mrs	r3, IPSR
 800698e:	617b      	str	r3, [r7, #20]
  return(result);
 8006990:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006992:	2b00      	cmp	r3, #0
 8006994:	d028      	beq.n	80069e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <osMessageQueueGet+0x34>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <osMessageQueueGet+0x34>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80069a8:	f06f 0303 	mvn.w	r3, #3
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	e037      	b.n	8006a20 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80069b4:	f107 0310 	add.w	r3, r7, #16
 80069b8:	461a      	mov	r2, r3
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	69b8      	ldr	r0, [r7, #24]
 80069be:	f000 fef5 	bl	80077ac <xQueueReceiveFromISR>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d003      	beq.n	80069d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80069c8:	f06f 0302 	mvn.w	r3, #2
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	e027      	b.n	8006a20 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d024      	beq.n	8006a20 <osMessageQueueGet+0xac>
 80069d6:	4b15      	ldr	r3, [pc, #84]	@ (8006a2c <osMessageQueueGet+0xb8>)
 80069d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	e01b      	b.n	8006a20 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <osMessageQueueGet+0x80>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80069f4:	f06f 0303 	mvn.w	r3, #3
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	e011      	b.n	8006a20 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	69b8      	ldr	r0, [r7, #24]
 8006a02:	f000 fce1 	bl	80073c8 <xQueueReceive>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d009      	beq.n	8006a20 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006a12:	f06f 0301 	mvn.w	r3, #1
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	e002      	b.n	8006a20 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006a1a:	f06f 0302 	mvn.w	r3, #2
 8006a1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006a20:	69fb      	ldr	r3, [r7, #28]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	e000ed04 	.word	0xe000ed04

08006a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a07      	ldr	r2, [pc, #28]	@ (8006a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8006a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a06      	ldr	r2, [pc, #24]	@ (8006a60 <vApplicationGetIdleTaskMemory+0x30>)
 8006a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2280      	movs	r2, #128	@ 0x80
 8006a4c:	601a      	str	r2, [r3, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	24000ab0 	.word	0x24000ab0
 8006a60:	24000b58 	.word	0x24000b58

08006a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a07      	ldr	r2, [pc, #28]	@ (8006a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4a06      	ldr	r2, [pc, #24]	@ (8006a94 <vApplicationGetTimerTaskMemory+0x30>)
 8006a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	24000d58 	.word	0x24000d58
 8006a94:	24000e00 	.word	0x24000e00

08006a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f103 0208 	add.w	r2, r3, #8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f103 0208 	add.w	r2, r3, #8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f103 0208 	add.w	r2, r3, #8
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d103      	bne.n	8006b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	e00c      	b.n	8006b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	e002      	b.n	8006b68 <vListInsert+0x2e>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d2f6      	bcs.n	8006b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6892      	ldr	r2, [r2, #8]
 8006bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6852      	ldr	r2, [r2, #4]
 8006bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d103      	bne.n	8006be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	1e5a      	subs	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	e7fd      	b.n	8006c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c2c:	f002 fd5c 	bl	80096e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c38:	68f9      	ldr	r1, [r7, #12]
 8006c3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	441a      	add	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	22ff      	movs	r2, #255	@ 0xff
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	22ff      	movs	r2, #255	@ 0xff
 8006c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d114      	bne.n	8006cac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01a      	beq.n	8006cc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fcf4 	bl	800867c <xTaskRemoveFromEventList>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d012      	beq.n	8006cc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <xQueueGenericReset+0xd0>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	e009      	b.n	8006cc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3310      	adds	r3, #16
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fef1 	bl	8006a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3324      	adds	r3, #36	@ 0x24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff feec 	bl	8006a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cc0:	f002 fd44 	bl	800974c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cc4:	2301      	movs	r3, #1
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08e      	sub	sp, #56	@ 0x38
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cfa:	bf00      	nop
 8006cfc:	bf00      	nop
 8006cfe:	e7fd      	b.n	8006cfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	e7fd      	b.n	8006d1a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <xQueueGenericCreateStatic+0x56>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <xQueueGenericCreateStatic+0x5a>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <xQueueGenericCreateStatic+0x5c>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	623b      	str	r3, [r7, #32]
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	e7fd      	b.n	8006d48 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <xQueueGenericCreateStatic+0x84>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <xQueueGenericCreateStatic+0x88>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <xQueueGenericCreateStatic+0x8a>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	61fb      	str	r3, [r7, #28]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d7a:	2350      	movs	r3, #80	@ 0x50
 8006d7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b50      	cmp	r3, #80	@ 0x50
 8006d82:	d00b      	beq.n	8006d9c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	61bb      	str	r3, [r7, #24]
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00d      	beq.n	8006dc4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006db0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f840 	bl	8006e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3730      	adds	r7, #48	@ 0x30
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08a      	sub	sp, #40	@ 0x28
 8006dd2:	af02      	add	r7, sp, #8
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <xQueueGenericCreate+0x2c>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	613b      	str	r3, [r7, #16]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	fb02 f303 	mul.w	r3, r2, r3
 8006e02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	3350      	adds	r3, #80	@ 0x50
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 fd8f 	bl	800992c <pvPortMalloc>
 8006e0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d011      	beq.n	8006e3a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	3350      	adds	r3, #80	@ 0x50
 8006e1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e28:	79fa      	ldrb	r2, [r7, #7]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f805 	bl	8006e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e002      	b.n	8006e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e72:	2101      	movs	r1, #1
 8006e74:	69b8      	ldr	r0, [r7, #24]
 8006e76:	f7ff fec3 	bl	8006c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b08a      	sub	sp, #40	@ 0x28
 8006e8e:	af02      	add	r7, sp, #8
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	61bb      	str	r3, [r7, #24]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d90b      	bls.n	8006ed4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	617b      	str	r3, [r7, #20]
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	2100      	movs	r1, #0
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff fef8 	bl	8006cd4 <xQueueGenericCreateStatic>
 8006ee4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
	}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	613b      	str	r3, [r7, #16]
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	e7fd      	b.n	8006f20 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d90b      	bls.n	8006f44 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60fb      	str	r3, [r7, #12]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f44:	2202      	movs	r2, #2
 8006f46:	2100      	movs	r1, #0
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff40 	bl	8006dce <xQueueGenericCreate>
 8006f4e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006f5c:	697b      	ldr	r3, [r7, #20]
	}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08e      	sub	sp, #56	@ 0x38
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f76:	2300      	movs	r3, #0
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10b      	bne.n	8006f9c <xQueueGenericSend+0x34>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	e7fd      	b.n	8006f98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <xQueueGenericSend+0x42>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <xQueueGenericSend+0x46>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueGenericSend+0x48>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <xQueueGenericSend+0x64>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fc6:	bf00      	nop
 8006fc8:	bf00      	nop
 8006fca:	e7fd      	b.n	8006fc8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d103      	bne.n	8006fda <xQueueGenericSend+0x72>
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <xQueueGenericSend+0x76>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <xQueueGenericSend+0x78>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10b      	bne.n	8006ffc <xQueueGenericSend+0x94>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	623b      	str	r3, [r7, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	bf00      	nop
 8006ffa:	e7fd      	b.n	8006ff8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ffc:	f001 fd06 	bl	8008a0c <xTaskGetSchedulerState>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <xQueueGenericSend+0xa4>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <xQueueGenericSend+0xa8>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <xQueueGenericSend+0xaa>
 8007010:	2300      	movs	r3, #0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10b      	bne.n	800702e <xQueueGenericSend+0xc6>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	61fb      	str	r3, [r7, #28]
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	e7fd      	b.n	800702a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800702e:	f002 fb5b 	bl	80096e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <xQueueGenericSend+0xdc>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d129      	bne.n	8007098 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800704a:	f000 fc6d 	bl	8007928 <prvCopyDataToQueue>
 800704e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d010      	beq.n	800707a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	3324      	adds	r3, #36	@ 0x24
 800705c:	4618      	mov	r0, r3
 800705e:	f001 fb0d 	bl	800867c <xTaskRemoveFromEventList>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d013      	beq.n	8007090 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007068:	4b3f      	ldr	r3, [pc, #252]	@ (8007168 <xQueueGenericSend+0x200>)
 800706a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	e00a      	b.n	8007090 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007080:	4b39      	ldr	r3, [pc, #228]	@ (8007168 <xQueueGenericSend+0x200>)
 8007082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007090:	f002 fb5c 	bl	800974c <vPortExitCritical>
				return pdPASS;
 8007094:	2301      	movs	r3, #1
 8007096:	e063      	b.n	8007160 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800709e:	f002 fb55 	bl	800974c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e05c      	b.n	8007160 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070ac:	f107 0314 	add.w	r3, r7, #20
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 fb47 	bl	8008744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070ba:	f002 fb47 	bl	800974c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070be:	f001 f879 	bl	80081b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070c2:	f002 fb11 	bl	80096e8 <vPortEnterCritical>
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070cc:	b25b      	sxtb	r3, r3
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d2:	d103      	bne.n	80070dc <xQueueGenericSend+0x174>
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070e2:	b25b      	sxtb	r3, r3
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d103      	bne.n	80070f2 <xQueueGenericSend+0x18a>
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070f2:	f002 fb2b 	bl	800974c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070f6:	1d3a      	adds	r2, r7, #4
 80070f8:	f107 0314 	add.w	r3, r7, #20
 80070fc:	4611      	mov	r1, r2
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fb36 	bl	8008770 <xTaskCheckForTimeOut>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d124      	bne.n	8007154 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800710a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800710c:	f000 fd04 	bl	8007b18 <prvIsQueueFull>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d018      	beq.n	8007148 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	3310      	adds	r3, #16
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f001 fa5a 	bl	80085d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007124:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007126:	f000 fc8f 	bl	8007a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800712a:	f001 f851 	bl	80081d0 <xTaskResumeAll>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	f47f af7c 	bne.w	800702e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007136:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <xQueueGenericSend+0x200>)
 8007138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	e772      	b.n	800702e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800714a:	f000 fc7d 	bl	8007a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800714e:	f001 f83f 	bl	80081d0 <xTaskResumeAll>
 8007152:	e76c      	b.n	800702e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007156:	f000 fc77 	bl	8007a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800715a:	f001 f839 	bl	80081d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800715e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007160:	4618      	mov	r0, r3
 8007162:	3738      	adds	r7, #56	@ 0x38
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b090      	sub	sp, #64	@ 0x40
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	e7fd      	b.n	8007198 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <xQueueGenericSendFromISR+0x3e>
 80071a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <xQueueGenericSendFromISR+0x42>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <xQueueGenericSendFromISR+0x44>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d103      	bne.n	80071da <xQueueGenericSendFromISR+0x6e>
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <xQueueGenericSendFromISR+0x72>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <xQueueGenericSendFromISR+0x74>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10b      	bne.n	80071fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	623b      	str	r3, [r7, #32]
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071fc:	f002 fb54 	bl	80098a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007200:	f3ef 8211 	mrs	r2, BASEPRI
 8007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	61fa      	str	r2, [r7, #28]
 8007216:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007218:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800721a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007224:	429a      	cmp	r2, r3
 8007226:	d302      	bcc.n	800722e <xQueueGenericSendFromISR+0xc2>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d12f      	bne.n	800728e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007234:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007244:	f000 fb70 	bl	8007928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007248:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d112      	bne.n	8007278 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800725a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725c:	3324      	adds	r3, #36	@ 0x24
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fa0c 	bl	800867c <xTaskRemoveFromEventList>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00e      	beq.n	8007288 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	e007      	b.n	8007288 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007278:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800727c:	3301      	adds	r3, #1
 800727e:	b2db      	uxtb	r3, r3
 8007280:	b25a      	sxtb	r2, r3
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007288:	2301      	movs	r3, #1
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800728c:	e001      	b.n	8007292 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800728e:	2300      	movs	r3, #0
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007294:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800729c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800729e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3740      	adds	r7, #64	@ 0x40
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08e      	sub	sp, #56	@ 0x38
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10b      	bne.n	80072d4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	623b      	str	r3, [r7, #32]
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	61fb      	str	r3, [r7, #28]
}
 80072ee:	bf00      	nop
 80072f0:	bf00      	nop
 80072f2:	e7fd      	b.n	80072f0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <xQueueGiveFromISR+0x5c>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <xQueueGiveFromISR+0x60>
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <xQueueGiveFromISR+0x62>
 8007308:	2300      	movs	r3, #0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10b      	bne.n	8007326 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	61bb      	str	r3, [r7, #24]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007326:	f002 fabf 	bl	80098a8 <vPortValidateInterruptPriority>
	__asm volatile
 800732a:	f3ef 8211 	mrs	r2, BASEPRI
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	617a      	str	r2, [r7, #20]
 8007340:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007342:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007352:	429a      	cmp	r2, r3
 8007354:	d22b      	bcs.n	80073ae <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800735c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007368:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d112      	bne.n	8007398 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	d016      	beq.n	80073a8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737c:	3324      	adds	r3, #36	@ 0x24
 800737e:	4618      	mov	r0, r3
 8007380:	f001 f97c 	bl	800867c <xTaskRemoveFromEventList>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00e      	beq.n	80073a8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00b      	beq.n	80073a8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2201      	movs	r2, #1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e007      	b.n	80073a8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800739c:	3301      	adds	r3, #1
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	b25a      	sxtb	r2, r3
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80073a8:	2301      	movs	r3, #1
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ac:	e001      	b.n	80073b2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f383 8811 	msr	BASEPRI, r3
}
 80073bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3738      	adds	r7, #56	@ 0x38
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08c      	sub	sp, #48	@ 0x30
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <xQueueReceive+0x32>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	623b      	str	r3, [r7, #32]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d103      	bne.n	8007408 <xQueueReceive+0x40>
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <xQueueReceive+0x44>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <xQueueReceive+0x46>
 800740c:	2300      	movs	r3, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10b      	bne.n	800742a <xQueueReceive+0x62>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	61fb      	str	r3, [r7, #28]
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800742a:	f001 faef 	bl	8008a0c <xTaskGetSchedulerState>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <xQueueReceive+0x72>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <xQueueReceive+0x76>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <xQueueReceive+0x78>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <xQueueReceive+0x94>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	61bb      	str	r3, [r7, #24]
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	e7fd      	b.n	8007458 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800745c:	f002 f944 	bl	80096e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01f      	beq.n	80074ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007470:	f000 fac4 	bl	80079fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	1e5a      	subs	r2, r3, #1
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00f      	beq.n	80074a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	3310      	adds	r3, #16
 8007488:	4618      	mov	r0, r3
 800748a:	f001 f8f7 	bl	800867c <xTaskRemoveFromEventList>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007494:	4b3c      	ldr	r3, [pc, #240]	@ (8007588 <xQueueReceive+0x1c0>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074a4:	f002 f952 	bl	800974c <vPortExitCritical>
				return pdPASS;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e069      	b.n	8007580 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d103      	bne.n	80074ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074b2:	f002 f94b 	bl	800974c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e062      	b.n	8007580 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074c0:	f107 0310 	add.w	r3, r7, #16
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 f93d 	bl	8008744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ce:	f002 f93d 	bl	800974c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074d2:	f000 fe6f 	bl	80081b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074d6:	f002 f907 	bl	80096e8 <vPortEnterCritical>
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074e0:	b25b      	sxtb	r3, r3
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d103      	bne.n	80074f0 <xQueueReceive+0x128>
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074f6:	b25b      	sxtb	r3, r3
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d103      	bne.n	8007506 <xQueueReceive+0x13e>
 80074fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007506:	f002 f921 	bl	800974c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800750a:	1d3a      	adds	r2, r7, #4
 800750c:	f107 0310 	add.w	r3, r7, #16
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f001 f92c 	bl	8008770 <xTaskCheckForTimeOut>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d123      	bne.n	8007566 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800751e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007520:	f000 fae4 	bl	8007aec <prvIsQueueEmpty>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d017      	beq.n	800755a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	3324      	adds	r3, #36	@ 0x24
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f001 f850 	bl	80085d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753a:	f000 fa85 	bl	8007a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800753e:	f000 fe47 	bl	80081d0 <xTaskResumeAll>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d189      	bne.n	800745c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007548:	4b0f      	ldr	r3, [pc, #60]	@ (8007588 <xQueueReceive+0x1c0>)
 800754a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	e780      	b.n	800745c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800755a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800755c:	f000 fa74 	bl	8007a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007560:	f000 fe36 	bl	80081d0 <xTaskResumeAll>
 8007564:	e77a      	b.n	800745c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007568:	f000 fa6e 	bl	8007a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800756c:	f000 fe30 	bl	80081d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007572:	f000 fabb 	bl	8007aec <prvIsQueueEmpty>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f43f af6f 	beq.w	800745c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800757e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007580:	4618      	mov	r0, r3
 8007582:	3730      	adds	r7, #48	@ 0x30
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08e      	sub	sp, #56	@ 0x38
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	623b      	str	r3, [r7, #32]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	61fb      	str	r3, [r7, #28]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075e0:	f001 fa14 	bl	8008a0c <xTaskGetSchedulerState>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d102      	bne.n	80075f0 <xQueueSemaphoreTake+0x64>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <xQueueSemaphoreTake+0x68>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <xQueueSemaphoreTake+0x6a>
 80075f4:	2300      	movs	r3, #0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	61bb      	str	r3, [r7, #24]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007612:	f002 f869 	bl	80096e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d024      	beq.n	800766c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007624:	1e5a      	subs	r2, r3, #1
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800762a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007632:	f001 fb65 	bl	8008d00 <pvTaskIncrementMutexHeldCount>
 8007636:	4602      	mov	r2, r0
 8007638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800763c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00f      	beq.n	8007664 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	3310      	adds	r3, #16
 8007648:	4618      	mov	r0, r3
 800764a:	f001 f817 	bl	800867c <xTaskRemoveFromEventList>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007654:	4b54      	ldr	r3, [pc, #336]	@ (80077a8 <xQueueSemaphoreTake+0x21c>)
 8007656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007664:	f002 f872 	bl	800974c <vPortExitCritical>
				return pdPASS;
 8007668:	2301      	movs	r3, #1
 800766a:	e098      	b.n	800779e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d112      	bne.n	8007698 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	617b      	str	r3, [r7, #20]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007690:	f002 f85c 	bl	800974c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007694:	2300      	movs	r3, #0
 8007696:	e082      	b.n	800779e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800769e:	f107 030c 	add.w	r3, r7, #12
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 f84e 	bl	8008744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076ac:	f002 f84e 	bl	800974c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076b0:	f000 fd80 	bl	80081b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076b4:	f002 f818 	bl	80096e8 <vPortEnterCritical>
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076be:	b25b      	sxtb	r3, r3
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d103      	bne.n	80076ce <xQueueSemaphoreTake+0x142>
 80076c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076d4:	b25b      	sxtb	r3, r3
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d103      	bne.n	80076e4 <xQueueSemaphoreTake+0x158>
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e4:	f002 f832 	bl	800974c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076e8:	463a      	mov	r2, r7
 80076ea:	f107 030c 	add.w	r3, r7, #12
 80076ee:	4611      	mov	r1, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 f83d 	bl	8008770 <xTaskCheckForTimeOut>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d132      	bne.n	8007762 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076fe:	f000 f9f5 	bl	8007aec <prvIsQueueEmpty>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d026      	beq.n	8007756 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d109      	bne.n	8007724 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007710:	f001 ffea 	bl	80096e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	4618      	mov	r0, r3
 800771a:	f001 f995 	bl	8008a48 <xTaskPriorityInherit>
 800771e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007720:	f002 f814 	bl	800974c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007726:	3324      	adds	r3, #36	@ 0x24
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ff53 	bl	80085d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007732:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007734:	f000 f988 	bl	8007a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007738:	f000 fd4a 	bl	80081d0 <xTaskResumeAll>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	f47f af67 	bne.w	8007612 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007744:	4b18      	ldr	r3, [pc, #96]	@ (80077a8 <xQueueSemaphoreTake+0x21c>)
 8007746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	e75d      	b.n	8007612 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007756:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007758:	f000 f976 	bl	8007a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800775c:	f000 fd38 	bl	80081d0 <xTaskResumeAll>
 8007760:	e757      	b.n	8007612 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007764:	f000 f970 	bl	8007a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007768:	f000 fd32 	bl	80081d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800776c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800776e:	f000 f9bd 	bl	8007aec <prvIsQueueEmpty>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	f43f af4c 	beq.w	8007612 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007780:	f001 ffb2 	bl	80096e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007784:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007786:	f000 f8b7 	bl	80078f8 <prvGetDisinheritPriorityAfterTimeout>
 800778a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800778c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fa30 	bl	8008bf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007798:	f001 ffd8 	bl	800974c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800779c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3738      	adds	r7, #56	@ 0x38
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08e      	sub	sp, #56	@ 0x38
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	623b      	str	r3, [r7, #32]
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <xQueueReceiveFromISR+0x3c>
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <xQueueReceiveFromISR+0x40>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <xQueueReceiveFromISR+0x42>
 80077ec:	2300      	movs	r3, #0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	61fb      	str	r3, [r7, #28]
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800780a:	f002 f84d 	bl	80098a8 <vPortValidateInterruptPriority>
	__asm volatile
 800780e:	f3ef 8211 	mrs	r2, BASEPRI
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	61ba      	str	r2, [r7, #24]
 8007824:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007826:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007828:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d02f      	beq.n	8007896 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800783c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007844:	f000 f8da 	bl	80079fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784a:	1e5a      	subs	r2, r3, #1
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007850:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d112      	bne.n	8007880 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	3310      	adds	r3, #16
 8007866:	4618      	mov	r0, r3
 8007868:	f000 ff08 	bl	800867c <xTaskRemoveFromEventList>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00e      	beq.n	8007890 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e007      	b.n	8007890 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007884:	3301      	adds	r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	b25a      	sxtb	r2, r3
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007890:	2301      	movs	r3, #1
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
 8007894:	e001      	b.n	800789a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007896:	2300      	movs	r3, #0
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
 800789a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f383 8811 	msr	BASEPRI, r3
}
 80078a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3738      	adds	r7, #56	@ 0x38
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10b      	bne.n	80078da <vQueueDelete+0x2a>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60bb      	str	r3, [r7, #8]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f95e 	bl	8007b9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f002 f864 	bl	80099b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d006      	beq.n	8007916 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e001      	b.n	800791a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800791a:	68fb      	ldr	r3, [r7, #12]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10d      	bne.n	8007962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d14d      	bne.n	80079ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	4618      	mov	r0, r3
 8007954:	f001 f8e0 	bl	8008b18 <xTaskPriorityDisinherit>
 8007958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	e043      	b.n	80079ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d119      	bne.n	800799c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6858      	ldr	r0, [r3, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007970:	461a      	mov	r2, r3
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	f002 fbd3 	bl	800a11e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	d32b      	bcc.n	80079ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	e026      	b.n	80079ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68d8      	ldr	r0, [r3, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a4:	461a      	mov	r2, r3
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	f002 fbb9 	bl	800a11e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b4:	425b      	negs	r3, r3
 80079b6:	441a      	add	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d207      	bcs.n	80079d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d0:	425b      	negs	r3, r3
 80079d2:	441a      	add	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d105      	bne.n	80079ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80079f2:	697b      	ldr	r3, [r7, #20]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a16:	441a      	add	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d303      	bcc.n	8007a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68d9      	ldr	r1, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6838      	ldr	r0, [r7, #0]
 8007a3c:	f002 fb6f 	bl	800a11e <memcpy>
	}
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a50:	f001 fe4a 	bl	80096e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a5c:	e011      	b.n	8007a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d012      	beq.n	8007a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3324      	adds	r3, #36	@ 0x24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fe06 	bl	800867c <xTaskRemoveFromEventList>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a76:	f000 fedf 	bl	8008838 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dce9      	bgt.n	8007a5e <prvUnlockQueue+0x16>
 8007a8a:	e000      	b.n	8007a8e <prvUnlockQueue+0x46>
					break;
 8007a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	22ff      	movs	r2, #255	@ 0xff
 8007a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007a96:	f001 fe59 	bl	800974c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a9a:	f001 fe25 	bl	80096e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aa6:	e011      	b.n	8007acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d012      	beq.n	8007ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fde1 	bl	800867c <xTaskRemoveFromEventList>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ac0:	f000 feba 	bl	8008838 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dce9      	bgt.n	8007aa8 <prvUnlockQueue+0x60>
 8007ad4:	e000      	b.n	8007ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	22ff      	movs	r2, #255	@ 0xff
 8007adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007ae0:	f001 fe34 	bl	800974c <vPortExitCritical>
}
 8007ae4:	bf00      	nop
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007af4:	f001 fdf8 	bl	80096e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e001      	b.n	8007b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b0a:	f001 fe1f 	bl	800974c <vPortExitCritical>

	return xReturn;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b20:	f001 fde2 	bl	80096e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d102      	bne.n	8007b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e001      	b.n	8007b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b3a:	f001 fe07 	bl	800974c <vPortExitCritical>

	return xReturn;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e014      	b.n	8007b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b58:	4a0f      	ldr	r2, [pc, #60]	@ (8007b98 <vQueueAddToRegistry+0x50>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b64:	490c      	ldr	r1, [pc, #48]	@ (8007b98 <vQueueAddToRegistry+0x50>)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b98 <vQueueAddToRegistry+0x50>)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4413      	add	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b7a:	e006      	b.n	8007b8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b07      	cmp	r3, #7
 8007b86:	d9e7      	bls.n	8007b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	24001200 	.word	0x24001200

08007b9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e016      	b.n	8007bd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007baa:	4a10      	ldr	r2, [pc, #64]	@ (8007bec <vQueueUnregisterQueue+0x50>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d10b      	bne.n	8007bd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007bba:	4a0c      	ldr	r2, [pc, #48]	@ (8007bec <vQueueUnregisterQueue+0x50>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007bc4:	4a09      	ldr	r2, [pc, #36]	@ (8007bec <vQueueUnregisterQueue+0x50>)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	2200      	movs	r2, #0
 8007bce:	605a      	str	r2, [r3, #4]
				break;
 8007bd0:	e006      	b.n	8007be0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	d9e5      	bls.n	8007baa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	24001200 	.word	0x24001200

08007bf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c00:	f001 fd72 	bl	80096e8 <vPortEnterCritical>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c0a:	b25b      	sxtb	r3, r3
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d103      	bne.n	8007c1a <vQueueWaitForMessageRestricted+0x2a>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c20:	b25b      	sxtb	r3, r3
 8007c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c26:	d103      	bne.n	8007c30 <vQueueWaitForMessageRestricted+0x40>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c30:	f001 fd8c 	bl	800974c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3324      	adds	r3, #36	@ 0x24
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fced 	bl	8008624 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c4a:	6978      	ldr	r0, [r7, #20]
 8007c4c:	f7ff fefc 	bl	8007a48 <prvUnlockQueue>
	}
 8007c50:	bf00      	nop
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	@ 0x38
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10b      	bne.n	8007c84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	623b      	str	r3, [r7, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	e7fd      	b.n	8007c80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	61fb      	str	r3, [r7, #28]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ca2:	23a8      	movs	r3, #168	@ 0xa8
 8007ca4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2ba8      	cmp	r3, #168	@ 0xa8
 8007caa:	d00b      	beq.n	8007cc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61bb      	str	r3, [r7, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	e7fd      	b.n	8007cc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01e      	beq.n	8007d0a <xTaskCreateStatic+0xb2>
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01b      	beq.n	8007d0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f851 	bl	8007da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d04:	f000 f8f6 	bl	8007ef4 <prvAddNewTaskToReadyList>
 8007d08:	e001      	b.n	8007d0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d0e:	697b      	ldr	r3, [r7, #20]
	}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3728      	adds	r7, #40	@ 0x28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08c      	sub	sp, #48	@ 0x30
 8007d1c:	af04      	add	r7, sp, #16
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fdfd 	bl	800992c <pvPortMalloc>
 8007d32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00e      	beq.n	8007d58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d3a:	20a8      	movs	r0, #168	@ 0xa8
 8007d3c:	f001 fdf6 	bl	800992c <pvPortMalloc>
 8007d40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d4e:	e005      	b.n	8007d5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d50:	6978      	ldr	r0, [r7, #20]
 8007d52:	f001 fe31 	bl	80099b8 <vPortFree>
 8007d56:	e001      	b.n	8007d5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d017      	beq.n	8007d92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9303      	str	r3, [sp, #12]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	9302      	str	r3, [sp, #8]
 8007d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f80f 	bl	8007da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d86:	69f8      	ldr	r0, [r7, #28]
 8007d88:	f000 f8b4 	bl	8007ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	e002      	b.n	8007d98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d98:	69bb      	ldr	r3, [r7, #24]
	}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	461a      	mov	r2, r3
 8007dbc:	21a5      	movs	r1, #165	@ 0xa5
 8007dbe:	f002 f8cd 	bl	8009f5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007dcc:	440b      	add	r3, r1
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f023 0307 	bic.w	r3, r3, #7
 8007dda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	617b      	str	r3, [r7, #20]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01f      	beq.n	8007e44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e012      	b.n	8007e30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	4413      	add	r3, r2
 8007e10:	7819      	ldrb	r1, [r3, #0]
 8007e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	3334      	adds	r3, #52	@ 0x34
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d9e9      	bls.n	8007e0a <prvInitialiseNewTask+0x66>
 8007e36:	e000      	b.n	8007e3a <prvInitialiseNewTask+0x96>
			{
				break;
 8007e38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e42:	e003      	b.n	8007e4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	2b37      	cmp	r3, #55	@ 0x37
 8007e50:	d901      	bls.n	8007e56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e52:	2337      	movs	r3, #55	@ 0x37
 8007e54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	2200      	movs	r2, #0
 8007e66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fe33 	bl	8006ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	3318      	adds	r3, #24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fe2e 	bl	8006ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	3354      	adds	r3, #84	@ 0x54
 8007ea6:	224c      	movs	r2, #76	@ 0x4c
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f002 f856 	bl	8009f5c <memset>
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee8 <prvInitialiseNewTask+0x144>)
 8007eb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8007eec <prvInitialiseNewTask+0x148>)
 8007eba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef0 <prvInitialiseNewTask+0x14c>)
 8007ec0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	68f9      	ldr	r1, [r7, #12]
 8007ec6:	69b8      	ldr	r0, [r7, #24]
 8007ec8:	f001 fadc 	bl	8009484 <pxPortInitialiseStack>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007edc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ede:	bf00      	nop
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	24005484 	.word	0x24005484
 8007eec:	240054ec 	.word	0x240054ec
 8007ef0:	24005554 	.word	0x24005554

08007ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007efc:	f001 fbf4 	bl	80096e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f00:	4b2d      	ldr	r3, [pc, #180]	@ (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f12:	4a2a      	ldr	r2, [pc, #168]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f18:	4b27      	ldr	r3, [pc, #156]	@ (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d110      	bne.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f20:	f000 fcb0 	bl	8008884 <prvInitialiseTaskLists>
 8007f24:	e00d      	b.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f26:	4b26      	ldr	r3, [pc, #152]	@ (8007fc0 <prvAddNewTaskToReadyList+0xcc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f2e:	4b23      	ldr	r3, [pc, #140]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d802      	bhi.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f42:	4b20      	ldr	r3, [pc, #128]	@ (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f58:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc8 <prvAddNewTaskToReadyList+0xd4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d903      	bls.n	8007f68 <prvAddNewTaskToReadyList+0x74>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	4a18      	ldr	r2, [pc, #96]	@ (8007fc8 <prvAddNewTaskToReadyList+0xd4>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4a15      	ldr	r2, [pc, #84]	@ (8007fcc <prvAddNewTaskToReadyList+0xd8>)
 8007f76:	441a      	add	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7fe fdb7 	bl	8006af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f84:	f001 fbe2 	bl	800974c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f88:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <prvAddNewTaskToReadyList+0xcc>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00e      	beq.n	8007fae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d207      	bcs.n	8007fae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd0 <prvAddNewTaskToReadyList+0xdc>)
 8007fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	24001714 	.word	0x24001714
 8007fbc:	24001240 	.word	0x24001240
 8007fc0:	24001720 	.word	0x24001720
 8007fc4:	24001730 	.word	0x24001730
 8007fc8:	2400171c 	.word	0x2400171c
 8007fcc:	24001244 	.word	0x24001244
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08a      	sub	sp, #40	@ 0x28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10b      	bne.n	8008000 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	617b      	str	r3, [r7, #20]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <vTaskDelayUntil+0x4a>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	613b      	str	r3, [r7, #16]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800801e:	4b2a      	ldr	r3, [pc, #168]	@ (80080c8 <vTaskDelayUntil+0xf4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <vTaskDelayUntil+0x6a>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60fb      	str	r3, [r7, #12]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800803e:	f000 f8b9 	bl	80081b4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008042:	4b22      	ldr	r3, [pc, #136]	@ (80080cc <vTaskDelayUntil+0xf8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	4413      	add	r3, r2
 8008050:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	429a      	cmp	r2, r3
 800805a:	d20b      	bcs.n	8008074 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	429a      	cmp	r2, r3
 8008064:	d211      	bcs.n	800808a <vTaskDelayUntil+0xb6>
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	429a      	cmp	r2, r3
 800806c:	d90d      	bls.n	800808a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800806e:	2301      	movs	r3, #1
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
 8008072:	e00a      	b.n	800808a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	429a      	cmp	r2, r3
 800807c:	d303      	bcc.n	8008086 <vTaskDelayUntil+0xb2>
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	429a      	cmp	r2, r3
 8008084:	d901      	bls.n	800808a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008086:	2301      	movs	r3, #1
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d006      	beq.n	80080a4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fe42 	bl	8008d28 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80080a4:	f000 f894 	bl	80081d0 <xTaskResumeAll>
 80080a8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d107      	bne.n	80080c0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80080b0:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <vTaskDelayUntil+0xfc>)
 80080b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080c0:	bf00      	nop
 80080c2:	3728      	adds	r7, #40	@ 0x28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	2400173c 	.word	0x2400173c
 80080cc:	24001718 	.word	0x24001718
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08a      	sub	sp, #40	@ 0x28
 80080d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080e2:	463a      	mov	r2, r7
 80080e4:	1d39      	adds	r1, r7, #4
 80080e6:	f107 0308 	add.w	r3, r7, #8
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fca0 	bl	8006a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	9202      	str	r2, [sp, #8]
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	2300      	movs	r3, #0
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	460a      	mov	r2, r1
 8008102:	4924      	ldr	r1, [pc, #144]	@ (8008194 <vTaskStartScheduler+0xc0>)
 8008104:	4824      	ldr	r0, [pc, #144]	@ (8008198 <vTaskStartScheduler+0xc4>)
 8008106:	f7ff fda7 	bl	8007c58 <xTaskCreateStatic>
 800810a:	4603      	mov	r3, r0
 800810c:	4a23      	ldr	r2, [pc, #140]	@ (800819c <vTaskStartScheduler+0xc8>)
 800810e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008110:	4b22      	ldr	r3, [pc, #136]	@ (800819c <vTaskStartScheduler+0xc8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008118:	2301      	movs	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e001      	b.n	8008122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d102      	bne.n	800812e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008128:	f000 fe52 	bl	8008dd0 <xTimerCreateTimerTask>
 800812c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d11b      	bne.n	800816c <vTaskStartScheduler+0x98>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	613b      	str	r3, [r7, #16]
}
 8008146:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008148:	4b15      	ldr	r3, [pc, #84]	@ (80081a0 <vTaskStartScheduler+0xcc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3354      	adds	r3, #84	@ 0x54
 800814e:	4a15      	ldr	r2, [pc, #84]	@ (80081a4 <vTaskStartScheduler+0xd0>)
 8008150:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008152:	4b15      	ldr	r3, [pc, #84]	@ (80081a8 <vTaskStartScheduler+0xd4>)
 8008154:	f04f 32ff 	mov.w	r2, #4294967295
 8008158:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800815a:	4b14      	ldr	r3, [pc, #80]	@ (80081ac <vTaskStartScheduler+0xd8>)
 800815c:	2201      	movs	r2, #1
 800815e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008160:	4b13      	ldr	r3, [pc, #76]	@ (80081b0 <vTaskStartScheduler+0xdc>)
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008166:	f001 fa1b 	bl	80095a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800816a:	e00f      	b.n	800818c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008172:	d10b      	bne.n	800818c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60fb      	str	r3, [r7, #12]
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <vTaskStartScheduler+0xb4>
}
 800818c:	bf00      	nop
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	0800ab00 	.word	0x0800ab00
 8008198:	08008851 	.word	0x08008851
 800819c:	24001738 	.word	0x24001738
 80081a0:	24001240 	.word	0x24001240
 80081a4:	24000020 	.word	0x24000020
 80081a8:	24001734 	.word	0x24001734
 80081ac:	24001720 	.word	0x24001720
 80081b0:	24001718 	.word	0x24001718

080081b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081b8:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <vTaskSuspendAll+0x18>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	4a03      	ldr	r2, [pc, #12]	@ (80081cc <vTaskSuspendAll+0x18>)
 80081c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081c2:	bf00      	nop
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	2400173c 	.word	0x2400173c

080081d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081da:	2300      	movs	r3, #0
 80081dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081de:	4b42      	ldr	r3, [pc, #264]	@ (80082e8 <xTaskResumeAll+0x118>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10b      	bne.n	80081fe <xTaskResumeAll+0x2e>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	603b      	str	r3, [r7, #0]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081fe:	f001 fa73 	bl	80096e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008202:	4b39      	ldr	r3, [pc, #228]	@ (80082e8 <xTaskResumeAll+0x118>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3b01      	subs	r3, #1
 8008208:	4a37      	ldr	r2, [pc, #220]	@ (80082e8 <xTaskResumeAll+0x118>)
 800820a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820c:	4b36      	ldr	r3, [pc, #216]	@ (80082e8 <xTaskResumeAll+0x118>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d162      	bne.n	80082da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008214:	4b35      	ldr	r3, [pc, #212]	@ (80082ec <xTaskResumeAll+0x11c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05e      	beq.n	80082da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800821c:	e02f      	b.n	800827e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800821e:	4b34      	ldr	r3, [pc, #208]	@ (80082f0 <xTaskResumeAll+0x120>)
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3318      	adds	r3, #24
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fcbe 	bl	8006bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3304      	adds	r3, #4
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fcb9 	bl	8006bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823e:	4b2d      	ldr	r3, [pc, #180]	@ (80082f4 <xTaskResumeAll+0x124>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d903      	bls.n	800824e <xTaskResumeAll+0x7e>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824a:	4a2a      	ldr	r2, [pc, #168]	@ (80082f4 <xTaskResumeAll+0x124>)
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4a27      	ldr	r2, [pc, #156]	@ (80082f8 <xTaskResumeAll+0x128>)
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3304      	adds	r3, #4
 8008262:	4619      	mov	r1, r3
 8008264:	4610      	mov	r0, r2
 8008266:	f7fe fc44 	bl	8006af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826e:	4b23      	ldr	r3, [pc, #140]	@ (80082fc <xTaskResumeAll+0x12c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008274:	429a      	cmp	r2, r3
 8008276:	d302      	bcc.n	800827e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008278:	4b21      	ldr	r3, [pc, #132]	@ (8008300 <xTaskResumeAll+0x130>)
 800827a:	2201      	movs	r2, #1
 800827c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800827e:	4b1c      	ldr	r3, [pc, #112]	@ (80082f0 <xTaskResumeAll+0x120>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1cb      	bne.n	800821e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800828c:	f000 fb9e 	bl	80089cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008290:	4b1c      	ldr	r3, [pc, #112]	@ (8008304 <xTaskResumeAll+0x134>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d010      	beq.n	80082be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800829c:	f000 f858 	bl	8008350 <xTaskIncrementTick>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80082a6:	4b16      	ldr	r3, [pc, #88]	@ (8008300 <xTaskResumeAll+0x130>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1f1      	bne.n	800829c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80082b8:	4b12      	ldr	r3, [pc, #72]	@ (8008304 <xTaskResumeAll+0x134>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082be:	4b10      	ldr	r3, [pc, #64]	@ (8008300 <xTaskResumeAll+0x130>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082c6:	2301      	movs	r3, #1
 80082c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <xTaskResumeAll+0x138>)
 80082cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082da:	f001 fa37 	bl	800974c <vPortExitCritical>

	return xAlreadyYielded;
 80082de:	68bb      	ldr	r3, [r7, #8]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	2400173c 	.word	0x2400173c
 80082ec:	24001714 	.word	0x24001714
 80082f0:	240016d4 	.word	0x240016d4
 80082f4:	2400171c 	.word	0x2400171c
 80082f8:	24001244 	.word	0x24001244
 80082fc:	24001240 	.word	0x24001240
 8008300:	24001728 	.word	0x24001728
 8008304:	24001724 	.word	0x24001724
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008312:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <xTaskGetTickCount+0x1c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008318:	687b      	ldr	r3, [r7, #4]
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	24001718 	.word	0x24001718

0800832c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008332:	f001 fab9 	bl	80098a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008336:	2300      	movs	r3, #0
 8008338:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800833a:	4b04      	ldr	r3, [pc, #16]	@ (800834c <xTaskGetTickCountFromISR+0x20>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008340:	683b      	ldr	r3, [r7, #0]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	24001718 	.word	0x24001718

08008350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835a:	4b4f      	ldr	r3, [pc, #316]	@ (8008498 <xTaskIncrementTick+0x148>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f040 8090 	bne.w	8008484 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008364:	4b4d      	ldr	r3, [pc, #308]	@ (800849c <xTaskIncrementTick+0x14c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800836c:	4a4b      	ldr	r2, [pc, #300]	@ (800849c <xTaskIncrementTick+0x14c>)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d121      	bne.n	80083bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008378:	4b49      	ldr	r3, [pc, #292]	@ (80084a0 <xTaskIncrementTick+0x150>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	603b      	str	r3, [r7, #0]
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	e7fd      	b.n	8008396 <xTaskIncrementTick+0x46>
 800839a:	4b41      	ldr	r3, [pc, #260]	@ (80084a0 <xTaskIncrementTick+0x150>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	4b40      	ldr	r3, [pc, #256]	@ (80084a4 <xTaskIncrementTick+0x154>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a3e      	ldr	r2, [pc, #248]	@ (80084a0 <xTaskIncrementTick+0x150>)
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	4a3e      	ldr	r2, [pc, #248]	@ (80084a4 <xTaskIncrementTick+0x154>)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4b3e      	ldr	r3, [pc, #248]	@ (80084a8 <xTaskIncrementTick+0x158>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	4a3c      	ldr	r2, [pc, #240]	@ (80084a8 <xTaskIncrementTick+0x158>)
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	f000 fb08 	bl	80089cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083bc:	4b3b      	ldr	r3, [pc, #236]	@ (80084ac <xTaskIncrementTick+0x15c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d349      	bcc.n	800845a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c6:	4b36      	ldr	r3, [pc, #216]	@ (80084a0 <xTaskIncrementTick+0x150>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d0:	4b36      	ldr	r3, [pc, #216]	@ (80084ac <xTaskIncrementTick+0x15c>)
 80083d2:	f04f 32ff 	mov.w	r2, #4294967295
 80083d6:	601a      	str	r2, [r3, #0]
					break;
 80083d8:	e03f      	b.n	800845a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083da:	4b31      	ldr	r3, [pc, #196]	@ (80084a0 <xTaskIncrementTick+0x150>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d203      	bcs.n	80083fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083f2:	4a2e      	ldr	r2, [pc, #184]	@ (80084ac <xTaskIncrementTick+0x15c>)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083f8:	e02f      	b.n	800845a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	3304      	adds	r3, #4
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fe fbd4 	bl	8006bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3318      	adds	r3, #24
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fbcb 	bl	8006bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800841a:	4b25      	ldr	r3, [pc, #148]	@ (80084b0 <xTaskIncrementTick+0x160>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d903      	bls.n	800842a <xTaskIncrementTick+0xda>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008426:	4a22      	ldr	r2, [pc, #136]	@ (80084b0 <xTaskIncrementTick+0x160>)
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4a1f      	ldr	r2, [pc, #124]	@ (80084b4 <xTaskIncrementTick+0x164>)
 8008438:	441a      	add	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f7fe fb56 	bl	8006af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844a:	4b1b      	ldr	r3, [pc, #108]	@ (80084b8 <xTaskIncrementTick+0x168>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008450:	429a      	cmp	r2, r3
 8008452:	d3b8      	bcc.n	80083c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008458:	e7b5      	b.n	80083c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800845a:	4b17      	ldr	r3, [pc, #92]	@ (80084b8 <xTaskIncrementTick+0x168>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008460:	4914      	ldr	r1, [pc, #80]	@ (80084b4 <xTaskIncrementTick+0x164>)
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d901      	bls.n	8008476 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008472:	2301      	movs	r3, #1
 8008474:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008476:	4b11      	ldr	r3, [pc, #68]	@ (80084bc <xTaskIncrementTick+0x16c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e004      	b.n	800848e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008484:	4b0e      	ldr	r3, [pc, #56]	@ (80084c0 <xTaskIncrementTick+0x170>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3301      	adds	r3, #1
 800848a:	4a0d      	ldr	r2, [pc, #52]	@ (80084c0 <xTaskIncrementTick+0x170>)
 800848c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800848e:	697b      	ldr	r3, [r7, #20]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	2400173c 	.word	0x2400173c
 800849c:	24001718 	.word	0x24001718
 80084a0:	240016cc 	.word	0x240016cc
 80084a4:	240016d0 	.word	0x240016d0
 80084a8:	2400172c 	.word	0x2400172c
 80084ac:	24001734 	.word	0x24001734
 80084b0:	2400171c 	.word	0x2400171c
 80084b4:	24001244 	.word	0x24001244
 80084b8:	24001240 	.word	0x24001240
 80084bc:	24001728 	.word	0x24001728
 80084c0:	24001724 	.word	0x24001724

080084c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084ca:	4b3d      	ldr	r3, [pc, #244]	@ (80085c0 <vTaskSwitchContext+0xfc>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084d2:	4b3c      	ldr	r3, [pc, #240]	@ (80085c4 <vTaskSwitchContext+0x100>)
 80084d4:	2201      	movs	r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084d8:	e06e      	b.n	80085b8 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 80084da:	4b3a      	ldr	r3, [pc, #232]	@ (80085c4 <vTaskSwitchContext+0x100>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80084e0:	4b39      	ldr	r3, [pc, #228]	@ (80085c8 <vTaskSwitchContext+0x104>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e6:	613b      	str	r3, [r7, #16]
 80084e8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d111      	bne.n	800851c <vTaskSwitchContext+0x58>
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	3304      	adds	r3, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	429a      	cmp	r2, r3
 8008502:	d10b      	bne.n	800851c <vTaskSwitchContext+0x58>
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	3308      	adds	r3, #8
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	429a      	cmp	r2, r3
 800850e:	d105      	bne.n	800851c <vTaskSwitchContext+0x58>
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	330c      	adds	r3, #12
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	429a      	cmp	r2, r3
 800851a:	d008      	beq.n	800852e <vTaskSwitchContext+0x6a>
 800851c:	4b2a      	ldr	r3, [pc, #168]	@ (80085c8 <vTaskSwitchContext+0x104>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b29      	ldr	r3, [pc, #164]	@ (80085c8 <vTaskSwitchContext+0x104>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3334      	adds	r3, #52	@ 0x34
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7f8 f8a9 	bl	8000680 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852e:	4b27      	ldr	r3, [pc, #156]	@ (80085cc <vTaskSwitchContext+0x108>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	e011      	b.n	800855a <vTaskSwitchContext+0x96>
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <vTaskSwitchContext+0x90>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	607b      	str	r3, [r7, #4]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <vTaskSwitchContext+0x8c>
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	3b01      	subs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	491d      	ldr	r1, [pc, #116]	@ (80085d0 <vTaskSwitchContext+0x10c>)
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0e3      	beq.n	8008536 <vTaskSwitchContext+0x72>
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4a15      	ldr	r2, [pc, #84]	@ (80085d0 <vTaskSwitchContext+0x10c>)
 800857a:	4413      	add	r3, r2
 800857c:	60bb      	str	r3, [r7, #8]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	605a      	str	r2, [r3, #4]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	3308      	adds	r3, #8
 8008590:	429a      	cmp	r2, r3
 8008592:	d104      	bne.n	800859e <vTaskSwitchContext+0xda>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	4a08      	ldr	r2, [pc, #32]	@ (80085c8 <vTaskSwitchContext+0x104>)
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	4a08      	ldr	r2, [pc, #32]	@ (80085cc <vTaskSwitchContext+0x108>)
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085ae:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <vTaskSwitchContext+0x104>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3354      	adds	r3, #84	@ 0x54
 80085b4:	4a07      	ldr	r2, [pc, #28]	@ (80085d4 <vTaskSwitchContext+0x110>)
 80085b6:	6013      	str	r3, [r2, #0]
}
 80085b8:	bf00      	nop
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	2400173c 	.word	0x2400173c
 80085c4:	24001728 	.word	0x24001728
 80085c8:	24001240 	.word	0x24001240
 80085cc:	2400171c 	.word	0x2400171c
 80085d0:	24001244 	.word	0x24001244
 80085d4:	24000020 	.word	0x24000020

080085d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60fb      	str	r3, [r7, #12]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008600:	4b07      	ldr	r3, [pc, #28]	@ (8008620 <vTaskPlaceOnEventList+0x48>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3318      	adds	r3, #24
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7fe fa96 	bl	8006b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800860e:	2101      	movs	r1, #1
 8008610:	6838      	ldr	r0, [r7, #0]
 8008612:	f000 fb89 	bl	8008d28 <prvAddCurrentTaskToDelayedList>
}
 8008616:	bf00      	nop
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	24001240 	.word	0x24001240

08008624 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10b      	bne.n	800864e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	617b      	str	r3, [r7, #20]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800864e:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <vTaskPlaceOnEventListRestricted+0x54>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3318      	adds	r3, #24
 8008654:	4619      	mov	r1, r3
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7fe fa4b 	bl	8006af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008662:	f04f 33ff 	mov.w	r3, #4294967295
 8008666:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	68b8      	ldr	r0, [r7, #8]
 800866c:	f000 fb5c 	bl	8008d28 <prvAddCurrentTaskToDelayedList>
	}
 8008670:	bf00      	nop
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	24001240 	.word	0x24001240

0800867c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	3318      	adds	r3, #24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fa7c 	bl	8006bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086b4:	4b1d      	ldr	r3, [pc, #116]	@ (800872c <xTaskRemoveFromEventList+0xb0>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11d      	bne.n	80086f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	3304      	adds	r3, #4
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe fa73 	bl	8006bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ca:	4b19      	ldr	r3, [pc, #100]	@ (8008730 <xTaskRemoveFromEventList+0xb4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d903      	bls.n	80086da <xTaskRemoveFromEventList+0x5e>
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d6:	4a16      	ldr	r2, [pc, #88]	@ (8008730 <xTaskRemoveFromEventList+0xb4>)
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4a13      	ldr	r2, [pc, #76]	@ (8008734 <xTaskRemoveFromEventList+0xb8>)
 80086e8:	441a      	add	r2, r3
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f7fe f9fe 	bl	8006af2 <vListInsertEnd>
 80086f6:	e005      	b.n	8008704 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3318      	adds	r3, #24
 80086fc:	4619      	mov	r1, r3
 80086fe:	480e      	ldr	r0, [pc, #56]	@ (8008738 <xTaskRemoveFromEventList+0xbc>)
 8008700:	f7fe f9f7 	bl	8006af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008708:	4b0c      	ldr	r3, [pc, #48]	@ (800873c <xTaskRemoveFromEventList+0xc0>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870e:	429a      	cmp	r2, r3
 8008710:	d905      	bls.n	800871e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008712:	2301      	movs	r3, #1
 8008714:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008716:	4b0a      	ldr	r3, [pc, #40]	@ (8008740 <xTaskRemoveFromEventList+0xc4>)
 8008718:	2201      	movs	r2, #1
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e001      	b.n	8008722 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800871e:	2300      	movs	r3, #0
 8008720:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008722:	697b      	ldr	r3, [r7, #20]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	2400173c 	.word	0x2400173c
 8008730:	2400171c 	.word	0x2400171c
 8008734:	24001244 	.word	0x24001244
 8008738:	240016d4 	.word	0x240016d4
 800873c:	24001240 	.word	0x24001240
 8008740:	24001728 	.word	0x24001728

08008744 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800874c:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <vTaskInternalSetTimeOutState+0x24>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008754:	4b05      	ldr	r3, [pc, #20]	@ (800876c <vTaskInternalSetTimeOutState+0x28>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	605a      	str	r2, [r3, #4]
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	2400172c 	.word	0x2400172c
 800876c:	24001718 	.word	0x24001718

08008770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10b      	bne.n	8008798 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	613b      	str	r3, [r7, #16]
}
 8008792:	bf00      	nop
 8008794:	bf00      	nop
 8008796:	e7fd      	b.n	8008794 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	60fb      	str	r3, [r7, #12]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80087b6:	f000 ff97 	bl	80096e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008830 <xTaskCheckForTimeOut+0xc0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d2:	d102      	bne.n	80087da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61fb      	str	r3, [r7, #28]
 80087d8:	e023      	b.n	8008822 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b15      	ldr	r3, [pc, #84]	@ (8008834 <xTaskCheckForTimeOut+0xc4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d007      	beq.n	80087f6 <xTaskCheckForTimeOut+0x86>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	e015      	b.n	8008822 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d20b      	bcs.n	8008818 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff ff99 	bl	8008744 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	e004      	b.n	8008822 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800881e:	2301      	movs	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008822:	f000 ff93 	bl	800974c <vPortExitCritical>

	return xReturn;
 8008826:	69fb      	ldr	r3, [r7, #28]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	24001718 	.word	0x24001718
 8008834:	2400172c 	.word	0x2400172c

08008838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800883c:	4b03      	ldr	r3, [pc, #12]	@ (800884c <vTaskMissedYield+0x14>)
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
}
 8008842:	bf00      	nop
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	24001728 	.word	0x24001728

08008850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008858:	f000 f854 	bl	8008904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800885c:	4b07      	ldr	r3, [pc, #28]	@ (800887c <prvIdleTask+0x2c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d907      	bls.n	8008874 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008864:	4b06      	ldr	r3, [pc, #24]	@ (8008880 <prvIdleTask+0x30>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008874:	f7f7 fefc 	bl	8000670 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008878:	e7ee      	b.n	8008858 <prvIdleTask+0x8>
 800887a:	bf00      	nop
 800887c:	24001244 	.word	0x24001244
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800888a:	2300      	movs	r3, #0
 800888c:	607b      	str	r3, [r7, #4]
 800888e:	e00c      	b.n	80088aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4a12      	ldr	r2, [pc, #72]	@ (80088e4 <prvInitialiseTaskLists+0x60>)
 800889c:	4413      	add	r3, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe f8fa 	bl	8006a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3301      	adds	r3, #1
 80088a8:	607b      	str	r3, [r7, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b37      	cmp	r3, #55	@ 0x37
 80088ae:	d9ef      	bls.n	8008890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088b0:	480d      	ldr	r0, [pc, #52]	@ (80088e8 <prvInitialiseTaskLists+0x64>)
 80088b2:	f7fe f8f1 	bl	8006a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088b6:	480d      	ldr	r0, [pc, #52]	@ (80088ec <prvInitialiseTaskLists+0x68>)
 80088b8:	f7fe f8ee 	bl	8006a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088bc:	480c      	ldr	r0, [pc, #48]	@ (80088f0 <prvInitialiseTaskLists+0x6c>)
 80088be:	f7fe f8eb 	bl	8006a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088c2:	480c      	ldr	r0, [pc, #48]	@ (80088f4 <prvInitialiseTaskLists+0x70>)
 80088c4:	f7fe f8e8 	bl	8006a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088c8:	480b      	ldr	r0, [pc, #44]	@ (80088f8 <prvInitialiseTaskLists+0x74>)
 80088ca:	f7fe f8e5 	bl	8006a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088ce:	4b0b      	ldr	r3, [pc, #44]	@ (80088fc <prvInitialiseTaskLists+0x78>)
 80088d0:	4a05      	ldr	r2, [pc, #20]	@ (80088e8 <prvInitialiseTaskLists+0x64>)
 80088d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008900 <prvInitialiseTaskLists+0x7c>)
 80088d6:	4a05      	ldr	r2, [pc, #20]	@ (80088ec <prvInitialiseTaskLists+0x68>)
 80088d8:	601a      	str	r2, [r3, #0]
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	24001244 	.word	0x24001244
 80088e8:	240016a4 	.word	0x240016a4
 80088ec:	240016b8 	.word	0x240016b8
 80088f0:	240016d4 	.word	0x240016d4
 80088f4:	240016e8 	.word	0x240016e8
 80088f8:	24001700 	.word	0x24001700
 80088fc:	240016cc 	.word	0x240016cc
 8008900:	240016d0 	.word	0x240016d0

08008904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800890a:	e019      	b.n	8008940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800890c:	f000 feec 	bl	80096e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008910:	4b10      	ldr	r3, [pc, #64]	@ (8008954 <prvCheckTasksWaitingTermination+0x50>)
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe f945 	bl	8006bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008922:	4b0d      	ldr	r3, [pc, #52]	@ (8008958 <prvCheckTasksWaitingTermination+0x54>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3b01      	subs	r3, #1
 8008928:	4a0b      	ldr	r2, [pc, #44]	@ (8008958 <prvCheckTasksWaitingTermination+0x54>)
 800892a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800892c:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <prvCheckTasksWaitingTermination+0x58>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3b01      	subs	r3, #1
 8008932:	4a0a      	ldr	r2, [pc, #40]	@ (800895c <prvCheckTasksWaitingTermination+0x58>)
 8008934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008936:	f000 ff09 	bl	800974c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f810 	bl	8008960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008940:	4b06      	ldr	r3, [pc, #24]	@ (800895c <prvCheckTasksWaitingTermination+0x58>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e1      	bne.n	800890c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	240016e8 	.word	0x240016e8
 8008958:	24001714 	.word	0x24001714
 800895c:	240016fc 	.word	0x240016fc

08008960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3354      	adds	r3, #84	@ 0x54
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fb0d 	bl	8009f8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008978:	2b00      	cmp	r3, #0
 800897a:	d108      	bne.n	800898e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008980:	4618      	mov	r0, r3
 8008982:	f001 f819 	bl	80099b8 <vPortFree>
				vPortFree( pxTCB );
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 f816 	bl	80099b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800898c:	e019      	b.n	80089c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008994:	2b01      	cmp	r3, #1
 8008996:	d103      	bne.n	80089a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 f80d 	bl	80099b8 <vPortFree>
	}
 800899e:	e010      	b.n	80089c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d00b      	beq.n	80089c2 <prvDeleteTCB+0x62>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60fb      	str	r3, [r7, #12]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <prvDeleteTCB+0x5e>
	}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008a04 <prvResetNextTaskUnblockTime+0x38>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a08 <prvResetNextTaskUnblockTime+0x3c>)
 80089de:	f04f 32ff 	mov.w	r2, #4294967295
 80089e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089e4:	e008      	b.n	80089f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e6:	4b07      	ldr	r3, [pc, #28]	@ (8008a04 <prvResetNextTaskUnblockTime+0x38>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4a04      	ldr	r2, [pc, #16]	@ (8008a08 <prvResetNextTaskUnblockTime+0x3c>)
 80089f6:	6013      	str	r3, [r2, #0]
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	240016cc 	.word	0x240016cc
 8008a08:	24001734 	.word	0x24001734

08008a0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a12:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <xTaskGetSchedulerState+0x34>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d102      	bne.n	8008a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	607b      	str	r3, [r7, #4]
 8008a1e:	e008      	b.n	8008a32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a20:	4b08      	ldr	r3, [pc, #32]	@ (8008a44 <xTaskGetSchedulerState+0x38>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d102      	bne.n	8008a2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a28:	2302      	movs	r3, #2
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	e001      	b.n	8008a32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a32:	687b      	ldr	r3, [r7, #4]
	}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	24001720 	.word	0x24001720
 8008a44:	2400173c 	.word	0x2400173c

08008a48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d051      	beq.n	8008b02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a62:	4b2a      	ldr	r3, [pc, #168]	@ (8008b0c <xTaskPriorityInherit+0xc4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d241      	bcs.n	8008af0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	db06      	blt.n	8008a82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a74:	4b25      	ldr	r3, [pc, #148]	@ (8008b0c <xTaskPriorityInherit+0xc4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6959      	ldr	r1, [r3, #20]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4a1f      	ldr	r2, [pc, #124]	@ (8008b10 <xTaskPriorityInherit+0xc8>)
 8008a94:	4413      	add	r3, r2
 8008a96:	4299      	cmp	r1, r3
 8008a98:	d122      	bne.n	8008ae0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe f884 	bl	8006bac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aa4:	4b19      	ldr	r3, [pc, #100]	@ (8008b0c <xTaskPriorityInherit+0xc4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab2:	4b18      	ldr	r3, [pc, #96]	@ (8008b14 <xTaskPriorityInherit+0xcc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d903      	bls.n	8008ac2 <xTaskPriorityInherit+0x7a>
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	4a15      	ldr	r2, [pc, #84]	@ (8008b14 <xTaskPriorityInherit+0xcc>)
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4a10      	ldr	r2, [pc, #64]	@ (8008b10 <xTaskPriorityInherit+0xc8>)
 8008ad0:	441a      	add	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4610      	mov	r0, r2
 8008ada:	f7fe f80a 	bl	8006af2 <vListInsertEnd>
 8008ade:	e004      	b.n	8008aea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8008b0c <xTaskPriorityInherit+0xc4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008aea:	2301      	movs	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	e008      	b.n	8008b02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008af4:	4b05      	ldr	r3, [pc, #20]	@ (8008b0c <xTaskPriorityInherit+0xc4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d201      	bcs.n	8008b02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008afe:	2301      	movs	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b02:	68fb      	ldr	r3, [r7, #12]
	}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	24001240 	.word	0x24001240
 8008b10:	24001244 	.word	0x24001244
 8008b14:	2400171c 	.word	0x2400171c

08008b18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d058      	beq.n	8008be0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8008bec <xTaskPriorityDisinherit+0xd4>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d00b      	beq.n	8008b50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	60fb      	str	r3, [r7, #12]
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	e7fd      	b.n	8008b4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60bb      	str	r3, [r7, #8]
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b74:	1e5a      	subs	r2, r3, #1
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d02c      	beq.n	8008be0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d128      	bne.n	8008be0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe f80a 	bl	8006bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf0 <xTaskPriorityDisinherit+0xd8>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d903      	bls.n	8008bc0 <xTaskPriorityDisinherit+0xa8>
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf0 <xTaskPriorityDisinherit+0xd8>)
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4a09      	ldr	r2, [pc, #36]	@ (8008bf4 <xTaskPriorityDisinherit+0xdc>)
 8008bce:	441a      	add	r2, r3
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f7fd ff8b 	bl	8006af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008be0:	697b      	ldr	r3, [r7, #20]
	}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	24001240 	.word	0x24001240
 8008bf0:	2400171c 	.word	0x2400171c
 8008bf4:	24001244 	.word	0x24001244

08008bf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c06:	2301      	movs	r3, #1
 8008c08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d06c      	beq.n	8008cea <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	60fb      	str	r3, [r7, #12]
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d902      	bls.n	8008c40 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	e002      	b.n	8008c46 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c44:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4a:	69fa      	ldr	r2, [r7, #28]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d04c      	beq.n	8008cea <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d147      	bne.n	8008cea <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c5a:	4b26      	ldr	r3, [pc, #152]	@ (8008cf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d10b      	bne.n	8008c7c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	60bb      	str	r3, [r7, #8]
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	e7fd      	b.n	8008c78 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	db04      	blt.n	8008c9a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	6959      	ldr	r1, [r3, #20]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4a13      	ldr	r2, [pc, #76]	@ (8008cf8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008caa:	4413      	add	r3, r2
 8008cac:	4299      	cmp	r1, r3
 8008cae:	d11c      	bne.n	8008cea <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fd ff79 	bl	8006bac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008cfc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d903      	bls.n	8008cce <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cca:	4a0c      	ldr	r2, [pc, #48]	@ (8008cfc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4a07      	ldr	r2, [pc, #28]	@ (8008cf8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008cdc:	441a      	add	r2, r3
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	f7fd ff04 	bl	8006af2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cea:	bf00      	nop
 8008cec:	3720      	adds	r7, #32
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	24001240 	.word	0x24001240
 8008cf8:	24001244 	.word	0x24001244
 8008cfc:	2400171c 	.word	0x2400171c

08008d00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d04:	4b07      	ldr	r3, [pc, #28]	@ (8008d24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d0c:	4b05      	ldr	r3, [pc, #20]	@ (8008d24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d12:	3201      	adds	r2, #1
 8008d14:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008d16:	4b03      	ldr	r3, [pc, #12]	@ (8008d24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d18:	681b      	ldr	r3, [r3, #0]
	}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	24001240 	.word	0x24001240

08008d28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d32:	4b21      	ldr	r3, [pc, #132]	@ (8008db8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d38:	4b20      	ldr	r3, [pc, #128]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd ff34 	bl	8006bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4a:	d10a      	bne.n	8008d62 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d007      	beq.n	8008d62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d52:	4b1a      	ldr	r3, [pc, #104]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4819      	ldr	r0, [pc, #100]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d5c:	f7fd fec9 	bl	8006af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d60:	e026      	b.n	8008db0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4413      	add	r3, r2
 8008d68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d6a:	4b14      	ldr	r3, [pc, #80]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d209      	bcs.n	8008d8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d7a:	4b12      	ldr	r3, [pc, #72]	@ (8008dc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3304      	adds	r3, #4
 8008d84:	4619      	mov	r1, r3
 8008d86:	4610      	mov	r0, r2
 8008d88:	f7fd fed7 	bl	8006b3a <vListInsert>
}
 8008d8c:	e010      	b.n	8008db0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	4b0a      	ldr	r3, [pc, #40]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f7fd fecd 	bl	8006b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008da0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d202      	bcs.n	8008db0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008daa:	4a08      	ldr	r2, [pc, #32]	@ (8008dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	6013      	str	r3, [r2, #0]
}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	24001718 	.word	0x24001718
 8008dbc:	24001240 	.word	0x24001240
 8008dc0:	24001700 	.word	0x24001700
 8008dc4:	240016d0 	.word	0x240016d0
 8008dc8:	240016cc 	.word	0x240016cc
 8008dcc:	24001734 	.word	0x24001734

08008dd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	@ 0x28
 8008dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dda:	f000 fb13 	bl	8009404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dde:	4b1d      	ldr	r3, [pc, #116]	@ (8008e54 <xTimerCreateTimerTask+0x84>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d021      	beq.n	8008e2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dee:	1d3a      	adds	r2, r7, #4
 8008df0:	f107 0108 	add.w	r1, r7, #8
 8008df4:	f107 030c 	add.w	r3, r7, #12
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fd fe33 	bl	8006a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	9202      	str	r2, [sp, #8]
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	2302      	movs	r3, #2
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	460a      	mov	r2, r1
 8008e10:	4911      	ldr	r1, [pc, #68]	@ (8008e58 <xTimerCreateTimerTask+0x88>)
 8008e12:	4812      	ldr	r0, [pc, #72]	@ (8008e5c <xTimerCreateTimerTask+0x8c>)
 8008e14:	f7fe ff20 	bl	8007c58 <xTaskCreateStatic>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	4a11      	ldr	r2, [pc, #68]	@ (8008e60 <xTimerCreateTimerTask+0x90>)
 8008e1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e1e:	4b10      	ldr	r3, [pc, #64]	@ (8008e60 <xTimerCreateTimerTask+0x90>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e26:	2301      	movs	r3, #1
 8008e28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10b      	bne.n	8008e48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	613b      	str	r3, [r7, #16]
}
 8008e42:	bf00      	nop
 8008e44:	bf00      	nop
 8008e46:	e7fd      	b.n	8008e44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e48:	697b      	ldr	r3, [r7, #20]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	24001770 	.word	0x24001770
 8008e58:	0800ab08 	.word	0x0800ab08
 8008e5c:	08008f9d 	.word	0x08008f9d
 8008e60:	24001774 	.word	0x24001774

08008e64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	@ 0x28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10b      	bne.n	8008e94 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	623b      	str	r3, [r7, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	e7fd      	b.n	8008e90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e94:	4b19      	ldr	r3, [pc, #100]	@ (8008efc <xTimerGenericCommand+0x98>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d02a      	beq.n	8008ef2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	dc18      	bgt.n	8008ee0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008eae:	f7ff fdad 	bl	8008a0c <xTaskGetSchedulerState>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d109      	bne.n	8008ecc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008eb8:	4b10      	ldr	r3, [pc, #64]	@ (8008efc <xTimerGenericCommand+0x98>)
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	f107 0110 	add.w	r1, r7, #16
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec4:	f7fe f850 	bl	8006f68 <xQueueGenericSend>
 8008ec8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008eca:	e012      	b.n	8008ef2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8008efc <xTimerGenericCommand+0x98>)
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	f107 0110 	add.w	r1, r7, #16
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f7fe f846 	bl	8006f68 <xQueueGenericSend>
 8008edc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ede:	e008      	b.n	8008ef2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ee0:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <xTimerGenericCommand+0x98>)
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	f107 0110 	add.w	r1, r7, #16
 8008ee8:	2300      	movs	r3, #0
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	f7fe f93e 	bl	800716c <xQueueGenericSendFromISR>
 8008ef0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3728      	adds	r7, #40	@ 0x28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	24001770 	.word	0x24001770

08008f00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0a:	4b23      	ldr	r3, [pc, #140]	@ (8008f98 <prvProcessExpiredTimer+0x98>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fd fe47 	bl	8006bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f24:	f003 0304 	and.w	r3, r3, #4
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d023      	beq.n	8008f74 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	699a      	ldr	r2, [r3, #24]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	18d1      	adds	r1, r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	6978      	ldr	r0, [r7, #20]
 8008f3a:	f000 f8d5 	bl	80090e8 <prvInsertTimerInActiveList>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d020      	beq.n	8008f86 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f44:	2300      	movs	r3, #0
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	6978      	ldr	r0, [r7, #20]
 8008f50:	f7ff ff88 	bl	8008e64 <xTimerGenericCommand>
 8008f54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d114      	bne.n	8008f86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	60fb      	str	r3, [r7, #12]
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	e7fd      	b.n	8008f70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	6978      	ldr	r0, [r7, #20]
 8008f8c:	4798      	blx	r3
}
 8008f8e:	bf00      	nop
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	24001768 	.word	0x24001768

08008f9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fa4:	f107 0308 	add.w	r3, r7, #8
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 f859 	bl	8009060 <prvGetNextExpireTime>
 8008fae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f805 	bl	8008fc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fba:	f000 f8d7 	bl	800916c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fbe:	bf00      	nop
 8008fc0:	e7f0      	b.n	8008fa4 <prvTimerTask+0x8>
	...

08008fc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fce:	f7ff f8f1 	bl	80081b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fd2:	f107 0308 	add.w	r3, r7, #8
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f866 	bl	80090a8 <prvSampleTimeNow>
 8008fdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d130      	bne.n	8009046 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10a      	bne.n	8009000 <prvProcessTimerOrBlockTask+0x3c>
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d806      	bhi.n	8009000 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ff2:	f7ff f8ed 	bl	80081d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ff6:	68f9      	ldr	r1, [r7, #12]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ff81 	bl	8008f00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ffe:	e024      	b.n	800904a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009006:	4b13      	ldr	r3, [pc, #76]	@ (8009054 <prvProcessTimerOrBlockTask+0x90>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <prvProcessTimerOrBlockTask+0x50>
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <prvProcessTimerOrBlockTask+0x52>
 8009014:	2300      	movs	r3, #0
 8009016:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009018:	4b0f      	ldr	r3, [pc, #60]	@ (8009058 <prvProcessTimerOrBlockTask+0x94>)
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4619      	mov	r1, r3
 8009026:	f7fe fde3 	bl	8007bf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800902a:	f7ff f8d1 	bl	80081d0 <xTaskResumeAll>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10a      	bne.n	800904a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009034:	4b09      	ldr	r3, [pc, #36]	@ (800905c <prvProcessTimerOrBlockTask+0x98>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
}
 8009044:	e001      	b.n	800904a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009046:	f7ff f8c3 	bl	80081d0 <xTaskResumeAll>
}
 800904a:	bf00      	nop
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	2400176c 	.word	0x2400176c
 8009058:	24001770 	.word	0x24001770
 800905c:	e000ed04 	.word	0xe000ed04

08009060 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009068:	4b0e      	ldr	r3, [pc, #56]	@ (80090a4 <prvGetNextExpireTime+0x44>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <prvGetNextExpireTime+0x16>
 8009072:	2201      	movs	r2, #1
 8009074:	e000      	b.n	8009078 <prvGetNextExpireTime+0x18>
 8009076:	2200      	movs	r2, #0
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009084:	4b07      	ldr	r3, [pc, #28]	@ (80090a4 <prvGetNextExpireTime+0x44>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	e001      	b.n	8009094 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009094:	68fb      	ldr	r3, [r7, #12]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	24001768 	.word	0x24001768

080090a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090b0:	f7ff f92c 	bl	800830c <xTaskGetTickCount>
 80090b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090b6:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <prvSampleTimeNow+0x3c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d205      	bcs.n	80090cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090c0:	f000 f93a 	bl	8009338 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	e002      	b.n	80090d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090d2:	4a04      	ldr	r2, [pc, #16]	@ (80090e4 <prvSampleTimeNow+0x3c>)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090d8:	68fb      	ldr	r3, [r7, #12]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	24001778 	.word	0x24001778

080090e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	429a      	cmp	r2, r3
 800910c:	d812      	bhi.n	8009134 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	1ad2      	subs	r2, r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	429a      	cmp	r2, r3
 800911a:	d302      	bcc.n	8009122 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e01b      	b.n	800915a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009122:	4b10      	ldr	r3, [pc, #64]	@ (8009164 <prvInsertTimerInActiveList+0x7c>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3304      	adds	r3, #4
 800912a:	4619      	mov	r1, r3
 800912c:	4610      	mov	r0, r2
 800912e:	f7fd fd04 	bl	8006b3a <vListInsert>
 8009132:	e012      	b.n	800915a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d206      	bcs.n	800914a <prvInsertTimerInActiveList+0x62>
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d302      	bcc.n	800914a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009144:	2301      	movs	r3, #1
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	e007      	b.n	800915a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800914a:	4b07      	ldr	r3, [pc, #28]	@ (8009168 <prvInsertTimerInActiveList+0x80>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3304      	adds	r3, #4
 8009152:	4619      	mov	r1, r3
 8009154:	4610      	mov	r0, r2
 8009156:	f7fd fcf0 	bl	8006b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800915a:	697b      	ldr	r3, [r7, #20]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	2400176c 	.word	0x2400176c
 8009168:	24001768 	.word	0x24001768

0800916c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08e      	sub	sp, #56	@ 0x38
 8009170:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009172:	e0ce      	b.n	8009312 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	da19      	bge.n	80091ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800917a:	1d3b      	adds	r3, r7, #4
 800917c:	3304      	adds	r3, #4
 800917e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	61fb      	str	r3, [r7, #28]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800919e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091a4:	6850      	ldr	r0, [r2, #4]
 80091a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091a8:	6892      	ldr	r2, [r2, #8]
 80091aa:	4611      	mov	r1, r2
 80091ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f2c0 80ae 	blt.w	8009312 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d004      	beq.n	80091cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c4:	3304      	adds	r3, #4
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fd fcf0 	bl	8006bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091cc:	463b      	mov	r3, r7
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff ff6a 	bl	80090a8 <prvSampleTimeNow>
 80091d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b09      	cmp	r3, #9
 80091da:	f200 8097 	bhi.w	800930c <prvProcessReceivedCommands+0x1a0>
 80091de:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <prvProcessReceivedCommands+0x78>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	0800920d 	.word	0x0800920d
 80091e8:	0800920d 	.word	0x0800920d
 80091ec:	0800920d 	.word	0x0800920d
 80091f0:	08009283 	.word	0x08009283
 80091f4:	08009297 	.word	0x08009297
 80091f8:	080092e3 	.word	0x080092e3
 80091fc:	0800920d 	.word	0x0800920d
 8009200:	0800920d 	.word	0x0800920d
 8009204:	08009283 	.word	0x08009283
 8009208:	08009297 	.word	0x08009297
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800920c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	b2da      	uxtb	r2, r3
 8009218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	18d1      	adds	r1, r2, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800922a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800922c:	f7ff ff5c 	bl	80090e8 <prvInsertTimerInActiveList>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d06c      	beq.n	8009310 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800923c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	d061      	beq.n	8009310 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	441a      	add	r2, r3
 8009254:	2300      	movs	r3, #0
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	2300      	movs	r3, #0
 800925a:	2100      	movs	r1, #0
 800925c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800925e:	f7ff fe01 	bl	8008e64 <xTimerGenericCommand>
 8009262:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d152      	bne.n	8009310 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	61bb      	str	r3, [r7, #24]
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	e7fd      	b.n	800927e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009288:	f023 0301 	bic.w	r3, r3, #1
 800928c:	b2da      	uxtb	r2, r3
 800928e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009290:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009294:	e03d      	b.n	8009312 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800929c:	f043 0301 	orr.w	r3, r3, #1
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	617b      	str	r3, [r7, #20]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	18d1      	adds	r1, r2, r3
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092dc:	f7ff ff04 	bl	80090e8 <prvInsertTimerInActiveList>
					break;
 80092e0:	e017      	b.n	8009312 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d103      	bne.n	80092f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80092f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092f2:	f000 fb61 	bl	80099b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092f6:	e00c      	b.n	8009312 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092fe:	f023 0301 	bic.w	r3, r3, #1
 8009302:	b2da      	uxtb	r2, r3
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800930a:	e002      	b.n	8009312 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800930c:	bf00      	nop
 800930e:	e000      	b.n	8009312 <prvProcessReceivedCommands+0x1a6>
					break;
 8009310:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009312:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <prvProcessReceivedCommands+0x1c8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	1d39      	adds	r1, r7, #4
 8009318:	2200      	movs	r2, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe f854 	bl	80073c8 <xQueueReceive>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	f47f af26 	bne.w	8009174 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	3730      	adds	r7, #48	@ 0x30
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	24001770 	.word	0x24001770

08009338 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800933e:	e049      	b.n	80093d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009340:	4b2e      	ldr	r3, [pc, #184]	@ (80093fc <prvSwitchTimerLists+0xc4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934a:	4b2c      	ldr	r3, [pc, #176]	@ (80093fc <prvSwitchTimerLists+0xc4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3304      	adds	r3, #4
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd fc27 	bl	8006bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d02f      	beq.n	80093d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	4413      	add	r3, r2
 800937c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	429a      	cmp	r2, r3
 8009384:	d90e      	bls.n	80093a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009392:	4b1a      	ldr	r3, [pc, #104]	@ (80093fc <prvSwitchTimerLists+0xc4>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fd fbcc 	bl	8006b3a <vListInsert>
 80093a2:	e017      	b.n	80093d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	2100      	movs	r1, #0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff fd58 	bl	8008e64 <xTimerGenericCommand>
 80093b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10b      	bne.n	80093d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	603b      	str	r3, [r7, #0]
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d4:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <prvSwitchTimerLists+0xc4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1b0      	bne.n	8009340 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093de:	4b07      	ldr	r3, [pc, #28]	@ (80093fc <prvSwitchTimerLists+0xc4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093e4:	4b06      	ldr	r3, [pc, #24]	@ (8009400 <prvSwitchTimerLists+0xc8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a04      	ldr	r2, [pc, #16]	@ (80093fc <prvSwitchTimerLists+0xc4>)
 80093ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093ec:	4a04      	ldr	r2, [pc, #16]	@ (8009400 <prvSwitchTimerLists+0xc8>)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	6013      	str	r3, [r2, #0]
}
 80093f2:	bf00      	nop
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	24001768 	.word	0x24001768
 8009400:	2400176c 	.word	0x2400176c

08009404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800940a:	f000 f96d 	bl	80096e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800940e:	4b15      	ldr	r3, [pc, #84]	@ (8009464 <prvCheckForValidListAndQueue+0x60>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d120      	bne.n	8009458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009416:	4814      	ldr	r0, [pc, #80]	@ (8009468 <prvCheckForValidListAndQueue+0x64>)
 8009418:	f7fd fb3e 	bl	8006a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800941c:	4813      	ldr	r0, [pc, #76]	@ (800946c <prvCheckForValidListAndQueue+0x68>)
 800941e:	f7fd fb3b 	bl	8006a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009422:	4b13      	ldr	r3, [pc, #76]	@ (8009470 <prvCheckForValidListAndQueue+0x6c>)
 8009424:	4a10      	ldr	r2, [pc, #64]	@ (8009468 <prvCheckForValidListAndQueue+0x64>)
 8009426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009428:	4b12      	ldr	r3, [pc, #72]	@ (8009474 <prvCheckForValidListAndQueue+0x70>)
 800942a:	4a10      	ldr	r2, [pc, #64]	@ (800946c <prvCheckForValidListAndQueue+0x68>)
 800942c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800942e:	2300      	movs	r3, #0
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	4b11      	ldr	r3, [pc, #68]	@ (8009478 <prvCheckForValidListAndQueue+0x74>)
 8009434:	4a11      	ldr	r2, [pc, #68]	@ (800947c <prvCheckForValidListAndQueue+0x78>)
 8009436:	2110      	movs	r1, #16
 8009438:	200a      	movs	r0, #10
 800943a:	f7fd fc4b 	bl	8006cd4 <xQueueGenericCreateStatic>
 800943e:	4603      	mov	r3, r0
 8009440:	4a08      	ldr	r2, [pc, #32]	@ (8009464 <prvCheckForValidListAndQueue+0x60>)
 8009442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009444:	4b07      	ldr	r3, [pc, #28]	@ (8009464 <prvCheckForValidListAndQueue+0x60>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800944c:	4b05      	ldr	r3, [pc, #20]	@ (8009464 <prvCheckForValidListAndQueue+0x60>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	490b      	ldr	r1, [pc, #44]	@ (8009480 <prvCheckForValidListAndQueue+0x7c>)
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fb78 	bl	8007b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009458:	f000 f978 	bl	800974c <vPortExitCritical>
}
 800945c:	bf00      	nop
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	24001770 	.word	0x24001770
 8009468:	24001740 	.word	0x24001740
 800946c:	24001754 	.word	0x24001754
 8009470:	24001768 	.word	0x24001768
 8009474:	2400176c 	.word	0x2400176c
 8009478:	2400181c 	.word	0x2400181c
 800947c:	2400177c 	.word	0x2400177c
 8009480:	0800ab10 	.word	0x0800ab10

08009484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3b04      	subs	r3, #4
 8009494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800949c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3b04      	subs	r3, #4
 80094a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f023 0201 	bic.w	r2, r3, #1
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3b04      	subs	r3, #4
 80094b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094b4:	4a0c      	ldr	r2, [pc, #48]	@ (80094e8 <pxPortInitialiseStack+0x64>)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3b14      	subs	r3, #20
 80094be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3b04      	subs	r3, #4
 80094ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f06f 0202 	mvn.w	r2, #2
 80094d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3b20      	subs	r3, #32
 80094d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094da:	68fb      	ldr	r3, [r7, #12]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	080094ed 	.word	0x080094ed

080094ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094f6:	4b13      	ldr	r3, [pc, #76]	@ (8009544 <prvTaskExitError+0x58>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fe:	d00b      	beq.n	8009518 <prvTaskExitError+0x2c>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	60fb      	str	r3, [r7, #12]
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	e7fd      	b.n	8009514 <prvTaskExitError+0x28>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	60bb      	str	r3, [r7, #8]
}
 800952a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800952c:	bf00      	nop
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0fc      	beq.n	800952e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	24000010 	.word	0x24000010
	...

08009550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009550:	4b07      	ldr	r3, [pc, #28]	@ (8009570 <pxCurrentTCBConst2>)
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	6808      	ldr	r0, [r1, #0]
 8009556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955a:	f380 8809 	msr	PSP, r0
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8811 	msr	BASEPRI, r0
 800956a:	4770      	bx	lr
 800956c:	f3af 8000 	nop.w

08009570 <pxCurrentTCBConst2>:
 8009570:	24001240 	.word	0x24001240
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop

08009578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009578:	4808      	ldr	r0, [pc, #32]	@ (800959c <prvPortStartFirstTask+0x24>)
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f380 8808 	msr	MSP, r0
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8814 	msr	CONTROL, r0
 800958a:	b662      	cpsie	i
 800958c:	b661      	cpsie	f
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	df00      	svc	0
 8009598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800959a:	bf00      	nop
 800959c:	e000ed08 	.word	0xe000ed08

080095a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095a6:	4b47      	ldr	r3, [pc, #284]	@ (80096c4 <xPortStartScheduler+0x124>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a47      	ldr	r2, [pc, #284]	@ (80096c8 <xPortStartScheduler+0x128>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10b      	bne.n	80095c8 <xPortStartScheduler+0x28>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095c8:	4b3e      	ldr	r3, [pc, #248]	@ (80096c4 <xPortStartScheduler+0x124>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a3f      	ldr	r2, [pc, #252]	@ (80096cc <xPortStartScheduler+0x12c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d10b      	bne.n	80095ea <xPortStartScheduler+0x4a>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	60fb      	str	r3, [r7, #12]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095ea:	4b39      	ldr	r3, [pc, #228]	@ (80096d0 <xPortStartScheduler+0x130>)
 80095ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	22ff      	movs	r2, #255	@ 0xff
 80095fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800960c:	b2da      	uxtb	r2, r3
 800960e:	4b31      	ldr	r3, [pc, #196]	@ (80096d4 <xPortStartScheduler+0x134>)
 8009610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009612:	4b31      	ldr	r3, [pc, #196]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009614:	2207      	movs	r2, #7
 8009616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009618:	e009      	b.n	800962e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800961a:	4b2f      	ldr	r3, [pc, #188]	@ (80096d8 <xPortStartScheduler+0x138>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3b01      	subs	r3, #1
 8009620:	4a2d      	ldr	r2, [pc, #180]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	b2db      	uxtb	r3, r3
 800962c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009636:	2b80      	cmp	r3, #128	@ 0x80
 8009638:	d0ef      	beq.n	800961a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800963a:	4b27      	ldr	r3, [pc, #156]	@ (80096d8 <xPortStartScheduler+0x138>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f1c3 0307 	rsb	r3, r3, #7
 8009642:	2b04      	cmp	r3, #4
 8009644:	d00b      	beq.n	800965e <xPortStartScheduler+0xbe>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	60bb      	str	r3, [r7, #8]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800965e:	4b1e      	ldr	r3, [pc, #120]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	021b      	lsls	r3, r3, #8
 8009664:	4a1c      	ldr	r2, [pc, #112]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009668:	4b1b      	ldr	r3, [pc, #108]	@ (80096d8 <xPortStartScheduler+0x138>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009670:	4a19      	ldr	r2, [pc, #100]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	b2da      	uxtb	r2, r3
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800967c:	4b17      	ldr	r3, [pc, #92]	@ (80096dc <xPortStartScheduler+0x13c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a16      	ldr	r2, [pc, #88]	@ (80096dc <xPortStartScheduler+0x13c>)
 8009682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009688:	4b14      	ldr	r3, [pc, #80]	@ (80096dc <xPortStartScheduler+0x13c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a13      	ldr	r2, [pc, #76]	@ (80096dc <xPortStartScheduler+0x13c>)
 800968e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009694:	f000 f8da 	bl	800984c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009698:	4b11      	ldr	r3, [pc, #68]	@ (80096e0 <xPortStartScheduler+0x140>)
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800969e:	f000 f8f9 	bl	8009894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096a2:	4b10      	ldr	r3, [pc, #64]	@ (80096e4 <xPortStartScheduler+0x144>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a0f      	ldr	r2, [pc, #60]	@ (80096e4 <xPortStartScheduler+0x144>)
 80096a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80096ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096ae:	f7ff ff63 	bl	8009578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096b2:	f7fe ff07 	bl	80084c4 <vTaskSwitchContext>
	prvTaskExitError();
 80096b6:	f7ff ff19 	bl	80094ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	e000ed00 	.word	0xe000ed00
 80096c8:	410fc271 	.word	0x410fc271
 80096cc:	410fc270 	.word	0x410fc270
 80096d0:	e000e400 	.word	0xe000e400
 80096d4:	2400186c 	.word	0x2400186c
 80096d8:	24001870 	.word	0x24001870
 80096dc:	e000ed20 	.word	0xe000ed20
 80096e0:	24000010 	.word	0x24000010
 80096e4:	e000ef34 	.word	0xe000ef34

080096e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009702:	4b10      	ldr	r3, [pc, #64]	@ (8009744 <vPortEnterCritical+0x5c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3301      	adds	r3, #1
 8009708:	4a0e      	ldr	r2, [pc, #56]	@ (8009744 <vPortEnterCritical+0x5c>)
 800970a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800970c:	4b0d      	ldr	r3, [pc, #52]	@ (8009744 <vPortEnterCritical+0x5c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d110      	bne.n	8009736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009714:	4b0c      	ldr	r3, [pc, #48]	@ (8009748 <vPortEnterCritical+0x60>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00b      	beq.n	8009736 <vPortEnterCritical+0x4e>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	603b      	str	r3, [r7, #0]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <vPortEnterCritical+0x4a>
	}
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	24000010 	.word	0x24000010
 8009748:	e000ed04 	.word	0xe000ed04

0800974c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009752:	4b12      	ldr	r3, [pc, #72]	@ (800979c <vPortExitCritical+0x50>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10b      	bne.n	8009772 <vPortExitCritical+0x26>
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	607b      	str	r3, [r7, #4]
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	e7fd      	b.n	800976e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009772:	4b0a      	ldr	r3, [pc, #40]	@ (800979c <vPortExitCritical+0x50>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3b01      	subs	r3, #1
 8009778:	4a08      	ldr	r2, [pc, #32]	@ (800979c <vPortExitCritical+0x50>)
 800977a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800977c:	4b07      	ldr	r3, [pc, #28]	@ (800979c <vPortExitCritical+0x50>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <vPortExitCritical+0x44>
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	24000010 	.word	0x24000010

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b15      	ldr	r3, [pc, #84]	@ (8009800 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f01e 0f10 	tst.w	lr, #16
 80097b0:	bf08      	it	eq
 80097b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	6010      	str	r0, [r2, #0]
 80097bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80097c4:	f380 8811 	msr	BASEPRI, r0
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f7fe fe78 	bl	80084c4 <vTaskSwitchContext>
 80097d4:	f04f 0000 	mov.w	r0, #0
 80097d8:	f380 8811 	msr	BASEPRI, r0
 80097dc:	bc09      	pop	{r0, r3}
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	6808      	ldr	r0, [r1, #0]
 80097e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e6:	f01e 0f10 	tst.w	lr, #16
 80097ea:	bf08      	it	eq
 80097ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097f0:	f380 8809 	msr	PSP, r0
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst>:
 8009800:	24001240 	.word	0x24001240
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
}
 8009820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009822:	f7fe fd95 	bl	8008350 <xTaskIncrementTick>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800982c:	4b06      	ldr	r3, [pc, #24]	@ (8009848 <xPortSysTickHandler+0x40>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	2300      	movs	r3, #0
 8009836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f383 8811 	msr	BASEPRI, r3
}
 800983e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009850:	4b0b      	ldr	r3, [pc, #44]	@ (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009856:	4b0b      	ldr	r3, [pc, #44]	@ (8009884 <vPortSetupTimerInterrupt+0x38>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800985c:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <vPortSetupTimerInterrupt+0x3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a0a      	ldr	r2, [pc, #40]	@ (800988c <vPortSetupTimerInterrupt+0x40>)
 8009862:	fba2 2303 	umull	r2, r3, r2, r3
 8009866:	099b      	lsrs	r3, r3, #6
 8009868:	4a09      	ldr	r2, [pc, #36]	@ (8009890 <vPortSetupTimerInterrupt+0x44>)
 800986a:	3b01      	subs	r3, #1
 800986c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800986e:	4b04      	ldr	r3, [pc, #16]	@ (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	e000e010 	.word	0xe000e010
 8009884:	e000e018 	.word	0xe000e018
 8009888:	24000000 	.word	0x24000000
 800988c:	10624dd3 	.word	0x10624dd3
 8009890:	e000e014 	.word	0xe000e014

08009894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80098a4 <vPortEnableVFP+0x10>
 8009898:	6801      	ldr	r1, [r0, #0]
 800989a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800989e:	6001      	str	r1, [r0, #0]
 80098a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098a2:	bf00      	nop
 80098a4:	e000ed88 	.word	0xe000ed88

080098a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ae:	f3ef 8305 	mrs	r3, IPSR
 80098b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	d915      	bls.n	80098e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098ba:	4a18      	ldr	r2, [pc, #96]	@ (800991c <vPortValidateInterruptPriority+0x74>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098c4:	4b16      	ldr	r3, [pc, #88]	@ (8009920 <vPortValidateInterruptPriority+0x78>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	7afa      	ldrb	r2, [r7, #11]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d20b      	bcs.n	80098e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	607b      	str	r3, [r7, #4]
}
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
 80098e4:	e7fd      	b.n	80098e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009924 <vPortValidateInterruptPriority+0x7c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009928 <vPortValidateInterruptPriority+0x80>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d90b      	bls.n	800990e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	603b      	str	r3, [r7, #0]
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <vPortValidateInterruptPriority+0x62>
	}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	e000e3f0 	.word	0xe000e3f0
 8009920:	2400186c 	.word	0x2400186c
 8009924:	e000ed0c 	.word	0xe000ed0c
 8009928:	24001870 	.word	0x24001870

0800992c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	2b00      	cmp	r3, #0
 8009940:	d004      	beq.n	800994c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f023 0307 	bic.w	r3, r3, #7
 8009948:	3308      	adds	r3, #8
 800994a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800994c:	f7fe fc32 	bl	80081b4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8009950:	4b16      	ldr	r3, [pc, #88]	@ (80099ac <pvPortMalloc+0x80>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d105      	bne.n	8009964 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009958:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <pvPortMalloc+0x84>)
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	461a      	mov	r2, r3
 8009960:	4b12      	ldr	r3, [pc, #72]	@ (80099ac <pvPortMalloc+0x80>)
 8009962:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009964:	4b13      	ldr	r3, [pc, #76]	@ (80099b4 <pvPortMalloc+0x88>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4413      	add	r3, r2
 800996c:	f643 32f7 	movw	r2, #15351	@ 0x3bf7
 8009970:	4293      	cmp	r3, r2
 8009972:	d813      	bhi.n	800999c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8009974:	4b0f      	ldr	r3, [pc, #60]	@ (80099b4 <pvPortMalloc+0x88>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	441a      	add	r2, r3
 800997c:	4b0d      	ldr	r3, [pc, #52]	@ (80099b4 <pvPortMalloc+0x88>)
 800997e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009980:	429a      	cmp	r2, r3
 8009982:	d90b      	bls.n	800999c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8009984:	4b09      	ldr	r3, [pc, #36]	@ (80099ac <pvPortMalloc+0x80>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <pvPortMalloc+0x88>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4413      	add	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8009990:	4b08      	ldr	r3, [pc, #32]	@ (80099b4 <pvPortMalloc+0x88>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	4a06      	ldr	r2, [pc, #24]	@ (80099b4 <pvPortMalloc+0x88>)
 800999a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800999c:	f7fe fc18 	bl	80081d0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80099a0:	68fb      	ldr	r3, [r7, #12]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	24005478 	.word	0x24005478
 80099b0:	2400187c 	.word	0x2400187c
 80099b4:	24005474 	.word	0x24005474

080099b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00b      	beq.n	80099de <vPortFree+0x26>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	60fb      	str	r3, [r7, #12]
}
 80099d8:	bf00      	nop
 80099da:	bf00      	nop
 80099dc:	e7fd      	b.n	80099da <vPortFree+0x22>
}
 80099de:	bf00      	nop
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
	...

080099ec <sbrk_aligned>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	4e0f      	ldr	r6, [pc, #60]	@ (8009a2c <sbrk_aligned+0x40>)
 80099f0:	460c      	mov	r4, r1
 80099f2:	6831      	ldr	r1, [r6, #0]
 80099f4:	4605      	mov	r5, r0
 80099f6:	b911      	cbnz	r1, 80099fe <sbrk_aligned+0x12>
 80099f8:	f000 fb42 	bl	800a080 <_sbrk_r>
 80099fc:	6030      	str	r0, [r6, #0]
 80099fe:	4621      	mov	r1, r4
 8009a00:	4628      	mov	r0, r5
 8009a02:	f000 fb3d 	bl	800a080 <_sbrk_r>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d103      	bne.n	8009a12 <sbrk_aligned+0x26>
 8009a0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a0e:	4620      	mov	r0, r4
 8009a10:	bd70      	pop	{r4, r5, r6, pc}
 8009a12:	1cc4      	adds	r4, r0, #3
 8009a14:	f024 0403 	bic.w	r4, r4, #3
 8009a18:	42a0      	cmp	r0, r4
 8009a1a:	d0f8      	beq.n	8009a0e <sbrk_aligned+0x22>
 8009a1c:	1a21      	subs	r1, r4, r0
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 fb2e 	bl	800a080 <_sbrk_r>
 8009a24:	3001      	adds	r0, #1
 8009a26:	d1f2      	bne.n	8009a0e <sbrk_aligned+0x22>
 8009a28:	e7ef      	b.n	8009a0a <sbrk_aligned+0x1e>
 8009a2a:	bf00      	nop
 8009a2c:	2400547c 	.word	0x2400547c

08009a30 <_malloc_r>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	1ccd      	adds	r5, r1, #3
 8009a36:	f025 0503 	bic.w	r5, r5, #3
 8009a3a:	3508      	adds	r5, #8
 8009a3c:	2d0c      	cmp	r5, #12
 8009a3e:	bf38      	it	cc
 8009a40:	250c      	movcc	r5, #12
 8009a42:	2d00      	cmp	r5, #0
 8009a44:	4606      	mov	r6, r0
 8009a46:	db01      	blt.n	8009a4c <_malloc_r+0x1c>
 8009a48:	42a9      	cmp	r1, r5
 8009a4a:	d904      	bls.n	8009a56 <_malloc_r+0x26>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	6033      	str	r3, [r6, #0]
 8009a50:	2000      	movs	r0, #0
 8009a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b2c <_malloc_r+0xfc>
 8009a5a:	f000 f869 	bl	8009b30 <__malloc_lock>
 8009a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a62:	461c      	mov	r4, r3
 8009a64:	bb44      	cbnz	r4, 8009ab8 <_malloc_r+0x88>
 8009a66:	4629      	mov	r1, r5
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff ffbf 	bl	80099ec <sbrk_aligned>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	4604      	mov	r4, r0
 8009a72:	d158      	bne.n	8009b26 <_malloc_r+0xf6>
 8009a74:	f8d8 4000 	ldr.w	r4, [r8]
 8009a78:	4627      	mov	r7, r4
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	d143      	bne.n	8009b06 <_malloc_r+0xd6>
 8009a7e:	2c00      	cmp	r4, #0
 8009a80:	d04b      	beq.n	8009b1a <_malloc_r+0xea>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	4639      	mov	r1, r7
 8009a86:	4630      	mov	r0, r6
 8009a88:	eb04 0903 	add.w	r9, r4, r3
 8009a8c:	f000 faf8 	bl	800a080 <_sbrk_r>
 8009a90:	4581      	cmp	r9, r0
 8009a92:	d142      	bne.n	8009b1a <_malloc_r+0xea>
 8009a94:	6821      	ldr	r1, [r4, #0]
 8009a96:	1a6d      	subs	r5, r5, r1
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7ff ffa6 	bl	80099ec <sbrk_aligned>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d03a      	beq.n	8009b1a <_malloc_r+0xea>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	442b      	add	r3, r5
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	bb62      	cbnz	r2, 8009b0c <_malloc_r+0xdc>
 8009ab2:	f8c8 7000 	str.w	r7, [r8]
 8009ab6:	e00f      	b.n	8009ad8 <_malloc_r+0xa8>
 8009ab8:	6822      	ldr	r2, [r4, #0]
 8009aba:	1b52      	subs	r2, r2, r5
 8009abc:	d420      	bmi.n	8009b00 <_malloc_r+0xd0>
 8009abe:	2a0b      	cmp	r2, #11
 8009ac0:	d917      	bls.n	8009af2 <_malloc_r+0xc2>
 8009ac2:	1961      	adds	r1, r4, r5
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	6025      	str	r5, [r4, #0]
 8009ac8:	bf18      	it	ne
 8009aca:	6059      	strne	r1, [r3, #4]
 8009acc:	6863      	ldr	r3, [r4, #4]
 8009ace:	bf08      	it	eq
 8009ad0:	f8c8 1000 	streq.w	r1, [r8]
 8009ad4:	5162      	str	r2, [r4, r5]
 8009ad6:	604b      	str	r3, [r1, #4]
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f000 f82f 	bl	8009b3c <__malloc_unlock>
 8009ade:	f104 000b 	add.w	r0, r4, #11
 8009ae2:	1d23      	adds	r3, r4, #4
 8009ae4:	f020 0007 	bic.w	r0, r0, #7
 8009ae8:	1ac2      	subs	r2, r0, r3
 8009aea:	bf1c      	itt	ne
 8009aec:	1a1b      	subne	r3, r3, r0
 8009aee:	50a3      	strne	r3, [r4, r2]
 8009af0:	e7af      	b.n	8009a52 <_malloc_r+0x22>
 8009af2:	6862      	ldr	r2, [r4, #4]
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	bf0c      	ite	eq
 8009af8:	f8c8 2000 	streq.w	r2, [r8]
 8009afc:	605a      	strne	r2, [r3, #4]
 8009afe:	e7eb      	b.n	8009ad8 <_malloc_r+0xa8>
 8009b00:	4623      	mov	r3, r4
 8009b02:	6864      	ldr	r4, [r4, #4]
 8009b04:	e7ae      	b.n	8009a64 <_malloc_r+0x34>
 8009b06:	463c      	mov	r4, r7
 8009b08:	687f      	ldr	r7, [r7, #4]
 8009b0a:	e7b6      	b.n	8009a7a <_malloc_r+0x4a>
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d1fb      	bne.n	8009b0c <_malloc_r+0xdc>
 8009b14:	2300      	movs	r3, #0
 8009b16:	6053      	str	r3, [r2, #4]
 8009b18:	e7de      	b.n	8009ad8 <_malloc_r+0xa8>
 8009b1a:	230c      	movs	r3, #12
 8009b1c:	6033      	str	r3, [r6, #0]
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f000 f80c 	bl	8009b3c <__malloc_unlock>
 8009b24:	e794      	b.n	8009a50 <_malloc_r+0x20>
 8009b26:	6005      	str	r5, [r0, #0]
 8009b28:	e7d6      	b.n	8009ad8 <_malloc_r+0xa8>
 8009b2a:	bf00      	nop
 8009b2c:	24005480 	.word	0x24005480

08009b30 <__malloc_lock>:
 8009b30:	4801      	ldr	r0, [pc, #4]	@ (8009b38 <__malloc_lock+0x8>)
 8009b32:	f000 baf2 	b.w	800a11a <__retarget_lock_acquire_recursive>
 8009b36:	bf00      	nop
 8009b38:	240055c4 	.word	0x240055c4

08009b3c <__malloc_unlock>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	@ (8009b44 <__malloc_unlock+0x8>)
 8009b3e:	f000 baed 	b.w	800a11c <__retarget_lock_release_recursive>
 8009b42:	bf00      	nop
 8009b44:	240055c4 	.word	0x240055c4

08009b48 <std>:
 8009b48:	2300      	movs	r3, #0
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b56:	6083      	str	r3, [r0, #8]
 8009b58:	8181      	strh	r1, [r0, #12]
 8009b5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b5c:	81c2      	strh	r2, [r0, #14]
 8009b5e:	6183      	str	r3, [r0, #24]
 8009b60:	4619      	mov	r1, r3
 8009b62:	2208      	movs	r2, #8
 8009b64:	305c      	adds	r0, #92	@ 0x5c
 8009b66:	f000 f9f9 	bl	8009f5c <memset>
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba0 <std+0x58>)
 8009b6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba4 <std+0x5c>)
 8009b70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba8 <std+0x60>)
 8009b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b76:	4b0d      	ldr	r3, [pc, #52]	@ (8009bac <std+0x64>)
 8009b78:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <std+0x68>)
 8009b7c:	6224      	str	r4, [r4, #32]
 8009b7e:	429c      	cmp	r4, r3
 8009b80:	d006      	beq.n	8009b90 <std+0x48>
 8009b82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b86:	4294      	cmp	r4, r2
 8009b88:	d002      	beq.n	8009b90 <std+0x48>
 8009b8a:	33d0      	adds	r3, #208	@ 0xd0
 8009b8c:	429c      	cmp	r4, r3
 8009b8e:	d105      	bne.n	8009b9c <std+0x54>
 8009b90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b98:	f000 babe 	b.w	800a118 <__retarget_lock_init_recursive>
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	bf00      	nop
 8009ba0:	08009dad 	.word	0x08009dad
 8009ba4:	08009dcf 	.word	0x08009dcf
 8009ba8:	08009e07 	.word	0x08009e07
 8009bac:	08009e2b 	.word	0x08009e2b
 8009bb0:	24005484 	.word	0x24005484

08009bb4 <stdio_exit_handler>:
 8009bb4:	4a02      	ldr	r2, [pc, #8]	@ (8009bc0 <stdio_exit_handler+0xc>)
 8009bb6:	4903      	ldr	r1, [pc, #12]	@ (8009bc4 <stdio_exit_handler+0x10>)
 8009bb8:	4803      	ldr	r0, [pc, #12]	@ (8009bc8 <stdio_exit_handler+0x14>)
 8009bba:	f000 b869 	b.w	8009c90 <_fwalk_sglue>
 8009bbe:	bf00      	nop
 8009bc0:	24000014 	.word	0x24000014
 8009bc4:	0800a879 	.word	0x0800a879
 8009bc8:	24000024 	.word	0x24000024

08009bcc <cleanup_stdio>:
 8009bcc:	6841      	ldr	r1, [r0, #4]
 8009bce:	4b0c      	ldr	r3, [pc, #48]	@ (8009c00 <cleanup_stdio+0x34>)
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	d001      	beq.n	8009bdc <cleanup_stdio+0x10>
 8009bd8:	f000 fe4e 	bl	800a878 <_fflush_r>
 8009bdc:	68a1      	ldr	r1, [r4, #8]
 8009bde:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <cleanup_stdio+0x38>)
 8009be0:	4299      	cmp	r1, r3
 8009be2:	d002      	beq.n	8009bea <cleanup_stdio+0x1e>
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 fe47 	bl	800a878 <_fflush_r>
 8009bea:	68e1      	ldr	r1, [r4, #12]
 8009bec:	4b06      	ldr	r3, [pc, #24]	@ (8009c08 <cleanup_stdio+0x3c>)
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	d004      	beq.n	8009bfc <cleanup_stdio+0x30>
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf8:	f000 be3e 	b.w	800a878 <_fflush_r>
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	bf00      	nop
 8009c00:	24005484 	.word	0x24005484
 8009c04:	240054ec 	.word	0x240054ec
 8009c08:	24005554 	.word	0x24005554

08009c0c <global_stdio_init.part.0>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c3c <global_stdio_init.part.0+0x30>)
 8009c10:	4c0b      	ldr	r4, [pc, #44]	@ (8009c40 <global_stdio_init.part.0+0x34>)
 8009c12:	4a0c      	ldr	r2, [pc, #48]	@ (8009c44 <global_stdio_init.part.0+0x38>)
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	4620      	mov	r0, r4
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2104      	movs	r1, #4
 8009c1c:	f7ff ff94 	bl	8009b48 <std>
 8009c20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c24:	2201      	movs	r2, #1
 8009c26:	2109      	movs	r1, #9
 8009c28:	f7ff ff8e 	bl	8009b48 <std>
 8009c2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c30:	2202      	movs	r2, #2
 8009c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c36:	2112      	movs	r1, #18
 8009c38:	f7ff bf86 	b.w	8009b48 <std>
 8009c3c:	240055bc 	.word	0x240055bc
 8009c40:	24005484 	.word	0x24005484
 8009c44:	08009bb5 	.word	0x08009bb5

08009c48 <__sfp_lock_acquire>:
 8009c48:	4801      	ldr	r0, [pc, #4]	@ (8009c50 <__sfp_lock_acquire+0x8>)
 8009c4a:	f000 ba66 	b.w	800a11a <__retarget_lock_acquire_recursive>
 8009c4e:	bf00      	nop
 8009c50:	240055c5 	.word	0x240055c5

08009c54 <__sfp_lock_release>:
 8009c54:	4801      	ldr	r0, [pc, #4]	@ (8009c5c <__sfp_lock_release+0x8>)
 8009c56:	f000 ba61 	b.w	800a11c <__retarget_lock_release_recursive>
 8009c5a:	bf00      	nop
 8009c5c:	240055c5 	.word	0x240055c5

08009c60 <__sinit>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	4604      	mov	r4, r0
 8009c64:	f7ff fff0 	bl	8009c48 <__sfp_lock_acquire>
 8009c68:	6a23      	ldr	r3, [r4, #32]
 8009c6a:	b11b      	cbz	r3, 8009c74 <__sinit+0x14>
 8009c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c70:	f7ff bff0 	b.w	8009c54 <__sfp_lock_release>
 8009c74:	4b04      	ldr	r3, [pc, #16]	@ (8009c88 <__sinit+0x28>)
 8009c76:	6223      	str	r3, [r4, #32]
 8009c78:	4b04      	ldr	r3, [pc, #16]	@ (8009c8c <__sinit+0x2c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1f5      	bne.n	8009c6c <__sinit+0xc>
 8009c80:	f7ff ffc4 	bl	8009c0c <global_stdio_init.part.0>
 8009c84:	e7f2      	b.n	8009c6c <__sinit+0xc>
 8009c86:	bf00      	nop
 8009c88:	08009bcd 	.word	0x08009bcd
 8009c8c:	240055bc 	.word	0x240055bc

08009c90 <_fwalk_sglue>:
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	4607      	mov	r7, r0
 8009c96:	4688      	mov	r8, r1
 8009c98:	4614      	mov	r4, r2
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8009ca4:	d505      	bpl.n	8009cb2 <_fwalk_sglue+0x22>
 8009ca6:	6824      	ldr	r4, [r4, #0]
 8009ca8:	2c00      	cmp	r4, #0
 8009caa:	d1f7      	bne.n	8009c9c <_fwalk_sglue+0xc>
 8009cac:	4630      	mov	r0, r6
 8009cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d907      	bls.n	8009cc8 <_fwalk_sglue+0x38>
 8009cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	d003      	beq.n	8009cc8 <_fwalk_sglue+0x38>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	47c0      	blx	r8
 8009cc6:	4306      	orrs	r6, r0
 8009cc8:	3568      	adds	r5, #104	@ 0x68
 8009cca:	e7e9      	b.n	8009ca0 <_fwalk_sglue+0x10>

08009ccc <iprintf>:
 8009ccc:	b40f      	push	{r0, r1, r2, r3}
 8009cce:	b507      	push	{r0, r1, r2, lr}
 8009cd0:	4906      	ldr	r1, [pc, #24]	@ (8009cec <iprintf+0x20>)
 8009cd2:	ab04      	add	r3, sp, #16
 8009cd4:	6808      	ldr	r0, [r1, #0]
 8009cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cda:	6881      	ldr	r1, [r0, #8]
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	f000 faa1 	bl	800a224 <_vfiprintf_r>
 8009ce2:	b003      	add	sp, #12
 8009ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce8:	b004      	add	sp, #16
 8009cea:	4770      	bx	lr
 8009cec:	24000020 	.word	0x24000020

08009cf0 <_puts_r>:
 8009cf0:	6a03      	ldr	r3, [r0, #32]
 8009cf2:	b570      	push	{r4, r5, r6, lr}
 8009cf4:	6884      	ldr	r4, [r0, #8]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	460e      	mov	r6, r1
 8009cfa:	b90b      	cbnz	r3, 8009d00 <_puts_r+0x10>
 8009cfc:	f7ff ffb0 	bl	8009c60 <__sinit>
 8009d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d02:	07db      	lsls	r3, r3, #31
 8009d04:	d405      	bmi.n	8009d12 <_puts_r+0x22>
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	0598      	lsls	r0, r3, #22
 8009d0a:	d402      	bmi.n	8009d12 <_puts_r+0x22>
 8009d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d0e:	f000 fa04 	bl	800a11a <__retarget_lock_acquire_recursive>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	0719      	lsls	r1, r3, #28
 8009d16:	d502      	bpl.n	8009d1e <_puts_r+0x2e>
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d135      	bne.n	8009d8a <_puts_r+0x9a>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4628      	mov	r0, r5
 8009d22:	f000 f8c5 	bl	8009eb0 <__swsetup_r>
 8009d26:	b380      	cbz	r0, 8009d8a <_puts_r+0x9a>
 8009d28:	f04f 35ff 	mov.w	r5, #4294967295
 8009d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d2e:	07da      	lsls	r2, r3, #31
 8009d30:	d405      	bmi.n	8009d3e <_puts_r+0x4e>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	059b      	lsls	r3, r3, #22
 8009d36:	d402      	bmi.n	8009d3e <_puts_r+0x4e>
 8009d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d3a:	f000 f9ef 	bl	800a11c <__retarget_lock_release_recursive>
 8009d3e:	4628      	mov	r0, r5
 8009d40:	bd70      	pop	{r4, r5, r6, pc}
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da04      	bge.n	8009d50 <_puts_r+0x60>
 8009d46:	69a2      	ldr	r2, [r4, #24]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	dc17      	bgt.n	8009d7c <_puts_r+0x8c>
 8009d4c:	290a      	cmp	r1, #10
 8009d4e:	d015      	beq.n	8009d7c <_puts_r+0x8c>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	7019      	strb	r1, [r3, #0]
 8009d58:	68a3      	ldr	r3, [r4, #8]
 8009d5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	60a3      	str	r3, [r4, #8]
 8009d62:	2900      	cmp	r1, #0
 8009d64:	d1ed      	bne.n	8009d42 <_puts_r+0x52>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	da11      	bge.n	8009d8e <_puts_r+0x9e>
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	210a      	movs	r1, #10
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 f85f 	bl	8009e32 <__swbuf_r>
 8009d74:	3001      	adds	r0, #1
 8009d76:	d0d7      	beq.n	8009d28 <_puts_r+0x38>
 8009d78:	250a      	movs	r5, #10
 8009d7a:	e7d7      	b.n	8009d2c <_puts_r+0x3c>
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f857 	bl	8009e32 <__swbuf_r>
 8009d84:	3001      	adds	r0, #1
 8009d86:	d1e7      	bne.n	8009d58 <_puts_r+0x68>
 8009d88:	e7ce      	b.n	8009d28 <_puts_r+0x38>
 8009d8a:	3e01      	subs	r6, #1
 8009d8c:	e7e4      	b.n	8009d58 <_puts_r+0x68>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	220a      	movs	r2, #10
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	e7ee      	b.n	8009d78 <_puts_r+0x88>
	...

08009d9c <puts>:
 8009d9c:	4b02      	ldr	r3, [pc, #8]	@ (8009da8 <puts+0xc>)
 8009d9e:	4601      	mov	r1, r0
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	f7ff bfa5 	b.w	8009cf0 <_puts_r>
 8009da6:	bf00      	nop
 8009da8:	24000020 	.word	0x24000020

08009dac <__sread>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	460c      	mov	r4, r1
 8009db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db4:	f000 f952 	bl	800a05c <_read_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	bfab      	itete	ge
 8009dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc0:	181b      	addge	r3, r3, r0
 8009dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dc6:	bfac      	ite	ge
 8009dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dca:	81a3      	strhlt	r3, [r4, #12]
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <__swrite>:
 8009dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	461f      	mov	r7, r3
 8009dd4:	898b      	ldrh	r3, [r1, #12]
 8009dd6:	05db      	lsls	r3, r3, #23
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4616      	mov	r6, r2
 8009dde:	d505      	bpl.n	8009dec <__swrite+0x1e>
 8009de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de4:	2302      	movs	r3, #2
 8009de6:	2200      	movs	r2, #0
 8009de8:	f000 f926 	bl	800a038 <_lseek_r>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e02:	f000 b94d 	b.w	800a0a0 <_write_r>

08009e06 <__sseek>:
 8009e06:	b510      	push	{r4, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0e:	f000 f913 	bl	800a038 <_lseek_r>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	bf15      	itete	ne
 8009e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e22:	81a3      	strheq	r3, [r4, #12]
 8009e24:	bf18      	it	ne
 8009e26:	81a3      	strhne	r3, [r4, #12]
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <__sclose>:
 8009e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2e:	f000 b89d 	b.w	8009f6c <_close_r>

08009e32 <__swbuf_r>:
 8009e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e34:	460e      	mov	r6, r1
 8009e36:	4614      	mov	r4, r2
 8009e38:	4605      	mov	r5, r0
 8009e3a:	b118      	cbz	r0, 8009e44 <__swbuf_r+0x12>
 8009e3c:	6a03      	ldr	r3, [r0, #32]
 8009e3e:	b90b      	cbnz	r3, 8009e44 <__swbuf_r+0x12>
 8009e40:	f7ff ff0e 	bl	8009c60 <__sinit>
 8009e44:	69a3      	ldr	r3, [r4, #24]
 8009e46:	60a3      	str	r3, [r4, #8]
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	071a      	lsls	r2, r3, #28
 8009e4c:	d501      	bpl.n	8009e52 <__swbuf_r+0x20>
 8009e4e:	6923      	ldr	r3, [r4, #16]
 8009e50:	b943      	cbnz	r3, 8009e64 <__swbuf_r+0x32>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f000 f82b 	bl	8009eb0 <__swsetup_r>
 8009e5a:	b118      	cbz	r0, 8009e64 <__swbuf_r+0x32>
 8009e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e60:	4638      	mov	r0, r7
 8009e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	6922      	ldr	r2, [r4, #16]
 8009e68:	1a98      	subs	r0, r3, r2
 8009e6a:	6963      	ldr	r3, [r4, #20]
 8009e6c:	b2f6      	uxtb	r6, r6
 8009e6e:	4283      	cmp	r3, r0
 8009e70:	4637      	mov	r7, r6
 8009e72:	dc05      	bgt.n	8009e80 <__swbuf_r+0x4e>
 8009e74:	4621      	mov	r1, r4
 8009e76:	4628      	mov	r0, r5
 8009e78:	f000 fcfe 	bl	800a878 <_fflush_r>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d1ed      	bne.n	8009e5c <__swbuf_r+0x2a>
 8009e80:	68a3      	ldr	r3, [r4, #8]
 8009e82:	3b01      	subs	r3, #1
 8009e84:	60a3      	str	r3, [r4, #8]
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	6022      	str	r2, [r4, #0]
 8009e8c:	701e      	strb	r6, [r3, #0]
 8009e8e:	6962      	ldr	r2, [r4, #20]
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d004      	beq.n	8009ea0 <__swbuf_r+0x6e>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	07db      	lsls	r3, r3, #31
 8009e9a:	d5e1      	bpl.n	8009e60 <__swbuf_r+0x2e>
 8009e9c:	2e0a      	cmp	r6, #10
 8009e9e:	d1df      	bne.n	8009e60 <__swbuf_r+0x2e>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 fce8 	bl	800a878 <_fflush_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d0d9      	beq.n	8009e60 <__swbuf_r+0x2e>
 8009eac:	e7d6      	b.n	8009e5c <__swbuf_r+0x2a>
	...

08009eb0 <__swsetup_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4b29      	ldr	r3, [pc, #164]	@ (8009f58 <__swsetup_r+0xa8>)
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	460c      	mov	r4, r1
 8009eba:	b118      	cbz	r0, 8009ec4 <__swsetup_r+0x14>
 8009ebc:	6a03      	ldr	r3, [r0, #32]
 8009ebe:	b90b      	cbnz	r3, 8009ec4 <__swsetup_r+0x14>
 8009ec0:	f7ff fece 	bl	8009c60 <__sinit>
 8009ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec8:	0719      	lsls	r1, r3, #28
 8009eca:	d422      	bmi.n	8009f12 <__swsetup_r+0x62>
 8009ecc:	06da      	lsls	r2, r3, #27
 8009ece:	d407      	bmi.n	8009ee0 <__swsetup_r+0x30>
 8009ed0:	2209      	movs	r2, #9
 8009ed2:	602a      	str	r2, [r5, #0]
 8009ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed8:	81a3      	strh	r3, [r4, #12]
 8009eda:	f04f 30ff 	mov.w	r0, #4294967295
 8009ede:	e033      	b.n	8009f48 <__swsetup_r+0x98>
 8009ee0:	0758      	lsls	r0, r3, #29
 8009ee2:	d512      	bpl.n	8009f0a <__swsetup_r+0x5a>
 8009ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ee6:	b141      	cbz	r1, 8009efa <__swsetup_r+0x4a>
 8009ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009eec:	4299      	cmp	r1, r3
 8009eee:	d002      	beq.n	8009ef6 <__swsetup_r+0x46>
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f000 f923 	bl	800a13c <_free_r>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	2300      	movs	r3, #0
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	6923      	ldr	r3, [r4, #16]
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f043 0308 	orr.w	r3, r3, #8
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	b94b      	cbnz	r3, 8009f2a <__swsetup_r+0x7a>
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f20:	d003      	beq.n	8009f2a <__swsetup_r+0x7a>
 8009f22:	4621      	mov	r1, r4
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 fcf5 	bl	800a914 <__smakebuf_r>
 8009f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2e:	f013 0201 	ands.w	r2, r3, #1
 8009f32:	d00a      	beq.n	8009f4a <__swsetup_r+0x9a>
 8009f34:	2200      	movs	r2, #0
 8009f36:	60a2      	str	r2, [r4, #8]
 8009f38:	6962      	ldr	r2, [r4, #20]
 8009f3a:	4252      	negs	r2, r2
 8009f3c:	61a2      	str	r2, [r4, #24]
 8009f3e:	6922      	ldr	r2, [r4, #16]
 8009f40:	b942      	cbnz	r2, 8009f54 <__swsetup_r+0xa4>
 8009f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f46:	d1c5      	bne.n	8009ed4 <__swsetup_r+0x24>
 8009f48:	bd38      	pop	{r3, r4, r5, pc}
 8009f4a:	0799      	lsls	r1, r3, #30
 8009f4c:	bf58      	it	pl
 8009f4e:	6962      	ldrpl	r2, [r4, #20]
 8009f50:	60a2      	str	r2, [r4, #8]
 8009f52:	e7f4      	b.n	8009f3e <__swsetup_r+0x8e>
 8009f54:	2000      	movs	r0, #0
 8009f56:	e7f7      	b.n	8009f48 <__swsetup_r+0x98>
 8009f58:	24000020 	.word	0x24000020

08009f5c <memset>:
 8009f5c:	4402      	add	r2, r0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d100      	bne.n	8009f66 <memset+0xa>
 8009f64:	4770      	bx	lr
 8009f66:	f803 1b01 	strb.w	r1, [r3], #1
 8009f6a:	e7f9      	b.n	8009f60 <memset+0x4>

08009f6c <_close_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	@ (8009f88 <_close_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f7 f8e1 	bl	800113e <_close>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_close_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_close_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	240055c0 	.word	0x240055c0

08009f8c <_reclaim_reent>:
 8009f8c:	4b29      	ldr	r3, [pc, #164]	@ (800a034 <_reclaim_reent+0xa8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4283      	cmp	r3, r0
 8009f92:	b570      	push	{r4, r5, r6, lr}
 8009f94:	4604      	mov	r4, r0
 8009f96:	d04b      	beq.n	800a030 <_reclaim_reent+0xa4>
 8009f98:	69c3      	ldr	r3, [r0, #28]
 8009f9a:	b1ab      	cbz	r3, 8009fc8 <_reclaim_reent+0x3c>
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	b16b      	cbz	r3, 8009fbc <_reclaim_reent+0x30>
 8009fa0:	2500      	movs	r5, #0
 8009fa2:	69e3      	ldr	r3, [r4, #28]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	5959      	ldr	r1, [r3, r5]
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	d13b      	bne.n	800a024 <_reclaim_reent+0x98>
 8009fac:	3504      	adds	r5, #4
 8009fae:	2d80      	cmp	r5, #128	@ 0x80
 8009fb0:	d1f7      	bne.n	8009fa2 <_reclaim_reent+0x16>
 8009fb2:	69e3      	ldr	r3, [r4, #28]
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	68d9      	ldr	r1, [r3, #12]
 8009fb8:	f000 f8c0 	bl	800a13c <_free_r>
 8009fbc:	69e3      	ldr	r3, [r4, #28]
 8009fbe:	6819      	ldr	r1, [r3, #0]
 8009fc0:	b111      	cbz	r1, 8009fc8 <_reclaim_reent+0x3c>
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 f8ba 	bl	800a13c <_free_r>
 8009fc8:	6961      	ldr	r1, [r4, #20]
 8009fca:	b111      	cbz	r1, 8009fd2 <_reclaim_reent+0x46>
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 f8b5 	bl	800a13c <_free_r>
 8009fd2:	69e1      	ldr	r1, [r4, #28]
 8009fd4:	b111      	cbz	r1, 8009fdc <_reclaim_reent+0x50>
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 f8b0 	bl	800a13c <_free_r>
 8009fdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009fde:	b111      	cbz	r1, 8009fe6 <_reclaim_reent+0x5a>
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 f8ab 	bl	800a13c <_free_r>
 8009fe6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe8:	b111      	cbz	r1, 8009ff0 <_reclaim_reent+0x64>
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 f8a6 	bl	800a13c <_free_r>
 8009ff0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009ff2:	b111      	cbz	r1, 8009ffa <_reclaim_reent+0x6e>
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 f8a1 	bl	800a13c <_free_r>
 8009ffa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009ffc:	b111      	cbz	r1, 800a004 <_reclaim_reent+0x78>
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 f89c 	bl	800a13c <_free_r>
 800a004:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a006:	b111      	cbz	r1, 800a00e <_reclaim_reent+0x82>
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 f897 	bl	800a13c <_free_r>
 800a00e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a010:	b111      	cbz	r1, 800a018 <_reclaim_reent+0x8c>
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f892 	bl	800a13c <_free_r>
 800a018:	6a23      	ldr	r3, [r4, #32]
 800a01a:	b14b      	cbz	r3, 800a030 <_reclaim_reent+0xa4>
 800a01c:	4620      	mov	r0, r4
 800a01e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a022:	4718      	bx	r3
 800a024:	680e      	ldr	r6, [r1, #0]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 f888 	bl	800a13c <_free_r>
 800a02c:	4631      	mov	r1, r6
 800a02e:	e7bb      	b.n	8009fa8 <_reclaim_reent+0x1c>
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	bf00      	nop
 800a034:	24000020 	.word	0x24000020

0800a038 <_lseek_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	@ (800a058 <_lseek_r+0x20>)
 800a03c:	4604      	mov	r4, r0
 800a03e:	4608      	mov	r0, r1
 800a040:	4611      	mov	r1, r2
 800a042:	2200      	movs	r2, #0
 800a044:	602a      	str	r2, [r5, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	f7f7 f8a0 	bl	800118c <_lseek>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_lseek_r+0x1e>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_lseek_r+0x1e>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	240055c0 	.word	0x240055c0

0800a05c <_read_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	@ (800a07c <_read_r+0x20>)
 800a060:	4604      	mov	r4, r0
 800a062:	4608      	mov	r0, r1
 800a064:	4611      	mov	r1, r2
 800a066:	2200      	movs	r2, #0
 800a068:	602a      	str	r2, [r5, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f7f7 f84a 	bl	8001104 <_read>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_read_r+0x1e>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_read_r+0x1e>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	240055c0 	.word	0x240055c0

0800a080 <_sbrk_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d06      	ldr	r5, [pc, #24]	@ (800a09c <_sbrk_r+0x1c>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	f7f7 f88c 	bl	80011a8 <_sbrk>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_sbrk_r+0x1a>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_sbrk_r+0x1a>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	240055c0 	.word	0x240055c0

0800a0a0 <_write_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d07      	ldr	r5, [pc, #28]	@ (800a0c0 <_write_r+0x20>)
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	4608      	mov	r0, r1
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	602a      	str	r2, [r5, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f7f6 fdb0 	bl	8000c14 <_write>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_write_r+0x1e>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_write_r+0x1e>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	240055c0 	.word	0x240055c0

0800a0c4 <__errno>:
 800a0c4:	4b01      	ldr	r3, [pc, #4]	@ (800a0cc <__errno+0x8>)
 800a0c6:	6818      	ldr	r0, [r3, #0]
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	24000020 	.word	0x24000020

0800a0d0 <__libc_init_array>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a108 <__libc_init_array+0x38>)
 800a0d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a10c <__libc_init_array+0x3c>)
 800a0d6:	1b64      	subs	r4, r4, r5
 800a0d8:	10a4      	asrs	r4, r4, #2
 800a0da:	2600      	movs	r6, #0
 800a0dc:	42a6      	cmp	r6, r4
 800a0de:	d109      	bne.n	800a0f4 <__libc_init_array+0x24>
 800a0e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a110 <__libc_init_array+0x40>)
 800a0e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a114 <__libc_init_array+0x44>)
 800a0e4:	f000 fc74 	bl	800a9d0 <_init>
 800a0e8:	1b64      	subs	r4, r4, r5
 800a0ea:	10a4      	asrs	r4, r4, #2
 800a0ec:	2600      	movs	r6, #0
 800a0ee:	42a6      	cmp	r6, r4
 800a0f0:	d105      	bne.n	800a0fe <__libc_init_array+0x2e>
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}
 800a0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f8:	4798      	blx	r3
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	e7ee      	b.n	800a0dc <__libc_init_array+0xc>
 800a0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a102:	4798      	blx	r3
 800a104:	3601      	adds	r6, #1
 800a106:	e7f2      	b.n	800a0ee <__libc_init_array+0x1e>
 800a108:	0800ac20 	.word	0x0800ac20
 800a10c:	0800ac20 	.word	0x0800ac20
 800a110:	0800ac20 	.word	0x0800ac20
 800a114:	0800ac24 	.word	0x0800ac24

0800a118 <__retarget_lock_init_recursive>:
 800a118:	4770      	bx	lr

0800a11a <__retarget_lock_acquire_recursive>:
 800a11a:	4770      	bx	lr

0800a11c <__retarget_lock_release_recursive>:
 800a11c:	4770      	bx	lr

0800a11e <memcpy>:
 800a11e:	440a      	add	r2, r1
 800a120:	4291      	cmp	r1, r2
 800a122:	f100 33ff 	add.w	r3, r0, #4294967295
 800a126:	d100      	bne.n	800a12a <memcpy+0xc>
 800a128:	4770      	bx	lr
 800a12a:	b510      	push	{r4, lr}
 800a12c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a130:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a134:	4291      	cmp	r1, r2
 800a136:	d1f9      	bne.n	800a12c <memcpy+0xe>
 800a138:	bd10      	pop	{r4, pc}
	...

0800a13c <_free_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4605      	mov	r5, r0
 800a140:	2900      	cmp	r1, #0
 800a142:	d041      	beq.n	800a1c8 <_free_r+0x8c>
 800a144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a148:	1f0c      	subs	r4, r1, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfb8      	it	lt
 800a14e:	18e4      	addlt	r4, r4, r3
 800a150:	f7ff fcee 	bl	8009b30 <__malloc_lock>
 800a154:	4a1d      	ldr	r2, [pc, #116]	@ (800a1cc <_free_r+0x90>)
 800a156:	6813      	ldr	r3, [r2, #0]
 800a158:	b933      	cbnz	r3, 800a168 <_free_r+0x2c>
 800a15a:	6063      	str	r3, [r4, #4]
 800a15c:	6014      	str	r4, [r2, #0]
 800a15e:	4628      	mov	r0, r5
 800a160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a164:	f7ff bcea 	b.w	8009b3c <__malloc_unlock>
 800a168:	42a3      	cmp	r3, r4
 800a16a:	d908      	bls.n	800a17e <_free_r+0x42>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	1821      	adds	r1, r4, r0
 800a170:	428b      	cmp	r3, r1
 800a172:	bf01      	itttt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	1809      	addeq	r1, r1, r0
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	e7ed      	b.n	800a15a <_free_r+0x1e>
 800a17e:	461a      	mov	r2, r3
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	b10b      	cbz	r3, 800a188 <_free_r+0x4c>
 800a184:	42a3      	cmp	r3, r4
 800a186:	d9fa      	bls.n	800a17e <_free_r+0x42>
 800a188:	6811      	ldr	r1, [r2, #0]
 800a18a:	1850      	adds	r0, r2, r1
 800a18c:	42a0      	cmp	r0, r4
 800a18e:	d10b      	bne.n	800a1a8 <_free_r+0x6c>
 800a190:	6820      	ldr	r0, [r4, #0]
 800a192:	4401      	add	r1, r0
 800a194:	1850      	adds	r0, r2, r1
 800a196:	4283      	cmp	r3, r0
 800a198:	6011      	str	r1, [r2, #0]
 800a19a:	d1e0      	bne.n	800a15e <_free_r+0x22>
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	6053      	str	r3, [r2, #4]
 800a1a2:	4408      	add	r0, r1
 800a1a4:	6010      	str	r0, [r2, #0]
 800a1a6:	e7da      	b.n	800a15e <_free_r+0x22>
 800a1a8:	d902      	bls.n	800a1b0 <_free_r+0x74>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	e7d6      	b.n	800a15e <_free_r+0x22>
 800a1b0:	6820      	ldr	r0, [r4, #0]
 800a1b2:	1821      	adds	r1, r4, r0
 800a1b4:	428b      	cmp	r3, r1
 800a1b6:	bf04      	itt	eq
 800a1b8:	6819      	ldreq	r1, [r3, #0]
 800a1ba:	685b      	ldreq	r3, [r3, #4]
 800a1bc:	6063      	str	r3, [r4, #4]
 800a1be:	bf04      	itt	eq
 800a1c0:	1809      	addeq	r1, r1, r0
 800a1c2:	6021      	streq	r1, [r4, #0]
 800a1c4:	6054      	str	r4, [r2, #4]
 800a1c6:	e7ca      	b.n	800a15e <_free_r+0x22>
 800a1c8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ca:	bf00      	nop
 800a1cc:	24005480 	.word	0x24005480

0800a1d0 <__sfputc_r>:
 800a1d0:	6893      	ldr	r3, [r2, #8]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	b410      	push	{r4}
 800a1d8:	6093      	str	r3, [r2, #8]
 800a1da:	da08      	bge.n	800a1ee <__sfputc_r+0x1e>
 800a1dc:	6994      	ldr	r4, [r2, #24]
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	db01      	blt.n	800a1e6 <__sfputc_r+0x16>
 800a1e2:	290a      	cmp	r1, #10
 800a1e4:	d103      	bne.n	800a1ee <__sfputc_r+0x1e>
 800a1e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ea:	f7ff be22 	b.w	8009e32 <__swbuf_r>
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	1c58      	adds	r0, r3, #1
 800a1f2:	6010      	str	r0, [r2, #0]
 800a1f4:	7019      	strb	r1, [r3, #0]
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <__sfputs_r>:
 800a1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a200:	4606      	mov	r6, r0
 800a202:	460f      	mov	r7, r1
 800a204:	4614      	mov	r4, r2
 800a206:	18d5      	adds	r5, r2, r3
 800a208:	42ac      	cmp	r4, r5
 800a20a:	d101      	bne.n	800a210 <__sfputs_r+0x12>
 800a20c:	2000      	movs	r0, #0
 800a20e:	e007      	b.n	800a220 <__sfputs_r+0x22>
 800a210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a214:	463a      	mov	r2, r7
 800a216:	4630      	mov	r0, r6
 800a218:	f7ff ffda 	bl	800a1d0 <__sfputc_r>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d1f3      	bne.n	800a208 <__sfputs_r+0xa>
 800a220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a224 <_vfiprintf_r>:
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	460d      	mov	r5, r1
 800a22a:	b09d      	sub	sp, #116	@ 0x74
 800a22c:	4614      	mov	r4, r2
 800a22e:	4698      	mov	r8, r3
 800a230:	4606      	mov	r6, r0
 800a232:	b118      	cbz	r0, 800a23c <_vfiprintf_r+0x18>
 800a234:	6a03      	ldr	r3, [r0, #32]
 800a236:	b90b      	cbnz	r3, 800a23c <_vfiprintf_r+0x18>
 800a238:	f7ff fd12 	bl	8009c60 <__sinit>
 800a23c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a23e:	07d9      	lsls	r1, r3, #31
 800a240:	d405      	bmi.n	800a24e <_vfiprintf_r+0x2a>
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	059a      	lsls	r2, r3, #22
 800a246:	d402      	bmi.n	800a24e <_vfiprintf_r+0x2a>
 800a248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a24a:	f7ff ff66 	bl	800a11a <__retarget_lock_acquire_recursive>
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	071b      	lsls	r3, r3, #28
 800a252:	d501      	bpl.n	800a258 <_vfiprintf_r+0x34>
 800a254:	692b      	ldr	r3, [r5, #16]
 800a256:	b99b      	cbnz	r3, 800a280 <_vfiprintf_r+0x5c>
 800a258:	4629      	mov	r1, r5
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff fe28 	bl	8009eb0 <__swsetup_r>
 800a260:	b170      	cbz	r0, 800a280 <_vfiprintf_r+0x5c>
 800a262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a264:	07dc      	lsls	r4, r3, #31
 800a266:	d504      	bpl.n	800a272 <_vfiprintf_r+0x4e>
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	b01d      	add	sp, #116	@ 0x74
 800a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	0598      	lsls	r0, r3, #22
 800a276:	d4f7      	bmi.n	800a268 <_vfiprintf_r+0x44>
 800a278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a27a:	f7ff ff4f 	bl	800a11c <__retarget_lock_release_recursive>
 800a27e:	e7f3      	b.n	800a268 <_vfiprintf_r+0x44>
 800a280:	2300      	movs	r3, #0
 800a282:	9309      	str	r3, [sp, #36]	@ 0x24
 800a284:	2320      	movs	r3, #32
 800a286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a28e:	2330      	movs	r3, #48	@ 0x30
 800a290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a440 <_vfiprintf_r+0x21c>
 800a294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a298:	f04f 0901 	mov.w	r9, #1
 800a29c:	4623      	mov	r3, r4
 800a29e:	469a      	mov	sl, r3
 800a2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a4:	b10a      	cbz	r2, 800a2aa <_vfiprintf_r+0x86>
 800a2a6:	2a25      	cmp	r2, #37	@ 0x25
 800a2a8:	d1f9      	bne.n	800a29e <_vfiprintf_r+0x7a>
 800a2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ae:	d00b      	beq.n	800a2c8 <_vfiprintf_r+0xa4>
 800a2b0:	465b      	mov	r3, fp
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f7ff ffa1 	bl	800a1fe <__sfputs_r>
 800a2bc:	3001      	adds	r0, #1
 800a2be:	f000 80a7 	beq.w	800a410 <_vfiprintf_r+0x1ec>
 800a2c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2c4:	445a      	add	r2, fp
 800a2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 809f 	beq.w	800a410 <_vfiprintf_r+0x1ec>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2dc:	f10a 0a01 	add.w	sl, sl, #1
 800a2e0:	9304      	str	r3, [sp, #16]
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2ea:	4654      	mov	r4, sl
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f2:	4853      	ldr	r0, [pc, #332]	@ (800a440 <_vfiprintf_r+0x21c>)
 800a2f4:	f7f5 fff4 	bl	80002e0 <memchr>
 800a2f8:	9a04      	ldr	r2, [sp, #16]
 800a2fa:	b9d8      	cbnz	r0, 800a334 <_vfiprintf_r+0x110>
 800a2fc:	06d1      	lsls	r1, r2, #27
 800a2fe:	bf44      	itt	mi
 800a300:	2320      	movmi	r3, #32
 800a302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a306:	0713      	lsls	r3, r2, #28
 800a308:	bf44      	itt	mi
 800a30a:	232b      	movmi	r3, #43	@ 0x2b
 800a30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a310:	f89a 3000 	ldrb.w	r3, [sl]
 800a314:	2b2a      	cmp	r3, #42	@ 0x2a
 800a316:	d015      	beq.n	800a344 <_vfiprintf_r+0x120>
 800a318:	9a07      	ldr	r2, [sp, #28]
 800a31a:	4654      	mov	r4, sl
 800a31c:	2000      	movs	r0, #0
 800a31e:	f04f 0c0a 	mov.w	ip, #10
 800a322:	4621      	mov	r1, r4
 800a324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a328:	3b30      	subs	r3, #48	@ 0x30
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d94b      	bls.n	800a3c6 <_vfiprintf_r+0x1a2>
 800a32e:	b1b0      	cbz	r0, 800a35e <_vfiprintf_r+0x13a>
 800a330:	9207      	str	r2, [sp, #28]
 800a332:	e014      	b.n	800a35e <_vfiprintf_r+0x13a>
 800a334:	eba0 0308 	sub.w	r3, r0, r8
 800a338:	fa09 f303 	lsl.w	r3, r9, r3
 800a33c:	4313      	orrs	r3, r2
 800a33e:	9304      	str	r3, [sp, #16]
 800a340:	46a2      	mov	sl, r4
 800a342:	e7d2      	b.n	800a2ea <_vfiprintf_r+0xc6>
 800a344:	9b03      	ldr	r3, [sp, #12]
 800a346:	1d19      	adds	r1, r3, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	9103      	str	r1, [sp, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfbb      	ittet	lt
 800a350:	425b      	neglt	r3, r3
 800a352:	f042 0202 	orrlt.w	r2, r2, #2
 800a356:	9307      	strge	r3, [sp, #28]
 800a358:	9307      	strlt	r3, [sp, #28]
 800a35a:	bfb8      	it	lt
 800a35c:	9204      	strlt	r2, [sp, #16]
 800a35e:	7823      	ldrb	r3, [r4, #0]
 800a360:	2b2e      	cmp	r3, #46	@ 0x2e
 800a362:	d10a      	bne.n	800a37a <_vfiprintf_r+0x156>
 800a364:	7863      	ldrb	r3, [r4, #1]
 800a366:	2b2a      	cmp	r3, #42	@ 0x2a
 800a368:	d132      	bne.n	800a3d0 <_vfiprintf_r+0x1ac>
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	1d1a      	adds	r2, r3, #4
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	9203      	str	r2, [sp, #12]
 800a372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a376:	3402      	adds	r4, #2
 800a378:	9305      	str	r3, [sp, #20]
 800a37a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a450 <_vfiprintf_r+0x22c>
 800a37e:	7821      	ldrb	r1, [r4, #0]
 800a380:	2203      	movs	r2, #3
 800a382:	4650      	mov	r0, sl
 800a384:	f7f5 ffac 	bl	80002e0 <memchr>
 800a388:	b138      	cbz	r0, 800a39a <_vfiprintf_r+0x176>
 800a38a:	9b04      	ldr	r3, [sp, #16]
 800a38c:	eba0 000a 	sub.w	r0, r0, sl
 800a390:	2240      	movs	r2, #64	@ 0x40
 800a392:	4082      	lsls	r2, r0
 800a394:	4313      	orrs	r3, r2
 800a396:	3401      	adds	r4, #1
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39e:	4829      	ldr	r0, [pc, #164]	@ (800a444 <_vfiprintf_r+0x220>)
 800a3a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3a4:	2206      	movs	r2, #6
 800a3a6:	f7f5 ff9b 	bl	80002e0 <memchr>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d03f      	beq.n	800a42e <_vfiprintf_r+0x20a>
 800a3ae:	4b26      	ldr	r3, [pc, #152]	@ (800a448 <_vfiprintf_r+0x224>)
 800a3b0:	bb1b      	cbnz	r3, 800a3fa <_vfiprintf_r+0x1d6>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	3307      	adds	r3, #7
 800a3b6:	f023 0307 	bic.w	r3, r3, #7
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	9303      	str	r3, [sp, #12]
 800a3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c0:	443b      	add	r3, r7
 800a3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3c4:	e76a      	b.n	800a29c <_vfiprintf_r+0x78>
 800a3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	e7a8      	b.n	800a322 <_vfiprintf_r+0xfe>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	3401      	adds	r4, #1
 800a3d4:	9305      	str	r3, [sp, #20]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f04f 0c0a 	mov.w	ip, #10
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e2:	3a30      	subs	r2, #48	@ 0x30
 800a3e4:	2a09      	cmp	r2, #9
 800a3e6:	d903      	bls.n	800a3f0 <_vfiprintf_r+0x1cc>
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d0c6      	beq.n	800a37a <_vfiprintf_r+0x156>
 800a3ec:	9105      	str	r1, [sp, #20]
 800a3ee:	e7c4      	b.n	800a37a <_vfiprintf_r+0x156>
 800a3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e7f0      	b.n	800a3dc <_vfiprintf_r+0x1b8>
 800a3fa:	ab03      	add	r3, sp, #12
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	462a      	mov	r2, r5
 800a400:	4b12      	ldr	r3, [pc, #72]	@ (800a44c <_vfiprintf_r+0x228>)
 800a402:	a904      	add	r1, sp, #16
 800a404:	4630      	mov	r0, r6
 800a406:	f3af 8000 	nop.w
 800a40a:	4607      	mov	r7, r0
 800a40c:	1c78      	adds	r0, r7, #1
 800a40e:	d1d6      	bne.n	800a3be <_vfiprintf_r+0x19a>
 800a410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a412:	07d9      	lsls	r1, r3, #31
 800a414:	d405      	bmi.n	800a422 <_vfiprintf_r+0x1fe>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	059a      	lsls	r2, r3, #22
 800a41a:	d402      	bmi.n	800a422 <_vfiprintf_r+0x1fe>
 800a41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a41e:	f7ff fe7d 	bl	800a11c <__retarget_lock_release_recursive>
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	065b      	lsls	r3, r3, #25
 800a426:	f53f af1f 	bmi.w	800a268 <_vfiprintf_r+0x44>
 800a42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a42c:	e71e      	b.n	800a26c <_vfiprintf_r+0x48>
 800a42e:	ab03      	add	r3, sp, #12
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	462a      	mov	r2, r5
 800a434:	4b05      	ldr	r3, [pc, #20]	@ (800a44c <_vfiprintf_r+0x228>)
 800a436:	a904      	add	r1, sp, #16
 800a438:	4630      	mov	r0, r6
 800a43a:	f000 f879 	bl	800a530 <_printf_i>
 800a43e:	e7e4      	b.n	800a40a <_vfiprintf_r+0x1e6>
 800a440:	0800abe4 	.word	0x0800abe4
 800a444:	0800abee 	.word	0x0800abee
 800a448:	00000000 	.word	0x00000000
 800a44c:	0800a1ff 	.word	0x0800a1ff
 800a450:	0800abea 	.word	0x0800abea

0800a454 <_printf_common>:
 800a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a458:	4616      	mov	r6, r2
 800a45a:	4698      	mov	r8, r3
 800a45c:	688a      	ldr	r2, [r1, #8]
 800a45e:	690b      	ldr	r3, [r1, #16]
 800a460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a464:	4293      	cmp	r3, r2
 800a466:	bfb8      	it	lt
 800a468:	4613      	movlt	r3, r2
 800a46a:	6033      	str	r3, [r6, #0]
 800a46c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a470:	4607      	mov	r7, r0
 800a472:	460c      	mov	r4, r1
 800a474:	b10a      	cbz	r2, 800a47a <_printf_common+0x26>
 800a476:	3301      	adds	r3, #1
 800a478:	6033      	str	r3, [r6, #0]
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	0699      	lsls	r1, r3, #26
 800a47e:	bf42      	ittt	mi
 800a480:	6833      	ldrmi	r3, [r6, #0]
 800a482:	3302      	addmi	r3, #2
 800a484:	6033      	strmi	r3, [r6, #0]
 800a486:	6825      	ldr	r5, [r4, #0]
 800a488:	f015 0506 	ands.w	r5, r5, #6
 800a48c:	d106      	bne.n	800a49c <_printf_common+0x48>
 800a48e:	f104 0a19 	add.w	sl, r4, #25
 800a492:	68e3      	ldr	r3, [r4, #12]
 800a494:	6832      	ldr	r2, [r6, #0]
 800a496:	1a9b      	subs	r3, r3, r2
 800a498:	42ab      	cmp	r3, r5
 800a49a:	dc26      	bgt.n	800a4ea <_printf_common+0x96>
 800a49c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	3b00      	subs	r3, #0
 800a4a4:	bf18      	it	ne
 800a4a6:	2301      	movne	r3, #1
 800a4a8:	0692      	lsls	r2, r2, #26
 800a4aa:	d42b      	bmi.n	800a504 <_printf_common+0xb0>
 800a4ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4b0:	4641      	mov	r1, r8
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	47c8      	blx	r9
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d01e      	beq.n	800a4f8 <_printf_common+0xa4>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	6922      	ldr	r2, [r4, #16]
 800a4be:	f003 0306 	and.w	r3, r3, #6
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	bf02      	ittt	eq
 800a4c6:	68e5      	ldreq	r5, [r4, #12]
 800a4c8:	6833      	ldreq	r3, [r6, #0]
 800a4ca:	1aed      	subeq	r5, r5, r3
 800a4cc:	68a3      	ldr	r3, [r4, #8]
 800a4ce:	bf0c      	ite	eq
 800a4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4d4:	2500      	movne	r5, #0
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bfc4      	itt	gt
 800a4da:	1a9b      	subgt	r3, r3, r2
 800a4dc:	18ed      	addgt	r5, r5, r3
 800a4de:	2600      	movs	r6, #0
 800a4e0:	341a      	adds	r4, #26
 800a4e2:	42b5      	cmp	r5, r6
 800a4e4:	d11a      	bne.n	800a51c <_printf_common+0xc8>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	e008      	b.n	800a4fc <_printf_common+0xa8>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	4652      	mov	r2, sl
 800a4ee:	4641      	mov	r1, r8
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	47c8      	blx	r9
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d103      	bne.n	800a500 <_printf_common+0xac>
 800a4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a500:	3501      	adds	r5, #1
 800a502:	e7c6      	b.n	800a492 <_printf_common+0x3e>
 800a504:	18e1      	adds	r1, r4, r3
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	2030      	movs	r0, #48	@ 0x30
 800a50a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a50e:	4422      	add	r2, r4
 800a510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a518:	3302      	adds	r3, #2
 800a51a:	e7c7      	b.n	800a4ac <_printf_common+0x58>
 800a51c:	2301      	movs	r3, #1
 800a51e:	4622      	mov	r2, r4
 800a520:	4641      	mov	r1, r8
 800a522:	4638      	mov	r0, r7
 800a524:	47c8      	blx	r9
 800a526:	3001      	adds	r0, #1
 800a528:	d0e6      	beq.n	800a4f8 <_printf_common+0xa4>
 800a52a:	3601      	adds	r6, #1
 800a52c:	e7d9      	b.n	800a4e2 <_printf_common+0x8e>
	...

0800a530 <_printf_i>:
 800a530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a534:	7e0f      	ldrb	r7, [r1, #24]
 800a536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a538:	2f78      	cmp	r7, #120	@ 0x78
 800a53a:	4691      	mov	r9, r2
 800a53c:	4680      	mov	r8, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	469a      	mov	sl, r3
 800a542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a546:	d807      	bhi.n	800a558 <_printf_i+0x28>
 800a548:	2f62      	cmp	r7, #98	@ 0x62
 800a54a:	d80a      	bhi.n	800a562 <_printf_i+0x32>
 800a54c:	2f00      	cmp	r7, #0
 800a54e:	f000 80d2 	beq.w	800a6f6 <_printf_i+0x1c6>
 800a552:	2f58      	cmp	r7, #88	@ 0x58
 800a554:	f000 80b9 	beq.w	800a6ca <_printf_i+0x19a>
 800a558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a55c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a560:	e03a      	b.n	800a5d8 <_printf_i+0xa8>
 800a562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a566:	2b15      	cmp	r3, #21
 800a568:	d8f6      	bhi.n	800a558 <_printf_i+0x28>
 800a56a:	a101      	add	r1, pc, #4	@ (adr r1, 800a570 <_printf_i+0x40>)
 800a56c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a570:	0800a5c9 	.word	0x0800a5c9
 800a574:	0800a5dd 	.word	0x0800a5dd
 800a578:	0800a559 	.word	0x0800a559
 800a57c:	0800a559 	.word	0x0800a559
 800a580:	0800a559 	.word	0x0800a559
 800a584:	0800a559 	.word	0x0800a559
 800a588:	0800a5dd 	.word	0x0800a5dd
 800a58c:	0800a559 	.word	0x0800a559
 800a590:	0800a559 	.word	0x0800a559
 800a594:	0800a559 	.word	0x0800a559
 800a598:	0800a559 	.word	0x0800a559
 800a59c:	0800a6dd 	.word	0x0800a6dd
 800a5a0:	0800a607 	.word	0x0800a607
 800a5a4:	0800a697 	.word	0x0800a697
 800a5a8:	0800a559 	.word	0x0800a559
 800a5ac:	0800a559 	.word	0x0800a559
 800a5b0:	0800a6ff 	.word	0x0800a6ff
 800a5b4:	0800a559 	.word	0x0800a559
 800a5b8:	0800a607 	.word	0x0800a607
 800a5bc:	0800a559 	.word	0x0800a559
 800a5c0:	0800a559 	.word	0x0800a559
 800a5c4:	0800a69f 	.word	0x0800a69f
 800a5c8:	6833      	ldr	r3, [r6, #0]
 800a5ca:	1d1a      	adds	r2, r3, #4
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6032      	str	r2, [r6, #0]
 800a5d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e09d      	b.n	800a718 <_printf_i+0x1e8>
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1d19      	adds	r1, r3, #4
 800a5e2:	6031      	str	r1, [r6, #0]
 800a5e4:	0606      	lsls	r6, r0, #24
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0xbc>
 800a5e8:	681d      	ldr	r5, [r3, #0]
 800a5ea:	e003      	b.n	800a5f4 <_printf_i+0xc4>
 800a5ec:	0645      	lsls	r5, r0, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0xb8>
 800a5f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	da03      	bge.n	800a600 <_printf_i+0xd0>
 800a5f8:	232d      	movs	r3, #45	@ 0x2d
 800a5fa:	426d      	negs	r5, r5
 800a5fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a600:	4859      	ldr	r0, [pc, #356]	@ (800a768 <_printf_i+0x238>)
 800a602:	230a      	movs	r3, #10
 800a604:	e011      	b.n	800a62a <_printf_i+0xfa>
 800a606:	6821      	ldr	r1, [r4, #0]
 800a608:	6833      	ldr	r3, [r6, #0]
 800a60a:	0608      	lsls	r0, r1, #24
 800a60c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a610:	d402      	bmi.n	800a618 <_printf_i+0xe8>
 800a612:	0649      	lsls	r1, r1, #25
 800a614:	bf48      	it	mi
 800a616:	b2ad      	uxthmi	r5, r5
 800a618:	2f6f      	cmp	r7, #111	@ 0x6f
 800a61a:	4853      	ldr	r0, [pc, #332]	@ (800a768 <_printf_i+0x238>)
 800a61c:	6033      	str	r3, [r6, #0]
 800a61e:	bf14      	ite	ne
 800a620:	230a      	movne	r3, #10
 800a622:	2308      	moveq	r3, #8
 800a624:	2100      	movs	r1, #0
 800a626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a62a:	6866      	ldr	r6, [r4, #4]
 800a62c:	60a6      	str	r6, [r4, #8]
 800a62e:	2e00      	cmp	r6, #0
 800a630:	bfa2      	ittt	ge
 800a632:	6821      	ldrge	r1, [r4, #0]
 800a634:	f021 0104 	bicge.w	r1, r1, #4
 800a638:	6021      	strge	r1, [r4, #0]
 800a63a:	b90d      	cbnz	r5, 800a640 <_printf_i+0x110>
 800a63c:	2e00      	cmp	r6, #0
 800a63e:	d04b      	beq.n	800a6d8 <_printf_i+0x1a8>
 800a640:	4616      	mov	r6, r2
 800a642:	fbb5 f1f3 	udiv	r1, r5, r3
 800a646:	fb03 5711 	mls	r7, r3, r1, r5
 800a64a:	5dc7      	ldrb	r7, [r0, r7]
 800a64c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a650:	462f      	mov	r7, r5
 800a652:	42bb      	cmp	r3, r7
 800a654:	460d      	mov	r5, r1
 800a656:	d9f4      	bls.n	800a642 <_printf_i+0x112>
 800a658:	2b08      	cmp	r3, #8
 800a65a:	d10b      	bne.n	800a674 <_printf_i+0x144>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	07df      	lsls	r7, r3, #31
 800a660:	d508      	bpl.n	800a674 <_printf_i+0x144>
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	6861      	ldr	r1, [r4, #4]
 800a666:	4299      	cmp	r1, r3
 800a668:	bfde      	ittt	le
 800a66a:	2330      	movle	r3, #48	@ 0x30
 800a66c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a670:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a674:	1b92      	subs	r2, r2, r6
 800a676:	6122      	str	r2, [r4, #16]
 800a678:	f8cd a000 	str.w	sl, [sp]
 800a67c:	464b      	mov	r3, r9
 800a67e:	aa03      	add	r2, sp, #12
 800a680:	4621      	mov	r1, r4
 800a682:	4640      	mov	r0, r8
 800a684:	f7ff fee6 	bl	800a454 <_printf_common>
 800a688:	3001      	adds	r0, #1
 800a68a:	d14a      	bne.n	800a722 <_printf_i+0x1f2>
 800a68c:	f04f 30ff 	mov.w	r0, #4294967295
 800a690:	b004      	add	sp, #16
 800a692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	f043 0320 	orr.w	r3, r3, #32
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	4833      	ldr	r0, [pc, #204]	@ (800a76c <_printf_i+0x23c>)
 800a6a0:	2778      	movs	r7, #120	@ 0x78
 800a6a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	6831      	ldr	r1, [r6, #0]
 800a6aa:	061f      	lsls	r7, r3, #24
 800a6ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6b0:	d402      	bmi.n	800a6b8 <_printf_i+0x188>
 800a6b2:	065f      	lsls	r7, r3, #25
 800a6b4:	bf48      	it	mi
 800a6b6:	b2ad      	uxthmi	r5, r5
 800a6b8:	6031      	str	r1, [r6, #0]
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	bf44      	itt	mi
 800a6be:	f043 0320 	orrmi.w	r3, r3, #32
 800a6c2:	6023      	strmi	r3, [r4, #0]
 800a6c4:	b11d      	cbz	r5, 800a6ce <_printf_i+0x19e>
 800a6c6:	2310      	movs	r3, #16
 800a6c8:	e7ac      	b.n	800a624 <_printf_i+0xf4>
 800a6ca:	4827      	ldr	r0, [pc, #156]	@ (800a768 <_printf_i+0x238>)
 800a6cc:	e7e9      	b.n	800a6a2 <_printf_i+0x172>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	f023 0320 	bic.w	r3, r3, #32
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	e7f6      	b.n	800a6c6 <_printf_i+0x196>
 800a6d8:	4616      	mov	r6, r2
 800a6da:	e7bd      	b.n	800a658 <_printf_i+0x128>
 800a6dc:	6833      	ldr	r3, [r6, #0]
 800a6de:	6825      	ldr	r5, [r4, #0]
 800a6e0:	6961      	ldr	r1, [r4, #20]
 800a6e2:	1d18      	adds	r0, r3, #4
 800a6e4:	6030      	str	r0, [r6, #0]
 800a6e6:	062e      	lsls	r6, r5, #24
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	d501      	bpl.n	800a6f0 <_printf_i+0x1c0>
 800a6ec:	6019      	str	r1, [r3, #0]
 800a6ee:	e002      	b.n	800a6f6 <_printf_i+0x1c6>
 800a6f0:	0668      	lsls	r0, r5, #25
 800a6f2:	d5fb      	bpl.n	800a6ec <_printf_i+0x1bc>
 800a6f4:	8019      	strh	r1, [r3, #0]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	4616      	mov	r6, r2
 800a6fc:	e7bc      	b.n	800a678 <_printf_i+0x148>
 800a6fe:	6833      	ldr	r3, [r6, #0]
 800a700:	1d1a      	adds	r2, r3, #4
 800a702:	6032      	str	r2, [r6, #0]
 800a704:	681e      	ldr	r6, [r3, #0]
 800a706:	6862      	ldr	r2, [r4, #4]
 800a708:	2100      	movs	r1, #0
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7f5 fde8 	bl	80002e0 <memchr>
 800a710:	b108      	cbz	r0, 800a716 <_printf_i+0x1e6>
 800a712:	1b80      	subs	r0, r0, r6
 800a714:	6060      	str	r0, [r4, #4]
 800a716:	6863      	ldr	r3, [r4, #4]
 800a718:	6123      	str	r3, [r4, #16]
 800a71a:	2300      	movs	r3, #0
 800a71c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a720:	e7aa      	b.n	800a678 <_printf_i+0x148>
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	4632      	mov	r2, r6
 800a726:	4649      	mov	r1, r9
 800a728:	4640      	mov	r0, r8
 800a72a:	47d0      	blx	sl
 800a72c:	3001      	adds	r0, #1
 800a72e:	d0ad      	beq.n	800a68c <_printf_i+0x15c>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	079b      	lsls	r3, r3, #30
 800a734:	d413      	bmi.n	800a75e <_printf_i+0x22e>
 800a736:	68e0      	ldr	r0, [r4, #12]
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	4298      	cmp	r0, r3
 800a73c:	bfb8      	it	lt
 800a73e:	4618      	movlt	r0, r3
 800a740:	e7a6      	b.n	800a690 <_printf_i+0x160>
 800a742:	2301      	movs	r3, #1
 800a744:	4632      	mov	r2, r6
 800a746:	4649      	mov	r1, r9
 800a748:	4640      	mov	r0, r8
 800a74a:	47d0      	blx	sl
 800a74c:	3001      	adds	r0, #1
 800a74e:	d09d      	beq.n	800a68c <_printf_i+0x15c>
 800a750:	3501      	adds	r5, #1
 800a752:	68e3      	ldr	r3, [r4, #12]
 800a754:	9903      	ldr	r1, [sp, #12]
 800a756:	1a5b      	subs	r3, r3, r1
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dcf2      	bgt.n	800a742 <_printf_i+0x212>
 800a75c:	e7eb      	b.n	800a736 <_printf_i+0x206>
 800a75e:	2500      	movs	r5, #0
 800a760:	f104 0619 	add.w	r6, r4, #25
 800a764:	e7f5      	b.n	800a752 <_printf_i+0x222>
 800a766:	bf00      	nop
 800a768:	0800abf5 	.word	0x0800abf5
 800a76c:	0800ac06 	.word	0x0800ac06

0800a770 <__sflush_r>:
 800a770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a778:	0716      	lsls	r6, r2, #28
 800a77a:	4605      	mov	r5, r0
 800a77c:	460c      	mov	r4, r1
 800a77e:	d454      	bmi.n	800a82a <__sflush_r+0xba>
 800a780:	684b      	ldr	r3, [r1, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	dc02      	bgt.n	800a78c <__sflush_r+0x1c>
 800a786:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dd48      	ble.n	800a81e <__sflush_r+0xae>
 800a78c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a78e:	2e00      	cmp	r6, #0
 800a790:	d045      	beq.n	800a81e <__sflush_r+0xae>
 800a792:	2300      	movs	r3, #0
 800a794:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a798:	682f      	ldr	r7, [r5, #0]
 800a79a:	6a21      	ldr	r1, [r4, #32]
 800a79c:	602b      	str	r3, [r5, #0]
 800a79e:	d030      	beq.n	800a802 <__sflush_r+0x92>
 800a7a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	0759      	lsls	r1, r3, #29
 800a7a6:	d505      	bpl.n	800a7b4 <__sflush_r+0x44>
 800a7a8:	6863      	ldr	r3, [r4, #4]
 800a7aa:	1ad2      	subs	r2, r2, r3
 800a7ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7ae:	b10b      	cbz	r3, 800a7b4 <__sflush_r+0x44>
 800a7b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7b2:	1ad2      	subs	r2, r2, r3
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7b8:	6a21      	ldr	r1, [r4, #32]
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	47b0      	blx	r6
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	d106      	bne.n	800a7d2 <__sflush_r+0x62>
 800a7c4:	6829      	ldr	r1, [r5, #0]
 800a7c6:	291d      	cmp	r1, #29
 800a7c8:	d82b      	bhi.n	800a822 <__sflush_r+0xb2>
 800a7ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a874 <__sflush_r+0x104>)
 800a7cc:	410a      	asrs	r2, r1
 800a7ce:	07d6      	lsls	r6, r2, #31
 800a7d0:	d427      	bmi.n	800a822 <__sflush_r+0xb2>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	6062      	str	r2, [r4, #4]
 800a7d6:	04d9      	lsls	r1, r3, #19
 800a7d8:	6922      	ldr	r2, [r4, #16]
 800a7da:	6022      	str	r2, [r4, #0]
 800a7dc:	d504      	bpl.n	800a7e8 <__sflush_r+0x78>
 800a7de:	1c42      	adds	r2, r0, #1
 800a7e0:	d101      	bne.n	800a7e6 <__sflush_r+0x76>
 800a7e2:	682b      	ldr	r3, [r5, #0]
 800a7e4:	b903      	cbnz	r3, 800a7e8 <__sflush_r+0x78>
 800a7e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7ea:	602f      	str	r7, [r5, #0]
 800a7ec:	b1b9      	cbz	r1, 800a81e <__sflush_r+0xae>
 800a7ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	d002      	beq.n	800a7fc <__sflush_r+0x8c>
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7ff fca0 	bl	800a13c <_free_r>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a800:	e00d      	b.n	800a81e <__sflush_r+0xae>
 800a802:	2301      	movs	r3, #1
 800a804:	4628      	mov	r0, r5
 800a806:	47b0      	blx	r6
 800a808:	4602      	mov	r2, r0
 800a80a:	1c50      	adds	r0, r2, #1
 800a80c:	d1c9      	bne.n	800a7a2 <__sflush_r+0x32>
 800a80e:	682b      	ldr	r3, [r5, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0c6      	beq.n	800a7a2 <__sflush_r+0x32>
 800a814:	2b1d      	cmp	r3, #29
 800a816:	d001      	beq.n	800a81c <__sflush_r+0xac>
 800a818:	2b16      	cmp	r3, #22
 800a81a:	d11e      	bne.n	800a85a <__sflush_r+0xea>
 800a81c:	602f      	str	r7, [r5, #0]
 800a81e:	2000      	movs	r0, #0
 800a820:	e022      	b.n	800a868 <__sflush_r+0xf8>
 800a822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a826:	b21b      	sxth	r3, r3
 800a828:	e01b      	b.n	800a862 <__sflush_r+0xf2>
 800a82a:	690f      	ldr	r7, [r1, #16]
 800a82c:	2f00      	cmp	r7, #0
 800a82e:	d0f6      	beq.n	800a81e <__sflush_r+0xae>
 800a830:	0793      	lsls	r3, r2, #30
 800a832:	680e      	ldr	r6, [r1, #0]
 800a834:	bf08      	it	eq
 800a836:	694b      	ldreq	r3, [r1, #20]
 800a838:	600f      	str	r7, [r1, #0]
 800a83a:	bf18      	it	ne
 800a83c:	2300      	movne	r3, #0
 800a83e:	eba6 0807 	sub.w	r8, r6, r7
 800a842:	608b      	str	r3, [r1, #8]
 800a844:	f1b8 0f00 	cmp.w	r8, #0
 800a848:	dde9      	ble.n	800a81e <__sflush_r+0xae>
 800a84a:	6a21      	ldr	r1, [r4, #32]
 800a84c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a84e:	4643      	mov	r3, r8
 800a850:	463a      	mov	r2, r7
 800a852:	4628      	mov	r0, r5
 800a854:	47b0      	blx	r6
 800a856:	2800      	cmp	r0, #0
 800a858:	dc08      	bgt.n	800a86c <__sflush_r+0xfc>
 800a85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86c:	4407      	add	r7, r0
 800a86e:	eba8 0800 	sub.w	r8, r8, r0
 800a872:	e7e7      	b.n	800a844 <__sflush_r+0xd4>
 800a874:	dfbffffe 	.word	0xdfbffffe

0800a878 <_fflush_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	690b      	ldr	r3, [r1, #16]
 800a87c:	4605      	mov	r5, r0
 800a87e:	460c      	mov	r4, r1
 800a880:	b913      	cbnz	r3, 800a888 <_fflush_r+0x10>
 800a882:	2500      	movs	r5, #0
 800a884:	4628      	mov	r0, r5
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	b118      	cbz	r0, 800a892 <_fflush_r+0x1a>
 800a88a:	6a03      	ldr	r3, [r0, #32]
 800a88c:	b90b      	cbnz	r3, 800a892 <_fflush_r+0x1a>
 800a88e:	f7ff f9e7 	bl	8009c60 <__sinit>
 800a892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0f3      	beq.n	800a882 <_fflush_r+0xa>
 800a89a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a89c:	07d0      	lsls	r0, r2, #31
 800a89e:	d404      	bmi.n	800a8aa <_fflush_r+0x32>
 800a8a0:	0599      	lsls	r1, r3, #22
 800a8a2:	d402      	bmi.n	800a8aa <_fflush_r+0x32>
 800a8a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8a6:	f7ff fc38 	bl	800a11a <__retarget_lock_acquire_recursive>
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	f7ff ff5f 	bl	800a770 <__sflush_r>
 800a8b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8b4:	07da      	lsls	r2, r3, #31
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	d4e4      	bmi.n	800a884 <_fflush_r+0xc>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	059b      	lsls	r3, r3, #22
 800a8be:	d4e1      	bmi.n	800a884 <_fflush_r+0xc>
 800a8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8c2:	f7ff fc2b 	bl	800a11c <__retarget_lock_release_recursive>
 800a8c6:	e7dd      	b.n	800a884 <_fflush_r+0xc>

0800a8c8 <__swhatbuf_r>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	2900      	cmp	r1, #0
 800a8d2:	b096      	sub	sp, #88	@ 0x58
 800a8d4:	4615      	mov	r5, r2
 800a8d6:	461e      	mov	r6, r3
 800a8d8:	da0d      	bge.n	800a8f6 <__swhatbuf_r+0x2e>
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8e0:	f04f 0100 	mov.w	r1, #0
 800a8e4:	bf14      	ite	ne
 800a8e6:	2340      	movne	r3, #64	@ 0x40
 800a8e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	6031      	str	r1, [r6, #0]
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	b016      	add	sp, #88	@ 0x58
 800a8f4:	bd70      	pop	{r4, r5, r6, pc}
 800a8f6:	466a      	mov	r2, sp
 800a8f8:	f000 f848 	bl	800a98c <_fstat_r>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	dbec      	blt.n	800a8da <__swhatbuf_r+0x12>
 800a900:	9901      	ldr	r1, [sp, #4]
 800a902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a90a:	4259      	negs	r1, r3
 800a90c:	4159      	adcs	r1, r3
 800a90e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a912:	e7eb      	b.n	800a8ec <__swhatbuf_r+0x24>

0800a914 <__smakebuf_r>:
 800a914:	898b      	ldrh	r3, [r1, #12]
 800a916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a918:	079d      	lsls	r5, r3, #30
 800a91a:	4606      	mov	r6, r0
 800a91c:	460c      	mov	r4, r1
 800a91e:	d507      	bpl.n	800a930 <__smakebuf_r+0x1c>
 800a920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	6123      	str	r3, [r4, #16]
 800a928:	2301      	movs	r3, #1
 800a92a:	6163      	str	r3, [r4, #20]
 800a92c:	b003      	add	sp, #12
 800a92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a930:	ab01      	add	r3, sp, #4
 800a932:	466a      	mov	r2, sp
 800a934:	f7ff ffc8 	bl	800a8c8 <__swhatbuf_r>
 800a938:	9f00      	ldr	r7, [sp, #0]
 800a93a:	4605      	mov	r5, r0
 800a93c:	4639      	mov	r1, r7
 800a93e:	4630      	mov	r0, r6
 800a940:	f7ff f876 	bl	8009a30 <_malloc_r>
 800a944:	b948      	cbnz	r0, 800a95a <__smakebuf_r+0x46>
 800a946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a94a:	059a      	lsls	r2, r3, #22
 800a94c:	d4ee      	bmi.n	800a92c <__smakebuf_r+0x18>
 800a94e:	f023 0303 	bic.w	r3, r3, #3
 800a952:	f043 0302 	orr.w	r3, r3, #2
 800a956:	81a3      	strh	r3, [r4, #12]
 800a958:	e7e2      	b.n	800a920 <__smakebuf_r+0xc>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	6020      	str	r0, [r4, #0]
 800a95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a96a:	b15b      	cbz	r3, 800a984 <__smakebuf_r+0x70>
 800a96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a970:	4630      	mov	r0, r6
 800a972:	f000 f81d 	bl	800a9b0 <_isatty_r>
 800a976:	b128      	cbz	r0, 800a984 <__smakebuf_r+0x70>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f023 0303 	bic.w	r3, r3, #3
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	431d      	orrs	r5, r3
 800a988:	81a5      	strh	r5, [r4, #12]
 800a98a:	e7cf      	b.n	800a92c <__smakebuf_r+0x18>

0800a98c <_fstat_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4d07      	ldr	r5, [pc, #28]	@ (800a9ac <_fstat_r+0x20>)
 800a990:	2300      	movs	r3, #0
 800a992:	4604      	mov	r4, r0
 800a994:	4608      	mov	r0, r1
 800a996:	4611      	mov	r1, r2
 800a998:	602b      	str	r3, [r5, #0]
 800a99a:	f7f6 fbdc 	bl	8001156 <_fstat>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	d102      	bne.n	800a9a8 <_fstat_r+0x1c>
 800a9a2:	682b      	ldr	r3, [r5, #0]
 800a9a4:	b103      	cbz	r3, 800a9a8 <_fstat_r+0x1c>
 800a9a6:	6023      	str	r3, [r4, #0]
 800a9a8:	bd38      	pop	{r3, r4, r5, pc}
 800a9aa:	bf00      	nop
 800a9ac:	240055c0 	.word	0x240055c0

0800a9b0 <_isatty_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d06      	ldr	r5, [pc, #24]	@ (800a9cc <_isatty_r+0x1c>)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	602b      	str	r3, [r5, #0]
 800a9bc:	f7f6 fbdb 	bl	8001176 <_isatty>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_isatty_r+0x1a>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_isatty_r+0x1a>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	240055c0 	.word	0x240055c0

0800a9d0 <_init>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	bf00      	nop
 800a9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d6:	bc08      	pop	{r3}
 800a9d8:	469e      	mov	lr, r3
 800a9da:	4770      	bx	lr

0800a9dc <_fini>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	bf00      	nop
 800a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e2:	bc08      	pop	{r3}
 800a9e4:	469e      	mov	lr, r3
 800a9e6:	4770      	bx	lr
